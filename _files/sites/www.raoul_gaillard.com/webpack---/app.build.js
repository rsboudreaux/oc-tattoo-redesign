/******/
(function(modules) { // webpackBootstrap
    /******/ // The module cache
    /******/
    var installedModules = {};
    /******/
    /******/ // The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/
        if (installedModules[moduleId]) {
            /******/
            return installedModules[moduleId].exports;
            /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/
            i: moduleId,
            /******/
            l: false,
            /******/
            exports: {}
            /******/
        };
        /******/
        /******/ // Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ // Flag the module as loaded
        /******/
        module.l = true;
        /******/
        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
    }
    /******/
    /******/
    /******/ // expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;
    /******/
    /******/ // expose the module cache
    /******/
    __webpack_require__.c = installedModules;
    /******/
    /******/ // identity function for calling harmony imports with the correct context
    /******/
    __webpack_require__.i = function(value) {
        return value;
    };
    /******/
    /******/ // define getter function for harmony exports
    /******/
    __webpack_require__.d = function(exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
            /******/
            Object.defineProperty(exports, name, {
                /******/
                configurable: false,
                /******/
                enumerable: true,
                /******/
                get: getter
                /******/
            });
            /******/
        }
        /******/
    };
    /******/
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/
    __webpack_require__.n = function(module) {
        /******/
        var getter = module && module.__esModule ?
            /******/
            function getDefault() {
                return module['default'];
            } :
            /******/
            function getModuleExports() {
                return module;
            };
        /******/
        __webpack_require__.d(getter, 'a', getter);
        /******/
        return getter;
        /******/
    };
    /******/
    /******/ // Object.prototype.hasOwnProperty.call
    /******/
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ // __webpack_public_path__
    /******/
    __webpack_require__.p = "/dist/";
    /******/
    /******/ // Load entry module and return exports
    /******/
    return __webpack_require__(__webpack_require__.s = 108);
    /******/
})
/************************************************************************/
/******/
([
    /* 0 */
    /***/
    (function(module, exports) {

        /*
        	MIT License http://www.opensource.org/licenses/mit-license.php
        	Author Tobias Koppers @sokra
        */
        // css base code, injected by the css-loader
        module.exports = function() {
            var list = [];

            // return the list of modules as css string
            list.toString = function toString() {
                var result = [];
                for (var i = 0; i < this.length; i++) {
                    var item = this[i];
                    if (item[2]) {
                        result.push("@media " + item[2] + "{" + item[1] + "}");
                    } else {
                        result.push(item[1]);
                    }
                }
                return result.join("");
            };

            // import a list of modules into the list
            list.i = function(modules, mediaQuery) {
                if (typeof modules === "string")
                    modules = [
                        [null, modules, ""]
                    ];
                var alreadyImportedModules = {};
                for (var i = 0; i < this.length; i++) {
                    var id = this[i][0];
                    if (typeof id === "number")
                        alreadyImportedModules[id] = true;
                }
                for (i = 0; i < modules.length; i++) {
                    var item = modules[i];
                    // skip already imported module
                    // this implementation is not 100% perfect for weird media query combinations
                    //  when a module is imported multiple times with different media queries.
                    //  I hope this will never occur (Hey this way we have smaller bundles)
                    if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
                        if (mediaQuery && !item[2]) {
                            item[2] = mediaQuery;
                        } else if (mediaQuery) {
                            item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
                        }
                        list.push(item);
                    }
                }
            };
            return list;
        };


        /***/
    }),
    /* 1 */
    /***/
    (function(module, exports) {

        module.exports = function normalizeComponent(
            rawScriptExports,
            compiledTemplate,
            scopeId,
            cssModules
        ) {
            var esModule
            var scriptExports = rawScriptExports = rawScriptExports || {}

            // ES6 modules interop
            var type = typeof rawScriptExports.default
            if (type === 'object' || type === 'function') {
                esModule = rawScriptExports
                scriptExports = rawScriptExports.default
            }

            // Vue.extend constructor export interop
            var options = typeof scriptExports === 'function' ?
                scriptExports.options :
                scriptExports

            // render functions
            if (compiledTemplate) {
                options.render = compiledTemplate.render
                options.staticRenderFns = compiledTemplate.staticRenderFns
            }

            // scopedId
            if (scopeId) {
                options._scopeId = scopeId
            }

            // inject cssModules
            if (cssModules) {
                var computed = options.computed || (options.computed = {})
                Object.keys(cssModules).forEach(function(key) {
                    var module = cssModules[key]
                    computed[key] = function() {
                        return module
                    }
                })
            }

            return {
                esModule: esModule,
                exports: scriptExports,
                options: options
            }
        }


        /***/
    }),
    /* 2 */
    /***/
    (function(module, exports, __webpack_require__) {

        /*
          MIT License http://www.opensource.org/licenses/mit-license.php
          Author Tobias Koppers @sokra
          Modified by Evan You @yyx990803
        */

        var hasDocument = typeof document !== 'undefined'

        if (typeof DEBUG !== 'undefined' && DEBUG) {
            if (!hasDocument) {
                throw new Error(
                    'vue-style-loader cannot be used in a non-browser environment. ' +
                    "Use { target: 'node' } in your Webpack config to indicate a server-rendering environment."
                )
            }
        }

        var listToStyles = __webpack_require__(309)

        /*
        type StyleObject = {
          id: number;
          parts: Array<StyleObjectPart>
        }

        type StyleObjectPart = {
          css: string;
          media: string;
          sourceMap: ?string
        }
        */

        var stylesInDom = {
            /*
              [id: number]: {
                id: number,
                refs: number,
                parts: Array<(obj?: StyleObjectPart) => void>
              }
            */
        }

        var head = hasDocument && (document.head || document.getElementsByTagName('head')[0])
        var singletonElement = null
        var singletonCounter = 0
        var isProduction = false
        var noop = function() {}

        // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
        // tags it will allow on a page
        var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase())

        module.exports = function(parentId, list, _isProduction) {
            isProduction = _isProduction

            var styles = listToStyles(parentId, list)
            addStylesToDom(styles)

            return function update(newList) {
                var mayRemove = []
                for (var i = 0; i < styles.length; i++) {
                    var item = styles[i]
                    var domStyle = stylesInDom[item.id]
                    domStyle.refs--
                        mayRemove.push(domStyle)
                }
                if (newList) {
                    styles = listToStyles(parentId, newList)
                    addStylesToDom(styles)
                } else {
                    styles = []
                }
                for (var i = 0; i < mayRemove.length; i++) {
                    var domStyle = mayRemove[i]
                    if (domStyle.refs === 0) {
                        for (var j = 0; j < domStyle.parts.length; j++) {
                            domStyle.parts[j]()
                        }
                        delete stylesInDom[domStyle.id]
                    }
                }
            }
        }

        function addStylesToDom(styles /* Array<StyleObject> */ ) {
            for (var i = 0; i < styles.length; i++) {
                var item = styles[i]
                var domStyle = stylesInDom[item.id]
                if (domStyle) {
                    domStyle.refs++
                        for (var j = 0; j < domStyle.parts.length; j++) {
                            domStyle.parts[j](item.parts[j])
                        }
                    for (; j < item.parts.length; j++) {
                        domStyle.parts.push(addStyle(item.parts[j]))
                    }
                    if (domStyle.parts.length > item.parts.length) {
                        domStyle.parts.length = item.parts.length
                    }
                } else {
                    var parts = []
                    for (var j = 0; j < item.parts.length; j++) {
                        parts.push(addStyle(item.parts[j]))
                    }
                    stylesInDom[item.id] = {
                        id: item.id,
                        refs: 1,
                        parts: parts
                    }
                }
            }
        }

        function createStyleElement() {
            var styleElement = document.createElement('style')
            styleElement.type = 'text/css'
            head.appendChild(styleElement)
            return styleElement
        }

        function addStyle(obj /* StyleObjectPart */ ) {
            var update, remove
            var styleElement = document.querySelector('style[data-vue-ssr-id~="' + obj.id + '"]')

            if (styleElement) {
                if (isProduction) {
                    // has SSR styles and in production mode.
                    // simply do nothing.
                    return noop
                } else {
                    // has SSR styles but in dev mode.
                    // for some reason Chrome can't handle source map in server-rendered
                    // style tags - source maps in <style> only works if the style tag is
                    // created and inserted dynamically. So we remove the server rendered
                    // styles and inject new ones.
                    styleElement.parentNode.removeChild(styleElement)
                }
            }

            if (isOldIE) {
                // use singleton mode for IE9.
                var styleIndex = singletonCounter++
                    styleElement = singletonElement || (singletonElement = createStyleElement())
                update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)
                remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)
            } else {
                // use multi-style-tag mode in all other cases
                styleElement = createStyleElement()
                update = applyToTag.bind(null, styleElement)
                remove = function() {
                    styleElement.parentNode.removeChild(styleElement)
                }
            }

            update(obj)

            return function updateStyle(newObj /* StyleObjectPart */ ) {
                if (newObj) {
                    if (newObj.css === obj.css &&
                        newObj.media === obj.media &&
                        newObj.sourceMap === obj.sourceMap) {
                        return
                    }
                    update(obj = newObj)
                } else {
                    remove()
                }
            }
        }

        var replaceText = (function() {
            var textStore = []

            return function(index, replacement) {
                textStore[index] = replacement
                return textStore.filter(Boolean).join('\n')
            }
        })()

        function applyToSingletonTag(styleElement, index, remove, obj) {
            var css = remove ? '' : obj.css

            if (styleElement.styleSheet) {
                styleElement.styleSheet.cssText = replaceText(index, css)
            } else {
                var cssNode = document.createTextNode(css)
                var childNodes = styleElement.childNodes
                if (childNodes[index]) styleElement.removeChild(childNodes[index])
                if (childNodes.length) {
                    styleElement.insertBefore(cssNode, childNodes[index])
                } else {
                    styleElement.appendChild(cssNode)
                }
            }
        }

        function applyToTag(styleElement, obj) {
            var css = obj.css
            var media = obj.media
            var sourceMap = obj.sourceMap

            if (media) {
                styleElement.setAttribute('media', media)
            }

            if (sourceMap) {
                // https://developer.chrome.com/devtools/docs/javascript-debugging
                // this makes source maps inside style tags work properly in Chrome
                css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */'
                // http://stackoverflow.com/a/26603875
                css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'
            }

            if (styleElement.styleSheet) {
                styleElement.styleSheet.cssText = css
            } else {
                while (styleElement.firstChild) {
                    styleElement.removeChild(styleElement.firstChild)
                }
                styleElement.appendChild(document.createTextNode(css))
            }
        }


        /***/
    }),
    /* 3 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return EventBus;
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(36);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);

        var EventBus = new __WEBPACK_IMPORTED_MODULE_0_vue___default.a();

        /***/
    }),
    /* 4 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__ = __webpack_require__(6);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__TimelineLite_js__ = __webpack_require__(27);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__TimelineMax_js__ = __webpack_require__(48);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__TweenMax_js__ = __webpack_require__(135);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__CSSPlugin_js__ = __webpack_require__(44);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__AttrPlugin_js__ = __webpack_require__(42);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_6__RoundPropsPlugin_js__ = __webpack_require__(47);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_7__DirectionalRotationPlugin_js__ = __webpack_require__(45);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_8__BezierPlugin_js__ = __webpack_require__(43);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_9__EasePack_js__ = __webpack_require__(46);
        /* unused harmony reexport default */
        /* harmony reexport (binding) */
        __webpack_require__.d(__webpack_exports__, "d", function() {
            return __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d"];
        });
        /* unused harmony reexport TweenMax */
        /* harmony reexport (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return __WEBPACK_IMPORTED_MODULE_1__TimelineLite_js__["a"];
        });
        /* unused harmony reexport TimelineMax */
        /* unused harmony reexport CSSPlugin */
        /* unused harmony reexport AttrPlugin */
        /* unused harmony reexport BezierPlugin */
        /* unused harmony reexport RoundPropsPlugin */
        /* unused harmony reexport DirectionalRotationPlugin */
        /* unused harmony reexport TweenPlugin */
        /* unused harmony reexport Ease */
        /* harmony reexport (binding) */
        __webpack_require__.d(__webpack_exports__, "f", function() {
            return __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["h"];
        });
        /* harmony reexport (binding) */
        __webpack_require__.d(__webpack_exports__, "c", function() {
            return __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["g"];
        });
        /* unused harmony reexport Power2 */
        /* unused harmony reexport Power3 */
        /* harmony reexport (binding) */
        __webpack_require__.d(__webpack_exports__, "e", function() {
            return __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["i"];
        });
        /* unused harmony reexport Linear */
        /* unused harmony reexport Back */
        /* unused harmony reexport Elastic */
        /* unused harmony reexport Bounce */
        /* unused harmony reexport RoughEase */
        /* unused harmony reexport SlowMo */
        /* unused harmony reexport SteppedEase */
        /* unused harmony reexport Circ */
        /* harmony reexport (binding) */
        __webpack_require__.d(__webpack_exports__, "b", function() {
            return __WEBPACK_IMPORTED_MODULE_9__EasePack_js__["a"];
        });
        /* unused harmony reexport Sine */
        /* unused harmony reexport ExpoScaleEase */
        /* unused harmony reexport _gsScope */
        /*!
         * VERSION: 2.0.1
         * DATE: 2018-05-30
         * UPDATES AND DOCS AT: http://greensock.com
         *
         * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
         * This work is subject to the terms at http://greensock.com/standard-license or for
         * Club GreenSock members, the software agreement that was issued with your membership.
         *
         * @author: Jack Doyle, jack@greensock.com
         **/
















        /***/
    }),
    /* 5 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var MenuStore = function() {
            function MenuStore() {
                _classCallCheck(this, MenuStore);

                this.state = {
                    isClosed: true,
                    isAnimated: false,
                    isBlocked: false
                };
            }

            _createClass(MenuStore, [{
                key: "openMenu",
                value: function openMenu() {
                    this.state.isClosed = false;
                }
            }, {
                key: "closeMenu",
                value: function closeMenu() {
                    this.state.isClosed = true;
                }
            }, {
                key: "toggleMenu",
                value: function toggleMenu() {
                    this.state.isClosed === true ? this.state.isClosed = false : this.state.isClosed = true;
                }
            }, {
                key: "menuIsAnimated",
                value: function menuIsAnimated() {
                    this.state.isAnimated = true;
                }
            }, {
                key: "menuIsNotAnimated",
                value: function menuIsNotAnimated() {
                    this.state.isAnimated = false;
                }
            }, {
                key: "blockMenu",
                value: function blockMenu() {
                    this.state.isBlocked = true;
                }
            }, {
                key: "unblockMenu",
                value: function unblockMenu() {
                    this.state.isBlocked = false;
                }
            }]);

            return MenuStore;
        }();

        /* harmony default export */
        __webpack_exports__["a"] = (new MenuStore());

        /***/
    }),
    /* 6 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */
        (function(module, global) { /* harmony export (binding) */
            __webpack_require__.d(__webpack_exports__, "d", function() {
                return TweenLite;
            });
            /*!
             * VERSION: 2.0.1
             * DATE: 2018-05-30
             * UPDATES AND DOCS AT: http://greensock.com
             *
             * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
             * This work is subject to the terms at http://greensock.com/standard-license or for
             * Club GreenSock members, the software agreement that was issued with your membership.
             *
             * @author: Jack Doyle, jack@greensock.com
             */

            /* ES6 changes:
            	- declare and export _gsScope at top.
            	- set const TweenLite = the result of the main function
            	- export default TweenLite at the bottom
            	- return TweenLite at the bottom of the main function
            	- pass in _gsScope as the first parameter of the main function (which is actually at the bottom)
            	- remove the "export to multiple environments" in Definition().
             */
            const _gsScope = (typeof(window) !== "undefined") ? window : (typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || {};
            /* harmony export (immutable) */
            __webpack_exports__["a"] = _gsScope;


            const TweenLite = (function(window, moduleName) {

                "use strict";
                var _exports = {},
                    _doc = window.document,
                    _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
                if (_globals.TweenLite) {
                    return _globals.TweenLite; //in case the core set of classes is already loaded, don't instantiate twice.
                }
                var _namespace = function(ns) {
                        var a = ns.split("."),
                            p = _globals,
                            i;
                        for (i = 0; i < a.length; i++) {
                            p[a[i]] = p = p[a[i]] || {};
                        }
                        return p;
                    },
                    gs = _namespace("com.greensock"),
                    _tinyNum = 0.0000000001,
                    _slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                        var b = [],
                            l = a.length,
                            i;
                        for (i = 0; i !== l; b.push(a[i++])) {}
                        return b;
                    },
                    _emptyFunc = function() {},
                    _isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, "(obj instanceof Array)" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)
                        var toString = Object.prototype.toString,
                            array = toString.call([]);
                        return function(obj) {
                            return obj != null && (obj instanceof Array || (typeof(obj) === "object" && !!obj.push && toString.call(obj) === array));
                        };
                    }()),
                    a, i, p, _ticker, _tickerActive,
                    _defLookup = {},

                    /**
                     * @constructor
                     * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.
                     * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is
                     * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin
                     * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.
                     *
                     * Every definition will be added to a "com.greensock" global object (typically window, but if a window.GreenSockGlobals object is found,
                     * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,
                     * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so
                     * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything
                     * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock
                     * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could
                     * sandbox the banner one like:
                     *
                     * <script>
                     *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a "gs" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, "gs" or "banner" or whatever.
                     * </script>
                     * <script src="js/greensock/v1.7/TweenMax.js"></script>
                     * <script>
                     *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)
                     * </script>
                     * <script src="js/greensock/v1.6/TweenMax.js"></script>
                     * <script>
                     *     gs.TweenLite.to(...); //would use v1.7
                     *     TweenLite.to(...); //would use v1.6
                     * </script>
                     *
                     * @param {!string} ns The namespace of the class definition, leaving off "com.greensock." as that's assumed. For example, "TweenLite" or "plugins.CSSPlugin" or "easing.Back".
                     * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus "com.greensock." prefix). For example ["TweenLite","plugins.TweenPlugin","core.Animation"]
                     * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.
                     * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)
                     */
                    Definition = function(ns, dependencies, func, global) {
                        this.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses
                        _defLookup[ns] = this;
                        this.gsClass = null;
                        this.func = func;
                        var _classes = [];
                        this.check = function(init) {
                            var i = dependencies.length,
                                missing = i,
                                cur, a, n, cl;
                            while (--i > -1) {
                                if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
                                    _classes[i] = cur.gsClass;
                                    missing--;
                                } else if (init) {
                                    cur.sc.push(this);
                                }
                            }
                            if (missing === 0 && func) {
                                a = ("com.greensock." + ns).split(".");
                                n = a.pop();
                                cl = _namespace(a.join("."))[n] = this.gsClass = func.apply(func, _classes);

                                //exports to multiple environments
                                if (global) {
                                    _globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)
                                    /*
                                    if (typeof(module) !== "undefined" && module.exports) { //node
                                    	if (ns === moduleName) {
                                    		module.exports = _exports[moduleName] = cl;
                                    		for (i in _exports) {
                                    			cl[i] = _exports[i];
                                    		}
                                    	} else if (_exports[moduleName]) {
                                    		_exports[moduleName][n] = cl;
                                    	}
                                    } else if (typeof(define) === "function" && define.amd){ //AMD
                                    	define((window.GreenSockAMDPath ? window.GreenSockAMDPath + "/" : "") + ns.split(".").pop(), [], function() { return cl; });
                                    }
                                    */
                                }
                                for (i = 0; i < this.sc.length; i++) {
                                    this.sc[i].check();
                                }
                            }
                        };
                        this.check(true);
                    },

                    //used to create Definition instances (which basically registers a class that has dependencies).
                    _gsDefine = window._gsDefine = function(ns, dependencies, func, global) {
                        return new Definition(ns, dependencies, func, global);
                    },

                    //a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).
                    _class = gs._class = function(ns, func, global) {
                        func = func || function() {};
                        _gsDefine(ns, [], function() {
                            return func;
                        }, global);
                        return func;
                    };

                _gsDefine.globals = _globals;



                /*
                 * ----------------------------------------------------------------
                 * Ease
                 * ----------------------------------------------------------------
                 */
                var _baseParams = [0, 0, 1, 1],
                    Ease = _class("easing.Ease", function(func, extraParams, type, power) {
                        this._func = func;
                        this._type = type || 0;
                        this._power = power || 0;
                        this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
                    }, true),
                    _easeMap = Ease.map = {},
                    _easeReg = Ease.register = function(ease, names, types, create) {
                        var na = names.split(","),
                            i = na.length,
                            ta = (types || "easeIn,easeOut,easeInOut").split(","),
                            e, name, j, type;
                        while (--i > -1) {
                            name = na[i];
                            e = create ? _class("easing." + name, null, true) : gs.easing[name] || {};
                            j = ta.length;
                            while (--j > -1) {
                                type = ta[j];
                                _easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();
                            }
                        }
                    };

                p = Ease.prototype;
                p._calcEnd = false;
                p.getRatio = function(p) {
                    if (this._func) {
                        this._params[0] = p;
                        return this._func.apply(null, this._params);
                    }
                    var t = this._type,
                        pw = this._power,
                        r = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;
                    if (pw === 1) {
                        r *= r;
                    } else if (pw === 2) {
                        r *= r * r;
                    } else if (pw === 3) {
                        r *= r * r * r;
                    } else if (pw === 4) {
                        r *= r * r * r * r;
                    }
                    return (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);
                };

                //create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)
                a = ["Linear", "Quad", "Cubic", "Quart", "Quint,Strong"];
                i = a.length;
                while (--i > -1) {
                    p = a[i] + ",Power" + i;
                    _easeReg(new Ease(null, null, 1, i), p, "easeOut", true);
                    _easeReg(new Ease(null, null, 2, i), p, "easeIn" + ((i === 0) ? ",easeNone" : ""));
                    _easeReg(new Ease(null, null, 3, i), p, "easeInOut");
                }
                _easeMap.linear = gs.easing.Linear.easeIn;
                _easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks


                /*
                 * ----------------------------------------------------------------
                 * EventDispatcher
                 * ----------------------------------------------------------------
                 */
                var EventDispatcher = _class("events.EventDispatcher", function(target) {
                    this._listeners = {};
                    this._eventTarget = target || this;
                });
                p = EventDispatcher.prototype;

                p.addEventListener = function(type, callback, scope, useParam, priority) {
                    priority = priority || 0;
                    var list = this._listeners[type],
                        index = 0,
                        listener, i;
                    if (this === _ticker && !_tickerActive) {
                        _ticker.wake();
                    }
                    if (list == null) {
                        this._listeners[type] = list = [];
                    }
                    i = list.length;
                    while (--i > -1) {
                        listener = list[i];
                        if (listener.c === callback && listener.s === scope) {
                            list.splice(i, 1);
                        } else if (index === 0 && listener.pr < priority) {
                            index = i + 1;
                        }
                    }
                    list.splice(index, 0, {
                        c: callback,
                        s: scope,
                        up: useParam,
                        pr: priority
                    });
                };

                p.removeEventListener = function(type, callback) {
                    var list = this._listeners[type],
                        i;
                    if (list) {
                        i = list.length;
                        while (--i > -1) {
                            if (list[i].c === callback) {
                                list.splice(i, 1);
                                return;
                            }
                        }
                    }
                };

                p.dispatchEvent = function(type) {
                    var list = this._listeners[type],
                        i, t, listener;
                    if (list) {
                        i = list.length;
                        if (i > 1) {
                            list = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)
                        }
                        t = this._eventTarget;
                        while (--i > -1) {
                            listener = list[i];
                            if (listener) {
                                if (listener.up) {
                                    listener.c.call(listener.s || t, {
                                        type: type,
                                        target: t
                                    });
                                } else {
                                    listener.c.call(listener.s || t);
                                }
                            }
                        }
                    }
                };


                /*
                 * ----------------------------------------------------------------
                 * Ticker
                 * ----------------------------------------------------------------
                 */
                var _reqAnimFrame = window.requestAnimationFrame,
                    _cancelAnimFrame = window.cancelAnimationFrame,
                    _getTime = Date.now || function() {
                        return new Date().getTime();
                    },
                    _lastUpdate = _getTime();

                //now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.
                a = ["ms", "moz", "webkit", "o"];
                i = a.length;
                while (--i > -1 && !_reqAnimFrame) {
                    _reqAnimFrame = window[a[i] + "RequestAnimationFrame"];
                    _cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
                }

                _class("Ticker", function(fps, useRAF) {
                    var _self = this,
                        _startTime = _getTime(),
                        _useRAF = (useRAF !== false && _reqAnimFrame) ? "auto" : false,
                        _lagThreshold = 500,
                        _adjustedLag = 33,
                        _tickWord = "tick", //helps reduce gc burden
                        _fps, _req, _id, _gap, _nextTime,
                        _tick = function(manual) {
                            var elapsed = _getTime() - _lastUpdate,
                                overlap, dispatch;
                            if (elapsed > _lagThreshold) {
                                _startTime += elapsed - _adjustedLag;
                            }
                            _lastUpdate += elapsed;
                            _self.time = (_lastUpdate - _startTime) / 1000;
                            overlap = _self.time - _nextTime;
                            if (!_fps || overlap > 0 || manual === true) {
                                _self.frame++;
                                _nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);
                                dispatch = true;
                            }
                            if (manual !== true) { //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
                                _id = _req(_tick);
                            }
                            if (dispatch) {
                                _self.dispatchEvent(_tickWord);
                            }
                        };

                    EventDispatcher.call(_self);
                    _self.time = _self.frame = 0;
                    _self.tick = function() {
                        _tick(true);
                    };

                    _self.lagSmoothing = function(threshold, adjustedLag) {
                        if (!arguments.length) { //if lagSmoothing() is called with no arguments, treat it like a getter that returns a boolean indicating if it's enabled or not. This is purposely undocumented and is for internal use.
                            return (_lagThreshold < 1 / _tinyNum);
                        }
                        _lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited
                        _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
                    };

                    _self.sleep = function() {
                        if (_id == null) {
                            return;
                        }
                        if (!_useRAF || !_cancelAnimFrame) {
                            clearTimeout(_id);
                        } else {
                            _cancelAnimFrame(_id);
                        }
                        _req = _emptyFunc;
                        _id = null;
                        if (_self === _ticker) {
                            _tickerActive = false;
                        }
                    };

                    _self.wake = function(seamless) {
                        if (_id !== null) {
                            _self.sleep();
                        } else if (seamless) {
                            _startTime += -_lastUpdate + (_lastUpdate = _getTime());
                        } else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().
                            _lastUpdate = _getTime() - _lagThreshold + 5;
                        }
                        _req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) {
                            return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0);
                        } : _reqAnimFrame;
                        if (_self === _ticker) {
                            _tickerActive = true;
                        }
                        _tick(2);
                    };

                    _self.fps = function(value) {
                        if (!arguments.length) {
                            return _fps;
                        }
                        _fps = value;
                        _gap = 1 / (_fps || 60);
                        _nextTime = this.time + _gap;
                        _self.wake();
                    };

                    _self.useRAF = function(value) {
                        if (!arguments.length) {
                            return _useRAF;
                        }
                        _self.sleep();
                        _useRAF = value;
                        _self.fps(_fps);
                    };
                    _self.fps(fps);

                    //a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.
                    setTimeout(function() {
                        if (_useRAF === "auto" && _self.frame < 5 && (_doc || {}).visibilityState !== "hidden") {
                            _self.useRAF(false);
                        }
                    }, 1500);
                });

                p = gs.Ticker.prototype = new gs.events.EventDispatcher();
                p.constructor = gs.Ticker;


                /*
                 * ----------------------------------------------------------------
                 * Animation
                 * ----------------------------------------------------------------
                 */
                var Animation = _class("core.Animation", function(duration, vars) {
                    this.vars = vars = vars || {};
                    this._duration = this._totalDuration = duration || 0;
                    this._delay = Number(vars.delay) || 0;
                    this._timeScale = 1;
                    this._active = (vars.immediateRender === true);
                    this.data = vars.data;
                    this._reversed = (vars.reversed === true);

                    if (!_rootTimeline) {
                        return;
                    }
                    if (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.
                        _ticker.wake();
                    }

                    var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
                    tl.add(this, tl._time);

                    if (this.vars.paused) {
                        this.paused(true);
                    }
                });

                _ticker = Animation.ticker = new gs.Ticker();
                p = Animation.prototype;
                p._dirty = p._gc = p._initted = p._paused = false;
                p._totalTime = p._time = 0;
                p._rawPrevTime = -1;
                p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
                p._paused = false;


                //some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.
                var _checkTimeout = function() {
                    if (_tickerActive && _getTime() - _lastUpdate > 2000 && ((_doc || {}).visibilityState !== "hidden" || !_ticker.lagSmoothing())) { //note: if the tab is hidden, we should still wake if lagSmoothing has been disabled.
                        _ticker.wake();
                    }
                    var t = setTimeout(_checkTimeout, 2000);
                    if (t.unref) {
                        // allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.
                        t.unref();
                    }
                };
                _checkTimeout();


                p.play = function(from, suppressEvents) {
                    if (from != null) {
                        this.seek(from, suppressEvents);
                    }
                    return this.reversed(false).paused(false);
                };

                p.pause = function(atTime, suppressEvents) {
                    if (atTime != null) {
                        this.seek(atTime, suppressEvents);
                    }
                    return this.paused(true);
                };

                p.resume = function(from, suppressEvents) {
                    if (from != null) {
                        this.seek(from, suppressEvents);
                    }
                    return this.paused(false);
                };

                p.seek = function(time, suppressEvents) {
                    return this.totalTime(Number(time), suppressEvents !== false);
                };

                p.restart = function(includeDelay, suppressEvents) {
                    return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);
                };

                p.reverse = function(from, suppressEvents) {
                    if (from != null) {
                        this.seek((from || this.totalDuration()), suppressEvents);
                    }
                    return this.reversed(true).paused(false);
                };

                p.render = function(time, suppressEvents, force) {
                    //stub - we override this method in subclasses.
                };

                p.invalidate = function() {
                    this._time = this._totalTime = 0;
                    this._initted = this._gc = false;
                    this._rawPrevTime = -1;
                    if (this._gc || !this.timeline) {
                        this._enabled(true);
                    }
                    return this;
                };

                p.isActive = function() {
                    var tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.
                        startTime = this._startTime,
                        rawTime;
                    return (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 0.0000001));
                };

                p._enabled = function(enabled, ignoreTimeline) {
                    if (!_tickerActive) {
                        _ticker.wake();
                    }
                    this._gc = !enabled;
                    this._active = this.isActive();
                    if (ignoreTimeline !== true) {
                        if (enabled && !this.timeline) {
                            this._timeline.add(this, this._startTime - this._delay);
                        } else if (!enabled && this.timeline) {
                            this._timeline._remove(this, true);
                        }
                    }
                    return false;
                };


                p._kill = function(vars, target) {
                    return this._enabled(false, false);
                };

                p.kill = function(vars, target) {
                    this._kill(vars, target);
                    return this;
                };

                p._uncache = function(includeSelf) {
                    var tween = includeSelf ? this : this.timeline;
                    while (tween) {
                        tween._dirty = true;
                        tween = tween.timeline;
                    }
                    return this;
                };

                p._swapSelfInParams = function(params) {
                    var i = params.length,
                        copy = params.concat();
                    while (--i > -1) {
                        if (params[i] === "{self}") {
                            copy[i] = this;
                        }
                    }
                    return copy;
                };

                p._callback = function(type) {
                    var v = this.vars,
                        callback = v[type],
                        params = v[type + "Params"],
                        scope = v[type + "Scope"] || v.callbackScope || this,
                        l = params ? params.length : 0;
                    switch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + "Scope"] || v.callbackScope || this, v[type + "Params"] || _blankArray);
                        case 0:
                            callback.call(scope);
                            break;
                        case 1:
                            callback.call(scope, params[0]);
                            break;
                        case 2:
                            callback.call(scope, params[0], params[1]);
                            break;
                        default:
                            callback.apply(scope, params);
                    }
                };

                //----Animation getters/setters --------------------------------------------------------

                p.eventCallback = function(type, callback, params, scope) {
                    if ((type || "").substr(0, 2) === "on") {
                        var v = this.vars;
                        if (arguments.length === 1) {
                            return v[type];
                        }
                        if (callback == null) {
                            delete v[type];
                        } else {
                            v[type] = callback;
                            v[type + "Params"] = (_isArray(params) && params.join("").indexOf("{self}") !== -1) ? this._swapSelfInParams(params) : params;
                            v[type + "Scope"] = scope;
                        }
                        if (type === "onUpdate") {
                            this._onUpdate = callback;
                        }
                    }
                    return this;
                };

                p.delay = function(value) {
                    if (!arguments.length) {
                        return this._delay;
                    }
                    if (this._timeline.smoothChildTiming) {
                        this.startTime(this._startTime + value - this._delay);
                    }
                    this._delay = value;
                    return this;
                };

                p.duration = function(value) {
                    if (!arguments.length) {
                        this._dirty = false;
                        return this._duration;
                    }
                    this._duration = this._totalDuration = value;
                    this._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.
                    if (this._timeline.smoothChildTiming)
                        if (this._time > 0)
                            if (this._time < this._duration)
                                if (value !== 0) {
                                    this.totalTime(this._totalTime * (value / this._duration), true);
                                }
                    return this;
                };

                p.totalDuration = function(value) {
                    this._dirty = false;
                    return (!arguments.length) ? this._totalDuration : this.duration(value);
                };

                p.time = function(value, suppressEvents) {
                    if (!arguments.length) {
                        return this._time;
                    }
                    if (this._dirty) {
                        this.totalDuration();
                    }
                    return this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);
                };

                p.totalTime = function(time, suppressEvents, uncapped) {
                    if (!_tickerActive) {
                        _ticker.wake();
                    }
                    if (!arguments.length) {
                        return this._totalTime;
                    }
                    if (this._timeline) {
                        if (time < 0 && !uncapped) {
                            time += this.totalDuration();
                        }
                        if (this._timeline.smoothChildTiming) {
                            if (this._dirty) {
                                this.totalDuration();
                            }
                            var totalDuration = this._totalDuration,
                                tl = this._timeline;
                            if (time > totalDuration && !uncapped) {
                                time = totalDuration;
                            }
                            this._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);
                            if (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
                                this._uncache(false);
                            }
                            //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.
                            if (tl._timeline) {
                                while (tl._timeline) {
                                    if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
                                        tl.totalTime(tl._totalTime, true);
                                    }
                                    tl = tl._timeline;
                                }
                            }
                        }
                        if (this._gc) {
                            this._enabled(true, false);
                        }
                        if (this._totalTime !== time || this._duration === 0) {
                            if (_lazyTweens.length) {
                                _lazyRender();
                            }
                            this.render(time, suppressEvents, false);
                            if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
                                _lazyRender();
                            }
                        }
                    }
                    return this;
                };

                p.progress = p.totalProgress = function(value, suppressEvents) {
                    var duration = this.duration();
                    return (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);
                };

                p.startTime = function(value) {
                    if (!arguments.length) {
                        return this._startTime;
                    }
                    if (value !== this._startTime) {
                        this._startTime = value;
                        if (this.timeline)
                            if (this.timeline._sortChildren) {
                                this.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
                            }
                    }
                    return this;
                };

                p.endTime = function(includeRepeats) {
                    return this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;
                };

                p.timeScale = function(value) {
                    if (!arguments.length) {
                        return this._timeScale;
                    }
                    var pauseTime, t;
                    value = value || _tinyNum; //can't allow zero because it'll throw the math off
                    if (this._timeline && this._timeline.smoothChildTiming) {
                        pauseTime = this._pauseTime;
                        t = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();
                        this._startTime = t - ((t - this._startTime) * this._timeScale / value);
                    }
                    this._timeScale = value;
                    t = this.timeline;
                    while (t && t.timeline) { //must update the duration/totalDuration of all ancestor timelines immediately in case in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
                        t._dirty = true;
                        t.totalDuration();
                        t = t.timeline;
                    }
                    return this;
                };

                p.reversed = function(value) {
                    if (!arguments.length) {
                        return this._reversed;
                    }
                    if (value != this._reversed) {
                        this._reversed = value;
                        this.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);
                    }
                    return this;
                };

                p.paused = function(value) {
                    if (!arguments.length) {
                        return this._paused;
                    }
                    var tl = this._timeline,
                        raw, elapsed;
                    if (value != this._paused)
                        if (tl) {
                            if (!_tickerActive && !value) {
                                _ticker.wake();
                            }
                            raw = tl.rawTime();
                            elapsed = raw - this._pauseTime;
                            if (!value && tl.smoothChildTiming) {
                                this._startTime += elapsed;
                                this._uncache(false);
                            }
                            this._pauseTime = value ? raw : null;
                            this._paused = value;
                            this._active = this.isActive();
                            if (!value && elapsed !== 0 && this._initted && this.duration()) {
                                raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;
                                this.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.
                            }
                        }
                    if (this._gc && !value) {
                        this._enabled(true, false);
                    }
                    return this;
                };


                /*
                 * ----------------------------------------------------------------
                 * SimpleTimeline
                 * ----------------------------------------------------------------
                 */
                var SimpleTimeline = _class("core.SimpleTimeline", function(vars) {
                    Animation.call(this, 0, vars);
                    this.autoRemoveChildren = this.smoothChildTiming = true;
                });

                p = SimpleTimeline.prototype = new Animation();
                p.constructor = SimpleTimeline;
                p.kill()._gc = false;
                p._first = p._last = p._recent = null;
                p._sortChildren = false;

                p.add = p.insert = function(child, position, align, stagger) {
                    var prevTween, st;
                    child._startTime = Number(position || 0) + child._delay;
                    if (child._paused)
                        if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).
                            child._pauseTime = this.rawTime() - (child._timeline.rawTime() - child._pauseTime);
                        }
                    if (child.timeline) {
                        child.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.
                    }
                    child.timeline = child._timeline = this;
                    if (child._gc) {
                        child._enabled(true, true);
                    }
                    prevTween = this._last;
                    if (this._sortChildren) {
                        st = child._startTime;
                        while (prevTween && prevTween._startTime > st) {
                            prevTween = prevTween._prev;
                        }
                    }
                    if (prevTween) {
                        child._next = prevTween._next;
                        prevTween._next = child;
                    } else {
                        child._next = this._first;
                        this._first = child;
                    }
                    if (child._next) {
                        child._next._prev = child;
                    } else {
                        this._last = child;
                    }
                    child._prev = prevTween;
                    this._recent = child;
                    if (this._timeline) {
                        this._uncache(true);
                    }
                    return this;
                };

                p._remove = function(tween, skipDisable) {
                    if (tween.timeline === this) {
                        if (!skipDisable) {
                            tween._enabled(false, true);
                        }

                        if (tween._prev) {
                            tween._prev._next = tween._next;
                        } else if (this._first === tween) {
                            this._first = tween._next;
                        }
                        if (tween._next) {
                            tween._next._prev = tween._prev;
                        } else if (this._last === tween) {
                            this._last = tween._prev;
                        }
                        tween._next = tween._prev = tween.timeline = null;
                        if (tween === this._recent) {
                            this._recent = this._last;
                        }

                        if (this._timeline) {
                            this._uncache(true);
                        }
                    }
                    return this;
                };

                p.render = function(time, suppressEvents, force) {
                    var tween = this._first,
                        next;
                    this._totalTime = this._time = this._rawPrevTime = time;
                    while (tween) {
                        next = tween._next; //record it here because the value could change after rendering...
                        if (tween._active || (time >= tween._startTime && !tween._paused && !tween._gc)) {
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                };

                p.rawTime = function() {
                    if (!_tickerActive) {
                        _ticker.wake();
                    }
                    return this._totalTime;
                };

                /*
                 * ----------------------------------------------------------------
                 * TweenLite
                 * ----------------------------------------------------------------
                 */
                var TweenLite = _class("TweenLite", function(target, duration, vars) {
                        Animation.call(this, duration, vars);
                        this.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)

                        if (target == null) {
                            throw "Cannot tween a null target.";
                        }

                        this.target = target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;

                        var isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),
                            overwrite = this.vars.overwrite,
                            i, targ, targets;

                        this._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === "number") ? overwrite >> 0 : _overwriteLookup[overwrite];

                        if ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== "number") {
                            this._targets = targets = _slice(target); //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                            this._propLookup = [];
                            this._siblings = [];
                            for (i = 0; i < targets.length; i++) {
                                targ = targets[i];
                                if (!targ) {
                                    targets.splice(i--, 1);
                                    continue;
                                } else if (typeof(targ) === "string") {
                                    targ = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings
                                    if (typeof(targ) === "string") {
                                        targets.splice(i + 1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)
                                    }
                                    continue;
                                } else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.
                                    targets.splice(i--, 1);
                                    this._targets = targets = targets.concat(_slice(targ));
                                    continue;
                                }
                                this._siblings[i] = _register(targ, this, false);
                                if (overwrite === 1)
                                    if (this._siblings[i].length > 1) {
                                        _applyOverwrite(targ, this, null, 1, this._siblings[i]);
                                    }
                            }

                        } else {
                            this._propLookup = {};
                            this._siblings = _register(target, this, false);
                            if (overwrite === 1)
                                if (this._siblings.length > 1) {
                                    _applyOverwrite(target, this, null, 1, this._siblings);
                                }
                        }
                        if (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {
                            this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
                            this.render(Math.min(0, -this._delay)); //in case delay is negative
                        }
                    }, true),
                    _isSelector = function(v) {
                        return (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check "nodeType" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.
                    },
                    _autoCSS = function(vars, target) {
                        var css = {},
                            p;
                        for (p in vars) {
                            if (!_reservedProps[p] && (!(p in target) || p === "transform" || p === "x" || p === "y" || p === "width" || p === "height" || p === "className" || p === "border") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only "x" and "y" properties. We should also prioritize editing css width/height rather than the element's properties.
                                css[p] = vars[p];
                                delete vars[p];
                            }
                        }
                        vars.css = css;
                    };

                p = TweenLite.prototype = new Animation();
                p.constructor = TweenLite;
                p.kill()._gc = false;

                //----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------

                p.ratio = 0;
                p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
                p._notifyPluginsOfEnabled = p._lazy = false;

                TweenLite.version = "2.0.1";
                TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
                TweenLite.defaultOverwrite = "auto";
                TweenLite.ticker = _ticker;
                TweenLite.autoSleep = 120;
                TweenLite.lagSmoothing = function(threshold, adjustedLag) {
                    _ticker.lagSmoothing(threshold, adjustedLag);
                };

                TweenLite.selector = window.$ || window.jQuery || function(e) {
                    var selector = window.$ || window.jQuery;
                    if (selector) {
                        TweenLite.selector = selector;
                        return selector(e);
                    }
                    if (!_doc) { //in some dev environments (like Angular 6), GSAP gets loaded before the document is defined! So re-query it here if/when necessary.
                        _doc = window.document;
                    }
                    return (!_doc) ? e : (_doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById((e.charAt(0) === "#") ? e.substr(1) : e));
                };

                var _lazyTweens = [],
                    _lazyLookup = {},
                    _numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
                    _relExp = /[\+-]=-?[\.\d]/,
                    //_nonNumbersExp = /(?:([\-+](?!(\d|=)))|[^\d\-+=e]|(e(?![\-+][\d])))+/ig,
                    _setRatio = function(v) {
                        var pt = this._firstPT,
                            min = 0.000001,
                            val;
                        while (pt) {
                            val = !pt.blob ? pt.c * v + pt.s : (v === 1 && this.end != null) ? this.end : v ? this.join("") : this.start;
                            if (pt.m) {
                                val = pt.m.call(this._tween, val, this._target || pt.t, this._tween);
                            } else if (val < min)
                                if (val > -min && !pt.blob) { //prevents issues with converting very small numbers to strings in the browser
                                    val = 0;
                                }
                            if (!pt.f) {
                                pt.t[pt.p] = val;
                            } else if (pt.fp) {
                                pt.t[pt.p](pt.fp, val);
                            } else {
                                pt.t[pt.p](val);
                            }
                            pt = pt._next;
                        }
                    },
                    //compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, "rgb(0,0,0)" and "rgb(100,50,0)" would become ["rgb(", 0, ",", 50, ",0)"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a "start" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join("")).
                    _blobDif = function(start, end, filter, pt) {
                        var a = [],
                            charIndex = 0,
                            s = "",
                            color = 0,
                            startNums, endNums, num, i, l, nonNumbers, currentNum;
                        a.start = start;
                        a.end = end;
                        start = a[0] = start + ""; //ensure values are strings
                        end = a[1] = end + "";
                        if (filter) {
                            filter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
                            start = a[0];
                            end = a[1];
                        }
                        a.length = 0;
                        startNums = start.match(_numbersExp) || [];
                        endNums = end.match(_numbersExp) || [];
                        if (pt) {
                            pt._next = null;
                            pt.blob = 1;
                            a._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)
                        }
                        l = endNums.length;
                        for (i = 0; i < l; i++) {
                            currentNum = endNums[i];
                            nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex) - charIndex);
                            s += (nonNumbers || !i) ? nonNumbers : ","; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
                            charIndex += nonNumbers.length;
                            if (color) { //sense rgba() values and round them.
                                color = (color + 1) % 5;
                            } else if (nonNumbers.substr(-5) === "rgba(") {
                                color = 1;
                            }
                            if (currentNum === startNums[i] || startNums.length <= i) {
                                s += currentNum;
                            } else {
                                if (s) {
                                    a.push(s);
                                    s = "";
                                }
                                num = parseFloat(startNums[i]);
                                a.push(num);
                                a._firstPT = {
                                    _next: a._firstPT,
                                    t: a,
                                    p: a.length - 1,
                                    s: num,
                                    c: ((currentNum.charAt(1) === "=") ? parseInt(currentNum.charAt(0) + "1", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0,
                                    f: 0,
                                    m: (color && color < 4) ? Math.round : 0
                                };
                                //note: we don't set _prev because we'll never need to remove individual PropTweens from this list.
                            }
                            charIndex += currentNum.length;
                        }
                        s += end.substr(charIndex);
                        if (s) {
                            a.push(s);
                        }
                        a.setRatio = _setRatio;
                        if (_relExp.test(end)) { //if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
                            a.end = null;
                        }
                        return a;
                    },
                    //note: "funcParam" is only necessary for function-based getters/setters that require an extra parameter like getAttribute("width") and setAttribute("width", value). In this example, funcParam would be "width". Used by AttrPlugin for example.
                    _addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {
                        if (typeof(end) === "function") {
                            end = end(index || 0, target);
                        }
                        var type = typeof(target[prop]),
                            getterName = (type !== "function") ? "" : ((prop.indexOf("set") || typeof(target["get" + prop.substr(3)]) !== "function") ? prop : "get" + prop.substr(3)),
                            s = (start !== "get") ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),
                            isRelative = (typeof(end) === "string" && end.charAt(1) === "="),
                            pt = {
                                t: target,
                                p: prop,
                                s: s,
                                f: (type === "function"),
                                pg: 0,
                                n: overwriteProp || prop,
                                m: (!mod ? 0 : (typeof(mod) === "function") ? mod : Math.round),
                                pr: 0,
                                c: isRelative ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0
                            },
                            blob;

                        if (typeof(s) !== "number" || (typeof(end) !== "number" && !isRelative)) {
                            if (funcParam || isNaN(s) || (!isRelative && isNaN(end)) || typeof(s) === "boolean" || typeof(end) === "boolean") {
                                //a blob (string that has multiple numbers in it)
                                pt.fp = funcParam;
                                blob = _blobDif(s, (isRelative ? (parseFloat(pt.s) + pt.c) + (pt.s + "").replace(/[0-9\-\.]/g, "") : end), stringFilter || TweenLite.defaultStringFilter, pt);
                                pt = {
                                    t: blob,
                                    p: "setRatio",
                                    s: 0,
                                    c: 1,
                                    f: 2,
                                    pg: 0,
                                    n: overwriteProp || prop,
                                    pr: 0,
                                    m: 0
                                }; //"2" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.
                            } else {
                                pt.s = parseFloat(s);
                                if (!isRelative) {
                                    pt.c = (parseFloat(end) - pt.s) || 0;
                                }
                            }
                        }
                        if (pt.c) { //only add it to the linked list if there's a change.
                            if ((pt._next = this._firstPT)) {
                                pt._next._prev = pt;
                            }
                            this._firstPT = pt;
                            return pt;
                        }
                    },
                    _internals = TweenLite._internals = {
                        isArray: _isArray,
                        isSelector: _isSelector,
                        lazyTweens: _lazyTweens,
                        blobDif: _blobDif
                    }, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.
                    _plugins = TweenLite._plugins = {},
                    _tweenLookup = _internals.tweenLookup = {},
                    _tweenLookupNum = 0,
                    _reservedProps = _internals.reservedProps = {
                        ease: 1,
                        delay: 1,
                        overwrite: 1,
                        onComplete: 1,
                        onCompleteParams: 1,
                        onCompleteScope: 1,
                        useFrames: 1,
                        runBackwards: 1,
                        startAt: 1,
                        onUpdate: 1,
                        onUpdateParams: 1,
                        onUpdateScope: 1,
                        onStart: 1,
                        onStartParams: 1,
                        onStartScope: 1,
                        onReverseComplete: 1,
                        onReverseCompleteParams: 1,
                        onReverseCompleteScope: 1,
                        onRepeat: 1,
                        onRepeatParams: 1,
                        onRepeatScope: 1,
                        easeParams: 1,
                        yoyo: 1,
                        immediateRender: 1,
                        repeat: 1,
                        repeatDelay: 1,
                        data: 1,
                        paused: 1,
                        reversed: 1,
                        autoCSS: 1,
                        lazy: 1,
                        onOverwrite: 1,
                        callbackScope: 1,
                        stringFilter: 1,
                        id: 1,
                        yoyoEase: 1
                    },
                    _overwriteLookup = {
                        none: 0,
                        all: 1,
                        auto: 2,
                        concurrent: 3,
                        allOnStart: 4,
                        preexisting: 5,
                        "true": 1,
                        "false": 0
                    },
                    _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),
                    _rootTimeline = Animation._rootTimeline = new SimpleTimeline(),
                    _nextGCFrame = 30,
                    _lazyRender = _internals.lazyRender = function() {
                        var i = _lazyTweens.length,
                            tween;
                        _lazyLookup = {};
                        while (--i > -1) {
                            tween = _lazyTweens[i];
                            if (tween && tween._lazy !== false) {
                                tween.render(tween._lazy[0], tween._lazy[1], true);
                                tween._lazy = false;
                            }
                        }
                        _lazyTweens.length = 0;
                    };

                _rootTimeline._startTime = _ticker.time;
                _rootFramesTimeline._startTime = _ticker.frame;
                _rootTimeline._active = _rootFramesTimeline._active = true;
                setTimeout(_lazyRender, 1); //on some mobile devices, there isn't a "tick" before code runs which means any lazy renders wouldn't run before the next official "tick".

                Animation._updateRoot = TweenLite.render = function() {
                    var i, a, p;
                    if (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.
                        _lazyRender();
                    }
                    _rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);
                    _rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);
                    if (_lazyTweens.length) {
                        _lazyRender();
                    }
                    if (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to
                        _nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
                        for (p in _tweenLookup) {
                            a = _tweenLookup[p].tweens;
                            i = a.length;
                            while (--i > -1) {
                                if (a[i]._gc) {
                                    a.splice(i, 1);
                                }
                            }
                            if (a.length === 0) {
                                delete _tweenLookup[p];
                            }
                        }
                        //if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly
                        p = _rootTimeline._first;
                        if (!p || p._paused)
                            if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {
                                while (p && p._paused) {
                                    p = p._next;
                                }
                                if (!p) {
                                    _ticker.sleep();
                                }
                            }
                    }
                };

                _ticker.addEventListener("tick", Animation._updateRoot);

                var _register = function(target, tween, scrub) {
                        var id = target._gsTweenID,
                            a, i;
                        if (!_tweenLookup[id || (target._gsTweenID = id = "t" + (_tweenLookupNum++))]) {
                            _tweenLookup[id] = {
                                target: target,
                                tweens: []
                            };
                        }
                        if (tween) {
                            a = _tweenLookup[id].tweens;
                            a[(i = a.length)] = tween;
                            if (scrub) {
                                while (--i > -1) {
                                    if (a[i] === tween) {
                                        a.splice(i, 1);
                                    }
                                }
                            }
                        }
                        return _tweenLookup[id].tweens;
                    },
                    _onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {
                        var func = overwrittenTween.vars.onOverwrite,
                            r1, r2;
                        if (func) {
                            r1 = func(overwrittenTween, overwritingTween, target, killedProps);
                        }
                        func = TweenLite.onOverwrite;
                        if (func) {
                            r2 = func(overwrittenTween, overwritingTween, target, killedProps);
                        }
                        return (r1 !== false && r2 !== false);
                    },
                    _applyOverwrite = function(target, tween, props, mode, siblings) {
                        var i, changed, curTween, l;
                        if (mode === 1 || mode >= 4) {
                            l = siblings.length;
                            for (i = 0; i < l; i++) {
                                if ((curTween = siblings[i]) !== tween) {
                                    if (!curTween._gc) {
                                        if (curTween._kill(null, target, tween)) {
                                            changed = true;
                                        }
                                    }
                                } else if (mode === 5) {
                                    break;
                                }
                            }
                            return changed;
                        }
                        //NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)
                        var startTime = tween._startTime + _tinyNum,
                            overlaps = [],
                            oCount = 0,
                            zeroDur = (tween._duration === 0),
                            globalStart;
                        i = siblings.length;
                        while (--i > -1) {
                            if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {
                                //ignore
                            } else if (curTween._timeline !== tween._timeline) {
                                globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
                                if (_checkOverlap(curTween, globalStart, zeroDur) === 0) {
                                    overlaps[oCount++] = curTween;
                                }
                            } else if (curTween._startTime <= startTime)
                                if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime)
                                    if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {
                                        overlaps[oCount++] = curTween;
                                    }
                        }

                        i = oCount;
                        while (--i > -1) {
                            curTween = overlaps[i];
                            if (mode === 2)
                                if (curTween._kill(props, target, tween)) {
                                    changed = true;
                                }
                            if (mode !== 2 || (!curTween._firstPT && curTween._initted)) {
                                if (mode !== 2 && !_onOverwrite(curTween, tween)) {
                                    continue;
                                }
                                if (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.
                                    changed = true;
                                }
                            }
                        }
                        return changed;
                    },
                    _checkOverlap = function(tween, reference, zeroDur) {
                        var tl = tween._timeline,
                            ts = tl._timeScale,
                            t = tween._startTime;
                        while (tl._timeline) {
                            t += tl._startTime;
                            ts *= tl._timeScale;
                            if (tl._paused) {
                                return -100;
                            }
                            tl = tl._timeline;
                        }
                        t /= ts;
                        return (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;
                    };


                //---- TweenLite instance methods -----------------------------------------------------------------------------

                p._init = function() {
                    var v = this.vars,
                        op = this._overwrittenProps,
                        dur = this._duration,
                        immediate = !!v.immediateRender,
                        ease = v.ease,
                        i, initPlugins, pt, p, startVars, l;
                    if (v.startAt) {
                        if (this._startAt) {
                            this._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:"+=100"}, {x:"-=100"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.
                            this._startAt.kill();
                        }
                        startVars = {};
                        for (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);
                            startVars[p] = v.startAt[p];
                        }
                        startVars.data = "isStart";
                        startVars.overwrite = false;
                        startVars.immediateRender = true;
                        startVars.lazy = (immediate && v.lazy !== false);
                        startVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).
                        startVars.onUpdate = v.onUpdate;
                        startVars.onUpdateParams = v.onUpdateParams;
                        startVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;
                        this._startAt = TweenLite.to(this.target || {}, 0, startVars);
                        if (immediate) {
                            if (this._time > 0) {
                                this._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).
                            } else if (dur !== 0) {
                                return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
                            }
                        }
                    } else if (v.runBackwards && dur !== 0) {
                        //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
                        if (this._startAt) {
                            this._startAt.render(-1, true);
                            this._startAt.kill();
                            this._startAt = null;
                        } else {
                            if (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
                                immediate = false;
                            }
                            pt = {};
                            for (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.
                                if (!_reservedProps[p] || p === "autoCSS") {
                                    pt[p] = v[p];
                                }
                            }
                            pt.overwrite = 0;
                            pt.data = "isFromStart"; //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
                            pt.lazy = (immediate && v.lazy !== false);
                            pt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
                            this._startAt = TweenLite.to(this.target, 0, pt);
                            if (!immediate) {
                                this._startAt._init(); //ensures that the initial values are recorded
                                this._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.
                                if (this.vars.immediateRender) {
                                    this._startAt = null;
                                }
                            } else if (this._time === 0) {
                                return;
                            }
                        }
                    }
                    this._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === "function") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;
                    if (v.easeParams instanceof Array && ease.config) {
                        this._ease = ease.config.apply(ease, v.easeParams);
                    }
                    this._easeType = this._ease._type;
                    this._easePower = this._ease._power;
                    this._firstPT = null;

                    if (this._targets) {
                        l = this._targets.length;
                        for (i = 0; i < l; i++) {
                            if (this._initProps(this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i)) {
                                initPlugins = true;
                            }
                        }
                    } else {
                        initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);
                    }

                    if (initPlugins) {
                        TweenLite._onPluginEvent("_onInitAllProps", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite
                    }
                    if (op)
                        if (!this._firstPT)
                            if (typeof(this.target) !== "function") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.
                                this._enabled(false, false);
                            }
                    if (v.runBackwards) {
                        pt = this._firstPT;
                        while (pt) {
                            pt.s += pt.c;
                            pt.c = -pt.c;
                            pt = pt._next;
                        }
                    }
                    this._onUpdate = v.onUpdate;
                    this._initted = true;
                };

                p._initProps = function(target, propLookup, siblings, overwrittenProps, index) {
                    var p, i, initPlugins, plugin, pt, v;
                    if (target == null) {
                        return false;
                    }

                    if (_lazyLookup[target._gsTweenID]) {
                        _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
                    }

                    if (!this.vars.css)
                        if (target.style)
                            if (target !== window && target.nodeType)
                                if (_plugins.css)
                                    if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check "nodeType" on the window inside an iframe.
                                        _autoCSS(this.vars, target);
                                    }
                    for (p in this.vars) {
                        v = this.vars[p];
                        if (_reservedProps[p]) {
                            if (v)
                                if ((v instanceof Array) || (v.push && _isArray(v)))
                                    if (v.join("").indexOf("{self}") !== -1) {
                                        this.vars[p] = v = this._swapSelfInParams(v, this);
                                    }

                        } else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {

                            //t - target 		[object]
                            //p - property 		[string]
                            //s - start			[number]
                            //c - change		[number]
                            //f - isFunction	[boolean]
                            //n - name			[string]
                            //pg - isPlugin 	[boolean]
                            //pr - priority		[number]
                            //m - mod           [function | 0]
                            this._firstPT = pt = {
                                _next: this._firstPT,
                                t: plugin,
                                p: "setRatio",
                                s: 0,
                                c: 1,
                                f: 1,
                                n: p,
                                pg: 1,
                                pr: plugin._priority,
                                m: 0
                            };
                            i = plugin._overwriteProps.length;
                            while (--i > -1) {
                                propLookup[plugin._overwriteProps[i]] = this._firstPT;
                            }
                            if (plugin._priority || plugin._onInitAllProps) {
                                initPlugins = true;
                            }
                            if (plugin._onDisable || plugin._onEnable) {
                                this._notifyPluginsOfEnabled = true;
                            }
                            if (pt._next) {
                                pt._next._prev = pt;
                            }

                        } else {
                            propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index);
                        }
                    }

                    if (overwrittenProps)
                        if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)
                            return this._initProps(target, propLookup, siblings, overwrittenProps, index);
                        }
                    if (this._overwrite > 1)
                        if (this._firstPT)
                            if (siblings.length > 1)
                                if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {
                                    this._kill(propLookup, target);
                                    return this._initProps(target, propLookup, siblings, overwrittenProps, index);
                                }
                    if (this._firstPT)
                        if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.
                            _lazyLookup[target._gsTweenID] = true;
                        }
                    return initPlugins;
                };

                p.render = function(time, suppressEvents, force) {
                    var prevTime = this._time,
                        duration = this._duration,
                        prevRawPrevTime = this._rawPrevTime,
                        isComplete, callback, pt, rawPrevTime;
                    if (time >= duration - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                        this._totalTime = this._time = duration;
                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
                        if (!this._reversed) {
                            isComplete = true;
                            callback = "onComplete";
                            force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                        }
                        if (duration === 0)
                            if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                                if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
                                    time = 0;
                                }
                                if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause"))
                                    if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
                                        force = true;
                                        if (prevRawPrevTime > _tinyNum) {
                                            callback = "onReverseComplete";
                                        }
                                    }
                                this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                            }

                    } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                        this._totalTime = this._time = 0;
                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                        if (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
                            callback = "onReverseComplete";
                            isComplete = this._reversed;
                        }
                        if (time < 0) {
                            this._active = false;
                            if (duration === 0)
                                if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                                    if (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === "isPause")) {
                                        force = true;
                                    }
                                    this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                                }
                        }
                        if (!this._initted || (this._startAt && this._startAt.progress())) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.
                            force = true;
                        }
                    } else {
                        this._totalTime = this._time = time;

                        if (this._easeType) {
                            var r = time / duration,
                                type = this._easeType,
                                pow = this._easePower;
                            if (type === 1 || (type === 3 && r >= 0.5)) {
                                r = 1 - r;
                            }
                            if (type === 3) {
                                r *= 2;
                            }
                            if (pow === 1) {
                                r *= r;
                            } else if (pow === 2) {
                                r *= r * r;
                            } else if (pow === 3) {
                                r *= r * r * r;
                            } else if (pow === 4) {
                                r *= r * r * r * r;
                            }

                            if (type === 1) {
                                this.ratio = 1 - r;
                            } else if (type === 2) {
                                this.ratio = r;
                            } else if (time / duration < 0.5) {
                                this.ratio = r / 2;
                            } else {
                                this.ratio = 1 - (r / 2);
                            }

                        } else {
                            this.ratio = this._ease.getRatio(time / duration);
                        }
                    }

                    if (this._time === prevTime && !force) {
                        return;
                    } else if (!this._initted) {
                        this._init();
                        if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
                            return;
                        } else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) {
                            this._time = this._totalTime = prevTime;
                            this._rawPrevTime = prevRawPrevTime;
                            _lazyTweens.push(this);
                            this._lazy = [time, suppressEvents];
                            return;
                        }
                        //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
                        if (this._time && !isComplete) {
                            this.ratio = this._ease.getRatio(this._time / duration);
                        } else if (isComplete && this._ease._calcEnd) {
                            this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
                        }
                    }
                    if (this._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.
                        this._lazy = false;
                    }
                    if (!this._active)
                        if (!this._paused && this._time !== prevTime && time >= 0) {
                            this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
                        }
                    if (prevTime === 0) {
                        if (this._startAt) {
                            if (time >= 0) {
                                this._startAt.render(time, true, force);
                            } else if (!callback) {
                                callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
                            }
                        }
                        if (this.vars.onStart)
                            if (this._time !== 0 || duration === 0)
                                if (!suppressEvents) {
                                    this._callback("onStart");
                                }
                    }
                    pt = this._firstPT;
                    while (pt) {
                        if (pt.f) {
                            pt.t[pt.p](pt.c * this.ratio + pt.s);
                        } else {
                            pt.t[pt.p] = pt.c * this.ratio + pt.s;
                        }
                        pt = pt._next;
                    }

                    if (this._onUpdate) {
                        if (time < 0)
                            if (this._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                                this._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
                            }
                        if (!suppressEvents)
                            if (this._time !== prevTime || isComplete || force) {
                                this._callback("onUpdate");
                            }
                    }
                    if (callback)
                        if (!this._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate
                            if (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.
                                this._startAt.render(time, true, force);
                            }
                            if (isComplete) {
                                if (this._timeline.autoRemoveChildren) {
                                    this._enabled(false, false);
                                }
                                this._active = false;
                            }
                            if (!suppressEvents && this.vars[callback]) {
                                this._callback(callback);
                            }
                            if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
                                this._rawPrevTime = 0;
                            }
                        }
                };

                p._kill = function(vars, target, overwritingTween) {
                    if (vars === "all") {
                        vars = null;
                    }
                    if (vars == null)
                        if (target == null || target === this.target) {
                            this._lazy = false;
                            return this._enabled(false, false);
                        }
                    target = (typeof(target) !== "string") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;
                    var simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),
                        i, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;
                    if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
                        i = target.length;
                        while (--i > -1) {
                            if (this._kill(vars, target[i], overwritingTween)) {
                                changed = true;
                            }
                        }
                    } else {
                        if (this._targets) {
                            i = this._targets.length;
                            while (--i > -1) {
                                if (target === this._targets[i]) {
                                    propLookup = this._propLookup[i] || {};
                                    this._overwrittenProps = this._overwrittenProps || [];
                                    overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
                                    break;
                                }
                            }
                        } else if (target !== this.target) {
                            return false;
                        } else {
                            propLookup = this._propLookup;
                            overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
                        }

                        if (propLookup) {
                            killProps = vars || propLookup;
                            record = (vars !== overwrittenProps && overwrittenProps !== "all" && vars !== propLookup && (typeof(vars) !== "object" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)
                            if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
                                for (p in killProps) {
                                    if (propLookup[p]) {
                                        if (!killed) {
                                            killed = [];
                                        }
                                        killed.push(p);
                                    }
                                }
                                if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).
                                    return false;
                                }
                            }

                            for (p in killProps) {
                                if ((pt = propLookup[p])) {
                                    if (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.
                                        if (pt.f) {
                                            pt.t[pt.p](pt.s);
                                        } else {
                                            pt.t[pt.p] = pt.s;
                                        }
                                        changed = true;
                                    }
                                    if (pt.pg && pt.t._kill(killProps)) {
                                        changed = true; //some plugins need to be notified so they can perform cleanup tasks first
                                    }
                                    if (!pt.pg || pt.t._overwriteProps.length === 0) {
                                        if (pt._prev) {
                                            pt._prev._next = pt._next;
                                        } else if (pt === this._firstPT) {
                                            this._firstPT = pt._next;
                                        }
                                        if (pt._next) {
                                            pt._next._prev = pt._prev;
                                        }
                                        pt._next = pt._prev = null;
                                    }
                                    delete propLookup[p];
                                }
                                if (record) {
                                    overwrittenProps[p] = 1;
                                }
                            }
                            if (!this._firstPT && this._initted) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
                                this._enabled(false, false);
                            }
                        }
                    }
                    return changed;
                };

                p.invalidate = function() {
                    if (this._notifyPluginsOfEnabled) {
                        TweenLite._onPluginEvent("_onDisable", this);
                    }
                    this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;
                    this._notifyPluginsOfEnabled = this._active = this._lazy = false;
                    this._propLookup = (this._targets) ? {} : [];
                    Animation.prototype.invalidate.call(this);
                    if (this.vars.immediateRender) {
                        this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
                        this.render(Math.min(0, -this._delay)); //in case delay is negative.
                    }
                    return this;
                };

                p._enabled = function(enabled, ignoreTimeline) {
                    if (!_tickerActive) {
                        _ticker.wake();
                    }
                    if (enabled && this._gc) {
                        var targets = this._targets,
                            i;
                        if (targets) {
                            i = targets.length;
                            while (--i > -1) {
                                this._siblings[i] = _register(targets[i], this, true);
                            }
                        } else {
                            this._siblings = _register(this.target, this, true);
                        }
                    }
                    Animation.prototype._enabled.call(this, enabled, ignoreTimeline);
                    if (this._notifyPluginsOfEnabled)
                        if (this._firstPT) {
                            return TweenLite._onPluginEvent((enabled ? "_onEnable" : "_onDisable"), this);
                        }
                    return false;
                };


                //----TweenLite static methods -----------------------------------------------------

                TweenLite.to = function(target, duration, vars) {
                    return new TweenLite(target, duration, vars);
                };

                TweenLite.from = function(target, duration, vars) {
                    vars.runBackwards = true;
                    vars.immediateRender = (vars.immediateRender != false);
                    return new TweenLite(target, duration, vars);
                };

                TweenLite.fromTo = function(target, duration, fromVars, toVars) {
                    toVars.startAt = fromVars;
                    toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                    return new TweenLite(target, duration, toVars);
                };

                TweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {
                    return new TweenLite(callback, 0, {
                        delay: delay,
                        onComplete: callback,
                        onCompleteParams: params,
                        callbackScope: scope,
                        onReverseComplete: callback,
                        onReverseCompleteParams: params,
                        immediateRender: false,
                        lazy: false,
                        useFrames: useFrames,
                        overwrite: 0
                    });
                };

                TweenLite.set = function(target, vars) {
                    return new TweenLite(target, 0, vars);
                };

                TweenLite.getTweensOf = function(target, onlyActive) {
                    if (target == null) {
                        return [];
                    }
                    target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;
                    var i, a, j, t;
                    if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
                        i = target.length;
                        a = [];
                        while (--i > -1) {
                            a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
                        }
                        i = a.length;
                        //now get rid of any duplicates (tweens of arrays of objects could cause duplicates)
                        while (--i > -1) {
                            t = a[i];
                            j = i;
                            while (--j > -1) {
                                if (t === a[j]) {
                                    a.splice(i, 1);
                                }
                            }
                        }
                    } else if (target._gsTweenID) {
                        a = _register(target).concat();
                        i = a.length;
                        while (--i > -1) {
                            if (a[i]._gc || (onlyActive && !a[i].isActive())) {
                                a.splice(i, 1);
                            }
                        }
                    }
                    return a || [];
                };

                TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {
                    if (typeof(onlyActive) === "object") {
                        vars = onlyActive; //for backwards compatibility (before "onlyActive" parameter was inserted)
                        onlyActive = false;
                    }
                    var a = TweenLite.getTweensOf(target, onlyActive),
                        i = a.length;
                    while (--i > -1) {
                        a[i]._kill(vars, target);
                    }
                };



                /*
                 * ----------------------------------------------------------------
                 * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)
                 * ----------------------------------------------------------------
                 */
                var TweenPlugin = _class("plugins.TweenPlugin", function(props, priority) {
                    this._overwriteProps = (props || "").split(",");
                    this._propName = this._overwriteProps[0];
                    this._priority = priority || 0;
                    this._super = TweenPlugin.prototype;
                }, true);

                p = TweenPlugin.prototype;
                TweenPlugin.version = "1.19.0";
                TweenPlugin.API = 2;
                p._firstPT = null;
                p._addTween = _addPropTween;
                p.setRatio = _setRatio;

                p._kill = function(lookup) {
                    var a = this._overwriteProps,
                        pt = this._firstPT,
                        i;
                    if (lookup[this._propName] != null) {
                        this._overwriteProps = [];
                    } else {
                        i = a.length;
                        while (--i > -1) {
                            if (lookup[a[i]] != null) {
                                a.splice(i, 1);
                            }
                        }
                    }
                    while (pt) {
                        if (lookup[pt.n] != null) {
                            if (pt._next) {
                                pt._next._prev = pt._prev;
                            }
                            if (pt._prev) {
                                pt._prev._next = pt._next;
                                pt._prev = null;
                            } else if (this._firstPT === pt) {
                                this._firstPT = pt._next;
                            }
                        }
                        pt = pt._next;
                    }
                    return false;
                };

                p._mod = p._roundProps = function(lookup) {
                    var pt = this._firstPT,
                        val;
                    while (pt) {
                        val = lookup[this._propName] || (pt.n != null && lookup[pt.n.split(this._propName + "_").join("")]);
                        if (val && typeof(val) === "function") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.
                            if (pt.f === 2) {
                                pt.t._applyPT.m = val;
                            } else {
                                pt.m = val;
                            }
                        }
                        pt = pt._next;
                    }
                };

                TweenLite._onPluginEvent = function(type, tween) {
                    var pt = tween._firstPT,
                        changed, pt2, first, last, next;
                    if (type === "_onInitAllProps") {
                        //sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.
                        while (pt) {
                            next = pt._next;
                            pt2 = first;
                            while (pt2 && pt2.pr > pt.pr) {
                                pt2 = pt2._next;
                            }
                            if ((pt._prev = pt2 ? pt2._prev : last)) {
                                pt._prev._next = pt;
                            } else {
                                first = pt;
                            }
                            if ((pt._next = pt2)) {
                                pt2._prev = pt;
                            } else {
                                last = pt;
                            }
                            pt = next;
                        }
                        pt = tween._firstPT = first;
                    }
                    while (pt) {
                        if (pt.pg)
                            if (typeof(pt.t[type]) === "function")
                                if (pt.t[type]()) {
                                    changed = true;
                                }
                        pt = pt._next;
                    }
                    return changed;
                };

                TweenPlugin.activate = function(plugins) {
                    var i = plugins.length;
                    while (--i > -1) {
                        if (plugins[i].API === TweenPlugin.API) {
                            _plugins[(new plugins[i]())._propName] = plugins[i];
                        }
                    }
                    return true;
                };

                //provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.
                _gsDefine.plugin = function(config) {
                    if (!config || !config.propName || !config.init || !config.API) {
                        throw "illegal plugin definition.";
                    }
                    var propName = config.propName,
                        priority = config.priority || 0,
                        overwriteProps = config.overwriteProps,
                        map = {
                            init: "_onInitTween",
                            set: "setRatio",
                            kill: "_kill",
                            round: "_mod",
                            mod: "_mod",
                            initAll: "_onInitAllProps"
                        },
                        Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin",
                            function() {
                                TweenPlugin.call(this, propName, priority);
                                this._overwriteProps = overwriteProps || [];
                            }, (config.global === true)),
                        p = Plugin.prototype = new TweenPlugin(propName),
                        prop;
                    p.constructor = Plugin;
                    Plugin.API = config.API;
                    for (prop in map) {
                        if (typeof(config[prop]) === "function") {
                            p[map[prop]] = config[prop];
                        }
                    }
                    Plugin.version = config.version;
                    TweenPlugin.activate([Plugin]);
                    return Plugin;
                };


                //now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.
                a = window._gsQueue;
                if (a) {
                    for (i = 0; i < a.length; i++) {
                        a[i]();
                    }
                    for (p in _defLookup) {
                        if (!_defLookup[p].func) {
                            window.console.log("GSAP encountered missing dependency: " + p);
                        }
                    }
                }

                _tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated

                return TweenLite;

            })(_gsScope, "TweenLite");
            /* unused harmony export TweenLite */


            const gs = _gsScope.com.greensock;

            const SimpleTimeline = gs.core.SimpleTimeline;
            /* harmony export (immutable) */
            __webpack_exports__["c"] = SimpleTimeline;

            const Animation = gs.core.Animation;
            /* harmony export (immutable) */
            __webpack_exports__["e"] = Animation;

            const Ease = _gsScope.Ease;
            /* harmony export (immutable) */
            __webpack_exports__["b"] = Ease;

            const Linear = _gsScope.Linear;
            /* unused harmony export Linear */

            const Power0 = Linear;
            /* harmony export (immutable) */
            __webpack_exports__["h"] = Power0;

            const Power1 = _gsScope.Power1;
            /* harmony export (immutable) */
            __webpack_exports__["g"] = Power1;

            const Power2 = _gsScope.Power2;
            /* unused harmony export Power2 */

            const Power3 = _gsScope.Power3;
            /* unused harmony export Power3 */

            const Power4 = _gsScope.Power4;
            /* harmony export (immutable) */
            __webpack_exports__["i"] = Power4;

            const TweenPlugin = _gsScope.TweenPlugin;
            /* harmony export (immutable) */
            __webpack_exports__["f"] = TweenPlugin;

            const EventDispatcher = gs.events.EventDispatcher;
            /* unused harmony export EventDispatcher */


            /* WEBPACK VAR INJECTION */
        }.call(__webpack_exports__, __webpack_require__(310)(module), __webpack_require__(15)))

        /***/
    }),
    /* 7 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var LoaderStore = function() {
            function LoaderStore() {
                _classCallCheck(this, LoaderStore);

                this.state = {
                    pageReady: false
                };
            }

            _createClass(LoaderStore, [{
                key: "setPageReady",
                value: function setPageReady() {
                    this.state.pageReady = true;
                }
            }, {
                key: "setPageNotReady",
                value: function setPageNotReady() {
                    this.state.pageReady = false;
                }
            }]);

            return LoaderStore;
        }();

        /* harmony default export */
        __webpack_exports__["a"] = (new LoaderStore());

        /***/
    }),
    /* 8 */
    /***/
    (function(module, exports, __webpack_require__) {

        var freeGlobal = __webpack_require__(55);

        /** Detect free variable `self`. */
        var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

        /** Used as a reference to the global object. */
        var root = freeGlobal || freeSelf || Function('return this')();

        module.exports = root;


        /***/
    }),
    /* 9 */
    /***/
    (function(module, exports) {

        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;

        module.exports = isArray;


        /***/
    }),
    /* 10 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var animMap = __webpack_require__(73);

        var AnimationStore = function() {
            function AnimationStore() {
                _classCallCheck(this, AnimationStore);

                this.state = {
                    from: '',
                    to: '',
                    appear: animMap.default.appear,
                    leave: animMap.default.leave
                };
            }

            _createClass(AnimationStore, [{
                key: 'setAnimInfo',
                value: function setAnimInfo(from, to) {
                    if (animMap.from[from] === undefined || animMap.from[from].to[to] === undefined) {
                        this.state.appear = animMap.default.appear;
                        this.state.leave = animMap.default.leave;
                    } else if (animMap.from[from].to[to] !== undefined) {
                        this.state.appear = animMap.from[from].to[to].appear;
                        this.state.leave = animMap.from[from].to[to].leave;
                    }
                }
            }, {
                key: 'setRouterInfo',
                value: function setRouterInfo(from, to) {
                    this.state.from = from;
                    this.state.to = to;
                    this.setAnimInfo(from, to);
                }
            }]);

            return AnimationStore;
        }();

        /* harmony default export */
        __webpack_exports__["a"] = (new AnimationStore());

        /***/
    }),
    /* 11 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var SliderStore = function() {
            function SliderStore() {
                var _state;

                _classCallCheck(this, SliderStore);

                this.state = (_state = {
                    currentSlideId: 0,
                    isAnimated: false,
                    posY: 0,
                    isSliding: false,
                    isActive: false
                }, _defineProperty(_state, "isSliding", false), _defineProperty(_state, "caseStudyIsOpen", false), _defineProperty(_state, "lookAt", true), _state);
            }

            _createClass(SliderStore, [{
                key: "increment",
                value: function increment() {
                    this.state.currentSlideId++;
                }
            }, {
                key: "setIsSliding",
                value: function setIsSliding(isSliding) {
                    this.state.isSliding = isSliding;
                }
            }, {
                key: "decrement",
                value: function decrement() {
                    this.state.currentSlideId--;
                }
            }, {
                key: "setLookAt",
                value: function setLookAt(lookAt) {
                    this.state.lookAt = lookAt;
                }
            }, {
                key: "setSlideId",
                value: function setSlideId(slideIdToSet) {
                    this.state.currentSlideId = slideIdToSet;
                }
            }, {
                key: "sliderIsAnimated",
                value: function sliderIsAnimated() {
                    this.state.isAnimated = true;
                }
            }, {
                key: "sliderIsNotAnimated",
                value: function sliderIsNotAnimated() {
                    this.state.isAnimated = false;
                }
            }, {
                key: "setPosY",
                value: function setPosY(posY) {
                    this.state.posY = posY;
                }
            }, {
                key: "setActive",
                value: function setActive() {
                    this.state.isActive = true;
                }
            }, {
                key: "setInactive",
                value: function setInactive() {
                    this.state.isActive = false;
                }
            }, {
                key: "openCaseStudy",
                value: function openCaseStudy() {
                    this.state.caseStudyIsOpen = true;
                }
            }, {
                key: "closeCaseStudy",
                value: function closeCaseStudy() {
                    this.state.caseStudyIsOpen = false;
                }
            }, {
                key: "reset",
                value: function reset() {
                    this.state.currentSlideId = 0;
                }
            }]);

            return SliderStore;
        }();

        /* harmony default export */
        __webpack_exports__["a"] = (new SliderStore());

        /***/
    }),
    /* 12 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseIsNative = __webpack_require__(159),
            getValue = __webpack_require__(182);

        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }

        module.exports = getNative;


        /***/
    }),
    /* 13 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseDelay = __webpack_require__(152),
            baseRest = __webpack_require__(167),
            toNumber = __webpack_require__(33);

        /**
         * Invokes `func` after `wait` milliseconds. Any additional arguments are
         * provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.delay(function(text) {
         *   console.log(text);
         * }, 1000, 'later');
         * // => Logs 'later' after one second.
         */
        var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
        });

        module.exports = delay;


        /***/
    }),
    /* 14 */
    /***/
    (function(module, exports) {

        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
            var type = typeof value;
            return value != null && (type == 'object' || type == 'function');
        }

        module.exports = isObject;


        /***/
    }),
    /* 15 */
    /***/
    (function(module, exports) {

        var g;

        // This works in non-strict mode
        g = (function() {
            return this;
        })();

        try {
            // This works if eval is allowed (see CSP)
            g = g || Function("return this")() || (1, eval)("this");
        } catch (e) {
            // This works if the window reference is available
            if (typeof window === "object")
                g = window;
        }

        // g can still be undefined, but nothing to do about it...
        // We return undefined, instead of nothing here, so it's
        // easier to handle this case. if(!global) { ...}

        module.exports = g;


        /***/
    }),
    /* 16 */
    /***/
    (function(module, exports) {

        module.exports = {
            "slides": [{
                "title": "lightswan",
                "titleColor": "#62615D",
                "textColor": "#A4A09B",
                "backgroundColor": "#F7F3EA",
                "description": "Lightswan is a digital transition company. It works with big firms such as banks to change their process. I had the opportunity to create their brand universe and their graphical identity.",
                "context": "freelance",
                "role": "UI&UX",
                "period": "2016",
                "case-study": true,
                "url": "",
                "shapePath": "/assets/imgs/slider/lightswan/shape.png",
                "shapePath2x": "/assets/imgs/slider/lightswan/shape@2x.png",
                "illustrationPath": "/assets/imgs/slider/lightswan/illustration.png",
                "illustrationPath2x": "/assets/imgs/slider/lightswan/illustration@2x.png"
            }, {
                "title": "shopsquare",
                "titleColor": "#434690",
                "textColor": "#8F99C5",
                "backgroundColor": "#E3F0FF",
                "description": "Shopsquare is a french startup which brings all the fashion items of the internet on one single website where you can compare all of them. I’ve worked for shopsquare for 6 months, and I did back-end and front-end development.",
                "context": "freelance",
                "role": "Front end",
                "period": "2016",
                "case-study": true,
                "url": "https://www.shopsquare.fr/",
                "shapePath": "/assets/imgs/slider/shopsquare/shape.png",
                "shapePath2x": "/assets/imgs/slider/shopsquare/shape@2x.png",
                "illustrationPath": "/assets/imgs/slider/shopsquare/illustration.png",
                "illustrationPath2x": "/assets/imgs/slider/shopsquare/illustration@2x.png"
            }, {
                "title": "maje",
                "titleColor": "#F0DE82",
                "textColor": "#BFC1DE",
                "description": "I worked for Maje France with Kaam&Roffler agency as a freelance developer during 1 year in 2016. I had the opportunity to develop some pages for new collections or special events.",
                "context": "freelance",
                "role": "Front end",
                "period": "2016",
                "case-study": true,
                "url": "",
                "shapePath": "/assets/imgs/slider/maje/shape.png",
                "shapePath2x": "/assets/imgs/slider/maje/shape@2x.png",
                "illustrationPath": "/assets/imgs/slider/maje/illustration.png",
                "illustrationPath2x": "/assets/imgs/slider/maje/illustration@2x.png"
            }, {
                "title": "google-a&c",
                "titleColor": "#FDEFBD",
                "textColor": "#EEBCC0",
                "description": "During my second internship at StinkDigital I worked on the integration of the new Google Arts & Culture experiments desktop website. I worked with Google Closure Tools.",
                "context": "internship",
                "role": "Front end",
                "period": "2016",
                "case-study": false,
                "url": "https://artsexperiments.withgoogle.com/",
                "shapePath": "/assets/imgs/slider/google/shape.png",
                "shapePath2x": "/assets/imgs/slider/google/shape@2x.png",
                "illustrationPath": "/assets/imgs/slider/google/illustration.png",
                "illustrationPath2x": "/assets/imgs/slider/google/illustration@2x.png"
            }]
        }

        /***/
    }),
    /* 17 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var SplitText = function() {
            function SplitText(elementToSplit, options) {
                _classCallCheck(this, SplitText);

                this.elementToSplit = elementToSplit;
                this.textToSplit = this.elementToSplit.textContent;

                this.classToGive = options.classToGive;

                this.splittedText = '';

                this.splitText(options.whatToSplit);
            }

            _createClass(SplitText, [{
                key: 'splitText',
                value: function splitText(whatToSplit) {
                    if (whatToSplit === "lines") {
                        this.splitLine();
                    } else {
                        this.splitLetter();
                    }
                    this.elementToSplit.innerHTML = this.splittedText;
                }
            }, {
                key: 'splitLine',
                value: function splitLine() {
                    var lines = this.textToSplit.split('<br>');
                    this.splitElements(lines);
                }
            }, {
                key: 'splitElements',
                value: function splitElements(elementsToSplit) {
                    for (var i = 0; i < elementsToSplit.length; i++) {
                        this.splittedText += "<span class='" + this.classToGive + "'>" + elementsToSplit[i] + "</span>";
                    }
                    return this.splittedText;
                }
            }, {
                key: 'splitLetter',
                value: function splitLetter() {
                    this.splitElements(this.textToSplit);
                }
            }]);

            return SplitText;
        }();

        /* harmony default export */
        __webpack_exports__["a"] = (SplitText);

        /***/
    }),
    /* 18 */
    /***/
    (function(module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(21),
            getRawTag = __webpack_require__(179),
            objectToString = __webpack_require__(206);

        /** `Object#toString` result references. */
        var nullTag = '[object Null]',
            undefinedTag = '[object Undefined]';

        /** Built-in value references. */
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
            if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
            }
            return (symToStringTag && symToStringTag in Object(value)) ?
                getRawTag(value) :
                objectToString(value);
        }

        module.exports = baseGetTag;


        /***/
    }),
    /* 19 */
    /***/
    (function(module, exports) {

        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
            return value != null && typeof value == 'object';
        }

        module.exports = isObjectLike;


        /***/
    }),
    /* 20 */
    /***/
    (function(module, exports, __webpack_require__) {

        var listCacheClear = __webpack_require__(192),
            listCacheDelete = __webpack_require__(193),
            listCacheGet = __webpack_require__(194),
            listCacheHas = __webpack_require__(195),
            listCacheSet = __webpack_require__(196);

        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }

        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;

        module.exports = ListCache;


        /***/
    }),
    /* 21 */
    /***/
    (function(module, exports, __webpack_require__) {

        var root = __webpack_require__(8);

        /** Built-in value references. */
        var Symbol = root.Symbol;

        module.exports = Symbol;


        /***/
    }),
    /* 22 */
    /***/
    (function(module, exports, __webpack_require__) {

        var eq = __webpack_require__(61);

        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
                if (eq(array[length][0], key)) {
                    return length;
                }
            }
            return -1;
        }

        module.exports = assocIndexOf;


        /***/
    }),
    /* 23 */
    /***/
    (function(module, exports, __webpack_require__) {

        var isKeyable = __webpack_require__(189);

        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ?
                data[typeof key == 'string' ? 'string' : 'hash'] :
                data.map;
        }

        module.exports = getMapData;


        /***/
    }),
    /* 24 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(12);

        /* Built-in method references that are verified to be native. */
        var nativeCreate = getNative(Object, 'create');

        module.exports = nativeCreate;


        /***/
    }),
    /* 25 */
    /***/
    (function(module, exports, __webpack_require__) {

        var isSymbol = __webpack_require__(26);

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /**
         * Converts `value` to a string key if it's not a string or symbol.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {string|symbol} Returns the key.
         */
        function toKey(value) {
            if (typeof value == 'string' || isSymbol(value)) {
                return value;
            }
            var result = (value + '');
            return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        module.exports = toKey;


        /***/
    }),
    /* 26 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseGetTag = __webpack_require__(18),
            isObjectLike = __webpack_require__(19);

        /** `Object#toString` result references. */
        var symbolTag = '[object Symbol]';

        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
            return typeof value == 'symbol' ||
                (isObjectLike(value) && baseGetTag(value) == symbolTag);
        }

        module.exports = isSymbol;


        /***/
    }),
    /* 27 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return TimelineLite;
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__ = __webpack_require__(6);
        /*!
         * VERSION: 2.0.1
         * DATE: 2018-05-30
         * UPDATES AND DOCS AT: http://greensock.com
         *
         * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
         * This work is subject to the terms at http://greensock.com/standard-license or for
         * Club GreenSock members, the software agreement that was issued with your membership.
         * 
         * @author: Jack Doyle, jack@greensock.com
         */


        __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine("TimelineLite", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function() {

            var TimelineLite = function(vars) {
                    __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["c" /* SimpleTimeline */ ].call(this, vars);
                    this._labels = {};
                    this.autoRemoveChildren = (this.vars.autoRemoveChildren === true);
                    this.smoothChildTiming = (this.vars.smoothChildTiming === true);
                    this._sortChildren = true;
                    this._onUpdate = this.vars.onUpdate;
                    var v = this.vars,
                        val, p;
                    for (p in v) {
                        val = v[p];
                        if (_isArray(val))
                            if (val.join("").indexOf("{self}") !== -1) {
                                v[p] = this._swapSelfInParams(val);
                            }
                    }
                    if (_isArray(v.tweens)) {
                        this.add(v.tweens, 0, v.align, v.stagger);
                    }
                },
                _tinyNum = 0.0000000001,
                TweenLiteInternals = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ]._internals,
                _internals = TimelineLite._internals = {},
                _isSelector = TweenLiteInternals.isSelector,
                _isArray = TweenLiteInternals.isArray,
                _lazyTweens = TweenLiteInternals.lazyTweens,
                _lazyRender = TweenLiteInternals.lazyRender,
                _globals = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine.globals,
                _copy = function(vars) {
                    var copy = {},
                        p;
                    for (p in vars) {
                        copy[p] = vars[p];
                    }
                    return copy;
                },
                _applyCycle = function(vars, targets, i) {
                    var alt = vars.cycle,
                        p, val;
                    for (p in alt) {
                        val = alt[p];
                        vars[p] = (typeof(val) === "function") ? val(i, targets[i]) : val[i % val.length];
                    }
                    delete vars.cycle;
                },
                _pauseCallback = _internals.pauseCallback = function() {},
                _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                    var b = [],
                        l = a.length,
                        i;
                    for (i = 0; i !== l; b.push(a[i++]));
                    return b;
                },
                p = TimelineLite.prototype = new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["c" /* SimpleTimeline */ ]();

            TimelineLite.version = "2.0.1";
            p.constructor = TimelineLite;
            p.kill()._gc = p._forcingPlayhead = p._hasPause = false;

            /* might use later...
            //translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.
            function localToGlobal(time, animation) {
            	while (animation) {
            		time = (time / animation._timeScale) + animation._startTime;
            		animation = animation.timeline;
            	}
            	return time;
            }

            //translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales
            function globalToLocal(time, animation) {
            	var scale = 1;
            	time -= localToGlobal(0, animation);
            	while (animation) {
            		scale *= animation._timeScale;
            		animation = animation.timeline;
            	}
            	return time * scale;
            }
            */

            p.to = function(target, duration, vars, position) {
                var Engine = (vars.repeat && _globals.TweenMax) || __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ];
                return duration ? this.add(new Engine(target, duration, vars), position) : this.set(target, vars, position);
            };

            p.from = function(target, duration, vars, position) {
                return this.add(((vars.repeat && _globals.TweenMax) || __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ]).from(target, duration, vars), position);
            };

            p.fromTo = function(target, duration, fromVars, toVars, position) {
                var Engine = (toVars.repeat && _globals.TweenMax) || __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ];
                return duration ? this.add(Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);
            };

            p.staggerTo = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                var tl = new TimelineLite({
                        onComplete: onCompleteAll,
                        onCompleteParams: onCompleteAllParams,
                        callbackScope: onCompleteAllScope,
                        smoothChildTiming: this.smoothChildTiming
                    }),
                    cycle = vars.cycle,
                    copy, i;
                if (typeof(targets) === "string") {
                    targets = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].selector(targets) || targets;
                }
                targets = targets || [];
                if (_isSelector(targets)) { //senses if the targets object is a selector. If it is, we should translate it into an array.
                    targets = _slice(targets);
                }
                stagger = stagger || 0;
                if (stagger < 0) {
                    targets = _slice(targets);
                    targets.reverse();
                    stagger *= -1;
                }
                for (i = 0; i < targets.length; i++) {
                    copy = _copy(vars);
                    if (copy.startAt) {
                        copy.startAt = _copy(copy.startAt);
                        if (copy.startAt.cycle) {
                            _applyCycle(copy.startAt, targets, i);
                        }
                    }
                    if (cycle) {
                        _applyCycle(copy, targets, i);
                        if (copy.duration != null) {
                            duration = copy.duration;
                            delete copy.duration;
                        }
                    }
                    tl.to(targets[i], duration, copy, i * stagger);
                }
                return this.add(tl, position);
            };

            p.staggerFrom = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                vars.immediateRender = (vars.immediateRender != false);
                vars.runBackwards = true;
                return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
            };

            p.staggerFromTo = function(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                toVars.startAt = fromVars;
                toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
            };

            p.call = function(callback, params, scope, position) {
                return this.add(__WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].delayedCall(0, callback, params, scope), position);
            };

            p.set = function(target, vars, position) {
                position = this._parseTimeOrLabel(position, 0, true);
                if (vars.immediateRender == null) {
                    vars.immediateRender = (position === this._time && !this._paused);
                }
                return this.add(new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ](target, 0, vars), position);
            };

            TimelineLite.exportRoot = function(vars, ignoreDelayedCalls) {
                vars = vars || {};
                if (vars.smoothChildTiming == null) {
                    vars.smoothChildTiming = true;
                }
                var tl = new TimelineLite(vars),
                    root = tl._timeline,
                    hasNegativeStart, time, tween, next;
                if (ignoreDelayedCalls == null) {
                    ignoreDelayedCalls = true;
                }
                root._remove(tl, true);
                tl._startTime = 0;
                tl._rawPrevTime = tl._time = tl._totalTime = root._time;
                tween = root._first;
                while (tween) {
                    next = tween._next;
                    if (!ignoreDelayedCalls || !(tween instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ] && tween.target === tween.vars.onComplete)) {
                        time = tween._startTime - tween._delay;
                        if (time < 0) {
                            hasNegativeStart = 1;
                        }
                        tl.add(tween, time);
                    }
                    tween = next;
                }
                root.add(tl, 0);
                if (hasNegativeStart) { //calling totalDuration() will force the adjustment necessary to shift the children forward so none of them start before zero, and moves the timeline backwards the same amount, so the playhead is still aligned where it should be globally, but the timeline doesn't have illegal children that start before zero.
                    tl.totalDuration();
                }
                return tl;
            };

            p.add = function(value, position, align, stagger) {
                var curTime, l, i, child, tl, beforeRawTime;
                if (typeof(position) !== "number") {
                    position = this._parseTimeOrLabel(position, 0, true, value);
                }
                if (!(value instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ])) {
                    if ((value instanceof Array) || (value && value.push && _isArray(value))) {
                        align = align || "normal";
                        stagger = stagger || 0;
                        curTime = position;
                        l = value.length;
                        for (i = 0; i < l; i++) {
                            if (_isArray(child = value[i])) {
                                child = new TimelineLite({
                                    tweens: child
                                });
                            }
                            this.add(child, curTime);
                            if (typeof(child) !== "string" && typeof(child) !== "function") {
                                if (align === "sequence") {
                                    curTime = child._startTime + (child.totalDuration() / child._timeScale);
                                } else if (align === "start") {
                                    child._startTime -= child.delay();
                                }
                            }
                            curTime += stagger;
                        }
                        return this._uncache(true);
                    } else if (typeof(value) === "string") {
                        return this.addLabel(value, position);
                    } else if (typeof(value) === "function") {
                        value = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].delayedCall(0, value);
                    } else {
                        throw ("Cannot add " + value + " into the timeline; it is not a tween, timeline, function, or string.");
                    }
                }

                __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["c" /* SimpleTimeline */ ].prototype.add.call(this, value, position);

                if (value._time) { //in case, for example, the _startTime is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
                    value.render((this.rawTime() - value._startTime) * value._timeScale, false, false);
                }

                //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
                if (this._gc || this._time === this._duration)
                    if (!this._paused)
                        if (this._duration < this.duration()) {
                            //in case any of the ancestors had completed but should now be enabled...
                            tl = this;
                            beforeRawTime = (tl.rawTime() > value._startTime); //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.
                            while (tl._timeline) {
                                if (beforeRawTime && tl._timeline.smoothChildTiming) {
                                    tl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.
                                } else if (tl._gc) {
                                    tl._enabled(true, false);
                                }
                                tl = tl._timeline;
                            }
                        }

                return this;
            };

            p.remove = function(value) {
                if (value instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ]) {
                    this._remove(value, false);
                    var tl = value._timeline = value.vars.useFrames ? __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ]._rootFramesTimeline : __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ]._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.
                    value._startTime = (value._paused ? value._pauseTime : tl._time) - ((!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale); //ensure that if it gets played again, the timing is correct.
                    return this;
                } else if (value instanceof Array || (value && value.push && _isArray(value))) {
                    var i = value.length;
                    while (--i > -1) {
                        this.remove(value[i]);
                    }
                    return this;
                } else if (typeof(value) === "string") {
                    return this.removeLabel(value);
                }
                return this.kill(null, value);
            };

            p._remove = function(tween, skipDisable) {
                __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["c" /* SimpleTimeline */ ].prototype._remove.call(this, tween, skipDisable);
                var last = this._last;
                if (!last) {
                    this._time = this._totalTime = this._duration = this._totalDuration = 0;
                } else if (this._time > this.duration()) {
                    this._time = this._duration;
                    this._totalTime = this._totalDuration;
                }
                return this;
            };

            p.append = function(value, offsetOrLabel) {
                return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));
            };

            p.insert = p.insertMultiple = function(value, position, align, stagger) {
                return this.add(value, position || 0, align, stagger);
            };

            p.appendMultiple = function(tweens, offsetOrLabel, align, stagger) {
                return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);
            };

            p.addLabel = function(label, position) {
                this._labels[label] = this._parseTimeOrLabel(position);
                return this;
            };

            p.addPause = function(position, callback, params, scope) {
                var t = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].delayedCall(0, _pauseCallback, params, scope || this);
                t.vars.onComplete = t.vars.onReverseComplete = callback;
                t.data = "isPause";
                this._hasPause = true;
                return this.add(t, position);
            };

            p.removeLabel = function(label) {
                delete this._labels[label];
                return this;
            };

            p.getLabelTime = function(label) {
                return (this._labels[label] != null) ? this._labels[label] : -1;
            };

            p._parseTimeOrLabel = function(timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {
                var clippedDuration, i;
                //if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().
                if (ignore instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ] && ignore.timeline === this) {
                    this.remove(ignore);
                } else if (ignore && ((ignore instanceof Array) || (ignore.push && _isArray(ignore)))) {
                    i = ignore.length;
                    while (--i > -1) {
                        if (ignore[i] instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ] && ignore[i].timeline === this) {
                            this.remove(ignore[i]);
                        }
                    }
                }
                clippedDuration = (typeof(timeOrLabel) === "number" && !offsetOrLabel) ? 0 : (this.duration() > 99999999999) ? this.recent().endTime(false) : this._duration; //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
                if (typeof(offsetOrLabel) === "string") {
                    return this._parseTimeOrLabel(offsetOrLabel, (appendIfAbsent && typeof(timeOrLabel) === "number" && this._labels[offsetOrLabel] == null) ? timeOrLabel - clippedDuration : 0, appendIfAbsent);
                }
                offsetOrLabel = offsetOrLabel || 0;
                if (typeof(timeOrLabel) === "string" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) { //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
                    i = timeOrLabel.indexOf("=");
                    if (i === -1) {
                        if (this._labels[timeOrLabel] == null) {
                            return appendIfAbsent ? (this._labels[timeOrLabel] = clippedDuration + offsetOrLabel) : offsetOrLabel;
                        }
                        return this._labels[timeOrLabel] + offsetOrLabel;
                    }
                    offsetOrLabel = parseInt(timeOrLabel.charAt(i - 1) + "1", 10) * Number(timeOrLabel.substr(i + 1));
                    timeOrLabel = (i > 1) ? this._parseTimeOrLabel(timeOrLabel.substr(0, i - 1), 0, appendIfAbsent) : clippedDuration;
                } else if (timeOrLabel == null) {
                    timeOrLabel = clippedDuration;
                }
                return Number(timeOrLabel) + offsetOrLabel;
            };

            p.seek = function(position, suppressEvents) {
                return this.totalTime((typeof(position) === "number") ? position : this._parseTimeOrLabel(position), (suppressEvents !== false));
            };

            p.stop = function() {
                return this.paused(true);
            };

            p.gotoAndPlay = function(position, suppressEvents) {
                return this.play(position, suppressEvents);
            };

            p.gotoAndStop = function(position, suppressEvents) {
                return this.pause(position, suppressEvents);
            };

            p.render = function(time, suppressEvents, force) {
                if (this._gc) {
                    this._enabled(true, false);
                }
                var prevTime = this._time,
                    totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                    prevStart = this._startTime,
                    prevTimeScale = this._timeScale,
                    prevPaused = this._paused,
                    tween, isComplete, next, callback, internalForce, pauseTween, curTime;
                if (prevTime !== this._time) { //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
                    time += this._time - prevTime;
                }
                if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                    this._totalTime = this._time = totalDur;
                    if (!this._reversed)
                        if (!this._hasPausedChild()) {
                            isComplete = true;
                            callback = "onComplete";
                            internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                            if (this._duration === 0)
                                if ((time <= 0 && time >= -0.0000001) || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum)
                                    if (this._rawPrevTime !== time && this._first) {
                                        internalForce = true;
                                        if (this._rawPrevTime > _tinyNum) {
                                            callback = "onReverseComplete";
                                        }
                                    }
                        }
                    this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    time = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.

                } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                    this._totalTime = this._time = 0;
                    if (prevTime !== 0 || (this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || (time < 0 && this._rawPrevTime >= 0)))) {
                        callback = "onReverseComplete";
                        isComplete = this._reversed;
                    }
                    if (time < 0) {
                        this._active = false;
                        if (this._timeline.autoRemoveChildren && this._reversed) { //ensures proper GC if a timeline is resumed after it's finished reversing.
                            internalForce = isComplete = true;
                            callback = "onReverseComplete";
                        } else if (this._rawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
                            internalForce = true;
                        }
                        this._rawPrevTime = time;
                    } else {
                        this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                        if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
                            tween = this._first;
                            while (tween && tween._startTime === 0) {
                                if (!tween._duration) {
                                    isComplete = false;
                                }
                                tween = tween._next;
                            }
                        }
                        time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
                        if (!this._initted) {
                            internalForce = true;
                        }
                    }

                } else {

                    if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                        if (time >= prevTime) {
                            tween = this._first;
                            while (tween && tween._startTime <= time && !pauseTween) {
                                if (!tween._duration)
                                    if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                        pauseTween = tween;
                                    }
                                tween = tween._next;
                            }
                        } else {
                            tween = this._last;
                            while (tween && tween._startTime >= time && !pauseTween) {
                                if (!tween._duration)
                                    if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                        pauseTween = tween;
                                    }
                                tween = tween._prev;
                            }
                        }
                        if (pauseTween) {
                            this._time = time = pauseTween._startTime;
                            this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
                        }
                    }

                    this._totalTime = this._time = this._rawPrevTime = time;
                }
                if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                    return;
                } else if (!this._initted) {
                    this._initted = true;
                }

                if (!this._active)
                    if (!this._paused && this._time !== prevTime && time > 0) {
                        this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
                    }

                if (prevTime === 0)
                    if (this.vars.onStart)
                        if (this._time !== 0 || !this._duration)
                            if (!suppressEvents) {
                                this._callback("onStart");
                            }

                curTime = this._time;
                if (curTime >= prevTime) {
                    tween = this._first;
                    while (tween) {
                        next = tween._next; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= curTime && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                } else {
                    tween = this._last;
                    while (tween) {
                        next = tween._prev; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
                                while (pauseTween && pauseTween.endTime() > this._time) {
                                    pauseTween.render((pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
                                    pauseTween = pauseTween._prev;
                                }
                                pauseTween = null;
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                }

                if (this._onUpdate)
                    if (!suppressEvents) {
                        if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
                            _lazyRender();
                        }
                        this._callback("onUpdate");
                    }

                if (callback)
                    if (!this._gc)
                        if (prevStart === this._startTime || prevTimeScale !== this._timeScale)
                            if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
                                if (isComplete) {
                                    if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
                                        _lazyRender();
                                    }
                                    if (this._timeline.autoRemoveChildren) {
                                        this._enabled(false, false);
                                    }
                                    this._active = false;
                                }
                                if (!suppressEvents && this.vars[callback]) {
                                    this._callback(callback);
                                }
                            }
            };

            p._hasPausedChild = function() {
                var tween = this._first;
                while (tween) {
                    if (tween._paused || ((tween instanceof TimelineLite) && tween._hasPausedChild())) {
                        return true;
                    }
                    tween = tween._next;
                }
                return false;
            };

            p.getChildren = function(nested, tweens, timelines, ignoreBeforeTime) {
                ignoreBeforeTime = ignoreBeforeTime || -9999999999;
                var a = [],
                    tween = this._first,
                    cnt = 0;
                while (tween) {
                    if (tween._startTime < ignoreBeforeTime) {
                        //do nothing
                    } else if (tween instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ]) {
                        if (tweens !== false) {
                            a[cnt++] = tween;
                        }
                    } else {
                        if (timelines !== false) {
                            a[cnt++] = tween;
                        }
                        if (nested !== false) {
                            a = a.concat(tween.getChildren(true, tweens, timelines));
                            cnt = a.length;
                        }
                    }
                    tween = tween._next;
                }
                return a;
            };

            p.getTweensOf = function(target, nested) {
                var disabled = this._gc,
                    a = [],
                    cnt = 0,
                    tweens, i;
                if (disabled) {
                    this._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.
                }
                tweens = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].getTweensOf(target);
                i = tweens.length;
                while (--i > -1) {
                    if (tweens[i].timeline === this || (nested && this._contains(tweens[i]))) {
                        a[cnt++] = tweens[i];
                    }
                }
                if (disabled) {
                    this._enabled(false, true);
                }
                return a;
            };

            p.recent = function() {
                return this._recent;
            };

            p._contains = function(tween) {
                var tl = tween.timeline;
                while (tl) {
                    if (tl === this) {
                        return true;
                    }
                    tl = tl.timeline;
                }
                return false;
            };

            p.shiftChildren = function(amount, adjustLabels, ignoreBeforeTime) {
                ignoreBeforeTime = ignoreBeforeTime || 0;
                var tween = this._first,
                    labels = this._labels,
                    p;
                while (tween) {
                    if (tween._startTime >= ignoreBeforeTime) {
                        tween._startTime += amount;
                    }
                    tween = tween._next;
                }
                if (adjustLabels) {
                    for (p in labels) {
                        if (labels[p] >= ignoreBeforeTime) {
                            labels[p] += amount;
                        }
                    }
                }
                return this._uncache(true);
            };

            p._kill = function(vars, target) {
                if (!vars && !target) {
                    return this._enabled(false, false);
                }
                var tweens = (!target) ? this.getChildren(true, true, false) : this.getTweensOf(target),
                    i = tweens.length,
                    changed = false;
                while (--i > -1) {
                    if (tweens[i]._kill(vars, target)) {
                        changed = true;
                    }
                }
                return changed;
            };

            p.clear = function(labels) {
                var tweens = this.getChildren(false, true, true),
                    i = tweens.length;
                this._time = this._totalTime = 0;
                while (--i > -1) {
                    tweens[i]._enabled(false, false);
                }
                if (labels !== false) {
                    this._labels = {};
                }
                return this._uncache(true);
            };

            p.invalidate = function() {
                var tween = this._first;
                while (tween) {
                    tween.invalidate();
                    tween = tween._next;
                }
                return __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ].prototype.invalidate.call(this);;
            };

            p._enabled = function(enabled, ignoreTimeline) {
                if (enabled === this._gc) {
                    var tween = this._first;
                    while (tween) {
                        tween._enabled(enabled, true);
                        tween = tween._next;
                    }
                }
                return __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["c" /* SimpleTimeline */ ].prototype._enabled.call(this, enabled, ignoreTimeline);
            };

            p.totalTime = function(time, suppressEvents, uncapped) {
                this._forcingPlayhead = true;
                var val = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ].prototype.totalTime.apply(this, arguments);
                this._forcingPlayhead = false;
                return val;
            };

            p.duration = function(value) {
                if (!arguments.length) {
                    if (this._dirty) {
                        this.totalDuration(); //just triggers recalculation
                    }
                    return this._duration;
                }
                if (this.duration() !== 0 && value !== 0) {
                    this.timeScale(this._duration / value);
                }
                return this;
            };

            p.totalDuration = function(value) {
                if (!arguments.length) {
                    if (this._dirty) {
                        var max = 0,
                            tween = this._last,
                            prevStart = 999999999999,
                            prev, end;
                        while (tween) {
                            prev = tween._prev; //record it here in case the tween changes position in the sequence...
                            if (tween._dirty) {
                                tween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.
                            }
                            if (tween._startTime > prevStart && this._sortChildren && !tween._paused && !this._calculatingDuration) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
                                this._calculatingDuration = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add(), like _parseTimeOrLabel().
                                this.add(tween, tween._startTime - tween._delay);
                                this._calculatingDuration = 0;
                            } else {
                                prevStart = tween._startTime;
                            }
                            if (tween._startTime < 0 && !tween._paused) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
                                max -= tween._startTime;
                                if (this._timeline.smoothChildTiming) {
                                    this._startTime += tween._startTime / this._timeScale;
                                    this._time -= tween._startTime;
                                    this._totalTime -= tween._startTime;
                                    this._rawPrevTime -= tween._startTime;
                                }
                                this.shiftChildren(-tween._startTime, false, -9999999999);
                                prevStart = 0;
                            }
                            end = tween._startTime + (tween._totalDuration / tween._timeScale);
                            if (end > max) {
                                max = end;
                            }
                            tween = prev;
                        }
                        this._duration = this._totalDuration = max;
                        this._dirty = false;
                    }
                    return this._totalDuration;
                }
                return (value && this.totalDuration()) ? this.timeScale(this._totalDuration / value) : this;
            };

            p.paused = function(value) {
                if (!value) { //if there's a pause directly at the spot from where we're unpausing, skip it.
                    var tween = this._first,
                        time = this._time;
                    while (tween) {
                        if (tween._startTime === time && tween.data === "isPause") {
                            tween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.
                        }
                        tween = tween._next;
                    }
                }
                return __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ].prototype.paused.apply(this, arguments);
            };

            p.usesFrames = function() {
                var tl = this._timeline;
                while (tl._timeline) {
                    tl = tl._timeline;
                }
                return (tl === __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ]._rootFramesTimeline);
            };

            p.rawTime = function(wrapRepeats) {
                return (wrapRepeats && (this._paused || (this._repeat && this.time() > 0 && this.totalProgress() < 1))) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(wrapRepeats) - this._startTime) * this._timeScale;
            };

            return TimelineLite;

        }, true);

        const TimelineLite = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].TimelineLite;
        /* unused harmony export TimelineLite */




        /***/
    }),
    /* 28 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(12),
            root = __webpack_require__(8);

        /* Built-in method references that are verified to be native. */
        var Map = getNative(root, 'Map');

        module.exports = Map;


        /***/
    }),
    /* 29 */
    /***/
    (function(module, exports, __webpack_require__) {

        var mapCacheClear = __webpack_require__(197),
            mapCacheDelete = __webpack_require__(198),
            mapCacheGet = __webpack_require__(199),
            mapCacheHas = __webpack_require__(200),
            mapCacheSet = __webpack_require__(201);

        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }

        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;

        module.exports = MapCache;


        /***/
    }),
    /* 30 */
    /***/
    (function(module, exports, __webpack_require__) {

        var isArray = __webpack_require__(9),
            isSymbol = __webpack_require__(26);

        /** Used to match property names within property paths. */
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/;

        /**
         * Checks if `value` is a property name and not a property path.
         *
         * @private
         * @param {*} value The value to check.
         * @param {Object} [object] The object to query keys on.
         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
         */
        function isKey(value, object) {
            if (isArray(value)) {
                return false;
            }
            var type = typeof value;
            if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                value == null || isSymbol(value)) {
                return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                (object != null && value in Object(object));
        }

        module.exports = isKey;


        /***/
    }),
    /* 31 */
    /***/
    (function(module, exports) {

        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */
        function identity(value) {
            return value;
        }

        module.exports = identity;


        /***/
    }),
    /* 32 */
    /***/
    (function(module, exports) {

        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
            return typeof value == 'number' &&
                value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }

        module.exports = isLength;


        /***/
    }),
    /* 33 */
    /***/
    (function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__(14),
            isSymbol = __webpack_require__(26);

        /** Used as references for various `Number` constants. */
        var NAN = 0 / 0;

        /** Used to match leading and trailing whitespace. */
        var reTrim = /^\s+|\s+$/g;

        /** Used to detect bad signed hexadecimal string values. */
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

        /** Used to detect binary string values. */
        var reIsBinary = /^0b[01]+$/i;

        /** Used to detect octal string values. */
        var reIsOctal = /^0o[0-7]+$/i;

        /** Built-in method references without a dependency on `root`. */
        var freeParseInt = parseInt;

        /**
         * Converts `value` to a number.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         * @example
         *
         * _.toNumber(3.2);
         * // => 3.2
         *
         * _.toNumber(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toNumber(Infinity);
         * // => Infinity
         *
         * _.toNumber('3.2');
         * // => 3.2
         */
        function toNumber(value) {
            if (typeof value == 'number') {
                return value;
            }
            if (isSymbol(value)) {
                return NAN;
            }
            if (isObject(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject(other) ? (other + '') : other;
            }
            if (typeof value != 'string') {
                return value === 0 ? value : +value;
            }
            value = value.replace(reTrim, '');
            var isBinary = reIsBinary.test(value);
            return (isBinary || reIsOctal.test(value)) ?
                freeParseInt(value.slice(2), isBinary ? 2 : 8) :
                (reIsBadHex.test(value) ? NAN : +value);
        }

        module.exports = toNumber;


        /***/
    }),
    /* 34 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        var objectAssign = __webpack_require__(233);
        var Emitter = __webpack_require__(238);
        var Lethargy = __webpack_require__(137).Lethargy;
        var support = __webpack_require__(240);
        var clone = __webpack_require__(239);
        var bindAll = __webpack_require__(109);
        var EVT_ID = 'virtualscroll';

        module.exports = VirtualScroll;

        var keyCodes = {
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            SPACE: 32
        };

        function VirtualScroll(options) {
            bindAll(this, '_onWheel', '_onMouseWheel', '_onTouchStart', '_onTouchMove', '_onKeyDown');

            this.el = window;
            if (options && options.el) {
                this.el = options.el;
                delete options.el;
            }
            this.options = objectAssign({
                mouseMultiplier: 1,
                touchMultiplier: 2,
                firefoxMultiplier: 15,
                keyStep: 120,
                preventTouch: false,
                unpreventTouchClass: 'vs-touchmove-allowed',
                limitInertia: false
            }, options);

            if (this.options.limitInertia) this._lethargy = new Lethargy();

            this._emitter = new Emitter();
            this._event = {
                y: 0,
                x: 0,
                deltaX: 0,
                deltaY: 0
            };
            this.touchStartX = null;
            this.touchStartY = null;
            this.bodyTouchAction = null;

            if (this.options.passive !== undefined) {
                this.listenerOptions = {
                    passive: this.options.passive
                };
            }
        }

        VirtualScroll.prototype._notify = function(e) {
            var evt = this._event;
            evt.x += evt.deltaX;
            evt.y += evt.deltaY;

            this._emitter.emit(EVT_ID, {
                x: evt.x,
                y: evt.y,
                deltaX: evt.deltaX,
                deltaY: evt.deltaY,
                originalEvent: e
            });
        };

        VirtualScroll.prototype._onWheel = function(e) {
            var options = this.options;
            if (this._lethargy && this._lethargy.check(e) === false) return;
            var evt = this._event;

            // In Chrome and in Firefox (at least the new one)
            evt.deltaX = e.wheelDeltaX || e.deltaX * -1;
            evt.deltaY = e.wheelDeltaY || e.deltaY * -1;

            // for our purpose deltamode = 1 means user is on a wheel mouse, not touch pad
            // real meaning: https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent#Delta_modes
            if (support.isFirefox && e.deltaMode == 1) {
                evt.deltaX *= options.firefoxMultiplier;
                evt.deltaY *= options.firefoxMultiplier;
            }

            evt.deltaX *= options.mouseMultiplier;
            evt.deltaY *= options.mouseMultiplier;

            this._notify(e);
        };

        VirtualScroll.prototype._onMouseWheel = function(e) {
            if (this.options.limitInertia && this._lethargy.check(e) === false) return;

            var evt = this._event;

            // In Safari, IE and in Chrome if 'wheel' isn't defined
            evt.deltaX = (e.wheelDeltaX) ? e.wheelDeltaX : 0;
            evt.deltaY = (e.wheelDeltaY) ? e.wheelDeltaY : e.wheelDelta;

            this._notify(e);
        };

        VirtualScroll.prototype._onTouchStart = function(e) {
            var t = (e.targetTouches) ? e.targetTouches[0] : e;
            this.touchStartX = t.pageX;
            this.touchStartY = t.pageY;
        };

        VirtualScroll.prototype._onTouchMove = function(e) {
            var options = this.options;
            if (options.preventTouch &&
                !e.target.classList.contains(options.unpreventTouchClass)) {
                e.preventDefault();
            }

            var evt = this._event;

            var t = (e.targetTouches) ? e.targetTouches[0] : e;

            evt.deltaX = (t.pageX - this.touchStartX) * options.touchMultiplier;
            evt.deltaY = (t.pageY - this.touchStartY) * options.touchMultiplier;

            this.touchStartX = t.pageX;
            this.touchStartY = t.pageY;

            this._notify(e);
        };

        VirtualScroll.prototype._onKeyDown = function(e) {
            var evt = this._event;
            evt.deltaX = evt.deltaY = 0;
            var windowHeight = window.innerHeight - 40

            switch (e.keyCode) {
                case keyCodes.LEFT:
                case keyCodes.UP:
                    evt.deltaY = this.options.keyStep;
                    break;

                case keyCodes.RIGHT:
                case keyCodes.DOWN:
                    evt.deltaY = -this.options.keyStep;
                    break;
                case keyCodes.SPACE && e.shiftKey:
                    evt.deltaY = windowHeight;
                    break;
                case keyCodes.SPACE:
                    evt.deltaY = -windowHeight;
                    break;
                default:
                    return;
            }

            this._notify(e);
        };

        VirtualScroll.prototype._bind = function() {
            if (support.hasWheelEvent) this.el.addEventListener('wheel', this._onWheel, this.listenerOptions);
            if (support.hasMouseWheelEvent) this.el.addEventListener('mousewheel', this._onMouseWheel, this.listenerOptions);

            if (support.hasTouch) {
                this.el.addEventListener('touchstart', this._onTouchStart, this.listenerOptions);
                this.el.addEventListener('touchmove', this._onTouchMove, this.listenerOptions);
            }

            if (support.hasPointer && support.hasTouchWin) {
                this.bodyTouchAction = document.body.style.msTouchAction;
                document.body.style.msTouchAction = 'none';
                this.el.addEventListener('MSPointerDown', this._onTouchStart, true);
                this.el.addEventListener('MSPointerMove', this._onTouchMove, true);
            }

            if (support.hasKeyDown) document.addEventListener('keydown', this._onKeyDown);
        };

        VirtualScroll.prototype._unbind = function() {
            if (support.hasWheelEvent) this.el.removeEventListener('wheel', this._onWheel);
            if (support.hasMouseWheelEvent) this.el.removeEventListener('mousewheel', this._onMouseWheel);

            if (support.hasTouch) {
                this.el.removeEventListener('touchstart', this._onTouchStart);
                this.el.removeEventListener('touchmove', this._onTouchMove);
            }

            if (support.hasPointer && support.hasTouchWin) {
                document.body.style.msTouchAction = this.bodyTouchAction;
                this.el.removeEventListener('MSPointerDown', this._onTouchStart, true);
                this.el.removeEventListener('MSPointerMove', this._onTouchMove, true);
            }

            if (support.hasKeyDown) document.removeEventListener('keydown', this._onKeyDown);
        };

        VirtualScroll.prototype.on = function(cb, ctx) {
            this._emitter.on(EVT_ID, cb, ctx);

            var events = this._emitter.e;
            if (events && events[EVT_ID] && events[EVT_ID].length === 1) this._bind();
        };

        VirtualScroll.prototype.off = function(cb, ctx) {
            this._emitter.off(EVT_ID, cb, ctx);

            var events = this._emitter.e;
            if (!events[EVT_ID] || events[EVT_ID].length <= 0) this._unbind();
        };

        VirtualScroll.prototype.reset = function() {
            var evt = this._event;
            evt.x = 0;
            evt.y = 0;
        };

        VirtualScroll.prototype.destroy = function() {
            this._emitter.off();
            this._unbind();
        };


        /***/
    }),
    /* 35 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(298)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(92),
            /* template */
            __webpack_require__(275),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 36 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */
        (function(global, setImmediate) {
            /*!
             * Vue.js v2.5.16
             * (c) 2014-2018 Evan You
             * Released under the MIT License.
             */


            /*  */

            var emptyObject = Object.freeze({});

            // these helpers produces better vm code in JS engines due to their
            // explicitness and function inlining
            function isUndef(v) {
                return v === undefined || v === null
            }

            function isDef(v) {
                return v !== undefined && v !== null
            }

            function isTrue(v) {
                return v === true
            }

            function isFalse(v) {
                return v === false
            }

            /**
             * Check if value is primitive
             */
            function isPrimitive(value) {
                return (
                    typeof value === 'string' ||
                    typeof value === 'number' ||
                    // $flow-disable-line
                    typeof value === 'symbol' ||
                    typeof value === 'boolean'
                )
            }

            /**
             * Quick object check - this is primarily used to tell
             * Objects from primitive values when we know the value
             * is a JSON-compliant type.
             */
            function isObject(obj) {
                return obj !== null && typeof obj === 'object'
            }

            /**
             * Get the raw type string of a value e.g. [object Object]
             */
            var _toString = Object.prototype.toString;

            function toRawType(value) {
                return _toString.call(value).slice(8, -1)
            }

            /**
             * Strict object type check. Only returns true
             * for plain JavaScript objects.
             */
            function isPlainObject(obj) {
                return _toString.call(obj) === '[object Object]'
            }

            function isRegExp(v) {
                return _toString.call(v) === '[object RegExp]'
            }

            /**
             * Check if val is a valid array index.
             */
            function isValidArrayIndex(val) {
                var n = parseFloat(String(val));
                return n >= 0 && Math.floor(n) === n && isFinite(val)
            }

            /**
             * Convert a value to a string that is actually rendered.
             */
            function toString(val) {
                return val == null ?
                    '' :
                    typeof val === 'object' ?
                    JSON.stringify(val, null, 2) :
                    String(val)
            }

            /**
             * Convert a input value to a number for persistence.
             * If the conversion fails, return original string.
             */
            function toNumber(val) {
                var n = parseFloat(val);
                return isNaN(n) ? val : n
            }

            /**
             * Make a map and return a function for checking if a key
             * is in that map.
             */
            function makeMap(
                str,
                expectsLowerCase
            ) {
                var map = Object.create(null);
                var list = str.split(',');
                for (var i = 0; i < list.length; i++) {
                    map[list[i]] = true;
                }
                return expectsLowerCase ?
                    function(val) {
                        return map[val.toLowerCase()];
                    } :
                    function(val) {
                        return map[val];
                    }
            }

            /**
             * Check if a tag is a built-in tag.
             */
            var isBuiltInTag = makeMap('slot,component', true);

            /**
             * Check if a attribute is a reserved attribute.
             */
            var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

            /**
             * Remove an item from an array
             */
            function remove(arr, item) {
                if (arr.length) {
                    var index = arr.indexOf(item);
                    if (index > -1) {
                        return arr.splice(index, 1)
                    }
                }
            }

            /**
             * Check whether the object has the property.
             */
            var hasOwnProperty = Object.prototype.hasOwnProperty;

            function hasOwn(obj, key) {
                return hasOwnProperty.call(obj, key)
            }

            /**
             * Create a cached version of a pure function.
             */
            function cached(fn) {
                var cache = Object.create(null);
                return (function cachedFn(str) {
                    var hit = cache[str];
                    return hit || (cache[str] = fn(str))
                })
            }

            /**
             * Camelize a hyphen-delimited string.
             */
            var camelizeRE = /-(\w)/g;
            var camelize = cached(function(str) {
                return str.replace(camelizeRE, function(_, c) {
                    return c ? c.toUpperCase() : '';
                })
            });

            /**
             * Capitalize a string.
             */
            var capitalize = cached(function(str) {
                return str.charAt(0).toUpperCase() + str.slice(1)
            });

            /**
             * Hyphenate a camelCase string.
             */
            var hyphenateRE = /\B([A-Z])/g;
            var hyphenate = cached(function(str) {
                return str.replace(hyphenateRE, '-$1').toLowerCase()
            });

            /**
             * Simple bind polyfill for environments that do not support it... e.g.
             * PhantomJS 1.x. Technically we don't need this anymore since native bind is
             * now more performant in most browsers, but removing it would be breaking for
             * code that was able to run in PhantomJS 1.x, so this must be kept for
             * backwards compatibility.
             */

            /* istanbul ignore next */
            function polyfillBind(fn, ctx) {
                function boundFn(a) {
                    var l = arguments.length;
                    return l ?
                        l > 1 ?
                        fn.apply(ctx, arguments) :
                        fn.call(ctx, a) :
                        fn.call(ctx)
                }

                boundFn._length = fn.length;
                return boundFn
            }

            function nativeBind(fn, ctx) {
                return fn.bind(ctx)
            }

            var bind = Function.prototype.bind ?
                nativeBind :
                polyfillBind;

            /**
             * Convert an Array-like object to a real Array.
             */
            function toArray(list, start) {
                start = start || 0;
                var i = list.length - start;
                var ret = new Array(i);
                while (i--) {
                    ret[i] = list[i + start];
                }
                return ret
            }

            /**
             * Mix properties into target object.
             */
            function extend(to, _from) {
                for (var key in _from) {
                    to[key] = _from[key];
                }
                return to
            }

            /**
             * Merge an Array of Objects into a single Object.
             */
            function toObject(arr) {
                var res = {};
                for (var i = 0; i < arr.length; i++) {
                    if (arr[i]) {
                        extend(res, arr[i]);
                    }
                }
                return res
            }

            /**
             * Perform no operation.
             * Stubbing args to make Flow happy without leaving useless transpiled code
             * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
             */
            function noop(a, b, c) {}

            /**
             * Always return false.
             */
            var no = function(a, b, c) {
                return false;
            };

            /**
             * Return same value
             */
            var identity = function(_) {
                return _;
            };

            /**
             * Generate a static keys string from compiler modules.
             */
            function genStaticKeys(modules) {
                return modules.reduce(function(keys, m) {
                    return keys.concat(m.staticKeys || [])
                }, []).join(',')
            }

            /**
             * Check if two values are loosely equal - that is,
             * if they are plain objects, do they have the same shape?
             */
            function looseEqual(a, b) {
                if (a === b) {
                    return true
                }
                var isObjectA = isObject(a);
                var isObjectB = isObject(b);
                if (isObjectA && isObjectB) {
                    try {
                        var isArrayA = Array.isArray(a);
                        var isArrayB = Array.isArray(b);
                        if (isArrayA && isArrayB) {
                            return a.length === b.length && a.every(function(e, i) {
                                return looseEqual(e, b[i])
                            })
                        } else if (!isArrayA && !isArrayB) {
                            var keysA = Object.keys(a);
                            var keysB = Object.keys(b);
                            return keysA.length === keysB.length && keysA.every(function(key) {
                                return looseEqual(a[key], b[key])
                            })
                        } else {
                            /* istanbul ignore next */
                            return false
                        }
                    } catch (e) {
                        /* istanbul ignore next */
                        return false
                    }
                } else if (!isObjectA && !isObjectB) {
                    return String(a) === String(b)
                } else {
                    return false
                }
            }

            function looseIndexOf(arr, val) {
                for (var i = 0; i < arr.length; i++) {
                    if (looseEqual(arr[i], val)) {
                        return i
                    }
                }
                return -1
            }

            /**
             * Ensure a function is called only once.
             */
            function once(fn) {
                var called = false;
                return function() {
                    if (!called) {
                        called = true;
                        fn.apply(this, arguments);
                    }
                }
            }

            var SSR_ATTR = 'data-server-rendered';

            var ASSET_TYPES = [
                'component',
                'directive',
                'filter'
            ];

            var LIFECYCLE_HOOKS = [
                'beforeCreate',
                'created',
                'beforeMount',
                'mounted',
                'beforeUpdate',
                'updated',
                'beforeDestroy',
                'destroyed',
                'activated',
                'deactivated',
                'errorCaptured'
            ];

            /*  */

            var config = ({
                /**
                 * Option merge strategies (used in core/util/options)
                 */
                // $flow-disable-line
                optionMergeStrategies: Object.create(null),

                /**
                 * Whether to suppress warnings.
                 */
                silent: false,

                /**
                 * Show production mode tip message on boot?
                 */
                productionTip: "production" !== 'production',

                /**
                 * Whether to enable devtools
                 */
                devtools: "production" !== 'production',

                /**
                 * Whether to record perf
                 */
                performance: false,

                /**
                 * Error handler for watcher errors
                 */
                errorHandler: null,

                /**
                 * Warn handler for watcher warns
                 */
                warnHandler: null,

                /**
                 * Ignore certain custom elements
                 */
                ignoredElements: [],

                /**
                 * Custom user key aliases for v-on
                 */
                // $flow-disable-line
                keyCodes: Object.create(null),

                /**
                 * Check if a tag is reserved so that it cannot be registered as a
                 * component. This is platform-dependent and may be overwritten.
                 */
                isReservedTag: no,

                /**
                 * Check if an attribute is reserved so that it cannot be used as a component
                 * prop. This is platform-dependent and may be overwritten.
                 */
                isReservedAttr: no,

                /**
                 * Check if a tag is an unknown element.
                 * Platform-dependent.
                 */
                isUnknownElement: no,

                /**
                 * Get the namespace of an element
                 */
                getTagNamespace: noop,

                /**
                 * Parse the real tag name for the specific platform.
                 */
                parsePlatformTagName: identity,

                /**
                 * Check if an attribute must be bound using property, e.g. value
                 * Platform-dependent.
                 */
                mustUseProp: no,

                /**
                 * Exposed for legacy reasons
                 */
                _lifecycleHooks: LIFECYCLE_HOOKS
            })

            /*  */

            /**
             * Check if a string starts with $ or _
             */
            function isReserved(str) {
                var c = (str + '').charCodeAt(0);
                return c === 0x24 || c === 0x5F
            }

            /**
             * Define a property.
             */
            function def(obj, key, val, enumerable) {
                Object.defineProperty(obj, key, {
                    value: val,
                    enumerable: !!enumerable,
                    writable: true,
                    configurable: true
                });
            }

            /**
             * Parse simple path.
             */
            var bailRE = /[^\w.$]/;

            function parsePath(path) {
                if (bailRE.test(path)) {
                    return
                }
                var segments = path.split('.');
                return function(obj) {
                    for (var i = 0; i < segments.length; i++) {
                        if (!obj) {
                            return
                        }
                        obj = obj[segments[i]];
                    }
                    return obj
                }
            }

            /*  */

            // can we use __proto__?
            var hasProto = '__proto__' in {};

            // Browser environment sniffing
            var inBrowser = typeof window !== 'undefined';
            var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
            var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
            var UA = inBrowser && window.navigator.userAgent.toLowerCase();
            var isIE = UA && /msie|trident/.test(UA);
            var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
            var isEdge = UA && UA.indexOf('edge/') > 0;
            var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
            var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
            var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

            // Firefox has a "watch" function on Object.prototype...
            var nativeWatch = ({}).watch;

            var supportsPassive = false;
            if (inBrowser) {
                try {
                    var opts = {};
                    Object.defineProperty(opts, 'passive', ({
                        get: function get() {
                            /* istanbul ignore next */
                            supportsPassive = true;
                        }
                    })); // https://github.com/facebook/flow/issues/285
                    window.addEventListener('test-passive', null, opts);
                } catch (e) {}
            }

            // this needs to be lazy-evaled because vue may be required before
            // vue-server-renderer can set VUE_ENV
            var _isServer;
            var isServerRendering = function() {
                if (_isServer === undefined) {
                    /* istanbul ignore if */
                    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
                        // detect presence of vue-server-renderer and avoid
                        // Webpack shimming the process
                        _isServer = global['process'].env.VUE_ENV === 'server';
                    } else {
                        _isServer = false;
                    }
                }
                return _isServer
            };

            // detect devtools
            var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

            /* istanbul ignore next */
            function isNative(Ctor) {
                return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
            }

            var hasSymbol =
                typeof Symbol !== 'undefined' && isNative(Symbol) &&
                typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

            var _Set;
            /* istanbul ignore if */ // $flow-disable-line
            if (typeof Set !== 'undefined' && isNative(Set)) {
                // use native Set when available.
                _Set = Set;
            } else {
                // a non-standard Set polyfill that only works with primitive keys.
                _Set = (function() {
                    function Set() {
                        this.set = Object.create(null);
                    }
                    Set.prototype.has = function has(key) {
                        return this.set[key] === true
                    };
                    Set.prototype.add = function add(key) {
                        this.set[key] = true;
                    };
                    Set.prototype.clear = function clear() {
                        this.set = Object.create(null);
                    };

                    return Set;
                }());
            }

            /*  */

            var warn = noop;
            var tip = noop;
            var generateComponentTrace = (noop); // work around flow check
            var formatComponentName = (noop);

            if (false) {
                var hasConsole = typeof console !== 'undefined';
                var classifyRE = /(?:^|[-_])(\w)/g;
                var classify = function(str) {
                    return str
                        .replace(classifyRE, function(c) {
                            return c.toUpperCase();
                        })
                        .replace(/[-_]/g, '');
                };

                warn = function(msg, vm) {
                    var trace = vm ? generateComponentTrace(vm) : '';

                    if (config.warnHandler) {
                        config.warnHandler.call(null, msg, vm, trace);
                    } else if (hasConsole && (!config.silent)) {
                        console.error(("[Vue warn]: " + msg + trace));
                    }
                };

                tip = function(msg, vm) {
                    if (hasConsole && (!config.silent)) {
                        console.warn("[Vue tip]: " + msg + (
                            vm ? generateComponentTrace(vm) : ''
                        ));
                    }
                };

                formatComponentName = function(vm, includeFile) {
                    if (vm.$root === vm) {
                        return '<Root>'
                    }
                    var options = typeof vm === 'function' && vm.cid != null ?
                        vm.options :
                        vm._isVue ?
                        vm.$options || vm.constructor.options :
                        vm || {};
                    var name = options.name || options._componentTag;
                    var file = options.__file;
                    if (!name && file) {
                        var match = file.match(/([^/\\]+)\.vue$/);
                        name = match && match[1];
                    }

                    return (
                        (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
                        (file && includeFile !== false ? (" at " + file) : '')
                    )
                };

                var repeat = function(str, n) {
                    var res = '';
                    while (n) {
                        if (n % 2 === 1) {
                            res += str;
                        }
                        if (n > 1) {
                            str += str;
                        }
                        n >>= 1;
                    }
                    return res
                };

                generateComponentTrace = function(vm) {
                    if (vm._isVue && vm.$parent) {
                        var tree = [];
                        var currentRecursiveSequence = 0;
                        while (vm) {
                            if (tree.length > 0) {
                                var last = tree[tree.length - 1];
                                if (last.constructor === vm.constructor) {
                                    currentRecursiveSequence++;
                                    vm = vm.$parent;
                                    continue
                                } else if (currentRecursiveSequence > 0) {
                                    tree[tree.length - 1] = [last, currentRecursiveSequence];
                                    currentRecursiveSequence = 0;
                                }
                            }
                            tree.push(vm);
                            vm = vm.$parent;
                        }
                        return '\n\nfound in\n\n' + tree
                            .map(function(vm, i) {
                                return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ?
                                    ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)") :
                                    formatComponentName(vm)));
                            })
                            .join('\n')
                    } else {
                        return ("\n\n(found in " + (formatComponentName(vm)) + ")")
                    }
                };
            }

            /*  */


            var uid = 0;

            /**
             * A dep is an observable that can have multiple
             * directives subscribing to it.
             */
            var Dep = function Dep() {
                this.id = uid++;
                this.subs = [];
            };

            Dep.prototype.addSub = function addSub(sub) {
                this.subs.push(sub);
            };

            Dep.prototype.removeSub = function removeSub(sub) {
                remove(this.subs, sub);
            };

            Dep.prototype.depend = function depend() {
                if (Dep.target) {
                    Dep.target.addDep(this);
                }
            };

            Dep.prototype.notify = function notify() {
                // stabilize the subscriber list first
                var subs = this.subs.slice();
                for (var i = 0, l = subs.length; i < l; i++) {
                    subs[i].update();
                }
            };

            // the current target watcher being evaluated.
            // this is globally unique because there could be only one
            // watcher being evaluated at any time.
            Dep.target = null;
            var targetStack = [];

            function pushTarget(_target) {
                if (Dep.target) {
                    targetStack.push(Dep.target);
                }
                Dep.target = _target;
            }

            function popTarget() {
                Dep.target = targetStack.pop();
            }

            /*  */

            var VNode = function VNode(
                tag,
                data,
                children,
                text,
                elm,
                context,
                componentOptions,
                asyncFactory
            ) {
                this.tag = tag;
                this.data = data;
                this.children = children;
                this.text = text;
                this.elm = elm;
                this.ns = undefined;
                this.context = context;
                this.fnContext = undefined;
                this.fnOptions = undefined;
                this.fnScopeId = undefined;
                this.key = data && data.key;
                this.componentOptions = componentOptions;
                this.componentInstance = undefined;
                this.parent = undefined;
                this.raw = false;
                this.isStatic = false;
                this.isRootInsert = true;
                this.isComment = false;
                this.isCloned = false;
                this.isOnce = false;
                this.asyncFactory = asyncFactory;
                this.asyncMeta = undefined;
                this.isAsyncPlaceholder = false;
            };

            var prototypeAccessors = {
                child: {
                    configurable: true
                }
            };

            // DEPRECATED: alias for componentInstance for backwards compat.
            /* istanbul ignore next */
            prototypeAccessors.child.get = function() {
                return this.componentInstance
            };

            Object.defineProperties(VNode.prototype, prototypeAccessors);

            var createEmptyVNode = function(text) {
                if (text === void 0) text = '';

                var node = new VNode();
                node.text = text;
                node.isComment = true;
                return node
            };

            function createTextVNode(val) {
                return new VNode(undefined, undefined, undefined, String(val))
            }

            // optimized shallow clone
            // used for static nodes and slot nodes because they may be reused across
            // multiple renders, cloning them avoids errors when DOM manipulations rely
            // on their elm reference.
            function cloneVNode(vnode) {
                var cloned = new VNode(
                    vnode.tag,
                    vnode.data,
                    vnode.children,
                    vnode.text,
                    vnode.elm,
                    vnode.context,
                    vnode.componentOptions,
                    vnode.asyncFactory
                );
                cloned.ns = vnode.ns;
                cloned.isStatic = vnode.isStatic;
                cloned.key = vnode.key;
                cloned.isComment = vnode.isComment;
                cloned.fnContext = vnode.fnContext;
                cloned.fnOptions = vnode.fnOptions;
                cloned.fnScopeId = vnode.fnScopeId;
                cloned.isCloned = true;
                return cloned
            }

            /*
             * not type checking this file because flow doesn't play well with
             * dynamically accessing methods on Array prototype
             */

            var arrayProto = Array.prototype;
            var arrayMethods = Object.create(arrayProto);

            var methodsToPatch = [
                'push',
                'pop',
                'shift',
                'unshift',
                'splice',
                'sort',
                'reverse'
            ];

            /**
             * Intercept mutating methods and emit events
             */
            methodsToPatch.forEach(function(method) {
                // cache original method
                var original = arrayProto[method];
                def(arrayMethods, method, function mutator() {
                    var args = [],
                        len = arguments.length;
                    while (len--) args[len] = arguments[len];

                    var result = original.apply(this, args);
                    var ob = this.__ob__;
                    var inserted;
                    switch (method) {
                        case 'push':
                        case 'unshift':
                            inserted = args;
                            break
                        case 'splice':
                            inserted = args.slice(2);
                            break
                    }
                    if (inserted) {
                        ob.observeArray(inserted);
                    }
                    // notify change
                    ob.dep.notify();
                    return result
                });
            });

            /*  */

            var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

            /**
             * In some cases we may want to disable observation inside a component's
             * update computation.
             */
            var shouldObserve = true;

            function toggleObserving(value) {
                shouldObserve = value;
            }

            /**
             * Observer class that is attached to each observed
             * object. Once attached, the observer converts the target
             * object's property keys into getter/setters that
             * collect dependencies and dispatch updates.
             */
            var Observer = function Observer(value) {
                this.value = value;
                this.dep = new Dep();
                this.vmCount = 0;
                def(value, '__ob__', this);
                if (Array.isArray(value)) {
                    var augment = hasProto ?
                        protoAugment :
                        copyAugment;
                    augment(value, arrayMethods, arrayKeys);
                    this.observeArray(value);
                } else {
                    this.walk(value);
                }
            };

            /**
             * Walk through each property and convert them into
             * getter/setters. This method should only be called when
             * value type is Object.
             */
            Observer.prototype.walk = function walk(obj) {
                var keys = Object.keys(obj);
                for (var i = 0; i < keys.length; i++) {
                    defineReactive(obj, keys[i]);
                }
            };

            /**
             * Observe a list of Array items.
             */
            Observer.prototype.observeArray = function observeArray(items) {
                for (var i = 0, l = items.length; i < l; i++) {
                    observe(items[i]);
                }
            };

            // helpers

            /**
             * Augment an target Object or Array by intercepting
             * the prototype chain using __proto__
             */
            function protoAugment(target, src, keys) {
                /* eslint-disable no-proto */
                target.__proto__ = src;
                /* eslint-enable no-proto */
            }

            /**
             * Augment an target Object or Array by defining
             * hidden properties.
             */
            /* istanbul ignore next */
            function copyAugment(target, src, keys) {
                for (var i = 0, l = keys.length; i < l; i++) {
                    var key = keys[i];
                    def(target, key, src[key]);
                }
            }

            /**
             * Attempt to create an observer instance for a value,
             * returns the new observer if successfully observed,
             * or the existing observer if the value already has one.
             */
            function observe(value, asRootData) {
                if (!isObject(value) || value instanceof VNode) {
                    return
                }
                var ob;
                if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
                    ob = value.__ob__;
                } else if (
                    shouldObserve &&
                    !isServerRendering() &&
                    (Array.isArray(value) || isPlainObject(value)) &&
                    Object.isExtensible(value) &&
                    !value._isVue
                ) {
                    ob = new Observer(value);
                }
                if (asRootData && ob) {
                    ob.vmCount++;
                }
                return ob
            }

            /**
             * Define a reactive property on an Object.
             */
            function defineReactive(
                obj,
                key,
                val,
                customSetter,
                shallow
            ) {
                var dep = new Dep();

                var property = Object.getOwnPropertyDescriptor(obj, key);
                if (property && property.configurable === false) {
                    return
                }

                // cater for pre-defined getter/setters
                var getter = property && property.get;
                if (!getter && arguments.length === 2) {
                    val = obj[key];
                }
                var setter = property && property.set;

                var childOb = !shallow && observe(val);
                Object.defineProperty(obj, key, {
                    enumerable: true,
                    configurable: true,
                    get: function reactiveGetter() {
                        var value = getter ? getter.call(obj) : val;
                        if (Dep.target) {
                            dep.depend();
                            if (childOb) {
                                childOb.dep.depend();
                                if (Array.isArray(value)) {
                                    dependArray(value);
                                }
                            }
                        }
                        return value
                    },
                    set: function reactiveSetter(newVal) {
                        var value = getter ? getter.call(obj) : val;
                        /* eslint-disable no-self-compare */
                        if (newVal === value || (newVal !== newVal && value !== value)) {
                            return
                        }
                        /* eslint-enable no-self-compare */
                        if (false) {
                            customSetter();
                        }
                        if (setter) {
                            setter.call(obj, newVal);
                        } else {
                            val = newVal;
                        }
                        childOb = !shallow && observe(newVal);
                        dep.notify();
                    }
                });
            }

            /**
             * Set a property on an object. Adds the new property and
             * triggers change notification if the property doesn't
             * already exist.
             */
            function set(target, key, val) {
                if (false) {
                    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
                }
                if (Array.isArray(target) && isValidArrayIndex(key)) {
                    target.length = Math.max(target.length, key);
                    target.splice(key, 1, val);
                    return val
                }
                if (key in target && !(key in Object.prototype)) {
                    target[key] = val;
                    return val
                }
                var ob = (target).__ob__;
                if (target._isVue || (ob && ob.vmCount)) {
                    "production" !== 'production' && warn(
                        'Avoid adding reactive properties to a Vue instance or its root $data ' +
                        'at runtime - declare it upfront in the data option.'
                    );
                    return val
                }
                if (!ob) {
                    target[key] = val;
                    return val
                }
                defineReactive(ob.value, key, val);
                ob.dep.notify();
                return val
            }

            /**
             * Delete a property and trigger change if necessary.
             */
            function del(target, key) {
                if (false) {
                    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
                }
                if (Array.isArray(target) && isValidArrayIndex(key)) {
                    target.splice(key, 1);
                    return
                }
                var ob = (target).__ob__;
                if (target._isVue || (ob && ob.vmCount)) {
                    "production" !== 'production' && warn(
                        'Avoid deleting properties on a Vue instance or its root $data ' +
                        '- just set it to null.'
                    );
                    return
                }
                if (!hasOwn(target, key)) {
                    return
                }
                delete target[key];
                if (!ob) {
                    return
                }
                ob.dep.notify();
            }

            /**
             * Collect dependencies on array elements when the array is touched, since
             * we cannot intercept array element access like property getters.
             */
            function dependArray(value) {
                for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
                    e = value[i];
                    e && e.__ob__ && e.__ob__.dep.depend();
                    if (Array.isArray(e)) {
                        dependArray(e);
                    }
                }
            }

            /*  */

            /**
             * Option overwriting strategies are functions that handle
             * how to merge a parent option value and a child option
             * value into the final value.
             */
            var strats = config.optionMergeStrategies;

            /**
             * Options with restrictions
             */
            if (false) {
                strats.el = strats.propsData = function(parent, child, vm, key) {
                    if (!vm) {
                        warn(
                            "option \"" + key + "\" can only be used during instance " +
                            'creation with the `new` keyword.'
                        );
                    }
                    return defaultStrat(parent, child)
                };
            }

            /**
             * Helper that recursively merges two data objects together.
             */
            function mergeData(to, from) {
                if (!from) {
                    return to
                }
                var key, toVal, fromVal;
                var keys = Object.keys(from);
                for (var i = 0; i < keys.length; i++) {
                    key = keys[i];
                    toVal = to[key];
                    fromVal = from[key];
                    if (!hasOwn(to, key)) {
                        set(to, key, fromVal);
                    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
                        mergeData(toVal, fromVal);
                    }
                }
                return to
            }

            /**
             * Data
             */
            function mergeDataOrFn(
                parentVal,
                childVal,
                vm
            ) {
                if (!vm) {
                    // in a Vue.extend merge, both should be functions
                    if (!childVal) {
                        return parentVal
                    }
                    if (!parentVal) {
                        return childVal
                    }
                    // when parentVal & childVal are both present,
                    // we need to return a function that returns the
                    // merged result of both functions... no need to
                    // check if parentVal is a function here because
                    // it has to be a function to pass previous merges.
                    return function mergedDataFn() {
                        return mergeData(
                            typeof childVal === 'function' ? childVal.call(this, this) : childVal,
                            typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
                        )
                    }
                } else {
                    return function mergedInstanceDataFn() {
                        // instance merge
                        var instanceData = typeof childVal === 'function' ?
                            childVal.call(vm, vm) :
                            childVal;
                        var defaultData = typeof parentVal === 'function' ?
                            parentVal.call(vm, vm) :
                            parentVal;
                        if (instanceData) {
                            return mergeData(instanceData, defaultData)
                        } else {
                            return defaultData
                        }
                    }
                }
            }

            strats.data = function(
                parentVal,
                childVal,
                vm
            ) {
                if (!vm) {
                    if (childVal && typeof childVal !== 'function') {
                        "production" !== 'production' && warn(
                            'The "data" option should be a function ' +
                            'that returns a per-instance value in component ' +
                            'definitions.',
                            vm
                        );

                        return parentVal
                    }
                    return mergeDataOrFn(parentVal, childVal)
                }

                return mergeDataOrFn(parentVal, childVal, vm)
            };

            /**
             * Hooks and props are merged as arrays.
             */
            function mergeHook(
                parentVal,
                childVal
            ) {
                return childVal ?
                    parentVal ?
                    parentVal.concat(childVal) :
                    Array.isArray(childVal) ?
                    childVal :
                    [childVal] :
                    parentVal
            }

            LIFECYCLE_HOOKS.forEach(function(hook) {
                strats[hook] = mergeHook;
            });

            /**
             * Assets
             *
             * When a vm is present (instance creation), we need to do
             * a three-way merge between constructor options, instance
             * options and parent options.
             */
            function mergeAssets(
                parentVal,
                childVal,
                vm,
                key
            ) {
                var res = Object.create(parentVal || null);
                if (childVal) {
                    "production" !== 'production' && assertObjectType(key, childVal, vm);
                    return extend(res, childVal)
                } else {
                    return res
                }
            }

            ASSET_TYPES.forEach(function(type) {
                strats[type + 's'] = mergeAssets;
            });

            /**
             * Watchers.
             *
             * Watchers hashes should not overwrite one
             * another, so we merge them as arrays.
             */
            strats.watch = function(
                parentVal,
                childVal,
                vm,
                key
            ) {
                // work around Firefox's Object.prototype.watch...
                if (parentVal === nativeWatch) {
                    parentVal = undefined;
                }
                if (childVal === nativeWatch) {
                    childVal = undefined;
                }
                /* istanbul ignore if */
                if (!childVal) {
                    return Object.create(parentVal || null)
                }
                if (false) {
                    assertObjectType(key, childVal, vm);
                }
                if (!parentVal) {
                    return childVal
                }
                var ret = {};
                extend(ret, parentVal);
                for (var key$1 in childVal) {
                    var parent = ret[key$1];
                    var child = childVal[key$1];
                    if (parent && !Array.isArray(parent)) {
                        parent = [parent];
                    }
                    ret[key$1] = parent ?
                        parent.concat(child) :
                        Array.isArray(child) ? child : [child];
                }
                return ret
            };

            /**
             * Other object hashes.
             */
            strats.props =
                strats.methods =
                strats.inject =
                strats.computed = function(
                    parentVal,
                    childVal,
                    vm,
                    key
                ) {
                    if (childVal && "production" !== 'production') {
                        assertObjectType(key, childVal, vm);
                    }
                    if (!parentVal) {
                        return childVal
                    }
                    var ret = Object.create(null);
                    extend(ret, parentVal);
                    if (childVal) {
                        extend(ret, childVal);
                    }
                    return ret
                };
            strats.provide = mergeDataOrFn;

            /**
             * Default strategy.
             */
            var defaultStrat = function(parentVal, childVal) {
                return childVal === undefined ?
                    parentVal :
                    childVal
            };

            /**
             * Validate component names
             */
            function checkComponents(options) {
                for (var key in options.components) {
                    validateComponentName(key);
                }
            }

            function validateComponentName(name) {
                if (!/^[a-zA-Z][\w-]*$/.test(name)) {
                    warn(
                        'Invalid component name: "' + name + '". Component names ' +
                        'can only contain alphanumeric characters and the hyphen, ' +
                        'and must start with a letter.'
                    );
                }
                if (isBuiltInTag(name) || config.isReservedTag(name)) {
                    warn(
                        'Do not use built-in or reserved HTML elements as component ' +
                        'id: ' + name
                    );
                }
            }

            /**
             * Ensure all props option syntax are normalized into the
             * Object-based format.
             */
            function normalizeProps(options, vm) {
                var props = options.props;
                if (!props) {
                    return
                }
                var res = {};
                var i, val, name;
                if (Array.isArray(props)) {
                    i = props.length;
                    while (i--) {
                        val = props[i];
                        if (typeof val === 'string') {
                            name = camelize(val);
                            res[name] = {
                                type: null
                            };
                        } else if (false) {
                            warn('props must be strings when using array syntax.');
                        }
                    }
                } else if (isPlainObject(props)) {
                    for (var key in props) {
                        val = props[key];
                        name = camelize(key);
                        res[name] = isPlainObject(val) ?
                            val :
                            {
                                type: val
                            };
                    }
                } else if (false) {
                    warn(
                        "Invalid value for option \"props\": expected an Array or an Object, " +
                        "but got " + (toRawType(props)) + ".",
                        vm
                    );
                }
                options.props = res;
            }

            /**
             * Normalize all injections into Object-based format
             */
            function normalizeInject(options, vm) {
                var inject = options.inject;
                if (!inject) {
                    return
                }
                var normalized = options.inject = {};
                if (Array.isArray(inject)) {
                    for (var i = 0; i < inject.length; i++) {
                        normalized[inject[i]] = {
                            from: inject[i]
                        };
                    }
                } else if (isPlainObject(inject)) {
                    for (var key in inject) {
                        var val = inject[key];
                        normalized[key] = isPlainObject(val) ?
                            extend({
                                from: key
                            }, val) :
                            {
                                from: val
                            };
                    }
                } else if (false) {
                    warn(
                        "Invalid value for option \"inject\": expected an Array or an Object, " +
                        "but got " + (toRawType(inject)) + ".",
                        vm
                    );
                }
            }

            /**
             * Normalize raw function directives into object format.
             */
            function normalizeDirectives(options) {
                var dirs = options.directives;
                if (dirs) {
                    for (var key in dirs) {
                        var def = dirs[key];
                        if (typeof def === 'function') {
                            dirs[key] = {
                                bind: def,
                                update: def
                            };
                        }
                    }
                }
            }

            function assertObjectType(name, value, vm) {
                if (!isPlainObject(value)) {
                    warn(
                        "Invalid value for option \"" + name + "\": expected an Object, " +
                        "but got " + (toRawType(value)) + ".",
                        vm
                    );
                }
            }

            /**
             * Merge two option objects into a new one.
             * Core utility used in both instantiation and inheritance.
             */
            function mergeOptions(
                parent,
                child,
                vm
            ) {
                if (false) {
                    checkComponents(child);
                }

                if (typeof child === 'function') {
                    child = child.options;
                }

                normalizeProps(child, vm);
                normalizeInject(child, vm);
                normalizeDirectives(child);
                var extendsFrom = child.extends;
                if (extendsFrom) {
                    parent = mergeOptions(parent, extendsFrom, vm);
                }
                if (child.mixins) {
                    for (var i = 0, l = child.mixins.length; i < l; i++) {
                        parent = mergeOptions(parent, child.mixins[i], vm);
                    }
                }
                var options = {};
                var key;
                for (key in parent) {
                    mergeField(key);
                }
                for (key in child) {
                    if (!hasOwn(parent, key)) {
                        mergeField(key);
                    }
                }

                function mergeField(key) {
                    var strat = strats[key] || defaultStrat;
                    options[key] = strat(parent[key], child[key], vm, key);
                }
                return options
            }

            /**
             * Resolve an asset.
             * This function is used because child instances need access
             * to assets defined in its ancestor chain.
             */
            function resolveAsset(
                options,
                type,
                id,
                warnMissing
            ) {
                /* istanbul ignore if */
                if (typeof id !== 'string') {
                    return
                }
                var assets = options[type];
                // check local registration variations first
                if (hasOwn(assets, id)) {
                    return assets[id]
                }
                var camelizedId = camelize(id);
                if (hasOwn(assets, camelizedId)) {
                    return assets[camelizedId]
                }
                var PascalCaseId = capitalize(camelizedId);
                if (hasOwn(assets, PascalCaseId)) {
                    return assets[PascalCaseId]
                }
                // fallback to prototype chain
                var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
                if (false) {
                    warn(
                        'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
                        options
                    );
                }
                return res
            }

            /*  */

            function validateProp(
                key,
                propOptions,
                propsData,
                vm
            ) {
                var prop = propOptions[key];
                var absent = !hasOwn(propsData, key);
                var value = propsData[key];
                // boolean casting
                var booleanIndex = getTypeIndex(Boolean, prop.type);
                if (booleanIndex > -1) {
                    if (absent && !hasOwn(prop, 'default')) {
                        value = false;
                    } else if (value === '' || value === hyphenate(key)) {
                        // only cast empty string / same name to boolean if
                        // boolean has higher priority
                        var stringIndex = getTypeIndex(String, prop.type);
                        if (stringIndex < 0 || booleanIndex < stringIndex) {
                            value = true;
                        }
                    }
                }
                // check default value
                if (value === undefined) {
                    value = getPropDefaultValue(vm, prop, key);
                    // since the default value is a fresh copy,
                    // make sure to observe it.
                    var prevShouldObserve = shouldObserve;
                    toggleObserving(true);
                    observe(value);
                    toggleObserving(prevShouldObserve);
                }
                if (
                    false
                ) {
                    assertProp(prop, key, value, vm, absent);
                }
                return value
            }

            /**
             * Get the default value of a prop.
             */
            function getPropDefaultValue(vm, prop, key) {
                // no default, return undefined
                if (!hasOwn(prop, 'default')) {
                    return undefined
                }
                var def = prop.default;
                // warn against non-factory defaults for Object & Array
                if (false) {
                    warn(
                        'Invalid default value for prop "' + key + '": ' +
                        'Props with type Object/Array must use a factory function ' +
                        'to return the default value.',
                        vm
                    );
                }
                // the raw prop value was also undefined from previous render,
                // return previous default value to avoid unnecessary watcher trigger
                if (vm && vm.$options.propsData &&
                    vm.$options.propsData[key] === undefined &&
                    vm._props[key] !== undefined
                ) {
                    return vm._props[key]
                }
                // call factory function for non-Function types
                // a value is Function if its prototype is function even across different execution context
                return typeof def === 'function' && getType(prop.type) !== 'Function' ?
                    def.call(vm) :
                    def
            }

            /**
             * Assert whether a prop is valid.
             */
            function assertProp(
                prop,
                name,
                value,
                vm,
                absent
            ) {
                if (prop.required && absent) {
                    warn(
                        'Missing required prop: "' + name + '"',
                        vm
                    );
                    return
                }
                if (value == null && !prop.required) {
                    return
                }
                var type = prop.type;
                var valid = !type || type === true;
                var expectedTypes = [];
                if (type) {
                    if (!Array.isArray(type)) {
                        type = [type];
                    }
                    for (var i = 0; i < type.length && !valid; i++) {
                        var assertedType = assertType(value, type[i]);
                        expectedTypes.push(assertedType.expectedType || '');
                        valid = assertedType.valid;
                    }
                }
                if (!valid) {
                    warn(
                        "Invalid prop: type check failed for prop \"" + name + "\"." +
                        " Expected " + (expectedTypes.map(capitalize).join(', ')) +
                        ", got " + (toRawType(value)) + ".",
                        vm
                    );
                    return
                }
                var validator = prop.validator;
                if (validator) {
                    if (!validator(value)) {
                        warn(
                            'Invalid prop: custom validator check failed for prop "' + name + '".',
                            vm
                        );
                    }
                }
            }

            var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

            function assertType(value, type) {
                var valid;
                var expectedType = getType(type);
                if (simpleCheckRE.test(expectedType)) {
                    var t = typeof value;
                    valid = t === expectedType.toLowerCase();
                    // for primitive wrapper objects
                    if (!valid && t === 'object') {
                        valid = value instanceof type;
                    }
                } else if (expectedType === 'Object') {
                    valid = isPlainObject(value);
                } else if (expectedType === 'Array') {
                    valid = Array.isArray(value);
                } else {
                    valid = value instanceof type;
                }
                return {
                    valid: valid,
                    expectedType: expectedType
                }
            }

            /**
             * Use function string name to check built-in types,
             * because a simple equality check will fail when running
             * across different vms / iframes.
             */
            function getType(fn) {
                var match = fn && fn.toString().match(/^\s*function (\w+)/);
                return match ? match[1] : ''
            }

            function isSameType(a, b) {
                return getType(a) === getType(b)
            }

            function getTypeIndex(type, expectedTypes) {
                if (!Array.isArray(expectedTypes)) {
                    return isSameType(expectedTypes, type) ? 0 : -1
                }
                for (var i = 0, len = expectedTypes.length; i < len; i++) {
                    if (isSameType(expectedTypes[i], type)) {
                        return i
                    }
                }
                return -1
            }

            /*  */

            function handleError(err, vm, info) {
                if (vm) {
                    var cur = vm;
                    while ((cur = cur.$parent)) {
                        var hooks = cur.$options.errorCaptured;
                        if (hooks) {
                            for (var i = 0; i < hooks.length; i++) {
                                try {
                                    var capture = hooks[i].call(cur, err, vm, info) === false;
                                    if (capture) {
                                        return
                                    }
                                } catch (e) {
                                    globalHandleError(e, cur, 'errorCaptured hook');
                                }
                            }
                        }
                    }
                }
                globalHandleError(err, vm, info);
            }

            function globalHandleError(err, vm, info) {
                if (config.errorHandler) {
                    try {
                        return config.errorHandler.call(null, err, vm, info)
                    } catch (e) {
                        logError(e, null, 'config.errorHandler');
                    }
                }
                logError(err, vm, info);
            }

            function logError(err, vm, info) {
                if (false) {
                    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
                }
                /* istanbul ignore else */
                if ((inBrowser || inWeex) && typeof console !== 'undefined') {
                    console.error(err);
                } else {
                    throw err
                }
            }

            /*  */
            /* globals MessageChannel */

            var callbacks = [];
            var pending = false;

            function flushCallbacks() {
                pending = false;
                var copies = callbacks.slice(0);
                callbacks.length = 0;
                for (var i = 0; i < copies.length; i++) {
                    copies[i]();
                }
            }

            // Here we have async deferring wrappers using both microtasks and (macro) tasks.
            // In < 2.4 we used microtasks everywhere, but there are some scenarios where
            // microtasks have too high a priority and fire in between supposedly
            // sequential events (e.g. #4521, #6690) or even between bubbling of the same
            // event (#6566). However, using (macro) tasks everywhere also has subtle problems
            // when state is changed right before repaint (e.g. #6813, out-in transitions).
            // Here we use microtask by default, but expose a way to force (macro) task when
            // needed (e.g. in event handlers attached by v-on).
            var microTimerFunc;
            var macroTimerFunc;
            var useMacroTask = false;

            // Determine (macro) task defer implementation.
            // Technically setImmediate should be the ideal choice, but it's only available
            // in IE. The only polyfill that consistently queues the callback after all DOM
            // events triggered in the same loop is by using MessageChannel.
            /* istanbul ignore if */
            if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
                macroTimerFunc = function() {
                    setImmediate(flushCallbacks);
                };
            } else if (typeof MessageChannel !== 'undefined' && (
                    isNative(MessageChannel) ||
                    // PhantomJS
                    MessageChannel.toString() === '[object MessageChannelConstructor]'
                )) {
                var channel = new MessageChannel();
                var port = channel.port2;
                channel.port1.onmessage = flushCallbacks;
                macroTimerFunc = function() {
                    port.postMessage(1);
                };
            } else {
                /* istanbul ignore next */
                macroTimerFunc = function() {
                    setTimeout(flushCallbacks, 0);
                };
            }

            // Determine microtask defer implementation.
            /* istanbul ignore next, $flow-disable-line */
            if (typeof Promise !== 'undefined' && isNative(Promise)) {
                var p = Promise.resolve();
                microTimerFunc = function() {
                    p.then(flushCallbacks);
                    // in problematic UIWebViews, Promise.then doesn't completely break, but
                    // it can get stuck in a weird state where callbacks are pushed into the
                    // microtask queue but the queue isn't being flushed, until the browser
                    // needs to do some other work, e.g. handle a timer. Therefore we can
                    // "force" the microtask queue to be flushed by adding an empty timer.
                    if (isIOS) {
                        setTimeout(noop);
                    }
                };
            } else {
                // fallback to macro
                microTimerFunc = macroTimerFunc;
            }

            /**
             * Wrap a function so that if any code inside triggers state change,
             * the changes are queued using a (macro) task instead of a microtask.
             */
            function withMacroTask(fn) {
                return fn._withTask || (fn._withTask = function() {
                    useMacroTask = true;
                    var res = fn.apply(null, arguments);
                    useMacroTask = false;
                    return res
                })
            }

            function nextTick(cb, ctx) {
                var _resolve;
                callbacks.push(function() {
                    if (cb) {
                        try {
                            cb.call(ctx);
                        } catch (e) {
                            handleError(e, ctx, 'nextTick');
                        }
                    } else if (_resolve) {
                        _resolve(ctx);
                    }
                });
                if (!pending) {
                    pending = true;
                    if (useMacroTask) {
                        macroTimerFunc();
                    } else {
                        microTimerFunc();
                    }
                }
                // $flow-disable-line
                if (!cb && typeof Promise !== 'undefined') {
                    return new Promise(function(resolve) {
                        _resolve = resolve;
                    })
                }
            }

            /*  */

            var mark;
            var measure;

            if (false) {
                var perf = inBrowser && window.performance;
                /* istanbul ignore if */
                if (
                    perf &&
                    perf.mark &&
                    perf.measure &&
                    perf.clearMarks &&
                    perf.clearMeasures
                ) {
                    mark = function(tag) {
                        return perf.mark(tag);
                    };
                    measure = function(name, startTag, endTag) {
                        perf.measure(name, startTag, endTag);
                        perf.clearMarks(startTag);
                        perf.clearMarks(endTag);
                        perf.clearMeasures(name);
                    };
                }
            }

            /* not type checking this file because flow doesn't play well with Proxy */

            var initProxy;

            if (false) {
                var allowedGlobals = makeMap(
                    'Infinity,undefined,NaN,isFinite,isNaN,' +
                    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
                    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
                    'require' // for Webpack/Browserify
                );

                var warnNonPresent = function(target, key) {
                    warn(
                        "Property or method \"" + key + "\" is not defined on the instance but " +
                        'referenced during render. Make sure that this property is reactive, ' +
                        'either in the data option, or for class-based components, by ' +
                        'initializing the property. ' +
                        'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
                        target
                    );
                };

                var hasProxy =
                    typeof Proxy !== 'undefined' && isNative(Proxy);

                if (hasProxy) {
                    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
                    config.keyCodes = new Proxy(config.keyCodes, {
                        set: function set(target, key, value) {
                            if (isBuiltInModifier(key)) {
                                warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
                                return false
                            } else {
                                target[key] = value;
                                return true
                            }
                        }
                    });
                }

                var hasHandler = {
                    has: function has(target, key) {
                        var has = key in target;
                        var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
                        if (!has && !isAllowed) {
                            warnNonPresent(target, key);
                        }
                        return has || !isAllowed
                    }
                };

                var getHandler = {
                    get: function get(target, key) {
                        if (typeof key === 'string' && !(key in target)) {
                            warnNonPresent(target, key);
                        }
                        return target[key]
                    }
                };

                initProxy = function initProxy(vm) {
                    if (hasProxy) {
                        // determine which proxy handler to use
                        var options = vm.$options;
                        var handlers = options.render && options.render._withStripped ?
                            getHandler :
                            hasHandler;
                        vm._renderProxy = new Proxy(vm, handlers);
                    } else {
                        vm._renderProxy = vm;
                    }
                };
            }

            /*  */

            var seenObjects = new _Set();

            /**
             * Recursively traverse an object to evoke all converted
             * getters, so that every nested property inside the object
             * is collected as a "deep" dependency.
             */
            function traverse(val) {
                _traverse(val, seenObjects);
                seenObjects.clear();
            }

            function _traverse(val, seen) {
                var i, keys;
                var isA = Array.isArray(val);
                if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
                    return
                }
                if (val.__ob__) {
                    var depId = val.__ob__.dep.id;
                    if (seen.has(depId)) {
                        return
                    }
                    seen.add(depId);
                }
                if (isA) {
                    i = val.length;
                    while (i--) {
                        _traverse(val[i], seen);
                    }
                } else {
                    keys = Object.keys(val);
                    i = keys.length;
                    while (i--) {
                        _traverse(val[keys[i]], seen);
                    }
                }
            }

            /*  */

            var normalizeEvent = cached(function(name) {
                var passive = name.charAt(0) === '&';
                name = passive ? name.slice(1) : name;
                var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
                name = once$$1 ? name.slice(1) : name;
                var capture = name.charAt(0) === '!';
                name = capture ? name.slice(1) : name;
                return {
                    name: name,
                    once: once$$1,
                    capture: capture,
                    passive: passive
                }
            });

            function createFnInvoker(fns) {
                function invoker() {
                    var arguments$1 = arguments;

                    var fns = invoker.fns;
                    if (Array.isArray(fns)) {
                        var cloned = fns.slice();
                        for (var i = 0; i < cloned.length; i++) {
                            cloned[i].apply(null, arguments$1);
                        }
                    } else {
                        // return handler return value for single handlers
                        return fns.apply(null, arguments)
                    }
                }
                invoker.fns = fns;
                return invoker
            }

            function updateListeners(
                on,
                oldOn,
                add,
                remove$$1,
                vm
            ) {
                var name, def, cur, old, event;
                for (name in on) {
                    def = cur = on[name];
                    old = oldOn[name];
                    event = normalizeEvent(name);
                    /* istanbul ignore if */
                    if (isUndef(cur)) {
                        "production" !== 'production' && warn(
                            "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
                            vm
                        );
                    } else if (isUndef(old)) {
                        if (isUndef(cur.fns)) {
                            cur = on[name] = createFnInvoker(cur);
                        }
                        add(event.name, cur, event.once, event.capture, event.passive, event.params);
                    } else if (cur !== old) {
                        old.fns = cur;
                        on[name] = old;
                    }
                }
                for (name in oldOn) {
                    if (isUndef(on[name])) {
                        event = normalizeEvent(name);
                        remove$$1(event.name, oldOn[name], event.capture);
                    }
                }
            }

            /*  */

            function mergeVNodeHook(def, hookKey, hook) {
                if (def instanceof VNode) {
                    def = def.data.hook || (def.data.hook = {});
                }
                var invoker;
                var oldHook = def[hookKey];

                function wrappedHook() {
                    hook.apply(this, arguments);
                    // important: remove merged hook to ensure it's called only once
                    // and prevent memory leak
                    remove(invoker.fns, wrappedHook);
                }

                if (isUndef(oldHook)) {
                    // no existing hook
                    invoker = createFnInvoker([wrappedHook]);
                } else {
                    /* istanbul ignore if */
                    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
                        // already a merged invoker
                        invoker = oldHook;
                        invoker.fns.push(wrappedHook);
                    } else {
                        // existing plain hook
                        invoker = createFnInvoker([oldHook, wrappedHook]);
                    }
                }

                invoker.merged = true;
                def[hookKey] = invoker;
            }

            /*  */

            function extractPropsFromVNodeData(
                data,
                Ctor,
                tag
            ) {
                // we are only extracting raw values here.
                // validation and default values are handled in the child
                // component itself.
                var propOptions = Ctor.options.props;
                if (isUndef(propOptions)) {
                    return
                }
                var res = {};
                var attrs = data.attrs;
                var props = data.props;
                if (isDef(attrs) || isDef(props)) {
                    for (var key in propOptions) {
                        var altKey = hyphenate(key);
                        if (false) {
                            var keyInLowerCase = key.toLowerCase();
                            if (
                                key !== keyInLowerCase &&
                                attrs && hasOwn(attrs, keyInLowerCase)
                            ) {
                                tip(
                                    "Prop \"" + keyInLowerCase + "\" is passed to component " +
                                    (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
                                    " \"" + key + "\". " +
                                    "Note that HTML attributes are case-insensitive and camelCased " +
                                    "props need to use their kebab-case equivalents when using in-DOM " +
                                    "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
                                );
                            }
                        }
                        checkProp(res, props, key, altKey, true) ||
                            checkProp(res, attrs, key, altKey, false);
                    }
                }
                return res
            }

            function checkProp(
                res,
                hash,
                key,
                altKey,
                preserve
            ) {
                if (isDef(hash)) {
                    if (hasOwn(hash, key)) {
                        res[key] = hash[key];
                        if (!preserve) {
                            delete hash[key];
                        }
                        return true
                    } else if (hasOwn(hash, altKey)) {
                        res[key] = hash[altKey];
                        if (!preserve) {
                            delete hash[altKey];
                        }
                        return true
                    }
                }
                return false
            }

            /*  */

            // The template compiler attempts to minimize the need for normalization by
            // statically analyzing the template at compile time.
            //
            // For plain HTML markup, normalization can be completely skipped because the
            // generated render function is guaranteed to return Array<VNode>. There are
            // two cases where extra normalization is needed:

            // 1. When the children contains components - because a functional component
            // may return an Array instead of a single root. In this case, just a simple
            // normalization is needed - if any child is an Array, we flatten the whole
            // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
            // because functional components already normalize their own children.
            function simpleNormalizeChildren(children) {
                for (var i = 0; i < children.length; i++) {
                    if (Array.isArray(children[i])) {
                        return Array.prototype.concat.apply([], children)
                    }
                }
                return children
            }

            // 2. When the children contains constructs that always generated nested Arrays,
            // e.g. <template>, <slot>, v-for, or when the children is provided by user
            // with hand-written render functions / JSX. In such cases a full normalization
            // is needed to cater to all possible types of children values.
            function normalizeChildren(children) {
                return isPrimitive(children) ?
                    [createTextVNode(children)] :
                    Array.isArray(children) ?
                    normalizeArrayChildren(children) :
                    undefined
            }

            function isTextNode(node) {
                return isDef(node) && isDef(node.text) && isFalse(node.isComment)
            }

            function normalizeArrayChildren(children, nestedIndex) {
                var res = [];
                var i, c, lastIndex, last;
                for (i = 0; i < children.length; i++) {
                    c = children[i];
                    if (isUndef(c) || typeof c === 'boolean') {
                        continue
                    }
                    lastIndex = res.length - 1;
                    last = res[lastIndex];
                    //  nested
                    if (Array.isArray(c)) {
                        if (c.length > 0) {
                            c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
                            // merge adjacent text nodes
                            if (isTextNode(c[0]) && isTextNode(last)) {
                                res[lastIndex] = createTextVNode(last.text + (c[0]).text);
                                c.shift();
                            }
                            res.push.apply(res, c);
                        }
                    } else if (isPrimitive(c)) {
                        if (isTextNode(last)) {
                            // merge adjacent text nodes
                            // this is necessary for SSR hydration because text nodes are
                            // essentially merged when rendered to HTML strings
                            res[lastIndex] = createTextVNode(last.text + c);
                        } else if (c !== '') {
                            // convert primitive to vnode
                            res.push(createTextVNode(c));
                        }
                    } else {
                        if (isTextNode(c) && isTextNode(last)) {
                            // merge adjacent text nodes
                            res[lastIndex] = createTextVNode(last.text + c.text);
                        } else {
                            // default key for nested array children (likely generated by v-for)
                            if (isTrue(children._isVList) &&
                                isDef(c.tag) &&
                                isUndef(c.key) &&
                                isDef(nestedIndex)) {
                                c.key = "__vlist" + nestedIndex + "_" + i + "__";
                            }
                            res.push(c);
                        }
                    }
                }
                return res
            }

            /*  */

            function ensureCtor(comp, base) {
                if (
                    comp.__esModule ||
                    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
                ) {
                    comp = comp.default;
                }
                return isObject(comp) ?
                    base.extend(comp) :
                    comp
            }

            function createAsyncPlaceholder(
                factory,
                data,
                context,
                children,
                tag
            ) {
                var node = createEmptyVNode();
                node.asyncFactory = factory;
                node.asyncMeta = {
                    data: data,
                    context: context,
                    children: children,
                    tag: tag
                };
                return node
            }

            function resolveAsyncComponent(
                factory,
                baseCtor,
                context
            ) {
                if (isTrue(factory.error) && isDef(factory.errorComp)) {
                    return factory.errorComp
                }

                if (isDef(factory.resolved)) {
                    return factory.resolved
                }

                if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
                    return factory.loadingComp
                }

                if (isDef(factory.contexts)) {
                    // already pending
                    factory.contexts.push(context);
                } else {
                    var contexts = factory.contexts = [context];
                    var sync = true;

                    var forceRender = function() {
                        for (var i = 0, l = contexts.length; i < l; i++) {
                            contexts[i].$forceUpdate();
                        }
                    };

                    var resolve = once(function(res) {
                        // cache resolved
                        factory.resolved = ensureCtor(res, baseCtor);
                        // invoke callbacks only if this is not a synchronous resolve
                        // (async resolves are shimmed as synchronous during SSR)
                        if (!sync) {
                            forceRender();
                        }
                    });

                    var reject = once(function(reason) {
                        "production" !== 'production' && warn(
                            "Failed to resolve async component: " + (String(factory)) +
                            (reason ? ("\nReason: " + reason) : '')
                        );
                        if (isDef(factory.errorComp)) {
                            factory.error = true;
                            forceRender();
                        }
                    });

                    var res = factory(resolve, reject);

                    if (isObject(res)) {
                        if (typeof res.then === 'function') {
                            // () => Promise
                            if (isUndef(factory.resolved)) {
                                res.then(resolve, reject);
                            }
                        } else if (isDef(res.component) && typeof res.component.then === 'function') {
                            res.component.then(resolve, reject);

                            if (isDef(res.error)) {
                                factory.errorComp = ensureCtor(res.error, baseCtor);
                            }

                            if (isDef(res.loading)) {
                                factory.loadingComp = ensureCtor(res.loading, baseCtor);
                                if (res.delay === 0) {
                                    factory.loading = true;
                                } else {
                                    setTimeout(function() {
                                        if (isUndef(factory.resolved) && isUndef(factory.error)) {
                                            factory.loading = true;
                                            forceRender();
                                        }
                                    }, res.delay || 200);
                                }
                            }

                            if (isDef(res.timeout)) {
                                setTimeout(function() {
                                    if (isUndef(factory.resolved)) {
                                        reject(
                                            false ?
                                            ("timeout (" + (res.timeout) + "ms)") :
                                            null
                                        );
                                    }
                                }, res.timeout);
                            }
                        }
                    }

                    sync = false;
                    // return in case resolved synchronously
                    return factory.loading ?
                        factory.loadingComp :
                        factory.resolved
                }
            }

            /*  */

            function isAsyncPlaceholder(node) {
                return node.isComment && node.asyncFactory
            }

            /*  */

            function getFirstComponentChild(children) {
                if (Array.isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                        var c = children[i];
                        if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
                            return c
                        }
                    }
                }
            }

            /*  */

            /*  */

            function initEvents(vm) {
                vm._events = Object.create(null);
                vm._hasHookEvent = false;
                // init parent attached events
                var listeners = vm.$options._parentListeners;
                if (listeners) {
                    updateComponentListeners(vm, listeners);
                }
            }

            var target;

            function add(event, fn, once) {
                if (once) {
                    target.$once(event, fn);
                } else {
                    target.$on(event, fn);
                }
            }

            function remove$1(event, fn) {
                target.$off(event, fn);
            }

            function updateComponentListeners(
                vm,
                listeners,
                oldListeners
            ) {
                target = vm;
                updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
                target = undefined;
            }

            function eventsMixin(Vue) {
                var hookRE = /^hook:/;
                Vue.prototype.$on = function(event, fn) {
                    var this$1 = this;

                    var vm = this;
                    if (Array.isArray(event)) {
                        for (var i = 0, l = event.length; i < l; i++) {
                            this$1.$on(event[i], fn);
                        }
                    } else {
                        (vm._events[event] || (vm._events[event] = [])).push(fn);
                        // optimize hook:event cost by using a boolean flag marked at registration
                        // instead of a hash lookup
                        if (hookRE.test(event)) {
                            vm._hasHookEvent = true;
                        }
                    }
                    return vm
                };

                Vue.prototype.$once = function(event, fn) {
                    var vm = this;

                    function on() {
                        vm.$off(event, on);
                        fn.apply(vm, arguments);
                    }
                    on.fn = fn;
                    vm.$on(event, on);
                    return vm
                };

                Vue.prototype.$off = function(event, fn) {
                    var this$1 = this;

                    var vm = this;
                    // all
                    if (!arguments.length) {
                        vm._events = Object.create(null);
                        return vm
                    }
                    // array of events
                    if (Array.isArray(event)) {
                        for (var i = 0, l = event.length; i < l; i++) {
                            this$1.$off(event[i], fn);
                        }
                        return vm
                    }
                    // specific event
                    var cbs = vm._events[event];
                    if (!cbs) {
                        return vm
                    }
                    if (!fn) {
                        vm._events[event] = null;
                        return vm
                    }
                    if (fn) {
                        // specific handler
                        var cb;
                        var i$1 = cbs.length;
                        while (i$1--) {
                            cb = cbs[i$1];
                            if (cb === fn || cb.fn === fn) {
                                cbs.splice(i$1, 1);
                                break
                            }
                        }
                    }
                    return vm
                };

                Vue.prototype.$emit = function(event) {
                    var vm = this;
                    if (false) {
                        var lowerCaseEvent = event.toLowerCase();
                        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
                            tip(
                                "Event \"" + lowerCaseEvent + "\" is emitted in component " +
                                (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
                                "Note that HTML attributes are case-insensitive and you cannot use " +
                                "v-on to listen to camelCase events when using in-DOM templates. " +
                                "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
                            );
                        }
                    }
                    var cbs = vm._events[event];
                    if (cbs) {
                        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
                        var args = toArray(arguments, 1);
                        for (var i = 0, l = cbs.length; i < l; i++) {
                            try {
                                cbs[i].apply(vm, args);
                            } catch (e) {
                                handleError(e, vm, ("event handler for \"" + event + "\""));
                            }
                        }
                    }
                    return vm
                };
            }

            /*  */



            /**
             * Runtime helper for resolving raw children VNodes into a slot object.
             */
            function resolveSlots(
                children,
                context
            ) {
                var slots = {};
                if (!children) {
                    return slots
                }
                for (var i = 0, l = children.length; i < l; i++) {
                    var child = children[i];
                    var data = child.data;
                    // remove slot attribute if the node is resolved as a Vue slot node
                    if (data && data.attrs && data.attrs.slot) {
                        delete data.attrs.slot;
                    }
                    // named slots should only be respected if the vnode was rendered in the
                    // same context.
                    if ((child.context === context || child.fnContext === context) &&
                        data && data.slot != null
                    ) {
                        var name = data.slot;
                        var slot = (slots[name] || (slots[name] = []));
                        if (child.tag === 'template') {
                            slot.push.apply(slot, child.children || []);
                        } else {
                            slot.push(child);
                        }
                    } else {
                        (slots.default || (slots.default = [])).push(child);
                    }
                }
                // ignore slots that contains only whitespace
                for (var name$1 in slots) {
                    if (slots[name$1].every(isWhitespace)) {
                        delete slots[name$1];
                    }
                }
                return slots
            }

            function isWhitespace(node) {
                return (node.isComment && !node.asyncFactory) || node.text === ' '
            }

            function resolveScopedSlots(
                fns, // see flow/vnode
                res
            ) {
                res = res || {};
                for (var i = 0; i < fns.length; i++) {
                    if (Array.isArray(fns[i])) {
                        resolveScopedSlots(fns[i], res);
                    } else {
                        res[fns[i].key] = fns[i].fn;
                    }
                }
                return res
            }

            /*  */

            var activeInstance = null;
            var isUpdatingChildComponent = false;

            function initLifecycle(vm) {
                var options = vm.$options;

                // locate first non-abstract parent
                var parent = options.parent;
                if (parent && !options.abstract) {
                    while (parent.$options.abstract && parent.$parent) {
                        parent = parent.$parent;
                    }
                    parent.$children.push(vm);
                }

                vm.$parent = parent;
                vm.$root = parent ? parent.$root : vm;

                vm.$children = [];
                vm.$refs = {};

                vm._watcher = null;
                vm._inactive = null;
                vm._directInactive = false;
                vm._isMounted = false;
                vm._isDestroyed = false;
                vm._isBeingDestroyed = false;
            }

            function lifecycleMixin(Vue) {
                Vue.prototype._update = function(vnode, hydrating) {
                    var vm = this;
                    if (vm._isMounted) {
                        callHook(vm, 'beforeUpdate');
                    }
                    var prevEl = vm.$el;
                    var prevVnode = vm._vnode;
                    var prevActiveInstance = activeInstance;
                    activeInstance = vm;
                    vm._vnode = vnode;
                    // Vue.prototype.__patch__ is injected in entry points
                    // based on the rendering backend used.
                    if (!prevVnode) {
                        // initial render
                        vm.$el = vm.__patch__(
                            vm.$el, vnode, hydrating, false /* removeOnly */ ,
                            vm.$options._parentElm,
                            vm.$options._refElm
                        );
                        // no need for the ref nodes after initial patch
                        // this prevents keeping a detached DOM tree in memory (#5851)
                        vm.$options._parentElm = vm.$options._refElm = null;
                    } else {
                        // updates
                        vm.$el = vm.__patch__(prevVnode, vnode);
                    }
                    activeInstance = prevActiveInstance;
                    // update __vue__ reference
                    if (prevEl) {
                        prevEl.__vue__ = null;
                    }
                    if (vm.$el) {
                        vm.$el.__vue__ = vm;
                    }
                    // if parent is an HOC, update its $el as well
                    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
                        vm.$parent.$el = vm.$el;
                    }
                    // updated hook is called by the scheduler to ensure that children are
                    // updated in a parent's updated hook.
                };

                Vue.prototype.$forceUpdate = function() {
                    var vm = this;
                    if (vm._watcher) {
                        vm._watcher.update();
                    }
                };

                Vue.prototype.$destroy = function() {
                    var vm = this;
                    if (vm._isBeingDestroyed) {
                        return
                    }
                    callHook(vm, 'beforeDestroy');
                    vm._isBeingDestroyed = true;
                    // remove self from parent
                    var parent = vm.$parent;
                    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
                        remove(parent.$children, vm);
                    }
                    // teardown watchers
                    if (vm._watcher) {
                        vm._watcher.teardown();
                    }
                    var i = vm._watchers.length;
                    while (i--) {
                        vm._watchers[i].teardown();
                    }
                    // remove reference from data ob
                    // frozen object may not have observer.
                    if (vm._data.__ob__) {
                        vm._data.__ob__.vmCount--;
                    }
                    // call the last hook...
                    vm._isDestroyed = true;
                    // invoke destroy hooks on current rendered tree
                    vm.__patch__(vm._vnode, null);
                    // fire destroyed hook
                    callHook(vm, 'destroyed');
                    // turn off all instance listeners.
                    vm.$off();
                    // remove __vue__ reference
                    if (vm.$el) {
                        vm.$el.__vue__ = null;
                    }
                    // release circular reference (#6759)
                    if (vm.$vnode) {
                        vm.$vnode.parent = null;
                    }
                };
            }

            function mountComponent(
                vm,
                el,
                hydrating
            ) {
                vm.$el = el;
                if (!vm.$options.render) {
                    vm.$options.render = createEmptyVNode;
                    if (false) {
                        /* istanbul ignore if */
                        if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
                            vm.$options.el || el) {
                            warn(
                                'You are using the runtime-only build of Vue where the template ' +
                                'compiler is not available. Either pre-compile the templates into ' +
                                'render functions, or use the compiler-included build.',
                                vm
                            );
                        } else {
                            warn(
                                'Failed to mount component: template or render function not defined.',
                                vm
                            );
                        }
                    }
                }
                callHook(vm, 'beforeMount');

                var updateComponent;
                /* istanbul ignore if */
                if (false) {
                    updateComponent = function() {
                        var name = vm._name;
                        var id = vm._uid;
                        var startTag = "vue-perf-start:" + id;
                        var endTag = "vue-perf-end:" + id;

                        mark(startTag);
                        var vnode = vm._render();
                        mark(endTag);
                        measure(("vue " + name + " render"), startTag, endTag);

                        mark(startTag);
                        vm._update(vnode, hydrating);
                        mark(endTag);
                        measure(("vue " + name + " patch"), startTag, endTag);
                    };
                } else {
                    updateComponent = function() {
                        vm._update(vm._render(), hydrating);
                    };
                }

                // we set this to vm._watcher inside the watcher's constructor
                // since the watcher's initial patch may call $forceUpdate (e.g. inside child
                // component's mounted hook), which relies on vm._watcher being already defined
                new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */ );
                hydrating = false;

                // manually mounted instance, call mounted on self
                // mounted is called for render-created child components in its inserted hook
                if (vm.$vnode == null) {
                    vm._isMounted = true;
                    callHook(vm, 'mounted');
                }
                return vm
            }

            function updateChildComponent(
                vm,
                propsData,
                listeners,
                parentVnode,
                renderChildren
            ) {
                if (false) {
                    isUpdatingChildComponent = true;
                }

                // determine whether component has slot children
                // we need to do this before overwriting $options._renderChildren
                var hasChildren = !!(
                    renderChildren || // has new static slots
                    vm.$options._renderChildren || // has old static slots
                    parentVnode.data.scopedSlots || // has new scoped slots
                    vm.$scopedSlots !== emptyObject // has old scoped slots
                );

                vm.$options._parentVnode = parentVnode;
                vm.$vnode = parentVnode; // update vm's placeholder node without re-render

                if (vm._vnode) { // update child tree's parent
                    vm._vnode.parent = parentVnode;
                }
                vm.$options._renderChildren = renderChildren;

                // update $attrs and $listeners hash
                // these are also reactive so they may trigger child update if the child
                // used them during render
                vm.$attrs = parentVnode.data.attrs || emptyObject;
                vm.$listeners = listeners || emptyObject;

                // update props
                if (propsData && vm.$options.props) {
                    toggleObserving(false);
                    var props = vm._props;
                    var propKeys = vm.$options._propKeys || [];
                    for (var i = 0; i < propKeys.length; i++) {
                        var key = propKeys[i];
                        var propOptions = vm.$options.props; // wtf flow?
                        props[key] = validateProp(key, propOptions, propsData, vm);
                    }
                    toggleObserving(true);
                    // keep a copy of raw propsData
                    vm.$options.propsData = propsData;
                }

                // update listeners
                listeners = listeners || emptyObject;
                var oldListeners = vm.$options._parentListeners;
                vm.$options._parentListeners = listeners;
                updateComponentListeners(vm, listeners, oldListeners);

                // resolve slots + force update if has children
                if (hasChildren) {
                    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
                    vm.$forceUpdate();
                }

                if (false) {
                    isUpdatingChildComponent = false;
                }
            }

            function isInInactiveTree(vm) {
                while (vm && (vm = vm.$parent)) {
                    if (vm._inactive) {
                        return true
                    }
                }
                return false
            }

            function activateChildComponent(vm, direct) {
                if (direct) {
                    vm._directInactive = false;
                    if (isInInactiveTree(vm)) {
                        return
                    }
                } else if (vm._directInactive) {
                    return
                }
                if (vm._inactive || vm._inactive === null) {
                    vm._inactive = false;
                    for (var i = 0; i < vm.$children.length; i++) {
                        activateChildComponent(vm.$children[i]);
                    }
                    callHook(vm, 'activated');
                }
            }

            function deactivateChildComponent(vm, direct) {
                if (direct) {
                    vm._directInactive = true;
                    if (isInInactiveTree(vm)) {
                        return
                    }
                }
                if (!vm._inactive) {
                    vm._inactive = true;
                    for (var i = 0; i < vm.$children.length; i++) {
                        deactivateChildComponent(vm.$children[i]);
                    }
                    callHook(vm, 'deactivated');
                }
            }

            function callHook(vm, hook) {
                // #7573 disable dep collection when invoking lifecycle hooks
                pushTarget();
                var handlers = vm.$options[hook];
                if (handlers) {
                    for (var i = 0, j = handlers.length; i < j; i++) {
                        try {
                            handlers[i].call(vm);
                        } catch (e) {
                            handleError(e, vm, (hook + " hook"));
                        }
                    }
                }
                if (vm._hasHookEvent) {
                    vm.$emit('hook:' + hook);
                }
                popTarget();
            }

            /*  */


            var MAX_UPDATE_COUNT = 100;

            var queue = [];
            var activatedChildren = [];
            var has = {};
            var circular = {};
            var waiting = false;
            var flushing = false;
            var index = 0;

            /**
             * Reset the scheduler's state.
             */
            function resetSchedulerState() {
                index = queue.length = activatedChildren.length = 0;
                has = {};
                if (false) {
                    circular = {};
                }
                waiting = flushing = false;
            }

            /**
             * Flush both queues and run the watchers.
             */
            function flushSchedulerQueue() {
                flushing = true;
                var watcher, id;

                // Sort queue before flush.
                // This ensures that:
                // 1. Components are updated from parent to child. (because parent is always
                //    created before the child)
                // 2. A component's user watchers are run before its render watcher (because
                //    user watchers are created before the render watcher)
                // 3. If a component is destroyed during a parent component's watcher run,
                //    its watchers can be skipped.
                queue.sort(function(a, b) {
                    return a.id - b.id;
                });

                // do not cache length because more watchers might be pushed
                // as we run existing watchers
                for (index = 0; index < queue.length; index++) {
                    watcher = queue[index];
                    id = watcher.id;
                    has[id] = null;
                    watcher.run();
                    // in dev build, check and stop circular updates.
                    if (false) {
                        circular[id] = (circular[id] || 0) + 1;
                        if (circular[id] > MAX_UPDATE_COUNT) {
                            warn(
                                'You may have an infinite update loop ' + (
                                    watcher.user ?
                                    ("in watcher with expression \"" + (watcher.expression) + "\"") :
                                    "in a component render function."
                                ),
                                watcher.vm
                            );
                            break
                        }
                    }
                }

                // keep copies of post queues before resetting state
                var activatedQueue = activatedChildren.slice();
                var updatedQueue = queue.slice();

                resetSchedulerState();

                // call component updated and activated hooks
                callActivatedHooks(activatedQueue);
                callUpdatedHooks(updatedQueue);

                // devtool hook
                /* istanbul ignore if */
                if (devtools && config.devtools) {
                    devtools.emit('flush');
                }
            }

            function callUpdatedHooks(queue) {
                var i = queue.length;
                while (i--) {
                    var watcher = queue[i];
                    var vm = watcher.vm;
                    if (vm._watcher === watcher && vm._isMounted) {
                        callHook(vm, 'updated');
                    }
                }
            }

            /**
             * Queue a kept-alive component that was activated during patch.
             * The queue will be processed after the entire tree has been patched.
             */
            function queueActivatedComponent(vm) {
                // setting _inactive to false here so that a render function can
                // rely on checking whether it's in an inactive tree (e.g. router-view)
                vm._inactive = false;
                activatedChildren.push(vm);
            }

            function callActivatedHooks(queue) {
                for (var i = 0; i < queue.length; i++) {
                    queue[i]._inactive = true;
                    activateChildComponent(queue[i], true /* true */ );
                }
            }

            /**
             * Push a watcher into the watcher queue.
             * Jobs with duplicate IDs will be skipped unless it's
             * pushed when the queue is being flushed.
             */
            function queueWatcher(watcher) {
                var id = watcher.id;
                if (has[id] == null) {
                    has[id] = true;
                    if (!flushing) {
                        queue.push(watcher);
                    } else {
                        // if already flushing, splice the watcher based on its id
                        // if already past its id, it will be run next immediately.
                        var i = queue.length - 1;
                        while (i > index && queue[i].id > watcher.id) {
                            i--;
                        }
                        queue.splice(i + 1, 0, watcher);
                    }
                    // queue the flush
                    if (!waiting) {
                        waiting = true;
                        nextTick(flushSchedulerQueue);
                    }
                }
            }

            /*  */

            var uid$1 = 0;

            /**
             * A watcher parses an expression, collects dependencies,
             * and fires callback when the expression value changes.
             * This is used for both the $watch() api and directives.
             */
            var Watcher = function Watcher(
                vm,
                expOrFn,
                cb,
                options,
                isRenderWatcher
            ) {
                this.vm = vm;
                if (isRenderWatcher) {
                    vm._watcher = this;
                }
                vm._watchers.push(this);
                // options
                if (options) {
                    this.deep = !!options.deep;
                    this.user = !!options.user;
                    this.lazy = !!options.lazy;
                    this.sync = !!options.sync;
                } else {
                    this.deep = this.user = this.lazy = this.sync = false;
                }
                this.cb = cb;
                this.id = ++uid$1; // uid for batching
                this.active = true;
                this.dirty = this.lazy; // for lazy watchers
                this.deps = [];
                this.newDeps = [];
                this.depIds = new _Set();
                this.newDepIds = new _Set();
                this.expression = false ?
                    expOrFn.toString() :
                    '';
                // parse expression for getter
                if (typeof expOrFn === 'function') {
                    this.getter = expOrFn;
                } else {
                    this.getter = parsePath(expOrFn);
                    if (!this.getter) {
                        this.getter = function() {};
                        "production" !== 'production' && warn(
                            "Failed watching path: \"" + expOrFn + "\" " +
                            'Watcher only accepts simple dot-delimited paths. ' +
                            'For full control, use a function instead.',
                            vm
                        );
                    }
                }
                this.value = this.lazy ?
                    undefined :
                    this.get();
            };

            /**
             * Evaluate the getter, and re-collect dependencies.
             */
            Watcher.prototype.get = function get() {
                pushTarget(this);
                var value;
                var vm = this.vm;
                try {
                    value = this.getter.call(vm, vm);
                } catch (e) {
                    if (this.user) {
                        handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
                    } else {
                        throw e
                    }
                } finally {
                    // "touch" every property so they are all tracked as
                    // dependencies for deep watching
                    if (this.deep) {
                        traverse(value);
                    }
                    popTarget();
                    this.cleanupDeps();
                }
                return value
            };

            /**
             * Add a dependency to this directive.
             */
            Watcher.prototype.addDep = function addDep(dep) {
                var id = dep.id;
                if (!this.newDepIds.has(id)) {
                    this.newDepIds.add(id);
                    this.newDeps.push(dep);
                    if (!this.depIds.has(id)) {
                        dep.addSub(this);
                    }
                }
            };

            /**
             * Clean up for dependency collection.
             */
            Watcher.prototype.cleanupDeps = function cleanupDeps() {
                var this$1 = this;

                var i = this.deps.length;
                while (i--) {
                    var dep = this$1.deps[i];
                    if (!this$1.newDepIds.has(dep.id)) {
                        dep.removeSub(this$1);
                    }
                }
                var tmp = this.depIds;
                this.depIds = this.newDepIds;
                this.newDepIds = tmp;
                this.newDepIds.clear();
                tmp = this.deps;
                this.deps = this.newDeps;
                this.newDeps = tmp;
                this.newDeps.length = 0;
            };

            /**
             * Subscriber interface.
             * Will be called when a dependency changes.
             */
            Watcher.prototype.update = function update() {
                /* istanbul ignore else */
                if (this.lazy) {
                    this.dirty = true;
                } else if (this.sync) {
                    this.run();
                } else {
                    queueWatcher(this);
                }
            };

            /**
             * Scheduler job interface.
             * Will be called by the scheduler.
             */
            Watcher.prototype.run = function run() {
                if (this.active) {
                    var value = this.get();
                    if (
                        value !== this.value ||
                        // Deep watchers and watchers on Object/Arrays should fire even
                        // when the value is the same, because the value may
                        // have mutated.
                        isObject(value) ||
                        this.deep
                    ) {
                        // set new value
                        var oldValue = this.value;
                        this.value = value;
                        if (this.user) {
                            try {
                                this.cb.call(this.vm, value, oldValue);
                            } catch (e) {
                                handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
                            }
                        } else {
                            this.cb.call(this.vm, value, oldValue);
                        }
                    }
                }
            };

            /**
             * Evaluate the value of the watcher.
             * This only gets called for lazy watchers.
             */
            Watcher.prototype.evaluate = function evaluate() {
                this.value = this.get();
                this.dirty = false;
            };

            /**
             * Depend on all deps collected by this watcher.
             */
            Watcher.prototype.depend = function depend() {
                var this$1 = this;

                var i = this.deps.length;
                while (i--) {
                    this$1.deps[i].depend();
                }
            };

            /**
             * Remove self from all dependencies' subscriber list.
             */
            Watcher.prototype.teardown = function teardown() {
                var this$1 = this;

                if (this.active) {
                    // remove self from vm's watcher list
                    // this is a somewhat expensive operation so we skip it
                    // if the vm is being destroyed.
                    if (!this.vm._isBeingDestroyed) {
                        remove(this.vm._watchers, this);
                    }
                    var i = this.deps.length;
                    while (i--) {
                        this$1.deps[i].removeSub(this$1);
                    }
                    this.active = false;
                }
            };

            /*  */

            var sharedPropertyDefinition = {
                enumerable: true,
                configurable: true,
                get: noop,
                set: noop
            };

            function proxy(target, sourceKey, key) {
                sharedPropertyDefinition.get = function proxyGetter() {
                    return this[sourceKey][key]
                };
                sharedPropertyDefinition.set = function proxySetter(val) {
                    this[sourceKey][key] = val;
                };
                Object.defineProperty(target, key, sharedPropertyDefinition);
            }

            function initState(vm) {
                vm._watchers = [];
                var opts = vm.$options;
                if (opts.props) {
                    initProps(vm, opts.props);
                }
                if (opts.methods) {
                    initMethods(vm, opts.methods);
                }
                if (opts.data) {
                    initData(vm);
                } else {
                    observe(vm._data = {}, true /* asRootData */ );
                }
                if (opts.computed) {
                    initComputed(vm, opts.computed);
                }
                if (opts.watch && opts.watch !== nativeWatch) {
                    initWatch(vm, opts.watch);
                }
            }

            function initProps(vm, propsOptions) {
                var propsData = vm.$options.propsData || {};
                var props = vm._props = {};
                // cache prop keys so that future props updates can iterate using Array
                // instead of dynamic object key enumeration.
                var keys = vm.$options._propKeys = [];
                var isRoot = !vm.$parent;
                // root instance props should be converted
                if (!isRoot) {
                    toggleObserving(false);
                }
                var loop = function(key) {
                    keys.push(key);
                    var value = validateProp(key, propsOptions, propsData, vm);
                    /* istanbul ignore else */
                    if (false) {
                        var hyphenatedKey = hyphenate(key);
                        if (isReservedAttribute(hyphenatedKey) ||
                            config.isReservedAttr(hyphenatedKey)) {
                            warn(
                                ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
                                vm
                            );
                        }
                        defineReactive(props, key, value, function() {
                            if (vm.$parent && !isUpdatingChildComponent) {
                                warn(
                                    "Avoid mutating a prop directly since the value will be " +
                                    "overwritten whenever the parent component re-renders. " +
                                    "Instead, use a data or computed property based on the prop's " +
                                    "value. Prop being mutated: \"" + key + "\"",
                                    vm
                                );
                            }
                        });
                    } else {
                        defineReactive(props, key, value);
                    }
                    // static props are already proxied on the component's prototype
                    // during Vue.extend(). We only need to proxy props defined at
                    // instantiation here.
                    if (!(key in vm)) {
                        proxy(vm, "_props", key);
                    }
                };

                for (var key in propsOptions) loop(key);
                toggleObserving(true);
            }

            function initData(vm) {
                var data = vm.$options.data;
                data = vm._data = typeof data === 'function' ?
                    getData(data, vm) :
                    data || {};
                if (!isPlainObject(data)) {
                    data = {};
                    "production" !== 'production' && warn(
                        'data functions should return an object:\n' +
                        'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
                        vm
                    );
                }
                // proxy data on instance
                var keys = Object.keys(data);
                var props = vm.$options.props;
                var methods = vm.$options.methods;
                var i = keys.length;
                while (i--) {
                    var key = keys[i];
                    if (false) {
                        if (methods && hasOwn(methods, key)) {
                            warn(
                                ("Method \"" + key + "\" has already been defined as a data property."),
                                vm
                            );
                        }
                    }
                    if (props && hasOwn(props, key)) {
                        "production" !== 'production' && warn(
                            "The data property \"" + key + "\" is already declared as a prop. " +
                            "Use prop default value instead.",
                            vm
                        );
                    } else if (!isReserved(key)) {
                        proxy(vm, "_data", key);
                    }
                }
                // observe data
                observe(data, true /* asRootData */ );
            }

            function getData(data, vm) {
                // #7573 disable dep collection when invoking data getters
                pushTarget();
                try {
                    return data.call(vm, vm)
                } catch (e) {
                    handleError(e, vm, "data()");
                    return {}
                } finally {
                    popTarget();
                }
            }

            var computedWatcherOptions = {
                lazy: true
            };

            function initComputed(vm, computed) {
                // $flow-disable-line
                var watchers = vm._computedWatchers = Object.create(null);
                // computed properties are just getters during SSR
                var isSSR = isServerRendering();

                for (var key in computed) {
                    var userDef = computed[key];
                    var getter = typeof userDef === 'function' ? userDef : userDef.get;
                    if (false) {
                        warn(
                            ("Getter is missing for computed property \"" + key + "\"."),
                            vm
                        );
                    }

                    if (!isSSR) {
                        // create internal watcher for the computed property.
                        watchers[key] = new Watcher(
                            vm,
                            getter || noop,
                            noop,
                            computedWatcherOptions
                        );
                    }

                    // component-defined computed properties are already defined on the
                    // component prototype. We only need to define computed properties defined
                    // at instantiation here.
                    if (!(key in vm)) {
                        defineComputed(vm, key, userDef);
                    } else if (false) {
                        if (key in vm.$data) {
                            warn(("The computed property \"" + key + "\" is already defined in data."), vm);
                        } else if (vm.$options.props && key in vm.$options.props) {
                            warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
                        }
                    }
                }
            }

            function defineComputed(
                target,
                key,
                userDef
            ) {
                var shouldCache = !isServerRendering();
                if (typeof userDef === 'function') {
                    sharedPropertyDefinition.get = shouldCache ?
                        createComputedGetter(key) :
                        userDef;
                    sharedPropertyDefinition.set = noop;
                } else {
                    sharedPropertyDefinition.get = userDef.get ?
                        shouldCache && userDef.cache !== false ?
                        createComputedGetter(key) :
                        userDef.get :
                        noop;
                    sharedPropertyDefinition.set = userDef.set ?
                        userDef.set :
                        noop;
                }
                if (false) {
                    sharedPropertyDefinition.set = function() {
                        warn(
                            ("Computed property \"" + key + "\" was assigned to but it has no setter."),
                            this
                        );
                    };
                }
                Object.defineProperty(target, key, sharedPropertyDefinition);
            }

            function createComputedGetter(key) {
                return function computedGetter() {
                    var watcher = this._computedWatchers && this._computedWatchers[key];
                    if (watcher) {
                        if (watcher.dirty) {
                            watcher.evaluate();
                        }
                        if (Dep.target) {
                            watcher.depend();
                        }
                        return watcher.value
                    }
                }
            }

            function initMethods(vm, methods) {
                var props = vm.$options.props;
                for (var key in methods) {
                    if (false) {
                        if (methods[key] == null) {
                            warn(
                                "Method \"" + key + "\" has an undefined value in the component definition. " +
                                "Did you reference the function correctly?",
                                vm
                            );
                        }
                        if (props && hasOwn(props, key)) {
                            warn(
                                ("Method \"" + key + "\" has already been defined as a prop."),
                                vm
                            );
                        }
                        if ((key in vm) && isReserved(key)) {
                            warn(
                                "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
                                "Avoid defining component methods that start with _ or $."
                            );
                        }
                    }
                    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
                }
            }

            function initWatch(vm, watch) {
                for (var key in watch) {
                    var handler = watch[key];
                    if (Array.isArray(handler)) {
                        for (var i = 0; i < handler.length; i++) {
                            createWatcher(vm, key, handler[i]);
                        }
                    } else {
                        createWatcher(vm, key, handler);
                    }
                }
            }

            function createWatcher(
                vm,
                expOrFn,
                handler,
                options
            ) {
                if (isPlainObject(handler)) {
                    options = handler;
                    handler = handler.handler;
                }
                if (typeof handler === 'string') {
                    handler = vm[handler];
                }
                return vm.$watch(expOrFn, handler, options)
            }

            function stateMixin(Vue) {
                // flow somehow has problems with directly declared definition object
                // when using Object.defineProperty, so we have to procedurally build up
                // the object here.
                var dataDef = {};
                dataDef.get = function() {
                    return this._data
                };
                var propsDef = {};
                propsDef.get = function() {
                    return this._props
                };
                if (false) {
                    dataDef.set = function(newData) {
                        warn(
                            'Avoid replacing instance root $data. ' +
                            'Use nested data properties instead.',
                            this
                        );
                    };
                    propsDef.set = function() {
                        warn("$props is readonly.", this);
                    };
                }
                Object.defineProperty(Vue.prototype, '$data', dataDef);
                Object.defineProperty(Vue.prototype, '$props', propsDef);

                Vue.prototype.$set = set;
                Vue.prototype.$delete = del;

                Vue.prototype.$watch = function(
                    expOrFn,
                    cb,
                    options
                ) {
                    var vm = this;
                    if (isPlainObject(cb)) {
                        return createWatcher(vm, expOrFn, cb, options)
                    }
                    options = options || {};
                    options.user = true;
                    var watcher = new Watcher(vm, expOrFn, cb, options);
                    if (options.immediate) {
                        cb.call(vm, watcher.value);
                    }
                    return function unwatchFn() {
                        watcher.teardown();
                    }
                };
            }

            /*  */

            function initProvide(vm) {
                var provide = vm.$options.provide;
                if (provide) {
                    vm._provided = typeof provide === 'function' ?
                        provide.call(vm) :
                        provide;
                }
            }

            function initInjections(vm) {
                var result = resolveInject(vm.$options.inject, vm);
                if (result) {
                    toggleObserving(false);
                    Object.keys(result).forEach(function(key) {
                        /* istanbul ignore else */
                        if (false) {
                            defineReactive(vm, key, result[key], function() {
                                warn(
                                    "Avoid mutating an injected value directly since the changes will be " +
                                    "overwritten whenever the provided component re-renders. " +
                                    "injection being mutated: \"" + key + "\"",
                                    vm
                                );
                            });
                        } else {
                            defineReactive(vm, key, result[key]);
                        }
                    });
                    toggleObserving(true);
                }
            }

            function resolveInject(inject, vm) {
                if (inject) {
                    // inject is :any because flow is not smart enough to figure out cached
                    var result = Object.create(null);
                    var keys = hasSymbol ?
                        Reflect.ownKeys(inject).filter(function(key) {
                            /* istanbul ignore next */
                            return Object.getOwnPropertyDescriptor(inject, key).enumerable
                        }) :
                        Object.keys(inject);

                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        var provideKey = inject[key].from;
                        var source = vm;
                        while (source) {
                            if (source._provided && hasOwn(source._provided, provideKey)) {
                                result[key] = source._provided[provideKey];
                                break
                            }
                            source = source.$parent;
                        }
                        if (!source) {
                            if ('default' in inject[key]) {
                                var provideDefault = inject[key].default;
                                result[key] = typeof provideDefault === 'function' ?
                                    provideDefault.call(vm) :
                                    provideDefault;
                            } else if (false) {
                                warn(("Injection \"" + key + "\" not found"), vm);
                            }
                        }
                    }
                    return result
                }
            }

            /*  */

            /**
             * Runtime helper for rendering v-for lists.
             */
            function renderList(
                val,
                render
            ) {
                var ret, i, l, keys, key;
                if (Array.isArray(val) || typeof val === 'string') {
                    ret = new Array(val.length);
                    for (i = 0, l = val.length; i < l; i++) {
                        ret[i] = render(val[i], i);
                    }
                } else if (typeof val === 'number') {
                    ret = new Array(val);
                    for (i = 0; i < val; i++) {
                        ret[i] = render(i + 1, i);
                    }
                } else if (isObject(val)) {
                    keys = Object.keys(val);
                    ret = new Array(keys.length);
                    for (i = 0, l = keys.length; i < l; i++) {
                        key = keys[i];
                        ret[i] = render(val[key], key, i);
                    }
                }
                if (isDef(ret)) {
                    (ret)._isVList = true;
                }
                return ret
            }

            /*  */

            /**
             * Runtime helper for rendering <slot>
             */
            function renderSlot(
                name,
                fallback,
                props,
                bindObject
            ) {
                var scopedSlotFn = this.$scopedSlots[name];
                var nodes;
                if (scopedSlotFn) { // scoped slot
                    props = props || {};
                    if (bindObject) {
                        if (false) {
                            warn(
                                'slot v-bind without argument expects an Object',
                                this
                            );
                        }
                        props = extend(extend({}, bindObject), props);
                    }
                    nodes = scopedSlotFn(props) || fallback;
                } else {
                    var slotNodes = this.$slots[name];
                    // warn duplicate slot usage
                    if (slotNodes) {
                        if (false) {
                            warn(
                                "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
                                "- this will likely cause render errors.",
                                this
                            );
                        }
                        slotNodes._rendered = true;
                    }
                    nodes = slotNodes || fallback;
                }

                var target = props && props.slot;
                if (target) {
                    return this.$createElement('template', {
                        slot: target
                    }, nodes)
                } else {
                    return nodes
                }
            }

            /*  */

            /**
             * Runtime helper for resolving filters
             */
            function resolveFilter(id) {
                return resolveAsset(this.$options, 'filters', id, true) || identity
            }

            /*  */

            function isKeyNotMatch(expect, actual) {
                if (Array.isArray(expect)) {
                    return expect.indexOf(actual) === -1
                } else {
                    return expect !== actual
                }
            }

            /**
             * Runtime helper for checking keyCodes from config.
             * exposed as Vue.prototype._k
             * passing in eventKeyName as last argument separately for backwards compat
             */
            function checkKeyCodes(
                eventKeyCode,
                key,
                builtInKeyCode,
                eventKeyName,
                builtInKeyName
            ) {
                var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
                if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
                    return isKeyNotMatch(builtInKeyName, eventKeyName)
                } else if (mappedKeyCode) {
                    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
                } else if (eventKeyName) {
                    return hyphenate(eventKeyName) !== key
                }
            }

            /*  */

            /**
             * Runtime helper for merging v-bind="object" into a VNode's data.
             */
            function bindObjectProps(
                data,
                tag,
                value,
                asProp,
                isSync
            ) {
                if (value) {
                    if (!isObject(value)) {
                        "production" !== 'production' && warn(
                            'v-bind without argument expects an Object or Array value',
                            this
                        );
                    } else {
                        if (Array.isArray(value)) {
                            value = toObject(value);
                        }
                        var hash;
                        var loop = function(key) {
                            if (
                                key === 'class' ||
                                key === 'style' ||
                                isReservedAttribute(key)
                            ) {
                                hash = data;
                            } else {
                                var type = data.attrs && data.attrs.type;
                                hash = asProp || config.mustUseProp(tag, type, key) ?
                                    data.domProps || (data.domProps = {}) :
                                    data.attrs || (data.attrs = {});
                            }
                            if (!(key in hash)) {
                                hash[key] = value[key];

                                if (isSync) {
                                    var on = data.on || (data.on = {});
                                    on[("update:" + key)] = function($event) {
                                        value[key] = $event;
                                    };
                                }
                            }
                        };

                        for (var key in value) loop(key);
                    }
                }
                return data
            }

            /*  */

            /**
             * Runtime helper for rendering static trees.
             */
            function renderStatic(
                index,
                isInFor
            ) {
                var cached = this._staticTrees || (this._staticTrees = []);
                var tree = cached[index];
                // if has already-rendered static tree and not inside v-for,
                // we can reuse the same tree.
                if (tree && !isInFor) {
                    return tree
                }
                // otherwise, render a fresh tree.
                tree = cached[index] = this.$options.staticRenderFns[index].call(
                    this._renderProxy,
                    null,
                    this // for render fns generated for functional component templates
                );
                markStatic(tree, ("__static__" + index), false);
                return tree
            }

            /**
             * Runtime helper for v-once.
             * Effectively it means marking the node as static with a unique key.
             */
            function markOnce(
                tree,
                index,
                key
            ) {
                markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
                return tree
            }

            function markStatic(
                tree,
                key,
                isOnce
            ) {
                if (Array.isArray(tree)) {
                    for (var i = 0; i < tree.length; i++) {
                        if (tree[i] && typeof tree[i] !== 'string') {
                            markStaticNode(tree[i], (key + "_" + i), isOnce);
                        }
                    }
                } else {
                    markStaticNode(tree, key, isOnce);
                }
            }

            function markStaticNode(node, key, isOnce) {
                node.isStatic = true;
                node.key = key;
                node.isOnce = isOnce;
            }

            /*  */

            function bindObjectListeners(data, value) {
                if (value) {
                    if (!isPlainObject(value)) {
                        "production" !== 'production' && warn(
                            'v-on without argument expects an Object value',
                            this
                        );
                    } else {
                        var on = data.on = data.on ? extend({}, data.on) : {};
                        for (var key in value) {
                            var existing = on[key];
                            var ours = value[key];
                            on[key] = existing ? [].concat(existing, ours) : ours;
                        }
                    }
                }
                return data
            }

            /*  */

            function installRenderHelpers(target) {
                target._o = markOnce;
                target._n = toNumber;
                target._s = toString;
                target._l = renderList;
                target._t = renderSlot;
                target._q = looseEqual;
                target._i = looseIndexOf;
                target._m = renderStatic;
                target._f = resolveFilter;
                target._k = checkKeyCodes;
                target._b = bindObjectProps;
                target._v = createTextVNode;
                target._e = createEmptyVNode;
                target._u = resolveScopedSlots;
                target._g = bindObjectListeners;
            }

            /*  */

            function FunctionalRenderContext(
                data,
                props,
                children,
                parent,
                Ctor
            ) {
                var options = Ctor.options;
                // ensure the createElement function in functional components
                // gets a unique context - this is necessary for correct named slot check
                var contextVm;
                if (hasOwn(parent, '_uid')) {
                    contextVm = Object.create(parent);
                    // $flow-disable-line
                    contextVm._original = parent;
                } else {
                    // the context vm passed in is a functional context as well.
                    // in this case we want to make sure we are able to get a hold to the
                    // real context instance.
                    contextVm = parent;
                    // $flow-disable-line
                    parent = parent._original;
                }
                var isCompiled = isTrue(options._compiled);
                var needNormalization = !isCompiled;

                this.data = data;
                this.props = props;
                this.children = children;
                this.parent = parent;
                this.listeners = data.on || emptyObject;
                this.injections = resolveInject(options.inject, parent);
                this.slots = function() {
                    return resolveSlots(children, parent);
                };

                // support for compiled functional template
                if (isCompiled) {
                    // exposing $options for renderStatic()
                    this.$options = options;
                    // pre-resolve slots for renderSlot()
                    this.$slots = this.slots();
                    this.$scopedSlots = data.scopedSlots || emptyObject;
                }

                if (options._scopeId) {
                    this._c = function(a, b, c, d) {
                        var vnode = createElement(contextVm, a, b, c, d, needNormalization);
                        if (vnode && !Array.isArray(vnode)) {
                            vnode.fnScopeId = options._scopeId;
                            vnode.fnContext = parent;
                        }
                        return vnode
                    };
                } else {
                    this._c = function(a, b, c, d) {
                        return createElement(contextVm, a, b, c, d, needNormalization);
                    };
                }
            }

            installRenderHelpers(FunctionalRenderContext.prototype);

            function createFunctionalComponent(
                Ctor,
                propsData,
                data,
                contextVm,
                children
            ) {
                var options = Ctor.options;
                var props = {};
                var propOptions = options.props;
                if (isDef(propOptions)) {
                    for (var key in propOptions) {
                        props[key] = validateProp(key, propOptions, propsData || emptyObject);
                    }
                } else {
                    if (isDef(data.attrs)) {
                        mergeProps(props, data.attrs);
                    }
                    if (isDef(data.props)) {
                        mergeProps(props, data.props);
                    }
                }

                var renderContext = new FunctionalRenderContext(
                    data,
                    props,
                    children,
                    contextVm,
                    Ctor
                );

                var vnode = options.render.call(null, renderContext._c, renderContext);

                if (vnode instanceof VNode) {
                    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)
                } else if (Array.isArray(vnode)) {
                    var vnodes = normalizeChildren(vnode) || [];
                    var res = new Array(vnodes.length);
                    for (var i = 0; i < vnodes.length; i++) {
                        res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);
                    }
                    return res
                }
            }

            function cloneAndMarkFunctionalResult(vnode, data, contextVm, options) {
                // #7817 clone node before setting fnContext, otherwise if the node is reused
                // (e.g. it was from a cached normal slot) the fnContext causes named slots
                // that should not be matched to match.
                var clone = cloneVNode(vnode);
                clone.fnContext = contextVm;
                clone.fnOptions = options;
                if (data.slot) {
                    (clone.data || (clone.data = {})).slot = data.slot;
                }
                return clone
            }

            function mergeProps(to, from) {
                for (var key in from) {
                    to[camelize(key)] = from[key];
                }
            }

            /*  */




            // Register the component hook to weex native render engine.
            // The hook will be triggered by native, not javascript.


            // Updates the state of the component to weex native render engine.

            /*  */

            // https://github.com/Hanks10100/weex-native-directive/tree/master/component

            // listening on native callback

            /*  */

            /*  */

            // inline hooks to be invoked on component VNodes during patch
            var componentVNodeHooks = {
                init: function init(
                    vnode,
                    hydrating,
                    parentElm,
                    refElm
                ) {
                    if (
                        vnode.componentInstance &&
                        !vnode.componentInstance._isDestroyed &&
                        vnode.data.keepAlive
                    ) {
                        // kept-alive components, treat as a patch
                        var mountedNode = vnode; // work around flow
                        componentVNodeHooks.prepatch(mountedNode, mountedNode);
                    } else {
                        var child = vnode.componentInstance = createComponentInstanceForVnode(
                            vnode,
                            activeInstance,
                            parentElm,
                            refElm
                        );
                        child.$mount(hydrating ? vnode.elm : undefined, hydrating);
                    }
                },

                prepatch: function prepatch(oldVnode, vnode) {
                    var options = vnode.componentOptions;
                    var child = vnode.componentInstance = oldVnode.componentInstance;
                    updateChildComponent(
                        child,
                        options.propsData, // updated props
                        options.listeners, // updated listeners
                        vnode, // new parent vnode
                        options.children // new children
                    );
                },

                insert: function insert(vnode) {
                    var context = vnode.context;
                    var componentInstance = vnode.componentInstance;
                    if (!componentInstance._isMounted) {
                        componentInstance._isMounted = true;
                        callHook(componentInstance, 'mounted');
                    }
                    if (vnode.data.keepAlive) {
                        if (context._isMounted) {
                            // vue-router#1212
                            // During updates, a kept-alive component's child components may
                            // change, so directly walking the tree here may call activated hooks
                            // on incorrect children. Instead we push them into a queue which will
                            // be processed after the whole patch process ended.
                            queueActivatedComponent(componentInstance);
                        } else {
                            activateChildComponent(componentInstance, true /* direct */ );
                        }
                    }
                },

                destroy: function destroy(vnode) {
                    var componentInstance = vnode.componentInstance;
                    if (!componentInstance._isDestroyed) {
                        if (!vnode.data.keepAlive) {
                            componentInstance.$destroy();
                        } else {
                            deactivateChildComponent(componentInstance, true /* direct */ );
                        }
                    }
                }
            };

            var hooksToMerge = Object.keys(componentVNodeHooks);

            function createComponent(
                Ctor,
                data,
                context,
                children,
                tag
            ) {
                if (isUndef(Ctor)) {
                    return
                }

                var baseCtor = context.$options._base;

                // plain options object: turn it into a constructor
                if (isObject(Ctor)) {
                    Ctor = baseCtor.extend(Ctor);
                }

                // if at this stage it's not a constructor or an async component factory,
                // reject.
                if (typeof Ctor !== 'function') {
                    if (false) {
                        warn(("Invalid Component definition: " + (String(Ctor))), context);
                    }
                    return
                }

                // async component
                var asyncFactory;
                if (isUndef(Ctor.cid)) {
                    asyncFactory = Ctor;
                    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
                    if (Ctor === undefined) {
                        // return a placeholder node for async component, which is rendered
                        // as a comment node but preserves all the raw information for the node.
                        // the information will be used for async server-rendering and hydration.
                        return createAsyncPlaceholder(
                            asyncFactory,
                            data,
                            context,
                            children,
                            tag
                        )
                    }
                }

                data = data || {};

                // resolve constructor options in case global mixins are applied after
                // component constructor creation
                resolveConstructorOptions(Ctor);

                // transform component v-model data into props & events
                if (isDef(data.model)) {
                    transformModel(Ctor.options, data);
                }

                // extract props
                var propsData = extractPropsFromVNodeData(data, Ctor, tag);

                // functional component
                if (isTrue(Ctor.options.functional)) {
                    return createFunctionalComponent(Ctor, propsData, data, context, children)
                }

                // extract listeners, since these needs to be treated as
                // child component listeners instead of DOM listeners
                var listeners = data.on;
                // replace with listeners with .native modifier
                // so it gets processed during parent component patch.
                data.on = data.nativeOn;

                if (isTrue(Ctor.options.abstract)) {
                    // abstract components do not keep anything
                    // other than props & listeners & slot

                    // work around flow
                    var slot = data.slot;
                    data = {};
                    if (slot) {
                        data.slot = slot;
                    }
                }

                // install component management hooks onto the placeholder node
                installComponentHooks(data);

                // return a placeholder vnode
                var name = Ctor.options.name || tag;
                var vnode = new VNode(
                    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
                    data, undefined, undefined, undefined, context, {
                        Ctor: Ctor,
                        propsData: propsData,
                        listeners: listeners,
                        tag: tag,
                        children: children
                    },
                    asyncFactory
                );

                // Weex specific: invoke recycle-list optimized @render function for
                // extracting cell-slot template.
                // https://github.com/Hanks10100/weex-native-directive/tree/master/component
                /* istanbul ignore if */
                return vnode
            }

            function createComponentInstanceForVnode(
                vnode, // we know it's MountedComponentVNode but flow doesn't
                parent, // activeInstance in lifecycle state
                parentElm,
                refElm
            ) {
                var options = {
                    _isComponent: true,
                    parent: parent,
                    _parentVnode: vnode,
                    _parentElm: parentElm || null,
                    _refElm: refElm || null
                };
                // check inline-template render functions
                var inlineTemplate = vnode.data.inlineTemplate;
                if (isDef(inlineTemplate)) {
                    options.render = inlineTemplate.render;
                    options.staticRenderFns = inlineTemplate.staticRenderFns;
                }
                return new vnode.componentOptions.Ctor(options)
            }

            function installComponentHooks(data) {
                var hooks = data.hook || (data.hook = {});
                for (var i = 0; i < hooksToMerge.length; i++) {
                    var key = hooksToMerge[i];
                    hooks[key] = componentVNodeHooks[key];
                }
            }

            // transform component v-model info (value and callback) into
            // prop and event handler respectively.
            function transformModel(options, data) {
                var prop = (options.model && options.model.prop) || 'value';
                var event = (options.model && options.model.event) || 'input';
                (data.props || (data.props = {}))[prop] = data.model.value;
                var on = data.on || (data.on = {});
                if (isDef(on[event])) {
                    on[event] = [data.model.callback].concat(on[event]);
                } else {
                    on[event] = data.model.callback;
                }
            }

            /*  */

            var SIMPLE_NORMALIZE = 1;
            var ALWAYS_NORMALIZE = 2;

            // wrapper function for providing a more flexible interface
            // without getting yelled at by flow
            function createElement(
                context,
                tag,
                data,
                children,
                normalizationType,
                alwaysNormalize
            ) {
                if (Array.isArray(data) || isPrimitive(data)) {
                    normalizationType = children;
                    children = data;
                    data = undefined;
                }
                if (isTrue(alwaysNormalize)) {
                    normalizationType = ALWAYS_NORMALIZE;
                }
                return _createElement(context, tag, data, children, normalizationType)
            }

            function _createElement(
                context,
                tag,
                data,
                children,
                normalizationType
            ) {
                if (isDef(data) && isDef((data).__ob__)) {
                    "production" !== 'production' && warn(
                        "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
                        'Always create fresh vnode data objects in each render!',
                        context
                    );
                    return createEmptyVNode()
                }
                // object syntax in v-bind
                if (isDef(data) && isDef(data.is)) {
                    tag = data.is;
                }
                if (!tag) {
                    // in case of component :is set to falsy value
                    return createEmptyVNode()
                }
                // warn against non-primitive key
                if (false) {
                    {
                        warn(
                            'Avoid using non-primitive value as key, ' +
                            'use string/number value instead.',
                            context
                        );
                    }
                }
                // support single function children as default scoped slot
                if (Array.isArray(children) &&
                    typeof children[0] === 'function'
                ) {
                    data = data || {};
                    data.scopedSlots = {
                        default: children[0]
                    };
                    children.length = 0;
                }
                if (normalizationType === ALWAYS_NORMALIZE) {
                    children = normalizeChildren(children);
                } else if (normalizationType === SIMPLE_NORMALIZE) {
                    children = simpleNormalizeChildren(children);
                }
                var vnode, ns;
                if (typeof tag === 'string') {
                    var Ctor;
                    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
                    if (config.isReservedTag(tag)) {
                        // platform built-in elements
                        vnode = new VNode(
                            config.parsePlatformTagName(tag), data, children,
                            undefined, undefined, context
                        );
                    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
                        // component
                        vnode = createComponent(Ctor, data, context, children, tag);
                    } else {
                        // unknown or unlisted namespaced elements
                        // check at runtime because it may get assigned a namespace when its
                        // parent normalizes children
                        vnode = new VNode(
                            tag, data, children,
                            undefined, undefined, context
                        );
                    }
                } else {
                    // direct component options / constructor
                    vnode = createComponent(tag, data, context, children);
                }
                if (Array.isArray(vnode)) {
                    return vnode
                } else if (isDef(vnode)) {
                    if (isDef(ns)) {
                        applyNS(vnode, ns);
                    }
                    if (isDef(data)) {
                        registerDeepBindings(data);
                    }
                    return vnode
                } else {
                    return createEmptyVNode()
                }
            }

            function applyNS(vnode, ns, force) {
                vnode.ns = ns;
                if (vnode.tag === 'foreignObject') {
                    // use default namespace inside foreignObject
                    ns = undefined;
                    force = true;
                }
                if (isDef(vnode.children)) {
                    for (var i = 0, l = vnode.children.length; i < l; i++) {
                        var child = vnode.children[i];
                        if (isDef(child.tag) && (
                                isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
                            applyNS(child, ns, force);
                        }
                    }
                }
            }

            // ref #5318
            // necessary to ensure parent re-render when deep bindings like :style and
            // :class are used on slot nodes
            function registerDeepBindings(data) {
                if (isObject(data.style)) {
                    traverse(data.style);
                }
                if (isObject(data.class)) {
                    traverse(data.class);
                }
            }

            /*  */

            function initRender(vm) {
                vm._vnode = null; // the root of the child tree
                vm._staticTrees = null; // v-once cached trees
                var options = vm.$options;
                var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
                var renderContext = parentVnode && parentVnode.context;
                vm.$slots = resolveSlots(options._renderChildren, renderContext);
                vm.$scopedSlots = emptyObject;
                // bind the createElement fn to this instance
                // so that we get proper render context inside it.
                // args order: tag, data, children, normalizationType, alwaysNormalize
                // internal version is used by render functions compiled from templates
                vm._c = function(a, b, c, d) {
                    return createElement(vm, a, b, c, d, false);
                };
                // normalization is always applied for the public version, used in
                // user-written render functions.
                vm.$createElement = function(a, b, c, d) {
                    return createElement(vm, a, b, c, d, true);
                };

                // $attrs & $listeners are exposed for easier HOC creation.
                // they need to be reactive so that HOCs using them are always updated
                var parentData = parentVnode && parentVnode.data;

                /* istanbul ignore else */
                if (false) {
                    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function() {
                        !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
                    }, true);
                    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function() {
                        !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
                    }, true);
                } else {
                    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
                    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);
                }
            }

            function renderMixin(Vue) {
                // install runtime convenience helpers
                installRenderHelpers(Vue.prototype);

                Vue.prototype.$nextTick = function(fn) {
                    return nextTick(fn, this)
                };

                Vue.prototype._render = function() {
                    var vm = this;
                    var ref = vm.$options;
                    var render = ref.render;
                    var _parentVnode = ref._parentVnode;

                    // reset _rendered flag on slots for duplicate slot check
                    if (false) {
                        for (var key in vm.$slots) {
                            // $flow-disable-line
                            vm.$slots[key]._rendered = false;
                        }
                    }

                    if (_parentVnode) {
                        vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;
                    }

                    // set parent vnode. this allows render functions to have access
                    // to the data on the placeholder node.
                    vm.$vnode = _parentVnode;
                    // render self
                    var vnode;
                    try {
                        vnode = render.call(vm._renderProxy, vm.$createElement);
                    } catch (e) {
                        handleError(e, vm, "render");
                        // return error render result,
                        // or previous vnode to prevent render error causing blank component
                        /* istanbul ignore else */
                        if (false) {
                            if (vm.$options.renderError) {
                                try {
                                    vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
                                } catch (e) {
                                    handleError(e, vm, "renderError");
                                    vnode = vm._vnode;
                                }
                            } else {
                                vnode = vm._vnode;
                            }
                        } else {
                            vnode = vm._vnode;
                        }
                    }
                    // return empty vnode in case the render function errored out
                    if (!(vnode instanceof VNode)) {
                        if (false) {
                            warn(
                                'Multiple root nodes returned from render function. Render function ' +
                                'should return a single root node.',
                                vm
                            );
                        }
                        vnode = createEmptyVNode();
                    }
                    // set parent
                    vnode.parent = _parentVnode;
                    return vnode
                };
            }

            /*  */

            var uid$3 = 0;

            function initMixin(Vue) {
                Vue.prototype._init = function(options) {
                    var vm = this;
                    // a uid
                    vm._uid = uid$3++;

                    var startTag, endTag;
                    /* istanbul ignore if */
                    if (false) {
                        startTag = "vue-perf-start:" + (vm._uid);
                        endTag = "vue-perf-end:" + (vm._uid);
                        mark(startTag);
                    }

                    // a flag to avoid this being observed
                    vm._isVue = true;
                    // merge options
                    if (options && options._isComponent) {
                        // optimize internal component instantiation
                        // since dynamic options merging is pretty slow, and none of the
                        // internal component options needs special treatment.
                        initInternalComponent(vm, options);
                    } else {
                        vm.$options = mergeOptions(
                            resolveConstructorOptions(vm.constructor),
                            options || {},
                            vm
                        );
                    }
                    /* istanbul ignore else */
                    if (false) {
                        initProxy(vm);
                    } else {
                        vm._renderProxy = vm;
                    }
                    // expose real self
                    vm._self = vm;
                    initLifecycle(vm);
                    initEvents(vm);
                    initRender(vm);
                    callHook(vm, 'beforeCreate');
                    initInjections(vm); // resolve injections before data/props
                    initState(vm);
                    initProvide(vm); // resolve provide after data/props
                    callHook(vm, 'created');

                    /* istanbul ignore if */
                    if (false) {
                        vm._name = formatComponentName(vm, false);
                        mark(endTag);
                        measure(("vue " + (vm._name) + " init"), startTag, endTag);
                    }

                    if (vm.$options.el) {
                        vm.$mount(vm.$options.el);
                    }
                };
            }

            function initInternalComponent(vm, options) {
                var opts = vm.$options = Object.create(vm.constructor.options);
                // doing this because it's faster than dynamic enumeration.
                var parentVnode = options._parentVnode;
                opts.parent = options.parent;
                opts._parentVnode = parentVnode;
                opts._parentElm = options._parentElm;
                opts._refElm = options._refElm;

                var vnodeComponentOptions = parentVnode.componentOptions;
                opts.propsData = vnodeComponentOptions.propsData;
                opts._parentListeners = vnodeComponentOptions.listeners;
                opts._renderChildren = vnodeComponentOptions.children;
                opts._componentTag = vnodeComponentOptions.tag;

                if (options.render) {
                    opts.render = options.render;
                    opts.staticRenderFns = options.staticRenderFns;
                }
            }

            function resolveConstructorOptions(Ctor) {
                var options = Ctor.options;
                if (Ctor.super) {
                    var superOptions = resolveConstructorOptions(Ctor.super);
                    var cachedSuperOptions = Ctor.superOptions;
                    if (superOptions !== cachedSuperOptions) {
                        // super option changed,
                        // need to resolve new options.
                        Ctor.superOptions = superOptions;
                        // check if there are any late-modified/attached options (#4976)
                        var modifiedOptions = resolveModifiedOptions(Ctor);
                        // update base extend options
                        if (modifiedOptions) {
                            extend(Ctor.extendOptions, modifiedOptions);
                        }
                        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
                        if (options.name) {
                            options.components[options.name] = Ctor;
                        }
                    }
                }
                return options
            }

            function resolveModifiedOptions(Ctor) {
                var modified;
                var latest = Ctor.options;
                var extended = Ctor.extendOptions;
                var sealed = Ctor.sealedOptions;
                for (var key in latest) {
                    if (latest[key] !== sealed[key]) {
                        if (!modified) {
                            modified = {};
                        }
                        modified[key] = dedupe(latest[key], extended[key], sealed[key]);
                    }
                }
                return modified
            }

            function dedupe(latest, extended, sealed) {
                // compare latest and sealed to ensure lifecycle hooks won't be duplicated
                // between merges
                if (Array.isArray(latest)) {
                    var res = [];
                    sealed = Array.isArray(sealed) ? sealed : [sealed];
                    extended = Array.isArray(extended) ? extended : [extended];
                    for (var i = 0; i < latest.length; i++) {
                        // push original options and not sealed options to exclude duplicated options
                        if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
                            res.push(latest[i]);
                        }
                    }
                    return res
                } else {
                    return latest
                }
            }

            function Vue(options) {
                if (false) {
                    warn('Vue is a constructor and should be called with the `new` keyword');
                }
                this._init(options);
            }

            initMixin(Vue);
            stateMixin(Vue);
            eventsMixin(Vue);
            lifecycleMixin(Vue);
            renderMixin(Vue);

            /*  */

            function initUse(Vue) {
                Vue.use = function(plugin) {
                    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
                    if (installedPlugins.indexOf(plugin) > -1) {
                        return this
                    }

                    // additional parameters
                    var args = toArray(arguments, 1);
                    args.unshift(this);
                    if (typeof plugin.install === 'function') {
                        plugin.install.apply(plugin, args);
                    } else if (typeof plugin === 'function') {
                        plugin.apply(null, args);
                    }
                    installedPlugins.push(plugin);
                    return this
                };
            }

            /*  */

            function initMixin$1(Vue) {
                Vue.mixin = function(mixin) {
                    this.options = mergeOptions(this.options, mixin);
                    return this
                };
            }

            /*  */

            function initExtend(Vue) {
                /**
                 * Each instance constructor, including Vue, has a unique
                 * cid. This enables us to create wrapped "child
                 * constructors" for prototypal inheritance and cache them.
                 */
                Vue.cid = 0;
                var cid = 1;

                /**
                 * Class inheritance
                 */
                Vue.extend = function(extendOptions) {
                    extendOptions = extendOptions || {};
                    var Super = this;
                    var SuperId = Super.cid;
                    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
                    if (cachedCtors[SuperId]) {
                        return cachedCtors[SuperId]
                    }

                    var name = extendOptions.name || Super.options.name;
                    if (false) {
                        validateComponentName(name);
                    }

                    var Sub = function VueComponent(options) {
                        this._init(options);
                    };
                    Sub.prototype = Object.create(Super.prototype);
                    Sub.prototype.constructor = Sub;
                    Sub.cid = cid++;
                    Sub.options = mergeOptions(
                        Super.options,
                        extendOptions
                    );
                    Sub['super'] = Super;

                    // For props and computed properties, we define the proxy getters on
                    // the Vue instances at extension time, on the extended prototype. This
                    // avoids Object.defineProperty calls for each instance created.
                    if (Sub.options.props) {
                        initProps$1(Sub);
                    }
                    if (Sub.options.computed) {
                        initComputed$1(Sub);
                    }

                    // allow further extension/mixin/plugin usage
                    Sub.extend = Super.extend;
                    Sub.mixin = Super.mixin;
                    Sub.use = Super.use;

                    // create asset registers, so extended classes
                    // can have their private assets too.
                    ASSET_TYPES.forEach(function(type) {
                        Sub[type] = Super[type];
                    });
                    // enable recursive self-lookup
                    if (name) {
                        Sub.options.components[name] = Sub;
                    }

                    // keep a reference to the super options at extension time.
                    // later at instantiation we can check if Super's options have
                    // been updated.
                    Sub.superOptions = Super.options;
                    Sub.extendOptions = extendOptions;
                    Sub.sealedOptions = extend({}, Sub.options);

                    // cache constructor
                    cachedCtors[SuperId] = Sub;
                    return Sub
                };
            }

            function initProps$1(Comp) {
                var props = Comp.options.props;
                for (var key in props) {
                    proxy(Comp.prototype, "_props", key);
                }
            }

            function initComputed$1(Comp) {
                var computed = Comp.options.computed;
                for (var key in computed) {
                    defineComputed(Comp.prototype, key, computed[key]);
                }
            }

            /*  */

            function initAssetRegisters(Vue) {
                /**
                 * Create asset registration methods.
                 */
                ASSET_TYPES.forEach(function(type) {
                    Vue[type] = function(
                        id,
                        definition
                    ) {
                        if (!definition) {
                            return this.options[type + 's'][id]
                        } else {
                            /* istanbul ignore if */
                            if (false) {
                                validateComponentName(id);
                            }
                            if (type === 'component' && isPlainObject(definition)) {
                                definition.name = definition.name || id;
                                definition = this.options._base.extend(definition);
                            }
                            if (type === 'directive' && typeof definition === 'function') {
                                definition = {
                                    bind: definition,
                                    update: definition
                                };
                            }
                            this.options[type + 's'][id] = definition;
                            return definition
                        }
                    };
                });
            }

            /*  */

            function getComponentName(opts) {
                return opts && (opts.Ctor.options.name || opts.tag)
            }

            function matches(pattern, name) {
                if (Array.isArray(pattern)) {
                    return pattern.indexOf(name) > -1
                } else if (typeof pattern === 'string') {
                    return pattern.split(',').indexOf(name) > -1
                } else if (isRegExp(pattern)) {
                    return pattern.test(name)
                }
                /* istanbul ignore next */
                return false
            }

            function pruneCache(keepAliveInstance, filter) {
                var cache = keepAliveInstance.cache;
                var keys = keepAliveInstance.keys;
                var _vnode = keepAliveInstance._vnode;
                for (var key in cache) {
                    var cachedNode = cache[key];
                    if (cachedNode) {
                        var name = getComponentName(cachedNode.componentOptions);
                        if (name && !filter(name)) {
                            pruneCacheEntry(cache, key, keys, _vnode);
                        }
                    }
                }
            }

            function pruneCacheEntry(
                cache,
                key,
                keys,
                current
            ) {
                var cached$$1 = cache[key];
                if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
                    cached$$1.componentInstance.$destroy();
                }
                cache[key] = null;
                remove(keys, key);
            }

            var patternTypes = [String, RegExp, Array];

            var KeepAlive = {
                name: 'keep-alive',
                abstract: true,

                props: {
                    include: patternTypes,
                    exclude: patternTypes,
                    max: [String, Number]
                },

                created: function created() {
                    this.cache = Object.create(null);
                    this.keys = [];
                },

                destroyed: function destroyed() {
                    var this$1 = this;

                    for (var key in this$1.cache) {
                        pruneCacheEntry(this$1.cache, key, this$1.keys);
                    }
                },

                mounted: function mounted() {
                    var this$1 = this;

                    this.$watch('include', function(val) {
                        pruneCache(this$1, function(name) {
                            return matches(val, name);
                        });
                    });
                    this.$watch('exclude', function(val) {
                        pruneCache(this$1, function(name) {
                            return !matches(val, name);
                        });
                    });
                },

                render: function render() {
                    var slot = this.$slots.default;
                    var vnode = getFirstComponentChild(slot);
                    var componentOptions = vnode && vnode.componentOptions;
                    if (componentOptions) {
                        // check pattern
                        var name = getComponentName(componentOptions);
                        var ref = this;
                        var include = ref.include;
                        var exclude = ref.exclude;
                        if (
                            // not included
                            (include && (!name || !matches(include, name))) ||
                            // excluded
                            (exclude && name && matches(exclude, name))
                        ) {
                            return vnode
                        }

                        var ref$1 = this;
                        var cache = ref$1.cache;
                        var keys = ref$1.keys;
                        var key = vnode.key == null
                            // same constructor may get registered as different local components
                            // so cid alone is not enough (#3269)
                            ?
                            componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '') :
                            vnode.key;
                        if (cache[key]) {
                            vnode.componentInstance = cache[key].componentInstance;
                            // make current key freshest
                            remove(keys, key);
                            keys.push(key);
                        } else {
                            cache[key] = vnode;
                            keys.push(key);
                            // prune oldest entry
                            if (this.max && keys.length > parseInt(this.max)) {
                                pruneCacheEntry(cache, keys[0], keys, this._vnode);
                            }
                        }

                        vnode.data.keepAlive = true;
                    }
                    return vnode || (slot && slot[0])
                }
            }

            var builtInComponents = {
                KeepAlive: KeepAlive
            }

            /*  */

            function initGlobalAPI(Vue) {
                // config
                var configDef = {};
                configDef.get = function() {
                    return config;
                };
                if (false) {
                    configDef.set = function() {
                        warn(
                            'Do not replace the Vue.config object, set individual fields instead.'
                        );
                    };
                }
                Object.defineProperty(Vue, 'config', configDef);

                // exposed util methods.
                // NOTE: these are not considered part of the public API - avoid relying on
                // them unless you are aware of the risk.
                Vue.util = {
                    warn: warn,
                    extend: extend,
                    mergeOptions: mergeOptions,
                    defineReactive: defineReactive
                };

                Vue.set = set;
                Vue.delete = del;
                Vue.nextTick = nextTick;

                Vue.options = Object.create(null);
                ASSET_TYPES.forEach(function(type) {
                    Vue.options[type + 's'] = Object.create(null);
                });

                // this is used to identify the "base" constructor to extend all plain-object
                // components with in Weex's multi-instance scenarios.
                Vue.options._base = Vue;

                extend(Vue.options.components, builtInComponents);

                initUse(Vue);
                initMixin$1(Vue);
                initExtend(Vue);
                initAssetRegisters(Vue);
            }

            initGlobalAPI(Vue);

            Object.defineProperty(Vue.prototype, '$isServer', {
                get: isServerRendering
            });

            Object.defineProperty(Vue.prototype, '$ssrContext', {
                get: function get() {
                    /* istanbul ignore next */
                    return this.$vnode && this.$vnode.ssrContext
                }
            });

            // expose FunctionalRenderContext for ssr runtime helper installation
            Object.defineProperty(Vue, 'FunctionalRenderContext', {
                value: FunctionalRenderContext
            });

            Vue.version = '2.5.16';

            /*  */

            // these are reserved for web because they are directly compiled away
            // during template compilation
            var isReservedAttr = makeMap('style,class');

            // attributes that should be using props for binding
            var acceptValue = makeMap('input,textarea,option,select,progress');
            var mustUseProp = function(tag, type, attr) {
                return (
                    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
                    (attr === 'selected' && tag === 'option') ||
                    (attr === 'checked' && tag === 'input') ||
                    (attr === 'muted' && tag === 'video')
                )
            };

            var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

            var isBooleanAttr = makeMap(
                'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
                'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
                'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
                'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
                'required,reversed,scoped,seamless,selected,sortable,translate,' +
                'truespeed,typemustmatch,visible'
            );

            var xlinkNS = 'http://www.w3.org/1999/xlink';

            var isXlink = function(name) {
                return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
            };

            var getXlinkProp = function(name) {
                return isXlink(name) ? name.slice(6, name.length) : ''
            };

            var isFalsyAttrValue = function(val) {
                return val == null || val === false
            };

            /*  */

            function genClassForVnode(vnode) {
                var data = vnode.data;
                var parentNode = vnode;
                var childNode = vnode;
                while (isDef(childNode.componentInstance)) {
                    childNode = childNode.componentInstance._vnode;
                    if (childNode && childNode.data) {
                        data = mergeClassData(childNode.data, data);
                    }
                }
                while (isDef(parentNode = parentNode.parent)) {
                    if (parentNode && parentNode.data) {
                        data = mergeClassData(data, parentNode.data);
                    }
                }
                return renderClass(data.staticClass, data.class)
            }

            function mergeClassData(child, parent) {
                return {
                    staticClass: concat(child.staticClass, parent.staticClass),
                    class: isDef(child.class) ?
                        [child.class, parent.class] :
                        parent.class
                }
            }

            function renderClass(
                staticClass,
                dynamicClass
            ) {
                if (isDef(staticClass) || isDef(dynamicClass)) {
                    return concat(staticClass, stringifyClass(dynamicClass))
                }
                /* istanbul ignore next */
                return ''
            }

            function concat(a, b) {
                return a ? b ? (a + ' ' + b) : a : (b || '')
            }

            function stringifyClass(value) {
                if (Array.isArray(value)) {
                    return stringifyArray(value)
                }
                if (isObject(value)) {
                    return stringifyObject(value)
                }
                if (typeof value === 'string') {
                    return value
                }
                /* istanbul ignore next */
                return ''
            }

            function stringifyArray(value) {
                var res = '';
                var stringified;
                for (var i = 0, l = value.length; i < l; i++) {
                    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
                        if (res) {
                            res += ' ';
                        }
                        res += stringified;
                    }
                }
                return res
            }

            function stringifyObject(value) {
                var res = '';
                for (var key in value) {
                    if (value[key]) {
                        if (res) {
                            res += ' ';
                        }
                        res += key;
                    }
                }
                return res
            }

            /*  */

            var namespaceMap = {
                svg: 'http://www.w3.org/2000/svg',
                math: 'http://www.w3.org/1998/Math/MathML'
            };

            var isHTMLTag = makeMap(
                'html,body,base,head,link,meta,style,title,' +
                'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
                'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
                'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
                's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
                'embed,object,param,source,canvas,script,noscript,del,ins,' +
                'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
                'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
                'output,progress,select,textarea,' +
                'details,dialog,menu,menuitem,summary,' +
                'content,element,shadow,template,blockquote,iframe,tfoot'
            );

            // this map is intentionally selective, only covering SVG elements that may
            // contain child elements.
            var isSVG = makeMap(
                'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
                'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
                'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
                true
            );

            var isPreTag = function(tag) {
                return tag === 'pre';
            };

            var isReservedTag = function(tag) {
                return isHTMLTag(tag) || isSVG(tag)
            };

            function getTagNamespace(tag) {
                if (isSVG(tag)) {
                    return 'svg'
                }
                // basic support for MathML
                // note it doesn't support other MathML elements being component roots
                if (tag === 'math') {
                    return 'math'
                }
            }

            var unknownElementCache = Object.create(null);

            function isUnknownElement(tag) {
                /* istanbul ignore if */
                if (!inBrowser) {
                    return true
                }
                if (isReservedTag(tag)) {
                    return false
                }
                tag = tag.toLowerCase();
                /* istanbul ignore if */
                if (unknownElementCache[tag] != null) {
                    return unknownElementCache[tag]
                }
                var el = document.createElement(tag);
                if (tag.indexOf('-') > -1) {
                    // http://stackoverflow.com/a/28210364/1070244
                    return (unknownElementCache[tag] = (
                        el.constructor === window.HTMLUnknownElement ||
                        el.constructor === window.HTMLElement
                    ))
                } else {
                    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
                }
            }

            var isTextInputType = makeMap('text,number,password,search,email,tel,url');

            /*  */

            /**
             * Query an element selector if it's not an element already.
             */
            function query(el) {
                if (typeof el === 'string') {
                    var selected = document.querySelector(el);
                    if (!selected) {
                        "production" !== 'production' && warn(
                            'Cannot find element: ' + el
                        );
                        return document.createElement('div')
                    }
                    return selected
                } else {
                    return el
                }
            }

            /*  */

            function createElement$1(tagName, vnode) {
                var elm = document.createElement(tagName);
                if (tagName !== 'select') {
                    return elm
                }
                // false or null will remove the attribute but undefined will not
                if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
                    elm.setAttribute('multiple', 'multiple');
                }
                return elm
            }

            function createElementNS(namespace, tagName) {
                return document.createElementNS(namespaceMap[namespace], tagName)
            }

            function createTextNode(text) {
                return document.createTextNode(text)
            }

            function createComment(text) {
                return document.createComment(text)
            }

            function insertBefore(parentNode, newNode, referenceNode) {
                parentNode.insertBefore(newNode, referenceNode);
            }

            function removeChild(node, child) {
                node.removeChild(child);
            }

            function appendChild(node, child) {
                node.appendChild(child);
            }

            function parentNode(node) {
                return node.parentNode
            }

            function nextSibling(node) {
                return node.nextSibling
            }

            function tagName(node) {
                return node.tagName
            }

            function setTextContent(node, text) {
                node.textContent = text;
            }

            function setStyleScope(node, scopeId) {
                node.setAttribute(scopeId, '');
            }


            var nodeOps = Object.freeze({
                createElement: createElement$1,
                createElementNS: createElementNS,
                createTextNode: createTextNode,
                createComment: createComment,
                insertBefore: insertBefore,
                removeChild: removeChild,
                appendChild: appendChild,
                parentNode: parentNode,
                nextSibling: nextSibling,
                tagName: tagName,
                setTextContent: setTextContent,
                setStyleScope: setStyleScope
            });

            /*  */

            var ref = {
                create: function create(_, vnode) {
                    registerRef(vnode);
                },
                update: function update(oldVnode, vnode) {
                    if (oldVnode.data.ref !== vnode.data.ref) {
                        registerRef(oldVnode, true);
                        registerRef(vnode);
                    }
                },
                destroy: function destroy(vnode) {
                    registerRef(vnode, true);
                }
            }

            function registerRef(vnode, isRemoval) {
                var key = vnode.data.ref;
                if (!isDef(key)) {
                    return
                }

                var vm = vnode.context;
                var ref = vnode.componentInstance || vnode.elm;
                var refs = vm.$refs;
                if (isRemoval) {
                    if (Array.isArray(refs[key])) {
                        remove(refs[key], ref);
                    } else if (refs[key] === ref) {
                        refs[key] = undefined;
                    }
                } else {
                    if (vnode.data.refInFor) {
                        if (!Array.isArray(refs[key])) {
                            refs[key] = [ref];
                        } else if (refs[key].indexOf(ref) < 0) {
                            // $flow-disable-line
                            refs[key].push(ref);
                        }
                    } else {
                        refs[key] = ref;
                    }
                }
            }

            /**
             * Virtual DOM patching algorithm based on Snabbdom by
             * Simon Friis Vindum (@paldepind)
             * Licensed under the MIT License
             * https://github.com/paldepind/snabbdom/blob/master/LICENSE
             *
             * modified by Evan You (@yyx990803)
             *
             * Not type-checking this because this file is perf-critical and the cost
             * of making flow understand it is not worth it.
             */

            var emptyNode = new VNode('', {}, []);

            var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

            function sameVnode(a, b) {
                return (
                    a.key === b.key && (
                        (
                            a.tag === b.tag &&
                            a.isComment === b.isComment &&
                            isDef(a.data) === isDef(b.data) &&
                            sameInputType(a, b)
                        ) || (
                            isTrue(a.isAsyncPlaceholder) &&
                            a.asyncFactory === b.asyncFactory &&
                            isUndef(b.asyncFactory.error)
                        )
                    )
                )
            }

            function sameInputType(a, b) {
                if (a.tag !== 'input') {
                    return true
                }
                var i;
                var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
                var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
                return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
            }

            function createKeyToOldIdx(children, beginIdx, endIdx) {
                var i, key;
                var map = {};
                for (i = beginIdx; i <= endIdx; ++i) {
                    key = children[i].key;
                    if (isDef(key)) {
                        map[key] = i;
                    }
                }
                return map
            }

            function createPatchFunction(backend) {
                var i, j;
                var cbs = {};

                var modules = backend.modules;
                var nodeOps = backend.nodeOps;

                for (i = 0; i < hooks.length; ++i) {
                    cbs[hooks[i]] = [];
                    for (j = 0; j < modules.length; ++j) {
                        if (isDef(modules[j][hooks[i]])) {
                            cbs[hooks[i]].push(modules[j][hooks[i]]);
                        }
                    }
                }

                function emptyNodeAt(elm) {
                    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
                }

                function createRmCb(childElm, listeners) {
                    function remove() {
                        if (--remove.listeners === 0) {
                            removeNode(childElm);
                        }
                    }
                    remove.listeners = listeners;
                    return remove
                }

                function removeNode(el) {
                    var parent = nodeOps.parentNode(el);
                    // element may have already been removed due to v-html / v-text
                    if (isDef(parent)) {
                        nodeOps.removeChild(parent, el);
                    }
                }

                function isUnknownElement$$1(vnode, inVPre) {
                    return (!inVPre &&
                        !vnode.ns &&
                        !(
                            config.ignoredElements.length &&
                            config.ignoredElements.some(function(ignore) {
                                return isRegExp(ignore) ?
                                    ignore.test(vnode.tag) :
                                    ignore === vnode.tag
                            })
                        ) &&
                        config.isUnknownElement(vnode.tag)
                    )
                }

                var creatingElmInVPre = 0;

                function createElm(
                    vnode,
                    insertedVnodeQueue,
                    parentElm,
                    refElm,
                    nested,
                    ownerArray,
                    index
                ) {
                    if (isDef(vnode.elm) && isDef(ownerArray)) {
                        // This vnode was used in a previous render!
                        // now it's used as a new node, overwriting its elm would cause
                        // potential patch errors down the road when it's used as an insertion
                        // reference node. Instead, we clone the node on-demand before creating
                        // associated DOM element for it.
                        vnode = ownerArray[index] = cloneVNode(vnode);
                    }

                    vnode.isRootInsert = !nested; // for transition enter check
                    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
                        return
                    }

                    var data = vnode.data;
                    var children = vnode.children;
                    var tag = vnode.tag;
                    if (isDef(tag)) {
                        if (false) {
                            if (data && data.pre) {
                                creatingElmInVPre++;
                            }
                            if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
                                warn(
                                    'Unknown custom element: <' + tag + '> - did you ' +
                                    'register the component correctly? For recursive components, ' +
                                    'make sure to provide the "name" option.',
                                    vnode.context
                                );
                            }
                        }

                        vnode.elm = vnode.ns ?
                            nodeOps.createElementNS(vnode.ns, tag) :
                            nodeOps.createElement(tag, vnode);
                        setScope(vnode);

                        /* istanbul ignore if */
                        {
                            createChildren(vnode, children, insertedVnodeQueue);
                            if (isDef(data)) {
                                invokeCreateHooks(vnode, insertedVnodeQueue);
                            }
                            insert(parentElm, vnode.elm, refElm);
                        }

                        if (false) {
                            creatingElmInVPre--;
                        }
                    } else if (isTrue(vnode.isComment)) {
                        vnode.elm = nodeOps.createComment(vnode.text);
                        insert(parentElm, vnode.elm, refElm);
                    } else {
                        vnode.elm = nodeOps.createTextNode(vnode.text);
                        insert(parentElm, vnode.elm, refElm);
                    }
                }

                function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
                    var i = vnode.data;
                    if (isDef(i)) {
                        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
                        if (isDef(i = i.hook) && isDef(i = i.init)) {
                            i(vnode, false /* hydrating */ , parentElm, refElm);
                        }
                        // after calling the init hook, if the vnode is a child component
                        // it should've created a child instance and mounted it. the child
                        // component also has set the placeholder vnode's elm.
                        // in that case we can just return the element and be done.
                        if (isDef(vnode.componentInstance)) {
                            initComponent(vnode, insertedVnodeQueue);
                            if (isTrue(isReactivated)) {
                                reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
                            }
                            return true
                        }
                    }
                }

                function initComponent(vnode, insertedVnodeQueue) {
                    if (isDef(vnode.data.pendingInsert)) {
                        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
                        vnode.data.pendingInsert = null;
                    }
                    vnode.elm = vnode.componentInstance.$el;
                    if (isPatchable(vnode)) {
                        invokeCreateHooks(vnode, insertedVnodeQueue);
                        setScope(vnode);
                    } else {
                        // empty component root.
                        // skip all element-related modules except for ref (#3455)
                        registerRef(vnode);
                        // make sure to invoke the insert hook
                        insertedVnodeQueue.push(vnode);
                    }
                }

                function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
                    var i;
                    // hack for #4339: a reactivated component with inner transition
                    // does not trigger because the inner node's created hooks are not called
                    // again. It's not ideal to involve module-specific logic in here but
                    // there doesn't seem to be a better way to do it.
                    var innerNode = vnode;
                    while (innerNode.componentInstance) {
                        innerNode = innerNode.componentInstance._vnode;
                        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
                            for (i = 0; i < cbs.activate.length; ++i) {
                                cbs.activate[i](emptyNode, innerNode);
                            }
                            insertedVnodeQueue.push(innerNode);
                            break
                        }
                    }
                    // unlike a newly created component,
                    // a reactivated keep-alive component doesn't insert itself
                    insert(parentElm, vnode.elm, refElm);
                }

                function insert(parent, elm, ref$$1) {
                    if (isDef(parent)) {
                        if (isDef(ref$$1)) {
                            if (ref$$1.parentNode === parent) {
                                nodeOps.insertBefore(parent, elm, ref$$1);
                            }
                        } else {
                            nodeOps.appendChild(parent, elm);
                        }
                    }
                }

                function createChildren(vnode, children, insertedVnodeQueue) {
                    if (Array.isArray(children)) {
                        if (false) {
                            checkDuplicateKeys(children);
                        }
                        for (var i = 0; i < children.length; ++i) {
                            createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
                        }
                    } else if (isPrimitive(vnode.text)) {
                        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
                    }
                }

                function isPatchable(vnode) {
                    while (vnode.componentInstance) {
                        vnode = vnode.componentInstance._vnode;
                    }
                    return isDef(vnode.tag)
                }

                function invokeCreateHooks(vnode, insertedVnodeQueue) {
                    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                        cbs.create[i$1](emptyNode, vnode);
                    }
                    i = vnode.data.hook; // Reuse variable
                    if (isDef(i)) {
                        if (isDef(i.create)) {
                            i.create(emptyNode, vnode);
                        }
                        if (isDef(i.insert)) {
                            insertedVnodeQueue.push(vnode);
                        }
                    }
                }

                // set scope id attribute for scoped CSS.
                // this is implemented as a special case to avoid the overhead
                // of going through the normal attribute patching process.
                function setScope(vnode) {
                    var i;
                    if (isDef(i = vnode.fnScopeId)) {
                        nodeOps.setStyleScope(vnode.elm, i);
                    } else {
                        var ancestor = vnode;
                        while (ancestor) {
                            if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
                                nodeOps.setStyleScope(vnode.elm, i);
                            }
                            ancestor = ancestor.parent;
                        }
                    }
                    // for slot content they should also get the scopeId from the host instance.
                    if (isDef(i = activeInstance) &&
                        i !== vnode.context &&
                        i !== vnode.fnContext &&
                        isDef(i = i.$options._scopeId)
                    ) {
                        nodeOps.setStyleScope(vnode.elm, i);
                    }
                }

                function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
                    for (; startIdx <= endIdx; ++startIdx) {
                        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
                    }
                }

                function invokeDestroyHook(vnode) {
                    var i, j;
                    var data = vnode.data;
                    if (isDef(data)) {
                        if (isDef(i = data.hook) && isDef(i = i.destroy)) {
                            i(vnode);
                        }
                        for (i = 0; i < cbs.destroy.length; ++i) {
                            cbs.destroy[i](vnode);
                        }
                    }
                    if (isDef(i = vnode.children)) {
                        for (j = 0; j < vnode.children.length; ++j) {
                            invokeDestroyHook(vnode.children[j]);
                        }
                    }
                }

                function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
                    for (; startIdx <= endIdx; ++startIdx) {
                        var ch = vnodes[startIdx];
                        if (isDef(ch)) {
                            if (isDef(ch.tag)) {
                                removeAndInvokeRemoveHook(ch);
                                invokeDestroyHook(ch);
                            } else { // Text node
                                removeNode(ch.elm);
                            }
                        }
                    }
                }

                function removeAndInvokeRemoveHook(vnode, rm) {
                    if (isDef(rm) || isDef(vnode.data)) {
                        var i;
                        var listeners = cbs.remove.length + 1;
                        if (isDef(rm)) {
                            // we have a recursively passed down rm callback
                            // increase the listeners count
                            rm.listeners += listeners;
                        } else {
                            // directly removing
                            rm = createRmCb(vnode.elm, listeners);
                        }
                        // recursively invoke hooks on child component root node
                        if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
                            removeAndInvokeRemoveHook(i, rm);
                        }
                        for (i = 0; i < cbs.remove.length; ++i) {
                            cbs.remove[i](vnode, rm);
                        }
                        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
                            i(vnode, rm);
                        } else {
                            rm();
                        }
                    } else {
                        removeNode(vnode.elm);
                    }
                }

                function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
                    var oldStartIdx = 0;
                    var newStartIdx = 0;
                    var oldEndIdx = oldCh.length - 1;
                    var oldStartVnode = oldCh[0];
                    var oldEndVnode = oldCh[oldEndIdx];
                    var newEndIdx = newCh.length - 1;
                    var newStartVnode = newCh[0];
                    var newEndVnode = newCh[newEndIdx];
                    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

                    // removeOnly is a special flag used only by <transition-group>
                    // to ensure removed elements stay in correct relative positions
                    // during leaving transitions
                    var canMove = !removeOnly;

                    if (false) {
                        checkDuplicateKeys(newCh);
                    }

                    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
                        if (isUndef(oldStartVnode)) {
                            oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
                        } else if (isUndef(oldEndVnode)) {
                            oldEndVnode = oldCh[--oldEndIdx];
                        } else if (sameVnode(oldStartVnode, newStartVnode)) {
                            patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
                            oldStartVnode = oldCh[++oldStartIdx];
                            newStartVnode = newCh[++newStartIdx];
                        } else if (sameVnode(oldEndVnode, newEndVnode)) {
                            patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
                            oldEndVnode = oldCh[--oldEndIdx];
                            newEndVnode = newCh[--newEndIdx];
                        } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
                            patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
                            canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
                            oldStartVnode = oldCh[++oldStartIdx];
                            newEndVnode = newCh[--newEndIdx];
                        } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
                            patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
                            canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                            oldEndVnode = oldCh[--oldEndIdx];
                            newStartVnode = newCh[++newStartIdx];
                        } else {
                            if (isUndef(oldKeyToIdx)) {
                                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                            }
                            idxInOld = isDef(newStartVnode.key) ?
                                oldKeyToIdx[newStartVnode.key] :
                                findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
                            if (isUndef(idxInOld)) { // New element
                                createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                            } else {
                                vnodeToMove = oldCh[idxInOld];
                                if (sameVnode(vnodeToMove, newStartVnode)) {
                                    patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);
                                    oldCh[idxInOld] = undefined;
                                    canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
                                } else {
                                    // same key but different element. treat as new element
                                    createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                                }
                            }
                            newStartVnode = newCh[++newStartIdx];
                        }
                    }
                    if (oldStartIdx > oldEndIdx) {
                        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
                        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
                    } else if (newStartIdx > newEndIdx) {
                        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
                    }
                }

                function checkDuplicateKeys(children) {
                    var seenKeys = {};
                    for (var i = 0; i < children.length; i++) {
                        var vnode = children[i];
                        var key = vnode.key;
                        if (isDef(key)) {
                            if (seenKeys[key]) {
                                warn(
                                    ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
                                    vnode.context
                                );
                            } else {
                                seenKeys[key] = true;
                            }
                        }
                    }
                }

                function findIdxInOld(node, oldCh, start, end) {
                    for (var i = start; i < end; i++) {
                        var c = oldCh[i];
                        if (isDef(c) && sameVnode(node, c)) {
                            return i
                        }
                    }
                }

                function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {
                    if (oldVnode === vnode) {
                        return
                    }

                    var elm = vnode.elm = oldVnode.elm;

                    if (isTrue(oldVnode.isAsyncPlaceholder)) {
                        if (isDef(vnode.asyncFactory.resolved)) {
                            hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
                        } else {
                            vnode.isAsyncPlaceholder = true;
                        }
                        return
                    }

                    // reuse element for static trees.
                    // note we only do this if the vnode is cloned -
                    // if the new node is not cloned it means the render functions have been
                    // reset by the hot-reload-api and we need to do a proper re-render.
                    if (isTrue(vnode.isStatic) &&
                        isTrue(oldVnode.isStatic) &&
                        vnode.key === oldVnode.key &&
                        (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
                    ) {
                        vnode.componentInstance = oldVnode.componentInstance;
                        return
                    }

                    var i;
                    var data = vnode.data;
                    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
                        i(oldVnode, vnode);
                    }

                    var oldCh = oldVnode.children;
                    var ch = vnode.children;
                    if (isDef(data) && isPatchable(vnode)) {
                        for (i = 0; i < cbs.update.length; ++i) {
                            cbs.update[i](oldVnode, vnode);
                        }
                        if (isDef(i = data.hook) && isDef(i = i.update)) {
                            i(oldVnode, vnode);
                        }
                    }
                    if (isUndef(vnode.text)) {
                        if (isDef(oldCh) && isDef(ch)) {
                            if (oldCh !== ch) {
                                updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
                            }
                        } else if (isDef(ch)) {
                            if (isDef(oldVnode.text)) {
                                nodeOps.setTextContent(elm, '');
                            }
                            addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
                        } else if (isDef(oldCh)) {
                            removeVnodes(elm, oldCh, 0, oldCh.length - 1);
                        } else if (isDef(oldVnode.text)) {
                            nodeOps.setTextContent(elm, '');
                        }
                    } else if (oldVnode.text !== vnode.text) {
                        nodeOps.setTextContent(elm, vnode.text);
                    }
                    if (isDef(data)) {
                        if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
                            i(oldVnode, vnode);
                        }
                    }
                }

                function invokeInsertHook(vnode, queue, initial) {
                    // delay insert hooks for component root nodes, invoke them after the
                    // element is really inserted
                    if (isTrue(initial) && isDef(vnode.parent)) {
                        vnode.parent.data.pendingInsert = queue;
                    } else {
                        for (var i = 0; i < queue.length; ++i) {
                            queue[i].data.hook.insert(queue[i]);
                        }
                    }
                }

                var hydrationBailed = false;
                // list of modules that can skip create hook during hydration because they
                // are already rendered on the client or has no need for initialization
                // Note: style is excluded because it relies on initial clone for future
                // deep updates (#7063).
                var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

                // Note: this is a browser-only function so we can assume elms are DOM nodes.
                function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
                    var i;
                    var tag = vnode.tag;
                    var data = vnode.data;
                    var children = vnode.children;
                    inVPre = inVPre || (data && data.pre);
                    vnode.elm = elm;

                    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
                        vnode.isAsyncPlaceholder = true;
                        return true
                    }
                    // assert node match
                    if (false) {
                        if (!assertNodeMatch(elm, vnode, inVPre)) {
                            return false
                        }
                    }
                    if (isDef(data)) {
                        if (isDef(i = data.hook) && isDef(i = i.init)) {
                            i(vnode, true /* hydrating */ );
                        }
                        if (isDef(i = vnode.componentInstance)) {
                            // child component. it should have hydrated its own tree.
                            initComponent(vnode, insertedVnodeQueue);
                            return true
                        }
                    }
                    if (isDef(tag)) {
                        if (isDef(children)) {
                            // empty element, allow client to pick up and populate children
                            if (!elm.hasChildNodes()) {
                                createChildren(vnode, children, insertedVnodeQueue);
                            } else {
                                // v-html and domProps: innerHTML
                                if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
                                    if (i !== elm.innerHTML) {
                                        /* istanbul ignore if */
                                        if (false) {
                                            hydrationBailed = true;
                                            console.warn('Parent: ', elm);
                                            console.warn('server innerHTML: ', i);
                                            console.warn('client innerHTML: ', elm.innerHTML);
                                        }
                                        return false
                                    }
                                } else {
                                    // iterate and compare children lists
                                    var childrenMatch = true;
                                    var childNode = elm.firstChild;
                                    for (var i$1 = 0; i$1 < children.length; i$1++) {
                                        if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                                            childrenMatch = false;
                                            break
                                        }
                                        childNode = childNode.nextSibling;
                                    }
                                    // if childNode is not null, it means the actual childNodes list is
                                    // longer than the virtual children list.
                                    if (!childrenMatch || childNode) {
                                        /* istanbul ignore if */
                                        if (false) {
                                            hydrationBailed = true;
                                            console.warn('Parent: ', elm);
                                            console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
                                        }
                                        return false
                                    }
                                }
                            }
                        }
                        if (isDef(data)) {
                            var fullInvoke = false;
                            for (var key in data) {
                                if (!isRenderedModule(key)) {
                                    fullInvoke = true;
                                    invokeCreateHooks(vnode, insertedVnodeQueue);
                                    break
                                }
                            }
                            if (!fullInvoke && data['class']) {
                                // ensure collecting deps for deep class bindings for future updates
                                traverse(data['class']);
                            }
                        }
                    } else if (elm.data !== vnode.text) {
                        elm.data = vnode.text;
                    }
                    return true
                }

                function assertNodeMatch(node, vnode, inVPre) {
                    if (isDef(vnode.tag)) {
                        return vnode.tag.indexOf('vue-component') === 0 || (!isUnknownElement$$1(vnode, inVPre) &&
                            vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
                        )
                    } else {
                        return node.nodeType === (vnode.isComment ? 8 : 3)
                    }
                }

                return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
                    if (isUndef(vnode)) {
                        if (isDef(oldVnode)) {
                            invokeDestroyHook(oldVnode);
                        }
                        return
                    }

                    var isInitialPatch = false;
                    var insertedVnodeQueue = [];

                    if (isUndef(oldVnode)) {
                        // empty mount (likely as component), create new root element
                        isInitialPatch = true;
                        createElm(vnode, insertedVnodeQueue, parentElm, refElm);
                    } else {
                        var isRealElement = isDef(oldVnode.nodeType);
                        if (!isRealElement && sameVnode(oldVnode, vnode)) {
                            // patch existing root node
                            patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
                        } else {
                            if (isRealElement) {
                                // mounting to a real element
                                // check if this is server-rendered content and if we can perform
                                // a successful hydration.
                                if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
                                    oldVnode.removeAttribute(SSR_ATTR);
                                    hydrating = true;
                                }
                                if (isTrue(hydrating)) {
                                    if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                                        invokeInsertHook(vnode, insertedVnodeQueue, true);
                                        return oldVnode
                                    } else if (false) {
                                        warn(
                                            'The client-side rendered virtual DOM tree is not matching ' +
                                            'server-rendered content. This is likely caused by incorrect ' +
                                            'HTML markup, for example nesting block-level elements inside ' +
                                            '<p>, or missing <tbody>. Bailing hydration and performing ' +
                                            'full client-side render.'
                                        );
                                    }
                                }
                                // either not server-rendered, or hydration failed.
                                // create an empty node and replace it
                                oldVnode = emptyNodeAt(oldVnode);
                            }

                            // replacing existing element
                            var oldElm = oldVnode.elm;
                            var parentElm$1 = nodeOps.parentNode(oldElm);

                            // create new node
                            createElm(
                                vnode,
                                insertedVnodeQueue,
                                // extremely rare edge case: do not insert if old element is in a
                                // leaving transition. Only happens when combining transition +
                                // keep-alive + HOCs. (#4590)
                                oldElm._leaveCb ? null : parentElm$1,
                                nodeOps.nextSibling(oldElm)
                            );

                            // update parent placeholder node element, recursively
                            if (isDef(vnode.parent)) {
                                var ancestor = vnode.parent;
                                var patchable = isPatchable(vnode);
                                while (ancestor) {
                                    for (var i = 0; i < cbs.destroy.length; ++i) {
                                        cbs.destroy[i](ancestor);
                                    }
                                    ancestor.elm = vnode.elm;
                                    if (patchable) {
                                        for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                                            cbs.create[i$1](emptyNode, ancestor);
                                        }
                                        // #6513
                                        // invoke insert hooks that may have been merged by create hooks.
                                        // e.g. for directives that uses the "inserted" hook.
                                        var insert = ancestor.data.hook.insert;
                                        if (insert.merged) {
                                            // start at index 1 to avoid re-invoking component mounted hook
                                            for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                                                insert.fns[i$2]();
                                            }
                                        }
                                    } else {
                                        registerRef(ancestor);
                                    }
                                    ancestor = ancestor.parent;
                                }
                            }

                            // destroy old node
                            if (isDef(parentElm$1)) {
                                removeVnodes(parentElm$1, [oldVnode], 0, 0);
                            } else if (isDef(oldVnode.tag)) {
                                invokeDestroyHook(oldVnode);
                            }
                        }
                    }

                    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
                    return vnode.elm
                }
            }

            /*  */

            var directives = {
                create: updateDirectives,
                update: updateDirectives,
                destroy: function unbindDirectives(vnode) {
                    updateDirectives(vnode, emptyNode);
                }
            }

            function updateDirectives(oldVnode, vnode) {
                if (oldVnode.data.directives || vnode.data.directives) {
                    _update(oldVnode, vnode);
                }
            }

            function _update(oldVnode, vnode) {
                var isCreate = oldVnode === emptyNode;
                var isDestroy = vnode === emptyNode;
                var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
                var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

                var dirsWithInsert = [];
                var dirsWithPostpatch = [];

                var key, oldDir, dir;
                for (key in newDirs) {
                    oldDir = oldDirs[key];
                    dir = newDirs[key];
                    if (!oldDir) {
                        // new directive, bind
                        callHook$1(dir, 'bind', vnode, oldVnode);
                        if (dir.def && dir.def.inserted) {
                            dirsWithInsert.push(dir);
                        }
                    } else {
                        // existing directive, update
                        dir.oldValue = oldDir.value;
                        callHook$1(dir, 'update', vnode, oldVnode);
                        if (dir.def && dir.def.componentUpdated) {
                            dirsWithPostpatch.push(dir);
                        }
                    }
                }

                if (dirsWithInsert.length) {
                    var callInsert = function() {
                        for (var i = 0; i < dirsWithInsert.length; i++) {
                            callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
                        }
                    };
                    if (isCreate) {
                        mergeVNodeHook(vnode, 'insert', callInsert);
                    } else {
                        callInsert();
                    }
                }

                if (dirsWithPostpatch.length) {
                    mergeVNodeHook(vnode, 'postpatch', function() {
                        for (var i = 0; i < dirsWithPostpatch.length; i++) {
                            callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
                        }
                    });
                }

                if (!isCreate) {
                    for (key in oldDirs) {
                        if (!newDirs[key]) {
                            // no longer present, unbind
                            callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
                        }
                    }
                }
            }

            var emptyModifiers = Object.create(null);

            function normalizeDirectives$1(
                dirs,
                vm
            ) {
                var res = Object.create(null);
                if (!dirs) {
                    // $flow-disable-line
                    return res
                }
                var i, dir;
                for (i = 0; i < dirs.length; i++) {
                    dir = dirs[i];
                    if (!dir.modifiers) {
                        // $flow-disable-line
                        dir.modifiers = emptyModifiers;
                    }
                    res[getRawDirName(dir)] = dir;
                    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
                }
                // $flow-disable-line
                return res
            }

            function getRawDirName(dir) {
                return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
            }

            function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
                var fn = dir.def && dir.def[hook];
                if (fn) {
                    try {
                        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
                    } catch (e) {
                        handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
                    }
                }
            }

            var baseModules = [
                ref,
                directives
            ]

            /*  */

            function updateAttrs(oldVnode, vnode) {
                var opts = vnode.componentOptions;
                if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
                    return
                }
                if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
                    return
                }
                var key, cur, old;
                var elm = vnode.elm;
                var oldAttrs = oldVnode.data.attrs || {};
                var attrs = vnode.data.attrs || {};
                // clone observed objects, as the user probably wants to mutate it
                if (isDef(attrs.__ob__)) {
                    attrs = vnode.data.attrs = extend({}, attrs);
                }

                for (key in attrs) {
                    cur = attrs[key];
                    old = oldAttrs[key];
                    if (old !== cur) {
                        setAttr(elm, key, cur);
                    }
                }
                // #4391: in IE9, setting type can reset value for input[type=radio]
                // #6666: IE/Edge forces progress value down to 1 before setting a max
                /* istanbul ignore if */
                if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
                    setAttr(elm, 'value', attrs.value);
                }
                for (key in oldAttrs) {
                    if (isUndef(attrs[key])) {
                        if (isXlink(key)) {
                            elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
                        } else if (!isEnumeratedAttr(key)) {
                            elm.removeAttribute(key);
                        }
                    }
                }
            }

            function setAttr(el, key, value) {
                if (el.tagName.indexOf('-') > -1) {
                    baseSetAttr(el, key, value);
                } else if (isBooleanAttr(key)) {
                    // set attribute for blank value
                    // e.g. <option disabled>Select one</option>
                    if (isFalsyAttrValue(value)) {
                        el.removeAttribute(key);
                    } else {
                        // technically allowfullscreen is a boolean attribute for <iframe>,
                        // but Flash expects a value of "true" when used on <embed> tag
                        value = key === 'allowfullscreen' && el.tagName === 'EMBED' ?
                            'true' :
                            key;
                        el.setAttribute(key, value);
                    }
                } else if (isEnumeratedAttr(key)) {
                    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
                } else if (isXlink(key)) {
                    if (isFalsyAttrValue(value)) {
                        el.removeAttributeNS(xlinkNS, getXlinkProp(key));
                    } else {
                        el.setAttributeNS(xlinkNS, key, value);
                    }
                } else {
                    baseSetAttr(el, key, value);
                }
            }

            function baseSetAttr(el, key, value) {
                if (isFalsyAttrValue(value)) {
                    el.removeAttribute(key);
                } else {
                    // #7138: IE10 & 11 fires input event when setting placeholder on
                    // <textarea>... block the first input event and remove the blocker
                    // immediately.
                    /* istanbul ignore if */
                    if (
                        isIE && !isIE9 &&
                        el.tagName === 'TEXTAREA' &&
                        key === 'placeholder' && !el.__ieph
                    ) {
                        var blocker = function(e) {
                            e.stopImmediatePropagation();
                            el.removeEventListener('input', blocker);
                        };
                        el.addEventListener('input', blocker);
                        // $flow-disable-line
                        el.__ieph = true; /* IE placeholder patched */
                    }
                    el.setAttribute(key, value);
                }
            }

            var attrs = {
                create: updateAttrs,
                update: updateAttrs
            }

            /*  */

            function updateClass(oldVnode, vnode) {
                var el = vnode.elm;
                var data = vnode.data;
                var oldData = oldVnode.data;
                if (
                    isUndef(data.staticClass) &&
                    isUndef(data.class) && (
                        isUndef(oldData) || (
                            isUndef(oldData.staticClass) &&
                            isUndef(oldData.class)
                        )
                    )
                ) {
                    return
                }

                var cls = genClassForVnode(vnode);

                // handle transition classes
                var transitionClass = el._transitionClasses;
                if (isDef(transitionClass)) {
                    cls = concat(cls, stringifyClass(transitionClass));
                }

                // set the class
                if (cls !== el._prevClass) {
                    el.setAttribute('class', cls);
                    el._prevClass = cls;
                }
            }

            var klass = {
                create: updateClass,
                update: updateClass
            }

            /*  */

            var validDivisionCharRE = /[\w).+\-_$\]]/;

            function parseFilters(exp) {
                var inSingle = false;
                var inDouble = false;
                var inTemplateString = false;
                var inRegex = false;
                var curly = 0;
                var square = 0;
                var paren = 0;
                var lastFilterIndex = 0;
                var c, prev, i, expression, filters;

                for (i = 0; i < exp.length; i++) {
                    prev = c;
                    c = exp.charCodeAt(i);
                    if (inSingle) {
                        if (c === 0x27 && prev !== 0x5C) {
                            inSingle = false;
                        }
                    } else if (inDouble) {
                        if (c === 0x22 && prev !== 0x5C) {
                            inDouble = false;
                        }
                    } else if (inTemplateString) {
                        if (c === 0x60 && prev !== 0x5C) {
                            inTemplateString = false;
                        }
                    } else if (inRegex) {
                        if (c === 0x2f && prev !== 0x5C) {
                            inRegex = false;
                        }
                    } else if (
                        c === 0x7C && // pipe
                        exp.charCodeAt(i + 1) !== 0x7C &&
                        exp.charCodeAt(i - 1) !== 0x7C &&
                        !curly && !square && !paren
                    ) {
                        if (expression === undefined) {
                            // first filter, end of expression
                            lastFilterIndex = i + 1;
                            expression = exp.slice(0, i).trim();
                        } else {
                            pushFilter();
                        }
                    } else {
                        switch (c) {
                            case 0x22:
                                inDouble = true;
                                break // "
                            case 0x27:
                                inSingle = true;
                                break // '
                            case 0x60:
                                inTemplateString = true;
                                break // `
                            case 0x28:
                                paren++;
                                break // (
                            case 0x29:
                                paren--;
                                break // )
                            case 0x5B:
                                square++;
                                break // [
                            case 0x5D:
                                square--;
                                break // ]
                            case 0x7B:
                                curly++;
                                break // {
                            case 0x7D:
                                curly--;
                                break // }
                        }
                        if (c === 0x2f) { // /
                            var j = i - 1;
                            var p = (void 0);
                            // find first non-whitespace prev char
                            for (; j >= 0; j--) {
                                p = exp.charAt(j);
                                if (p !== ' ') {
                                    break
                                }
                            }
                            if (!p || !validDivisionCharRE.test(p)) {
                                inRegex = true;
                            }
                        }
                    }
                }

                if (expression === undefined) {
                    expression = exp.slice(0, i).trim();
                } else if (lastFilterIndex !== 0) {
                    pushFilter();
                }

                function pushFilter() {
                    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
                    lastFilterIndex = i + 1;
                }

                if (filters) {
                    for (i = 0; i < filters.length; i++) {
                        expression = wrapFilter(expression, filters[i]);
                    }
                }

                return expression
            }

            function wrapFilter(exp, filter) {
                var i = filter.indexOf('(');
                if (i < 0) {
                    // _f: resolveFilter
                    return ("_f(\"" + filter + "\")(" + exp + ")")
                } else {
                    var name = filter.slice(0, i);
                    var args = filter.slice(i + 1);
                    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
                }
            }

            /*  */

            function baseWarn(msg) {
                console.error(("[Vue compiler]: " + msg));
            }

            function pluckModuleFunction(
                modules,
                key
            ) {
                return modules ?
                    modules.map(function(m) {
                        return m[key];
                    }).filter(function(_) {
                        return _;
                    }) :
                    []
            }

            function addProp(el, name, value) {
                (el.props || (el.props = [])).push({
                    name: name,
                    value: value
                });
                el.plain = false;
            }

            function addAttr(el, name, value) {
                (el.attrs || (el.attrs = [])).push({
                    name: name,
                    value: value
                });
                el.plain = false;
            }

            // add a raw attr (use this in preTransforms)
            function addRawAttr(el, name, value) {
                el.attrsMap[name] = value;
                el.attrsList.push({
                    name: name,
                    value: value
                });
            }

            function addDirective(
                el,
                name,
                rawName,
                value,
                arg,
                modifiers
            ) {
                (el.directives || (el.directives = [])).push({
                    name: name,
                    rawName: rawName,
                    value: value,
                    arg: arg,
                    modifiers: modifiers
                });
                el.plain = false;
            }

            function addHandler(
                el,
                name,
                value,
                modifiers,
                important,
                warn
            ) {
                modifiers = modifiers || emptyObject;
                // warn prevent and passive modifier
                /* istanbul ignore if */
                if (
                    false
                ) {
                    warn(
                        'passive and prevent can\'t be used together. ' +
                        'Passive handler can\'t prevent default event.'
                    );
                }

                // check capture modifier
                if (modifiers.capture) {
                    delete modifiers.capture;
                    name = '!' + name; // mark the event as captured
                }
                if (modifiers.once) {
                    delete modifiers.once;
                    name = '~' + name; // mark the event as once
                }
                /* istanbul ignore if */
                if (modifiers.passive) {
                    delete modifiers.passive;
                    name = '&' + name; // mark the event as passive
                }

                // normalize click.right and click.middle since they don't actually fire
                // this is technically browser-specific, but at least for now browsers are
                // the only target envs that have right/middle clicks.
                if (name === 'click') {
                    if (modifiers.right) {
                        name = 'contextmenu';
                        delete modifiers.right;
                    } else if (modifiers.middle) {
                        name = 'mouseup';
                    }
                }

                var events;
                if (modifiers.native) {
                    delete modifiers.native;
                    events = el.nativeEvents || (el.nativeEvents = {});
                } else {
                    events = el.events || (el.events = {});
                }

                var newHandler = {
                    value: value.trim()
                };
                if (modifiers !== emptyObject) {
                    newHandler.modifiers = modifiers;
                }

                var handlers = events[name];
                /* istanbul ignore if */
                if (Array.isArray(handlers)) {
                    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
                } else if (handlers) {
                    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
                } else {
                    events[name] = newHandler;
                }

                el.plain = false;
            }

            function getBindingAttr(
                el,
                name,
                getStatic
            ) {
                var dynamicValue =
                    getAndRemoveAttr(el, ':' + name) ||
                    getAndRemoveAttr(el, 'v-bind:' + name);
                if (dynamicValue != null) {
                    return parseFilters(dynamicValue)
                } else if (getStatic !== false) {
                    var staticValue = getAndRemoveAttr(el, name);
                    if (staticValue != null) {
                        return JSON.stringify(staticValue)
                    }
                }
            }

            // note: this only removes the attr from the Array (attrsList) so that it
            // doesn't get processed by processAttrs.
            // By default it does NOT remove it from the map (attrsMap) because the map is
            // needed during codegen.
            function getAndRemoveAttr(
                el,
                name,
                removeFromMap
            ) {
                var val;
                if ((val = el.attrsMap[name]) != null) {
                    var list = el.attrsList;
                    for (var i = 0, l = list.length; i < l; i++) {
                        if (list[i].name === name) {
                            list.splice(i, 1);
                            break
                        }
                    }
                }
                if (removeFromMap) {
                    delete el.attrsMap[name];
                }
                return val
            }

            /*  */

            /**
             * Cross-platform code generation for component v-model
             */
            function genComponentModel(
                el,
                value,
                modifiers
            ) {
                var ref = modifiers || {};
                var number = ref.number;
                var trim = ref.trim;

                var baseValueExpression = '$$v';
                var valueExpression = baseValueExpression;
                if (trim) {
                    valueExpression =
                        "(typeof " + baseValueExpression + " === 'string'" +
                        "? " + baseValueExpression + ".trim()" +
                        ": " + baseValueExpression + ")";
                }
                if (number) {
                    valueExpression = "_n(" + valueExpression + ")";
                }
                var assignment = genAssignmentCode(value, valueExpression);

                el.model = {
                    value: ("(" + value + ")"),
                    expression: ("\"" + value + "\""),
                    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
                };
            }

            /**
             * Cross-platform codegen helper for generating v-model value assignment code.
             */
            function genAssignmentCode(
                value,
                assignment
            ) {
                var res = parseModel(value);
                if (res.key === null) {
                    return (value + "=" + assignment)
                } else {
                    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
                }
            }

            /**
             * Parse a v-model expression into a base path and a final key segment.
             * Handles both dot-path and possible square brackets.
             *
             * Possible cases:
             *
             * - test
             * - test[key]
             * - test[test1[key]]
             * - test["a"][key]
             * - xxx.test[a[a].test1[key]]
             * - test.xxx.a["asa"][test1[key]]
             *
             */

            var len;
            var str;
            var chr;
            var index$1;
            var expressionPos;
            var expressionEndPos;



            function parseModel(val) {
                // Fix https://github.com/vuejs/vue/pull/7730
                // allow v-model="obj.val " (trailing whitespace)
                val = val.trim();
                len = val.length;

                if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
                    index$1 = val.lastIndexOf('.');
                    if (index$1 > -1) {
                        return {
                            exp: val.slice(0, index$1),
                            key: '"' + val.slice(index$1 + 1) + '"'
                        }
                    } else {
                        return {
                            exp: val,
                            key: null
                        }
                    }
                }

                str = val;
                index$1 = expressionPos = expressionEndPos = 0;

                while (!eof()) {
                    chr = next();
                    /* istanbul ignore if */
                    if (isStringStart(chr)) {
                        parseString(chr);
                    } else if (chr === 0x5B) {
                        parseBracket(chr);
                    }
                }

                return {
                    exp: val.slice(0, expressionPos),
                    key: val.slice(expressionPos + 1, expressionEndPos)
                }
            }

            function next() {
                return str.charCodeAt(++index$1)
            }

            function eof() {
                return index$1 >= len
            }

            function isStringStart(chr) {
                return chr === 0x22 || chr === 0x27
            }

            function parseBracket(chr) {
                var inBracket = 1;
                expressionPos = index$1;
                while (!eof()) {
                    chr = next();
                    if (isStringStart(chr)) {
                        parseString(chr);
                        continue
                    }
                    if (chr === 0x5B) {
                        inBracket++;
                    }
                    if (chr === 0x5D) {
                        inBracket--;
                    }
                    if (inBracket === 0) {
                        expressionEndPos = index$1;
                        break
                    }
                }
            }

            function parseString(chr) {
                var stringQuote = chr;
                while (!eof()) {
                    chr = next();
                    if (chr === stringQuote) {
                        break
                    }
                }
            }

            /*  */

            var warn$1;

            // in some cases, the event used has to be determined at runtime
            // so we used some reserved tokens during compile.
            var RANGE_TOKEN = '__r';
            var CHECKBOX_RADIO_TOKEN = '__c';

            function model(
                el,
                dir,
                _warn
            ) {
                warn$1 = _warn;
                var value = dir.value;
                var modifiers = dir.modifiers;
                var tag = el.tag;
                var type = el.attrsMap.type;

                if (false) {
                    // inputs with type="file" are read only and setting the input's
                    // value will throw an error.
                    if (tag === 'input' && type === 'file') {
                        warn$1(
                            "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
                            "File inputs are read only. Use a v-on:change listener instead."
                        );
                    }
                }

                if (el.component) {
                    genComponentModel(el, value, modifiers);
                    // component v-model doesn't need extra runtime
                    return false
                } else if (tag === 'select') {
                    genSelect(el, value, modifiers);
                } else if (tag === 'input' && type === 'checkbox') {
                    genCheckboxModel(el, value, modifiers);
                } else if (tag === 'input' && type === 'radio') {
                    genRadioModel(el, value, modifiers);
                } else if (tag === 'input' || tag === 'textarea') {
                    genDefaultModel(el, value, modifiers);
                } else if (!config.isReservedTag(tag)) {
                    genComponentModel(el, value, modifiers);
                    // component v-model doesn't need extra runtime
                    return false
                } else if (false) {
                    warn$1(
                        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
                        "v-model is not supported on this element type. " +
                        'If you are working with contenteditable, it\'s recommended to ' +
                        'wrap a library dedicated for that purpose inside a custom component.'
                    );
                }

                // ensure runtime directive metadata
                return true
            }

            function genCheckboxModel(
                el,
                value,
                modifiers
            ) {
                var number = modifiers && modifiers.number;
                var valueBinding = getBindingAttr(el, 'value') || 'null';
                var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
                var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
                addProp(el, 'checked',
                    "Array.isArray(" + value + ")" +
                    "?_i(" + value + "," + valueBinding + ")>-1" + (
                        trueValueBinding === 'true' ?
                        (":(" + value + ")") :
                        (":_q(" + value + "," + trueValueBinding + ")")
                    )
                );
                addHandler(el, 'change',
                    "var $$a=" + value + "," +
                    '$$el=$event.target,' +
                    "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
                    'if(Array.isArray($$a)){' +
                    "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
                    '$$i=_i($$a,$$v);' +
                    "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
                    "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
                    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
                    null, true
                );
            }

            function genRadioModel(
                el,
                value,
                modifiers
            ) {
                var number = modifiers && modifiers.number;
                var valueBinding = getBindingAttr(el, 'value') || 'null';
                valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
                addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
                addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
            }

            function genSelect(
                el,
                value,
                modifiers
            ) {
                var number = modifiers && modifiers.number;
                var selectedVal = "Array.prototype.filter" +
                    ".call($event.target.options,function(o){return o.selected})" +
                    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
                    "return " + (number ? '_n(val)' : 'val') + "})";

                var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
                var code = "var $$selectedVal = " + selectedVal + ";";
                code = code + " " + (genAssignmentCode(value, assignment));
                addHandler(el, 'change', code, null, true);
            }

            function genDefaultModel(
                el,
                value,
                modifiers
            ) {
                var type = el.attrsMap.type;

                // warn if v-bind:value conflicts with v-model
                // except for inputs with v-bind:type
                if (false) {
                    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
                    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
                    if (value$1 && !typeBinding) {
                        var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
                        warn$1(
                            binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
                            'because the latter already expands to a value binding internally'
                        );
                    }
                }

                var ref = modifiers || {};
                var lazy = ref.lazy;
                var number = ref.number;
                var trim = ref.trim;
                var needCompositionGuard = !lazy && type !== 'range';
                var event = lazy ?
                    'change' :
                    type === 'range' ?
                    RANGE_TOKEN :
                    'input';

                var valueExpression = '$event.target.value';
                if (trim) {
                    valueExpression = "$event.target.value.trim()";
                }
                if (number) {
                    valueExpression = "_n(" + valueExpression + ")";
                }

                var code = genAssignmentCode(value, valueExpression);
                if (needCompositionGuard) {
                    code = "if($event.target.composing)return;" + code;
                }

                addProp(el, 'value', ("(" + value + ")"));
                addHandler(el, event, code, null, true);
                if (trim || number) {
                    addHandler(el, 'blur', '$forceUpdate()');
                }
            }

            /*  */

            // normalize v-model event tokens that can only be determined at runtime.
            // it's important to place the event as the first in the array because
            // the whole point is ensuring the v-model callback gets called before
            // user-attached handlers.
            function normalizeEvents(on) {
                /* istanbul ignore if */
                if (isDef(on[RANGE_TOKEN])) {
                    // IE input[type=range] only supports `change` event
                    var event = isIE ? 'change' : 'input';
                    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
                    delete on[RANGE_TOKEN];
                }
                // This was originally intended to fix #4521 but no longer necessary
                // after 2.5. Keeping it for backwards compat with generated code from < 2.4
                /* istanbul ignore if */
                if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
                    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
                    delete on[CHECKBOX_RADIO_TOKEN];
                }
            }

            var target$1;

            function createOnceHandler(handler, event, capture) {
                var _target = target$1; // save current target element in closure
                return function onceHandler() {
                    var res = handler.apply(null, arguments);
                    if (res !== null) {
                        remove$2(event, onceHandler, capture, _target);
                    }
                }
            }

            function add$1(
                event,
                handler,
                once$$1,
                capture,
                passive
            ) {
                handler = withMacroTask(handler);
                if (once$$1) {
                    handler = createOnceHandler(handler, event, capture);
                }
                target$1.addEventListener(
                    event,
                    handler,
                    supportsPassive ?
                    {
                        capture: capture,
                        passive: passive
                    } :
                    capture
                );
            }

            function remove$2(
                event,
                handler,
                capture,
                _target
            ) {
                (_target || target$1).removeEventListener(
                    event,
                    handler._withTask || handler,
                    capture
                );
            }

            function updateDOMListeners(oldVnode, vnode) {
                if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
                    return
                }
                var on = vnode.data.on || {};
                var oldOn = oldVnode.data.on || {};
                target$1 = vnode.elm;
                normalizeEvents(on);
                updateListeners(on, oldOn, add$1, remove$2, vnode.context);
                target$1 = undefined;
            }

            var events = {
                create: updateDOMListeners,
                update: updateDOMListeners
            }

            /*  */

            function updateDOMProps(oldVnode, vnode) {
                if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
                    return
                }
                var key, cur;
                var elm = vnode.elm;
                var oldProps = oldVnode.data.domProps || {};
                var props = vnode.data.domProps || {};
                // clone observed objects, as the user probably wants to mutate it
                if (isDef(props.__ob__)) {
                    props = vnode.data.domProps = extend({}, props);
                }

                for (key in oldProps) {
                    if (isUndef(props[key])) {
                        elm[key] = '';
                    }
                }
                for (key in props) {
                    cur = props[key];
                    // ignore children if the node has textContent or innerHTML,
                    // as these will throw away existing DOM nodes and cause removal errors
                    // on subsequent patches (#3360)
                    if (key === 'textContent' || key === 'innerHTML') {
                        if (vnode.children) {
                            vnode.children.length = 0;
                        }
                        if (cur === oldProps[key]) {
                            continue
                        }
                        // #6601 work around Chrome version <= 55 bug where single textNode
                        // replaced by innerHTML/textContent retains its parentNode property
                        if (elm.childNodes.length === 1) {
                            elm.removeChild(elm.childNodes[0]);
                        }
                    }

                    if (key === 'value') {
                        // store value as _value as well since
                        // non-string values will be stringified
                        elm._value = cur;
                        // avoid resetting cursor position when value is the same
                        var strCur = isUndef(cur) ? '' : String(cur);
                        if (shouldUpdateValue(elm, strCur)) {
                            elm.value = strCur;
                        }
                    } else {
                        elm[key] = cur;
                    }
                }
            }

            // check platforms/web/util/attrs.js acceptValue


            function shouldUpdateValue(elm, checkVal) {
                return (!elm.composing && (
                    elm.tagName === 'OPTION' ||
                    isNotInFocusAndDirty(elm, checkVal) ||
                    isDirtyWithModifiers(elm, checkVal)
                ))
            }

            function isNotInFocusAndDirty(elm, checkVal) {
                // return true when textbox (.number and .trim) loses focus and its value is
                // not equal to the updated value
                var notInFocus = true;
                // #6157
                // work around IE bug when accessing document.activeElement in an iframe
                try {
                    notInFocus = document.activeElement !== elm;
                } catch (e) {}
                return notInFocus && elm.value !== checkVal
            }

            function isDirtyWithModifiers(elm, newVal) {
                var value = elm.value;
                var modifiers = elm._vModifiers; // injected by v-model runtime
                if (isDef(modifiers)) {
                    if (modifiers.lazy) {
                        // inputs with lazy should only be updated when not in focus
                        return false
                    }
                    if (modifiers.number) {
                        return toNumber(value) !== toNumber(newVal)
                    }
                    if (modifiers.trim) {
                        return value.trim() !== newVal.trim()
                    }
                }
                return value !== newVal
            }

            var domProps = {
                create: updateDOMProps,
                update: updateDOMProps
            }

            /*  */

            var parseStyleText = cached(function(cssText) {
                var res = {};
                var listDelimiter = /;(?![^(]*\))/g;
                var propertyDelimiter = /:(.+)/;
                cssText.split(listDelimiter).forEach(function(item) {
                    if (item) {
                        var tmp = item.split(propertyDelimiter);
                        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
                    }
                });
                return res
            });

            // merge static and dynamic style data on the same vnode
            function normalizeStyleData(data) {
                var style = normalizeStyleBinding(data.style);
                // static style is pre-processed into an object during compilation
                // and is always a fresh object, so it's safe to merge into it
                return data.staticStyle ?
                    extend(data.staticStyle, style) :
                    style
            }

            // normalize possible array / string values into Object
            function normalizeStyleBinding(bindingStyle) {
                if (Array.isArray(bindingStyle)) {
                    return toObject(bindingStyle)
                }
                if (typeof bindingStyle === 'string') {
                    return parseStyleText(bindingStyle)
                }
                return bindingStyle
            }

            /**
             * parent component style should be after child's
             * so that parent component's style could override it
             */
            function getStyle(vnode, checkChild) {
                var res = {};
                var styleData;

                if (checkChild) {
                    var childNode = vnode;
                    while (childNode.componentInstance) {
                        childNode = childNode.componentInstance._vnode;
                        if (
                            childNode && childNode.data &&
                            (styleData = normalizeStyleData(childNode.data))
                        ) {
                            extend(res, styleData);
                        }
                    }
                }

                if ((styleData = normalizeStyleData(vnode.data))) {
                    extend(res, styleData);
                }

                var parentNode = vnode;
                while ((parentNode = parentNode.parent)) {
                    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
                        extend(res, styleData);
                    }
                }
                return res
            }

            /*  */

            var cssVarRE = /^--/;
            var importantRE = /\s*!important$/;
            var setProp = function(el, name, val) {
                /* istanbul ignore if */
                if (cssVarRE.test(name)) {
                    el.style.setProperty(name, val);
                } else if (importantRE.test(val)) {
                    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
                } else {
                    var normalizedName = normalize(name);
                    if (Array.isArray(val)) {
                        // Support values array created by autoprefixer, e.g.
                        // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
                        // Set them one by one, and the browser will only set those it can recognize
                        for (var i = 0, len = val.length; i < len; i++) {
                            el.style[normalizedName] = val[i];
                        }
                    } else {
                        el.style[normalizedName] = val;
                    }
                }
            };

            var vendorNames = ['Webkit', 'Moz', 'ms'];

            var emptyStyle;
            var normalize = cached(function(prop) {
                emptyStyle = emptyStyle || document.createElement('div').style;
                prop = camelize(prop);
                if (prop !== 'filter' && (prop in emptyStyle)) {
                    return prop
                }
                var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
                for (var i = 0; i < vendorNames.length; i++) {
                    var name = vendorNames[i] + capName;
                    if (name in emptyStyle) {
                        return name
                    }
                }
            });

            function updateStyle(oldVnode, vnode) {
                var data = vnode.data;
                var oldData = oldVnode.data;

                if (isUndef(data.staticStyle) && isUndef(data.style) &&
                    isUndef(oldData.staticStyle) && isUndef(oldData.style)
                ) {
                    return
                }

                var cur, name;
                var el = vnode.elm;
                var oldStaticStyle = oldData.staticStyle;
                var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

                // if static style exists, stylebinding already merged into it when doing normalizeStyleData
                var oldStyle = oldStaticStyle || oldStyleBinding;

                var style = normalizeStyleBinding(vnode.data.style) || {};

                // store normalized style under a different key for next diff
                // make sure to clone it if it's reactive, since the user likely wants
                // to mutate it.
                vnode.data.normalizedStyle = isDef(style.__ob__) ?
                    extend({}, style) :
                    style;

                var newStyle = getStyle(vnode, true);

                for (name in oldStyle) {
                    if (isUndef(newStyle[name])) {
                        setProp(el, name, '');
                    }
                }
                for (name in newStyle) {
                    cur = newStyle[name];
                    if (cur !== oldStyle[name]) {
                        // ie9 setting to null has no effect, must use empty string
                        setProp(el, name, cur == null ? '' : cur);
                    }
                }
            }

            var style = {
                create: updateStyle,
                update: updateStyle
            }

            /*  */

            /**
             * Add class with compatibility for SVG since classList is not supported on
             * SVG elements in IE
             */
            function addClass(el, cls) {
                /* istanbul ignore if */
                if (!cls || !(cls = cls.trim())) {
                    return
                }

                /* istanbul ignore else */
                if (el.classList) {
                    if (cls.indexOf(' ') > -1) {
                        cls.split(/\s+/).forEach(function(c) {
                            return el.classList.add(c);
                        });
                    } else {
                        el.classList.add(cls);
                    }
                } else {
                    var cur = " " + (el.getAttribute('class') || '') + " ";
                    if (cur.indexOf(' ' + cls + ' ') < 0) {
                        el.setAttribute('class', (cur + cls).trim());
                    }
                }
            }

            /**
             * Remove class with compatibility for SVG since classList is not supported on
             * SVG elements in IE
             */
            function removeClass(el, cls) {
                /* istanbul ignore if */
                if (!cls || !(cls = cls.trim())) {
                    return
                }

                /* istanbul ignore else */
                if (el.classList) {
                    if (cls.indexOf(' ') > -1) {
                        cls.split(/\s+/).forEach(function(c) {
                            return el.classList.remove(c);
                        });
                    } else {
                        el.classList.remove(cls);
                    }
                    if (!el.classList.length) {
                        el.removeAttribute('class');
                    }
                } else {
                    var cur = " " + (el.getAttribute('class') || '') + " ";
                    var tar = ' ' + cls + ' ';
                    while (cur.indexOf(tar) >= 0) {
                        cur = cur.replace(tar, ' ');
                    }
                    cur = cur.trim();
                    if (cur) {
                        el.setAttribute('class', cur);
                    } else {
                        el.removeAttribute('class');
                    }
                }
            }

            /*  */

            function resolveTransition(def) {
                if (!def) {
                    return
                }
                /* istanbul ignore else */
                if (typeof def === 'object') {
                    var res = {};
                    if (def.css !== false) {
                        extend(res, autoCssTransition(def.name || 'v'));
                    }
                    extend(res, def);
                    return res
                } else if (typeof def === 'string') {
                    return autoCssTransition(def)
                }
            }

            var autoCssTransition = cached(function(name) {
                return {
                    enterClass: (name + "-enter"),
                    enterToClass: (name + "-enter-to"),
                    enterActiveClass: (name + "-enter-active"),
                    leaveClass: (name + "-leave"),
                    leaveToClass: (name + "-leave-to"),
                    leaveActiveClass: (name + "-leave-active")
                }
            });

            var hasTransition = inBrowser && !isIE9;
            var TRANSITION = 'transition';
            var ANIMATION = 'animation';

            // Transition property/event sniffing
            var transitionProp = 'transition';
            var transitionEndEvent = 'transitionend';
            var animationProp = 'animation';
            var animationEndEvent = 'animationend';
            if (hasTransition) {
                /* istanbul ignore if */
                if (window.ontransitionend === undefined &&
                    window.onwebkittransitionend !== undefined
                ) {
                    transitionProp = 'WebkitTransition';
                    transitionEndEvent = 'webkitTransitionEnd';
                }
                if (window.onanimationend === undefined &&
                    window.onwebkitanimationend !== undefined
                ) {
                    animationProp = 'WebkitAnimation';
                    animationEndEvent = 'webkitAnimationEnd';
                }
            }

            // binding to window is necessary to make hot reload work in IE in strict mode
            var raf = inBrowser ?
                window.requestAnimationFrame ?
                window.requestAnimationFrame.bind(window) :
                setTimeout :
                /* istanbul ignore next */ function(fn) {
                    return fn();
                };

            function nextFrame(fn) {
                raf(function() {
                    raf(fn);
                });
            }

            function addTransitionClass(el, cls) {
                var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
                if (transitionClasses.indexOf(cls) < 0) {
                    transitionClasses.push(cls);
                    addClass(el, cls);
                }
            }

            function removeTransitionClass(el, cls) {
                if (el._transitionClasses) {
                    remove(el._transitionClasses, cls);
                }
                removeClass(el, cls);
            }

            function whenTransitionEnds(
                el,
                expectedType,
                cb
            ) {
                var ref = getTransitionInfo(el, expectedType);
                var type = ref.type;
                var timeout = ref.timeout;
                var propCount = ref.propCount;
                if (!type) {
                    return cb()
                }
                var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
                var ended = 0;
                var end = function() {
                    el.removeEventListener(event, onEnd);
                    cb();
                };
                var onEnd = function(e) {
                    if (e.target === el) {
                        if (++ended >= propCount) {
                            end();
                        }
                    }
                };
                setTimeout(function() {
                    if (ended < propCount) {
                        end();
                    }
                }, timeout + 1);
                el.addEventListener(event, onEnd);
            }

            var transformRE = /\b(transform|all)(,|$)/;

            function getTransitionInfo(el, expectedType) {
                var styles = window.getComputedStyle(el);
                var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
                var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
                var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
                var animationDelays = styles[animationProp + 'Delay'].split(', ');
                var animationDurations = styles[animationProp + 'Duration'].split(', ');
                var animationTimeout = getTimeout(animationDelays, animationDurations);

                var type;
                var timeout = 0;
                var propCount = 0;
                /* istanbul ignore if */
                if (expectedType === TRANSITION) {
                    if (transitionTimeout > 0) {
                        type = TRANSITION;
                        timeout = transitionTimeout;
                        propCount = transitionDurations.length;
                    }
                } else if (expectedType === ANIMATION) {
                    if (animationTimeout > 0) {
                        type = ANIMATION;
                        timeout = animationTimeout;
                        propCount = animationDurations.length;
                    }
                } else {
                    timeout = Math.max(transitionTimeout, animationTimeout);
                    type = timeout > 0 ?
                        transitionTimeout > animationTimeout ?
                        TRANSITION :
                        ANIMATION :
                        null;
                    propCount = type ?
                        type === TRANSITION ?
                        transitionDurations.length :
                        animationDurations.length :
                        0;
                }
                var hasTransform =
                    type === TRANSITION &&
                    transformRE.test(styles[transitionProp + 'Property']);
                return {
                    type: type,
                    timeout: timeout,
                    propCount: propCount,
                    hasTransform: hasTransform
                }
            }

            function getTimeout(delays, durations) {
                /* istanbul ignore next */
                while (delays.length < durations.length) {
                    delays = delays.concat(delays);
                }

                return Math.max.apply(null, durations.map(function(d, i) {
                    return toMs(d) + toMs(delays[i])
                }))
            }

            function toMs(s) {
                return Number(s.slice(0, -1)) * 1000
            }

            /*  */

            function enter(vnode, toggleDisplay) {
                var el = vnode.elm;

                // call leave callback now
                if (isDef(el._leaveCb)) {
                    el._leaveCb.cancelled = true;
                    el._leaveCb();
                }

                var data = resolveTransition(vnode.data.transition);
                if (isUndef(data)) {
                    return
                }

                /* istanbul ignore if */
                if (isDef(el._enterCb) || el.nodeType !== 1) {
                    return
                }

                var css = data.css;
                var type = data.type;
                var enterClass = data.enterClass;
                var enterToClass = data.enterToClass;
                var enterActiveClass = data.enterActiveClass;
                var appearClass = data.appearClass;
                var appearToClass = data.appearToClass;
                var appearActiveClass = data.appearActiveClass;
                var beforeEnter = data.beforeEnter;
                var enter = data.enter;
                var afterEnter = data.afterEnter;
                var enterCancelled = data.enterCancelled;
                var beforeAppear = data.beforeAppear;
                var appear = data.appear;
                var afterAppear = data.afterAppear;
                var appearCancelled = data.appearCancelled;
                var duration = data.duration;

                // activeInstance will always be the <transition> component managing this
                // transition. One edge case to check is when the <transition> is placed
                // as the root node of a child component. In that case we need to check
                // <transition>'s parent for appear check.
                var context = activeInstance;
                var transitionNode = activeInstance.$vnode;
                while (transitionNode && transitionNode.parent) {
                    transitionNode = transitionNode.parent;
                    context = transitionNode.context;
                }

                var isAppear = !context._isMounted || !vnode.isRootInsert;

                if (isAppear && !appear && appear !== '') {
                    return
                }

                var startClass = isAppear && appearClass ?
                    appearClass :
                    enterClass;
                var activeClass = isAppear && appearActiveClass ?
                    appearActiveClass :
                    enterActiveClass;
                var toClass = isAppear && appearToClass ?
                    appearToClass :
                    enterToClass;

                var beforeEnterHook = isAppear ?
                    (beforeAppear || beforeEnter) :
                    beforeEnter;
                var enterHook = isAppear ?
                    (typeof appear === 'function' ? appear : enter) :
                    enter;
                var afterEnterHook = isAppear ?
                    (afterAppear || afterEnter) :
                    afterEnter;
                var enterCancelledHook = isAppear ?
                    (appearCancelled || enterCancelled) :
                    enterCancelled;

                var explicitEnterDuration = toNumber(
                    isObject(duration) ?
                    duration.enter :
                    duration
                );

                if (false) {
                    checkDuration(explicitEnterDuration, 'enter', vnode);
                }

                var expectsCSS = css !== false && !isIE9;
                var userWantsControl = getHookArgumentsLength(enterHook);

                var cb = el._enterCb = once(function() {
                    if (expectsCSS) {
                        removeTransitionClass(el, toClass);
                        removeTransitionClass(el, activeClass);
                    }
                    if (cb.cancelled) {
                        if (expectsCSS) {
                            removeTransitionClass(el, startClass);
                        }
                        enterCancelledHook && enterCancelledHook(el);
                    } else {
                        afterEnterHook && afterEnterHook(el);
                    }
                    el._enterCb = null;
                });

                if (!vnode.data.show) {
                    // remove pending leave element on enter by injecting an insert hook
                    mergeVNodeHook(vnode, 'insert', function() {
                        var parent = el.parentNode;
                        var pendingNode = parent && parent._pending && parent._pending[vnode.key];
                        if (pendingNode &&
                            pendingNode.tag === vnode.tag &&
                            pendingNode.elm._leaveCb
                        ) {
                            pendingNode.elm._leaveCb();
                        }
                        enterHook && enterHook(el, cb);
                    });
                }

                // start enter transition
                beforeEnterHook && beforeEnterHook(el);
                if (expectsCSS) {
                    addTransitionClass(el, startClass);
                    addTransitionClass(el, activeClass);
                    nextFrame(function() {
                        removeTransitionClass(el, startClass);
                        if (!cb.cancelled) {
                            addTransitionClass(el, toClass);
                            if (!userWantsControl) {
                                if (isValidDuration(explicitEnterDuration)) {
                                    setTimeout(cb, explicitEnterDuration);
                                } else {
                                    whenTransitionEnds(el, type, cb);
                                }
                            }
                        }
                    });
                }

                if (vnode.data.show) {
                    toggleDisplay && toggleDisplay();
                    enterHook && enterHook(el, cb);
                }

                if (!expectsCSS && !userWantsControl) {
                    cb();
                }
            }

            function leave(vnode, rm) {
                var el = vnode.elm;

                // call enter callback now
                if (isDef(el._enterCb)) {
                    el._enterCb.cancelled = true;
                    el._enterCb();
                }

                var data = resolveTransition(vnode.data.transition);
                if (isUndef(data) || el.nodeType !== 1) {
                    return rm()
                }

                /* istanbul ignore if */
                if (isDef(el._leaveCb)) {
                    return
                }

                var css = data.css;
                var type = data.type;
                var leaveClass = data.leaveClass;
                var leaveToClass = data.leaveToClass;
                var leaveActiveClass = data.leaveActiveClass;
                var beforeLeave = data.beforeLeave;
                var leave = data.leave;
                var afterLeave = data.afterLeave;
                var leaveCancelled = data.leaveCancelled;
                var delayLeave = data.delayLeave;
                var duration = data.duration;

                var expectsCSS = css !== false && !isIE9;
                var userWantsControl = getHookArgumentsLength(leave);

                var explicitLeaveDuration = toNumber(
                    isObject(duration) ?
                    duration.leave :
                    duration
                );

                if (false) {
                    checkDuration(explicitLeaveDuration, 'leave', vnode);
                }

                var cb = el._leaveCb = once(function() {
                    if (el.parentNode && el.parentNode._pending) {
                        el.parentNode._pending[vnode.key] = null;
                    }
                    if (expectsCSS) {
                        removeTransitionClass(el, leaveToClass);
                        removeTransitionClass(el, leaveActiveClass);
                    }
                    if (cb.cancelled) {
                        if (expectsCSS) {
                            removeTransitionClass(el, leaveClass);
                        }
                        leaveCancelled && leaveCancelled(el);
                    } else {
                        rm();
                        afterLeave && afterLeave(el);
                    }
                    el._leaveCb = null;
                });

                if (delayLeave) {
                    delayLeave(performLeave);
                } else {
                    performLeave();
                }

                function performLeave() {
                    // the delayed leave may have already been cancelled
                    if (cb.cancelled) {
                        return
                    }
                    // record leaving element
                    if (!vnode.data.show) {
                        (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
                    }
                    beforeLeave && beforeLeave(el);
                    if (expectsCSS) {
                        addTransitionClass(el, leaveClass);
                        addTransitionClass(el, leaveActiveClass);
                        nextFrame(function() {
                            removeTransitionClass(el, leaveClass);
                            if (!cb.cancelled) {
                                addTransitionClass(el, leaveToClass);
                                if (!userWantsControl) {
                                    if (isValidDuration(explicitLeaveDuration)) {
                                        setTimeout(cb, explicitLeaveDuration);
                                    } else {
                                        whenTransitionEnds(el, type, cb);
                                    }
                                }
                            }
                        });
                    }
                    leave && leave(el, cb);
                    if (!expectsCSS && !userWantsControl) {
                        cb();
                    }
                }
            }

            // only used in dev mode
            function checkDuration(val, name, vnode) {
                if (typeof val !== 'number') {
                    warn(
                        "<transition> explicit " + name + " duration is not a valid number - " +
                        "got " + (JSON.stringify(val)) + ".",
                        vnode.context
                    );
                } else if (isNaN(val)) {
                    warn(
                        "<transition> explicit " + name + " duration is NaN - " +
                        'the duration expression might be incorrect.',
                        vnode.context
                    );
                }
            }

            function isValidDuration(val) {
                return typeof val === 'number' && !isNaN(val)
            }

            /**
             * Normalize a transition hook's argument length. The hook may be:
             * - a merged hook (invoker) with the original in .fns
             * - a wrapped component method (check ._length)
             * - a plain function (.length)
             */
            function getHookArgumentsLength(fn) {
                if (isUndef(fn)) {
                    return false
                }
                var invokerFns = fn.fns;
                if (isDef(invokerFns)) {
                    // invoker
                    return getHookArgumentsLength(
                        Array.isArray(invokerFns) ?
                        invokerFns[0] :
                        invokerFns
                    )
                } else {
                    return (fn._length || fn.length) > 1
                }
            }

            function _enter(_, vnode) {
                if (vnode.data.show !== true) {
                    enter(vnode);
                }
            }

            var transition = inBrowser ? {
                create: _enter,
                activate: _enter,
                remove: function remove$$1(vnode, rm) {
                    /* istanbul ignore else */
                    if (vnode.data.show !== true) {
                        leave(vnode, rm);
                    } else {
                        rm();
                    }
                }
            } : {}

            var platformModules = [
                attrs,
                klass,
                events,
                domProps,
                style,
                transition
            ]

            /*  */

            // the directive module should be applied last, after all
            // built-in modules have been applied.
            var modules = platformModules.concat(baseModules);

            var patch = createPatchFunction({
                nodeOps: nodeOps,
                modules: modules
            });

            /**
             * Not type checking this file because flow doesn't like attaching
             * properties to Elements.
             */

            /* istanbul ignore if */
            if (isIE9) {
                // http://www.matts411.com/post/internet-explorer-9-oninput/
                document.addEventListener('selectionchange', function() {
                    var el = document.activeElement;
                    if (el && el.vmodel) {
                        trigger(el, 'input');
                    }
                });
            }

            var directive = {
                inserted: function inserted(el, binding, vnode, oldVnode) {
                    if (vnode.tag === 'select') {
                        // #6903
                        if (oldVnode.elm && !oldVnode.elm._vOptions) {
                            mergeVNodeHook(vnode, 'postpatch', function() {
                                directive.componentUpdated(el, binding, vnode);
                            });
                        } else {
                            setSelected(el, binding, vnode.context);
                        }
                        el._vOptions = [].map.call(el.options, getValue);
                    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
                        el._vModifiers = binding.modifiers;
                        if (!binding.modifiers.lazy) {
                            el.addEventListener('compositionstart', onCompositionStart);
                            el.addEventListener('compositionend', onCompositionEnd);
                            // Safari < 10.2 & UIWebView doesn't fire compositionend when
                            // switching focus before confirming composition choice
                            // this also fixes the issue where some browsers e.g. iOS Chrome
                            // fires "change" instead of "input" on autocomplete.
                            el.addEventListener('change', onCompositionEnd);
                            /* istanbul ignore if */
                            if (isIE9) {
                                el.vmodel = true;
                            }
                        }
                    }
                },

                componentUpdated: function componentUpdated(el, binding, vnode) {
                    if (vnode.tag === 'select') {
                        setSelected(el, binding, vnode.context);
                        // in case the options rendered by v-for have changed,
                        // it's possible that the value is out-of-sync with the rendered options.
                        // detect such cases and filter out values that no longer has a matching
                        // option in the DOM.
                        var prevOptions = el._vOptions;
                        var curOptions = el._vOptions = [].map.call(el.options, getValue);
                        if (curOptions.some(function(o, i) {
                                return !looseEqual(o, prevOptions[i]);
                            })) {
                            // trigger change event if
                            // no matching option found for at least one value
                            var needReset = el.multiple ?
                                binding.value.some(function(v) {
                                    return hasNoMatchingOption(v, curOptions);
                                }) :
                                binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
                            if (needReset) {
                                trigger(el, 'change');
                            }
                        }
                    }
                }
            };

            function setSelected(el, binding, vm) {
                actuallySetSelected(el, binding, vm);
                /* istanbul ignore if */
                if (isIE || isEdge) {
                    setTimeout(function() {
                        actuallySetSelected(el, binding, vm);
                    }, 0);
                }
            }

            function actuallySetSelected(el, binding, vm) {
                var value = binding.value;
                var isMultiple = el.multiple;
                if (isMultiple && !Array.isArray(value)) {
                    "production" !== 'production' && warn(
                        "<select multiple v-model=\"" + (binding.expression) + "\"> " +
                        "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
                        vm
                    );
                    return
                }
                var selected, option;
                for (var i = 0, l = el.options.length; i < l; i++) {
                    option = el.options[i];
                    if (isMultiple) {
                        selected = looseIndexOf(value, getValue(option)) > -1;
                        if (option.selected !== selected) {
                            option.selected = selected;
                        }
                    } else {
                        if (looseEqual(getValue(option), value)) {
                            if (el.selectedIndex !== i) {
                                el.selectedIndex = i;
                            }
                            return
                        }
                    }
                }
                if (!isMultiple) {
                    el.selectedIndex = -1;
                }
            }

            function hasNoMatchingOption(value, options) {
                return options.every(function(o) {
                    return !looseEqual(o, value);
                })
            }

            function getValue(option) {
                return '_value' in option ?
                    option._value :
                    option.value
            }

            function onCompositionStart(e) {
                e.target.composing = true;
            }

            function onCompositionEnd(e) {
                // prevent triggering an input event for no reason
                if (!e.target.composing) {
                    return
                }
                e.target.composing = false;
                trigger(e.target, 'input');
            }

            function trigger(el, type) {
                var e = document.createEvent('HTMLEvents');
                e.initEvent(type, true, true);
                el.dispatchEvent(e);
            }

            /*  */

            // recursively search for possible transition defined inside the component root
            function locateNode(vnode) {
                return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ?
                    locateNode(vnode.componentInstance._vnode) :
                    vnode
            }

            var show = {
                bind: function bind(el, ref, vnode) {
                    var value = ref.value;

                    vnode = locateNode(vnode);
                    var transition$$1 = vnode.data && vnode.data.transition;
                    var originalDisplay = el.__vOriginalDisplay =
                        el.style.display === 'none' ? '' : el.style.display;
                    if (value && transition$$1) {
                        vnode.data.show = true;
                        enter(vnode, function() {
                            el.style.display = originalDisplay;
                        });
                    } else {
                        el.style.display = value ? originalDisplay : 'none';
                    }
                },

                update: function update(el, ref, vnode) {
                    var value = ref.value;
                    var oldValue = ref.oldValue;

                    /* istanbul ignore if */
                    if (!value === !oldValue) {
                        return
                    }
                    vnode = locateNode(vnode);
                    var transition$$1 = vnode.data && vnode.data.transition;
                    if (transition$$1) {
                        vnode.data.show = true;
                        if (value) {
                            enter(vnode, function() {
                                el.style.display = el.__vOriginalDisplay;
                            });
                        } else {
                            leave(vnode, function() {
                                el.style.display = 'none';
                            });
                        }
                    } else {
                        el.style.display = value ? el.__vOriginalDisplay : 'none';
                    }
                },

                unbind: function unbind(
                    el,
                    binding,
                    vnode,
                    oldVnode,
                    isDestroy
                ) {
                    if (!isDestroy) {
                        el.style.display = el.__vOriginalDisplay;
                    }
                }
            }

            var platformDirectives = {
                model: directive,
                show: show
            }

            /*  */

            // Provides transition support for a single element/component.
            // supports transition mode (out-in / in-out)

            var transitionProps = {
                name: String,
                appear: Boolean,
                css: Boolean,
                mode: String,
                type: String,
                enterClass: String,
                leaveClass: String,
                enterToClass: String,
                leaveToClass: String,
                enterActiveClass: String,
                leaveActiveClass: String,
                appearClass: String,
                appearActiveClass: String,
                appearToClass: String,
                duration: [Number, String, Object]
            };

            // in case the child is also an abstract component, e.g. <keep-alive>
            // we want to recursively retrieve the real component to be rendered
            function getRealChild(vnode) {
                var compOptions = vnode && vnode.componentOptions;
                if (compOptions && compOptions.Ctor.options.abstract) {
                    return getRealChild(getFirstComponentChild(compOptions.children))
                } else {
                    return vnode
                }
            }

            function extractTransitionData(comp) {
                var data = {};
                var options = comp.$options;
                // props
                for (var key in options.propsData) {
                    data[key] = comp[key];
                }
                // events.
                // extract listeners and pass them directly to the transition methods
                var listeners = options._parentListeners;
                for (var key$1 in listeners) {
                    data[camelize(key$1)] = listeners[key$1];
                }
                return data
            }

            function placeholder(h, rawChild) {
                if (/\d-keep-alive$/.test(rawChild.tag)) {
                    return h('keep-alive', {
                        props: rawChild.componentOptions.propsData
                    })
                }
            }

            function hasParentTransition(vnode) {
                while ((vnode = vnode.parent)) {
                    if (vnode.data.transition) {
                        return true
                    }
                }
            }

            function isSameChild(child, oldChild) {
                return oldChild.key === child.key && oldChild.tag === child.tag
            }

            var Transition = {
                name: 'transition',
                props: transitionProps,
                abstract: true,

                render: function render(h) {
                    var this$1 = this;

                    var children = this.$slots.default;
                    if (!children) {
                        return
                    }

                    // filter out text nodes (possible whitespaces)
                    children = children.filter(function(c) {
                        return c.tag || isAsyncPlaceholder(c);
                    });
                    /* istanbul ignore if */
                    if (!children.length) {
                        return
                    }

                    // warn multiple elements
                    if (false) {
                        warn(
                            '<transition> can only be used on a single element. Use ' +
                            '<transition-group> for lists.',
                            this.$parent
                        );
                    }

                    var mode = this.mode;

                    // warn invalid mode
                    if (false) {
                        warn(
                            'invalid <transition> mode: ' + mode,
                            this.$parent
                        );
                    }

                    var rawChild = children[0];

                    // if this is a component root node and the component's
                    // parent container node also has transition, skip.
                    if (hasParentTransition(this.$vnode)) {
                        return rawChild
                    }

                    // apply transition data to child
                    // use getRealChild() to ignore abstract components e.g. keep-alive
                    var child = getRealChild(rawChild);
                    /* istanbul ignore if */
                    if (!child) {
                        return rawChild
                    }

                    if (this._leaving) {
                        return placeholder(h, rawChild)
                    }

                    // ensure a key that is unique to the vnode type and to this transition
                    // component instance. This key will be used to remove pending leaving nodes
                    // during entering.
                    var id = "__transition-" + (this._uid) + "-";
                    child.key = child.key == null ?
                        child.isComment ?
                        id + 'comment' :
                        id + child.tag :
                        isPrimitive(child.key) ?
                        (String(child.key).indexOf(id) === 0 ? child.key : id + child.key) :
                        child.key;

                    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
                    var oldRawChild = this._vnode;
                    var oldChild = getRealChild(oldRawChild);

                    // mark v-show
                    // so that the transition module can hand over the control to the directive
                    if (child.data.directives && child.data.directives.some(function(d) {
                            return d.name === 'show';
                        })) {
                        child.data.show = true;
                    }

                    if (
                        oldChild &&
                        oldChild.data &&
                        !isSameChild(child, oldChild) &&
                        !isAsyncPlaceholder(oldChild) &&
                        // #6687 component root is a comment node
                        !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
                    ) {
                        // replace old child transition data with fresh one
                        // important for dynamic transitions!
                        var oldData = oldChild.data.transition = extend({}, data);
                        // handle transition mode
                        if (mode === 'out-in') {
                            // return placeholder node and queue update when leave finishes
                            this._leaving = true;
                            mergeVNodeHook(oldData, 'afterLeave', function() {
                                this$1._leaving = false;
                                this$1.$forceUpdate();
                            });
                            return placeholder(h, rawChild)
                        } else if (mode === 'in-out') {
                            if (isAsyncPlaceholder(child)) {
                                return oldRawChild
                            }
                            var delayedLeave;
                            var performLeave = function() {
                                delayedLeave();
                            };
                            mergeVNodeHook(data, 'afterEnter', performLeave);
                            mergeVNodeHook(data, 'enterCancelled', performLeave);
                            mergeVNodeHook(oldData, 'delayLeave', function(leave) {
                                delayedLeave = leave;
                            });
                        }
                    }

                    return rawChild
                }
            }

            /*  */

            // Provides transition support for list items.
            // supports move transitions using the FLIP technique.

            // Because the vdom's children update algorithm is "unstable" - i.e.
            // it doesn't guarantee the relative positioning of removed elements,
            // we force transition-group to update its children into two passes:
            // in the first pass, we remove all nodes that need to be removed,
            // triggering their leaving transition; in the second pass, we insert/move
            // into the final desired state. This way in the second pass removed
            // nodes will remain where they should be.

            var props = extend({
                tag: String,
                moveClass: String
            }, transitionProps);

            delete props.mode;

            var TransitionGroup = {
                props: props,

                render: function render(h) {
                    var tag = this.tag || this.$vnode.data.tag || 'span';
                    var map = Object.create(null);
                    var prevChildren = this.prevChildren = this.children;
                    var rawChildren = this.$slots.default || [];
                    var children = this.children = [];
                    var transitionData = extractTransitionData(this);

                    for (var i = 0; i < rawChildren.length; i++) {
                        var c = rawChildren[i];
                        if (c.tag) {
                            if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
                                children.push(c);
                                map[c.key] = c;
                                (c.data || (c.data = {})).transition = transitionData;
                            } else if (false) {
                                var opts = c.componentOptions;
                                var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
                                warn(("<transition-group> children must be keyed: <" + name + ">"));
                            }
                        }
                    }

                    if (prevChildren) {
                        var kept = [];
                        var removed = [];
                        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
                            var c$1 = prevChildren[i$1];
                            c$1.data.transition = transitionData;
                            c$1.data.pos = c$1.elm.getBoundingClientRect();
                            if (map[c$1.key]) {
                                kept.push(c$1);
                            } else {
                                removed.push(c$1);
                            }
                        }
                        this.kept = h(tag, null, kept);
                        this.removed = removed;
                    }

                    return h(tag, null, children)
                },

                beforeUpdate: function beforeUpdate() {
                    // force removing pass
                    this.__patch__(
                        this._vnode,
                        this.kept,
                        false, // hydrating
                        true // removeOnly (!important, avoids unnecessary moves)
                    );
                    this._vnode = this.kept;
                },

                updated: function updated() {
                    var children = this.prevChildren;
                    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
                    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
                        return
                    }

                    // we divide the work into three loops to avoid mixing DOM reads and writes
                    // in each iteration - which helps prevent layout thrashing.
                    children.forEach(callPendingCbs);
                    children.forEach(recordPosition);
                    children.forEach(applyTranslation);

                    // force reflow to put everything in position
                    // assign to this to avoid being removed in tree-shaking
                    // $flow-disable-line
                    this._reflow = document.body.offsetHeight;

                    children.forEach(function(c) {
                        if (c.data.moved) {
                            var el = c.elm;
                            var s = el.style;
                            addTransitionClass(el, moveClass);
                            s.transform = s.WebkitTransform = s.transitionDuration = '';
                            el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
                                if (!e || /transform$/.test(e.propertyName)) {
                                    el.removeEventListener(transitionEndEvent, cb);
                                    el._moveCb = null;
                                    removeTransitionClass(el, moveClass);
                                }
                            });
                        }
                    });
                },

                methods: {
                    hasMove: function hasMove(el, moveClass) {
                        /* istanbul ignore if */
                        if (!hasTransition) {
                            return false
                        }
                        /* istanbul ignore if */
                        if (this._hasMove) {
                            return this._hasMove
                        }
                        // Detect whether an element with the move class applied has
                        // CSS transitions. Since the element may be inside an entering
                        // transition at this very moment, we make a clone of it and remove
                        // all other transition classes applied to ensure only the move class
                        // is applied.
                        var clone = el.cloneNode();
                        if (el._transitionClasses) {
                            el._transitionClasses.forEach(function(cls) {
                                removeClass(clone, cls);
                            });
                        }
                        addClass(clone, moveClass);
                        clone.style.display = 'none';
                        this.$el.appendChild(clone);
                        var info = getTransitionInfo(clone);
                        this.$el.removeChild(clone);
                        return (this._hasMove = info.hasTransform)
                    }
                }
            }

            function callPendingCbs(c) {
                /* istanbul ignore if */
                if (c.elm._moveCb) {
                    c.elm._moveCb();
                }
                /* istanbul ignore if */
                if (c.elm._enterCb) {
                    c.elm._enterCb();
                }
            }

            function recordPosition(c) {
                c.data.newPos = c.elm.getBoundingClientRect();
            }

            function applyTranslation(c) {
                var oldPos = c.data.pos;
                var newPos = c.data.newPos;
                var dx = oldPos.left - newPos.left;
                var dy = oldPos.top - newPos.top;
                if (dx || dy) {
                    c.data.moved = true;
                    var s = c.elm.style;
                    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
                    s.transitionDuration = '0s';
                }
            }

            var platformComponents = {
                Transition: Transition,
                TransitionGroup: TransitionGroup
            }

            /*  */

            // install platform specific utils
            Vue.config.mustUseProp = mustUseProp;
            Vue.config.isReservedTag = isReservedTag;
            Vue.config.isReservedAttr = isReservedAttr;
            Vue.config.getTagNamespace = getTagNamespace;
            Vue.config.isUnknownElement = isUnknownElement;

            // install platform runtime directives & components
            extend(Vue.options.directives, platformDirectives);
            extend(Vue.options.components, platformComponents);

            // install platform patch function
            Vue.prototype.__patch__ = inBrowser ? patch : noop;

            // public mount method
            Vue.prototype.$mount = function(
                el,
                hydrating
            ) {
                el = el && inBrowser ? query(el) : undefined;
                return mountComponent(this, el, hydrating)
            };

            // devtools global hook
            /* istanbul ignore next */
            if (inBrowser) {
                setTimeout(function() {
                    if (config.devtools) {
                        if (devtools) {
                            devtools.emit('init', Vue);
                        } else if (
                            false
                        ) {
                            console[console.info ? 'info' : 'log'](
                                'Download the Vue Devtools extension for a better development experience:\n' +
                                'https://github.com/vuejs/vue-devtools'
                            );
                        }
                    }
                    if (false) {
                        console[console.info ? 'info' : 'log'](
                            "You are running Vue in development mode.\n" +
                            "Make sure to turn on production mode when deploying for production.\n" +
                            "See more tips at https://vuejs.org/guide/deployment.html"
                        );
                    }
                }, 0);
            }

            /*  */

            var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
            var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

            var buildRegex = cached(function(delimiters) {
                var open = delimiters[0].replace(regexEscapeRE, '\\$&');
                var close = delimiters[1].replace(regexEscapeRE, '\\$&');
                return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
            });



            function parseText(
                text,
                delimiters
            ) {
                var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
                if (!tagRE.test(text)) {
                    return
                }
                var tokens = [];
                var rawTokens = [];
                var lastIndex = tagRE.lastIndex = 0;
                var match, index, tokenValue;
                while ((match = tagRE.exec(text))) {
                    index = match.index;
                    // push text token
                    if (index > lastIndex) {
                        rawTokens.push(tokenValue = text.slice(lastIndex, index));
                        tokens.push(JSON.stringify(tokenValue));
                    }
                    // tag token
                    var exp = parseFilters(match[1].trim());
                    tokens.push(("_s(" + exp + ")"));
                    rawTokens.push({
                        '@binding': exp
                    });
                    lastIndex = index + match[0].length;
                }
                if (lastIndex < text.length) {
                    rawTokens.push(tokenValue = text.slice(lastIndex));
                    tokens.push(JSON.stringify(tokenValue));
                }
                return {
                    expression: tokens.join('+'),
                    tokens: rawTokens
                }
            }

            /*  */

            function transformNode(el, options) {
                var warn = options.warn || baseWarn;
                var staticClass = getAndRemoveAttr(el, 'class');
                if (false) {
                    var res = parseText(staticClass, options.delimiters);
                    if (res) {
                        warn(
                            "class=\"" + staticClass + "\": " +
                            'Interpolation inside attributes has been removed. ' +
                            'Use v-bind or the colon shorthand instead. For example, ' +
                            'instead of <div class="{{ val }}">, use <div :class="val">.'
                        );
                    }
                }
                if (staticClass) {
                    el.staticClass = JSON.stringify(staticClass);
                }
                var classBinding = getBindingAttr(el, 'class', false /* getStatic */ );
                if (classBinding) {
                    el.classBinding = classBinding;
                }
            }

            function genData(el) {
                var data = '';
                if (el.staticClass) {
                    data += "staticClass:" + (el.staticClass) + ",";
                }
                if (el.classBinding) {
                    data += "class:" + (el.classBinding) + ",";
                }
                return data
            }

            var klass$1 = {
                staticKeys: ['staticClass'],
                transformNode: transformNode,
                genData: genData
            }

            /*  */

            function transformNode$1(el, options) {
                var warn = options.warn || baseWarn;
                var staticStyle = getAndRemoveAttr(el, 'style');
                if (staticStyle) {
                    /* istanbul ignore if */
                    if (false) {
                        var res = parseText(staticStyle, options.delimiters);
                        if (res) {
                            warn(
                                "style=\"" + staticStyle + "\": " +
                                'Interpolation inside attributes has been removed. ' +
                                'Use v-bind or the colon shorthand instead. For example, ' +
                                'instead of <div style="{{ val }}">, use <div :style="val">.'
                            );
                        }
                    }
                    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
                }

                var styleBinding = getBindingAttr(el, 'style', false /* getStatic */ );
                if (styleBinding) {
                    el.styleBinding = styleBinding;
                }
            }

            function genData$1(el) {
                var data = '';
                if (el.staticStyle) {
                    data += "staticStyle:" + (el.staticStyle) + ",";
                }
                if (el.styleBinding) {
                    data += "style:(" + (el.styleBinding) + "),";
                }
                return data
            }

            var style$1 = {
                staticKeys: ['staticStyle'],
                transformNode: transformNode$1,
                genData: genData$1
            }

            /*  */

            var decoder;

            var he = {
                decode: function decode(html) {
                    decoder = decoder || document.createElement('div');
                    decoder.innerHTML = html;
                    return decoder.textContent
                }
            }

            /*  */

            var isUnaryTag = makeMap(
                'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
                'link,meta,param,source,track,wbr'
            );

            // Elements that you can, intentionally, leave open
            // (and which close themselves)
            var canBeLeftOpenTag = makeMap(
                'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
            );

            // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
            // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
            var isNonPhrasingTag = makeMap(
                'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
                'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
                'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
                'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
                'title,tr,track'
            );

            /**
             * Not type-checking this file because it's mostly vendor code.
             */

            /*!
             * HTML Parser By John Resig (ejohn.org)
             * Modified by Juriy "kangax" Zaytsev
             * Original code by Erik Arvidsson, Mozilla Public License
             * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
             */

            // Regular Expressions for parsing tags and attributes
            var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
            // could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
            // but for Vue templates we can enforce a simple charset
            var ncname = '[a-zA-Z_][\\w\\-\\.]*';
            var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
            var startTagOpen = new RegExp(("^<" + qnameCapture));
            var startTagClose = /^\s*(\/?)>/;
            var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
            var doctype = /^<!DOCTYPE [^>]+>/i;
            // #7298: escape - to avoid being pased as HTML comment when inlined in page
            var comment = /^<!\--/;
            var conditionalComment = /^<!\[/;

            var IS_REGEX_CAPTURING_BROKEN = false;
            'x'.replace(/x(.)?/g, function(m, g) {
                IS_REGEX_CAPTURING_BROKEN = g === '';
            });

            // Special Elements (can contain anything)
            var isPlainTextElement = makeMap('script,style,textarea', true);
            var reCache = {};

            var decodingMap = {
                '&lt;': '<',
                '&gt;': '>',
                '&quot;': '"',
                '&amp;': '&',
                '&#10;': '\n',
                '&#9;': '\t'
            };
            var encodedAttr = /&(?:lt|gt|quot|amp);/g;
            var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;

            // #5992
            var isIgnoreNewlineTag = makeMap('pre,textarea', true);
            var shouldIgnoreFirstNewline = function(tag, html) {
                return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
            };

            function decodeAttr(value, shouldDecodeNewlines) {
                var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
                return value.replace(re, function(match) {
                    return decodingMap[match];
                })
            }

            function parseHTML(html, options) {
                var stack = [];
                var expectHTML = options.expectHTML;
                var isUnaryTag$$1 = options.isUnaryTag || no;
                var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
                var index = 0;
                var last, lastTag;
                while (html) {
                    last = html;
                    // Make sure we're not in a plaintext content element like script/style
                    if (!lastTag || !isPlainTextElement(lastTag)) {
                        var textEnd = html.indexOf('<');
                        if (textEnd === 0) {
                            // Comment:
                            if (comment.test(html)) {
                                var commentEnd = html.indexOf('-->');

                                if (commentEnd >= 0) {
                                    if (options.shouldKeepComment) {
                                        options.comment(html.substring(4, commentEnd));
                                    }
                                    advance(commentEnd + 3);
                                    continue
                                }
                            }

                            // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
                            if (conditionalComment.test(html)) {
                                var conditionalEnd = html.indexOf(']>');

                                if (conditionalEnd >= 0) {
                                    advance(conditionalEnd + 2);
                                    continue
                                }
                            }

                            // Doctype:
                            var doctypeMatch = html.match(doctype);
                            if (doctypeMatch) {
                                advance(doctypeMatch[0].length);
                                continue
                            }

                            // End tag:
                            var endTagMatch = html.match(endTag);
                            if (endTagMatch) {
                                var curIndex = index;
                                advance(endTagMatch[0].length);
                                parseEndTag(endTagMatch[1], curIndex, index);
                                continue
                            }

                            // Start tag:
                            var startTagMatch = parseStartTag();
                            if (startTagMatch) {
                                handleStartTag(startTagMatch);
                                if (shouldIgnoreFirstNewline(lastTag, html)) {
                                    advance(1);
                                }
                                continue
                            }
                        }

                        var text = (void 0),
                            rest = (void 0),
                            next = (void 0);
                        if (textEnd >= 0) {
                            rest = html.slice(textEnd);
                            while (!endTag.test(rest) &&
                                !startTagOpen.test(rest) &&
                                !comment.test(rest) &&
                                !conditionalComment.test(rest)
                            ) {
                                // < in plain text, be forgiving and treat it as text
                                next = rest.indexOf('<', 1);
                                if (next < 0) {
                                    break
                                }
                                textEnd += next;
                                rest = html.slice(textEnd);
                            }
                            text = html.substring(0, textEnd);
                            advance(textEnd);
                        }

                        if (textEnd < 0) {
                            text = html;
                            html = '';
                        }

                        if (options.chars && text) {
                            options.chars(text);
                        }
                    } else {
                        var endTagLength = 0;
                        var stackedTag = lastTag.toLowerCase();
                        var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
                        var rest$1 = html.replace(reStackedTag, function(all, text, endTag) {
                            endTagLength = endTag.length;
                            if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
                                text = text
                                    .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
                                    .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
                            }
                            if (shouldIgnoreFirstNewline(stackedTag, text)) {
                                text = text.slice(1);
                            }
                            if (options.chars) {
                                options.chars(text);
                            }
                            return ''
                        });
                        index += html.length - rest$1.length;
                        html = rest$1;
                        parseEndTag(stackedTag, index - endTagLength, index);
                    }

                    if (html === last) {
                        options.chars && options.chars(html);
                        if (false) {
                            options.warn(("Mal-formatted tag at end of template: \"" + html + "\""));
                        }
                        break
                    }
                }

                // Clean up any remaining tags
                parseEndTag();

                function advance(n) {
                    index += n;
                    html = html.substring(n);
                }

                function parseStartTag() {
                    var start = html.match(startTagOpen);
                    if (start) {
                        var match = {
                            tagName: start[1],
                            attrs: [],
                            start: index
                        };
                        advance(start[0].length);
                        var end, attr;
                        while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
                            advance(attr[0].length);
                            match.attrs.push(attr);
                        }
                        if (end) {
                            match.unarySlash = end[1];
                            advance(end[0].length);
                            match.end = index;
                            return match
                        }
                    }
                }

                function handleStartTag(match) {
                    var tagName = match.tagName;
                    var unarySlash = match.unarySlash;

                    if (expectHTML) {
                        if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
                            parseEndTag(lastTag);
                        }
                        if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
                            parseEndTag(tagName);
                        }
                    }

                    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

                    var l = match.attrs.length;
                    var attrs = new Array(l);
                    for (var i = 0; i < l; i++) {
                        var args = match.attrs[i];
                        // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
                        if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
                            if (args[3] === '') {
                                delete args[3];
                            }
                            if (args[4] === '') {
                                delete args[4];
                            }
                            if (args[5] === '') {
                                delete args[5];
                            }
                        }
                        var value = args[3] || args[4] || args[5] || '';
                        var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ?
                            options.shouldDecodeNewlinesForHref :
                            options.shouldDecodeNewlines;
                        attrs[i] = {
                            name: args[1],
                            value: decodeAttr(value, shouldDecodeNewlines)
                        };
                    }

                    if (!unary) {
                        stack.push({
                            tag: tagName,
                            lowerCasedTag: tagName.toLowerCase(),
                            attrs: attrs
                        });
                        lastTag = tagName;
                    }

                    if (options.start) {
                        options.start(tagName, attrs, unary, match.start, match.end);
                    }
                }

                function parseEndTag(tagName, start, end) {
                    var pos, lowerCasedTagName;
                    if (start == null) {
                        start = index;
                    }
                    if (end == null) {
                        end = index;
                    }

                    if (tagName) {
                        lowerCasedTagName = tagName.toLowerCase();
                    }

                    // Find the closest opened tag of the same type
                    if (tagName) {
                        for (pos = stack.length - 1; pos >= 0; pos--) {
                            if (stack[pos].lowerCasedTag === lowerCasedTagName) {
                                break
                            }
                        }
                    } else {
                        // If no tag name is provided, clean shop
                        pos = 0;
                    }

                    if (pos >= 0) {
                        // Close all the open elements, up the stack
                        for (var i = stack.length - 1; i >= pos; i--) {
                            if (false) {
                                options.warn(
                                    ("tag <" + (stack[i].tag) + "> has no matching end tag.")
                                );
                            }
                            if (options.end) {
                                options.end(stack[i].tag, start, end);
                            }
                        }

                        // Remove the open elements from the stack
                        stack.length = pos;
                        lastTag = pos && stack[pos - 1].tag;
                    } else if (lowerCasedTagName === 'br') {
                        if (options.start) {
                            options.start(tagName, [], true, start, end);
                        }
                    } else if (lowerCasedTagName === 'p') {
                        if (options.start) {
                            options.start(tagName, [], false, start, end);
                        }
                        if (options.end) {
                            options.end(tagName, start, end);
                        }
                    }
                }
            }

            /*  */

            var onRE = /^@|^v-on:/;
            var dirRE = /^v-|^@|^:/;
            var forAliasRE = /([^]*?)\s+(?:in|of)\s+([^]*)/;
            var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
            var stripParensRE = /^\(|\)$/g;

            var argRE = /:(.*)$/;
            var bindRE = /^:|^v-bind:/;
            var modifierRE = /\.[^.]+/g;

            var decodeHTMLCached = cached(he.decode);

            // configurable state
            var warn$2;
            var delimiters;
            var transforms;
            var preTransforms;
            var postTransforms;
            var platformIsPreTag;
            var platformMustUseProp;
            var platformGetTagNamespace;



            function createASTElement(
                tag,
                attrs,
                parent
            ) {
                return {
                    type: 1,
                    tag: tag,
                    attrsList: attrs,
                    attrsMap: makeAttrsMap(attrs),
                    parent: parent,
                    children: []
                }
            }

            /**
             * Convert HTML string to AST.
             */
            function parse(
                template,
                options
            ) {
                warn$2 = options.warn || baseWarn;

                platformIsPreTag = options.isPreTag || no;
                platformMustUseProp = options.mustUseProp || no;
                platformGetTagNamespace = options.getTagNamespace || no;

                transforms = pluckModuleFunction(options.modules, 'transformNode');
                preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
                postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

                delimiters = options.delimiters;

                var stack = [];
                var preserveWhitespace = options.preserveWhitespace !== false;
                var root;
                var currentParent;
                var inVPre = false;
                var inPre = false;
                var warned = false;

                function warnOnce(msg) {
                    if (!warned) {
                        warned = true;
                        warn$2(msg);
                    }
                }

                function closeElement(element) {
                    // check pre state
                    if (element.pre) {
                        inVPre = false;
                    }
                    if (platformIsPreTag(element.tag)) {
                        inPre = false;
                    }
                    // apply post-transforms
                    for (var i = 0; i < postTransforms.length; i++) {
                        postTransforms[i](element, options);
                    }
                }

                parseHTML(template, {
                    warn: warn$2,
                    expectHTML: options.expectHTML,
                    isUnaryTag: options.isUnaryTag,
                    canBeLeftOpenTag: options.canBeLeftOpenTag,
                    shouldDecodeNewlines: options.shouldDecodeNewlines,
                    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
                    shouldKeepComment: options.comments,
                    start: function start(tag, attrs, unary) {
                        // check namespace.
                        // inherit parent ns if there is one
                        var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

                        // handle IE svg bug
                        /* istanbul ignore if */
                        if (isIE && ns === 'svg') {
                            attrs = guardIESVGBug(attrs);
                        }

                        var element = createASTElement(tag, attrs, currentParent);
                        if (ns) {
                            element.ns = ns;
                        }

                        if (isForbiddenTag(element) && !isServerRendering()) {
                            element.forbidden = true;
                            "production" !== 'production' && warn$2(
                                'Templates should only be responsible for mapping the state to the ' +
                                'UI. Avoid placing tags with side-effects in your templates, such as ' +
                                "<" + tag + ">" + ', as they will not be parsed.'
                            );
                        }

                        // apply pre-transforms
                        for (var i = 0; i < preTransforms.length; i++) {
                            element = preTransforms[i](element, options) || element;
                        }

                        if (!inVPre) {
                            processPre(element);
                            if (element.pre) {
                                inVPre = true;
                            }
                        }
                        if (platformIsPreTag(element.tag)) {
                            inPre = true;
                        }
                        if (inVPre) {
                            processRawAttrs(element);
                        } else if (!element.processed) {
                            // structural directives
                            processFor(element);
                            processIf(element);
                            processOnce(element);
                            // element-scope stuff
                            processElement(element, options);
                        }

                        function checkRootConstraints(el) {
                            if (false) {
                                if (el.tag === 'slot' || el.tag === 'template') {
                                    warnOnce(
                                        "Cannot use <" + (el.tag) + "> as component root element because it may " +
                                        'contain multiple nodes.'
                                    );
                                }
                                if (el.attrsMap.hasOwnProperty('v-for')) {
                                    warnOnce(
                                        'Cannot use v-for on stateful component root element because ' +
                                        'it renders multiple elements.'
                                    );
                                }
                            }
                        }

                        // tree management
                        if (!root) {
                            root = element;
                            checkRootConstraints(root);
                        } else if (!stack.length) {
                            // allow root elements with v-if, v-else-if and v-else
                            if (root.if && (element.elseif || element.else)) {
                                checkRootConstraints(element);
                                addIfCondition(root, {
                                    exp: element.elseif,
                                    block: element
                                });
                            } else if (false) {
                                warnOnce(
                                    "Component template should contain exactly one root element. " +
                                    "If you are using v-if on multiple elements, " +
                                    "use v-else-if to chain them instead."
                                );
                            }
                        }
                        if (currentParent && !element.forbidden) {
                            if (element.elseif || element.else) {
                                processIfConditions(element, currentParent);
                            } else if (element.slotScope) { // scoped slot
                                currentParent.plain = false;
                                var name = element.slotTarget || '"default"';
                                (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
                            } else {
                                currentParent.children.push(element);
                                element.parent = currentParent;
                            }
                        }
                        if (!unary) {
                            currentParent = element;
                            stack.push(element);
                        } else {
                            closeElement(element);
                        }
                    },

                    end: function end() {
                        // remove trailing whitespace
                        var element = stack[stack.length - 1];
                        var lastNode = element.children[element.children.length - 1];
                        if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
                            element.children.pop();
                        }
                        // pop stack
                        stack.length -= 1;
                        currentParent = stack[stack.length - 1];
                        closeElement(element);
                    },

                    chars: function chars(text) {
                        if (!currentParent) {
                            if (false) {
                                if (text === template) {
                                    warnOnce(
                                        'Component template requires a root element, rather than just text.'
                                    );
                                } else if ((text = text.trim())) {
                                    warnOnce(
                                        ("text \"" + text + "\" outside root element will be ignored.")
                                    );
                                }
                            }
                            return
                        }
                        // IE textarea placeholder bug
                        /* istanbul ignore if */
                        if (isIE &&
                            currentParent.tag === 'textarea' &&
                            currentParent.attrsMap.placeholder === text
                        ) {
                            return
                        }
                        var children = currentParent.children;
                        text = inPre || text.trim() ?
                            isTextTag(currentParent) ? text : decodeHTMLCached(text)
                            // only preserve whitespace if its not right after a starting tag
                            :
                            preserveWhitespace && children.length ? ' ' : '';
                        if (text) {
                            var res;
                            if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
                                children.push({
                                    type: 2,
                                    expression: res.expression,
                                    tokens: res.tokens,
                                    text: text
                                });
                            } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
                                children.push({
                                    type: 3,
                                    text: text
                                });
                            }
                        }
                    },
                    comment: function comment(text) {
                        currentParent.children.push({
                            type: 3,
                            text: text,
                            isComment: true
                        });
                    }
                });
                return root
            }

            function processPre(el) {
                if (getAndRemoveAttr(el, 'v-pre') != null) {
                    el.pre = true;
                }
            }

            function processRawAttrs(el) {
                var l = el.attrsList.length;
                if (l) {
                    var attrs = el.attrs = new Array(l);
                    for (var i = 0; i < l; i++) {
                        attrs[i] = {
                            name: el.attrsList[i].name,
                            value: JSON.stringify(el.attrsList[i].value)
                        };
                    }
                } else if (!el.pre) {
                    // non root node in pre blocks with no attributes
                    el.plain = true;
                }
            }

            function processElement(element, options) {
                processKey(element);

                // determine whether this is a plain element after
                // removing structural attributes
                element.plain = !element.key && !element.attrsList.length;

                processRef(element);
                processSlot(element);
                processComponent(element);
                for (var i = 0; i < transforms.length; i++) {
                    element = transforms[i](element, options) || element;
                }
                processAttrs(element);
            }

            function processKey(el) {
                var exp = getBindingAttr(el, 'key');
                if (exp) {
                    if (false) {
                        warn$2("<template> cannot be keyed. Place the key on real elements instead.");
                    }
                    el.key = exp;
                }
            }

            function processRef(el) {
                var ref = getBindingAttr(el, 'ref');
                if (ref) {
                    el.ref = ref;
                    el.refInFor = checkInFor(el);
                }
            }

            function processFor(el) {
                var exp;
                if ((exp = getAndRemoveAttr(el, 'v-for'))) {
                    var res = parseFor(exp);
                    if (res) {
                        extend(el, res);
                    } else if (false) {
                        warn$2(
                            ("Invalid v-for expression: " + exp)
                        );
                    }
                }
            }



            function parseFor(exp) {
                var inMatch = exp.match(forAliasRE);
                if (!inMatch) {
                    return
                }
                var res = {};
                res.for = inMatch[2].trim();
                var alias = inMatch[1].trim().replace(stripParensRE, '');
                var iteratorMatch = alias.match(forIteratorRE);
                if (iteratorMatch) {
                    res.alias = alias.replace(forIteratorRE, '');
                    res.iterator1 = iteratorMatch[1].trim();
                    if (iteratorMatch[2]) {
                        res.iterator2 = iteratorMatch[2].trim();
                    }
                } else {
                    res.alias = alias;
                }
                return res
            }

            function processIf(el) {
                var exp = getAndRemoveAttr(el, 'v-if');
                if (exp) {
                    el.if = exp;
                    addIfCondition(el, {
                        exp: exp,
                        block: el
                    });
                } else {
                    if (getAndRemoveAttr(el, 'v-else') != null) {
                        el.else = true;
                    }
                    var elseif = getAndRemoveAttr(el, 'v-else-if');
                    if (elseif) {
                        el.elseif = elseif;
                    }
                }
            }

            function processIfConditions(el, parent) {
                var prev = findPrevElement(parent.children);
                if (prev && prev.if) {
                    addIfCondition(prev, {
                        exp: el.elseif,
                        block: el
                    });
                } else if (false) {
                    warn$2(
                        "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
                        "used on element <" + (el.tag) + "> without corresponding v-if."
                    );
                }
            }

            function findPrevElement(children) {
                var i = children.length;
                while (i--) {
                    if (children[i].type === 1) {
                        return children[i]
                    } else {
                        if (false) {
                            warn$2(
                                "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
                                "will be ignored."
                            );
                        }
                        children.pop();
                    }
                }
            }

            function addIfCondition(el, condition) {
                if (!el.ifConditions) {
                    el.ifConditions = [];
                }
                el.ifConditions.push(condition);
            }

            function processOnce(el) {
                var once$$1 = getAndRemoveAttr(el, 'v-once');
                if (once$$1 != null) {
                    el.once = true;
                }
            }

            function processSlot(el) {
                if (el.tag === 'slot') {
                    el.slotName = getBindingAttr(el, 'name');
                    if (false) {
                        warn$2(
                            "`key` does not work on <slot> because slots are abstract outlets " +
                            "and can possibly expand into multiple elements. " +
                            "Use the key on a wrapping element instead."
                        );
                    }
                } else {
                    var slotScope;
                    if (el.tag === 'template') {
                        slotScope = getAndRemoveAttr(el, 'scope');
                        /* istanbul ignore if */
                        if (false) {
                            warn$2(
                                "the \"scope\" attribute for scoped slots have been deprecated and " +
                                "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
                                "can also be used on plain elements in addition to <template> to " +
                                "denote scoped slots.",
                                true
                            );
                        }
                        el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
                    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
                        /* istanbul ignore if */
                        if (false) {
                            warn$2(
                                "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
                                "(v-for takes higher priority). Use a wrapper <template> for the " +
                                "scoped slot to make it clearer.",
                                true
                            );
                        }
                        el.slotScope = slotScope;
                    }
                    var slotTarget = getBindingAttr(el, 'slot');
                    if (slotTarget) {
                        el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
                        // preserve slot as an attribute for native shadow DOM compat
                        // only for non-scoped slots.
                        if (el.tag !== 'template' && !el.slotScope) {
                            addAttr(el, 'slot', slotTarget);
                        }
                    }
                }
            }

            function processComponent(el) {
                var binding;
                if ((binding = getBindingAttr(el, 'is'))) {
                    el.component = binding;
                }
                if (getAndRemoveAttr(el, 'inline-template') != null) {
                    el.inlineTemplate = true;
                }
            }

            function processAttrs(el) {
                var list = el.attrsList;
                var i, l, name, rawName, value, modifiers, isProp;
                for (i = 0, l = list.length; i < l; i++) {
                    name = rawName = list[i].name;
                    value = list[i].value;
                    if (dirRE.test(name)) {
                        // mark element as dynamic
                        el.hasBindings = true;
                        // modifiers
                        modifiers = parseModifiers(name);
                        if (modifiers) {
                            name = name.replace(modifierRE, '');
                        }
                        if (bindRE.test(name)) { // v-bind
                            name = name.replace(bindRE, '');
                            value = parseFilters(value);
                            isProp = false;
                            if (modifiers) {
                                if (modifiers.prop) {
                                    isProp = true;
                                    name = camelize(name);
                                    if (name === 'innerHtml') {
                                        name = 'innerHTML';
                                    }
                                }
                                if (modifiers.camel) {
                                    name = camelize(name);
                                }
                                if (modifiers.sync) {
                                    addHandler(
                                        el,
                                        ("update:" + (camelize(name))),
                                        genAssignmentCode(value, "$event")
                                    );
                                }
                            }
                            if (isProp || (!el.component && platformMustUseProp(el.tag, el.attrsMap.type, name))) {
                                addProp(el, name, value);
                            } else {
                                addAttr(el, name, value);
                            }
                        } else if (onRE.test(name)) { // v-on
                            name = name.replace(onRE, '');
                            addHandler(el, name, value, modifiers, false, warn$2);
                        } else { // normal directives
                            name = name.replace(dirRE, '');
                            // parse arg
                            var argMatch = name.match(argRE);
                            var arg = argMatch && argMatch[1];
                            if (arg) {
                                name = name.slice(0, -(arg.length + 1));
                            }
                            addDirective(el, name, rawName, value, arg, modifiers);
                            if (false) {
                                checkForAliasModel(el, value);
                            }
                        }
                    } else {
                        // literal attribute
                        if (false) {
                            var res = parseText(value, delimiters);
                            if (res) {
                                warn$2(
                                    name + "=\"" + value + "\": " +
                                    'Interpolation inside attributes has been removed. ' +
                                    'Use v-bind or the colon shorthand instead. For example, ' +
                                    'instead of <div id="{{ val }}">, use <div :id="val">.'
                                );
                            }
                        }
                        addAttr(el, name, JSON.stringify(value));
                        // #6887 firefox doesn't update muted state if set via attribute
                        // even immediately after element creation
                        if (!el.component &&
                            name === 'muted' &&
                            platformMustUseProp(el.tag, el.attrsMap.type, name)) {
                            addProp(el, name, 'true');
                        }
                    }
                }
            }

            function checkInFor(el) {
                var parent = el;
                while (parent) {
                    if (parent.for !== undefined) {
                        return true
                    }
                    parent = parent.parent;
                }
                return false
            }

            function parseModifiers(name) {
                var match = name.match(modifierRE);
                if (match) {
                    var ret = {};
                    match.forEach(function(m) {
                        ret[m.slice(1)] = true;
                    });
                    return ret
                }
            }

            function makeAttrsMap(attrs) {
                var map = {};
                for (var i = 0, l = attrs.length; i < l; i++) {
                    if (
                        false
                    ) {
                        warn$2('duplicate attribute: ' + attrs[i].name);
                    }
                    map[attrs[i].name] = attrs[i].value;
                }
                return map
            }

            // for script (e.g. type="x/template") or style, do not decode content
            function isTextTag(el) {
                return el.tag === 'script' || el.tag === 'style'
            }

            function isForbiddenTag(el) {
                return (
                    el.tag === 'style' ||
                    (el.tag === 'script' && (!el.attrsMap.type ||
                        el.attrsMap.type === 'text/javascript'
                    ))
                )
            }

            var ieNSBug = /^xmlns:NS\d+/;
            var ieNSPrefix = /^NS\d+:/;

            /* istanbul ignore next */
            function guardIESVGBug(attrs) {
                var res = [];
                for (var i = 0; i < attrs.length; i++) {
                    var attr = attrs[i];
                    if (!ieNSBug.test(attr.name)) {
                        attr.name = attr.name.replace(ieNSPrefix, '');
                        res.push(attr);
                    }
                }
                return res
            }

            function checkForAliasModel(el, value) {
                var _el = el;
                while (_el) {
                    if (_el.for && _el.alias === value) {
                        warn$2(
                            "<" + (el.tag) + " v-model=\"" + value + "\">: " +
                            "You are binding v-model directly to a v-for iteration alias. " +
                            "This will not be able to modify the v-for source array because " +
                            "writing to the alias is like modifying a function local variable. " +
                            "Consider using an array of objects and use v-model on an object property instead."
                        );
                    }
                    _el = _el.parent;
                }
            }

            /*  */

            /**
             * Expand input[v-model] with dyanmic type bindings into v-if-else chains
             * Turn this:
             *   <input v-model="data[type]" :type="type">
             * into this:
             *   <input v-if="type === 'checkbox'" type="checkbox" v-model="data[type]">
             *   <input v-else-if="type === 'radio'" type="radio" v-model="data[type]">
             *   <input v-else :type="type" v-model="data[type]">
             */

            function preTransformNode(el, options) {
                if (el.tag === 'input') {
                    var map = el.attrsMap;
                    if (!map['v-model']) {
                        return
                    }

                    var typeBinding;
                    if (map[':type'] || map['v-bind:type']) {
                        typeBinding = getBindingAttr(el, 'type');
                    }
                    if (!map.type && !typeBinding && map['v-bind']) {
                        typeBinding = "(" + (map['v-bind']) + ").type";
                    }

                    if (typeBinding) {
                        var ifCondition = getAndRemoveAttr(el, 'v-if', true);
                        var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
                        var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
                        var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
                        // 1. checkbox
                        var branch0 = cloneASTElement(el);
                        // process for on the main node
                        processFor(branch0);
                        addRawAttr(branch0, 'type', 'checkbox');
                        processElement(branch0, options);
                        branch0.processed = true; // prevent it from double-processed
                        branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
                        addIfCondition(branch0, {
                            exp: branch0.if,
                            block: branch0
                        });
                        // 2. add radio else-if condition
                        var branch1 = cloneASTElement(el);
                        getAndRemoveAttr(branch1, 'v-for', true);
                        addRawAttr(branch1, 'type', 'radio');
                        processElement(branch1, options);
                        addIfCondition(branch0, {
                            exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
                            block: branch1
                        });
                        // 3. other
                        var branch2 = cloneASTElement(el);
                        getAndRemoveAttr(branch2, 'v-for', true);
                        addRawAttr(branch2, ':type', typeBinding);
                        processElement(branch2, options);
                        addIfCondition(branch0, {
                            exp: ifCondition,
                            block: branch2
                        });

                        if (hasElse) {
                            branch0.else = true;
                        } else if (elseIfCondition) {
                            branch0.elseif = elseIfCondition;
                        }

                        return branch0
                    }
                }
            }

            function cloneASTElement(el) {
                return createASTElement(el.tag, el.attrsList.slice(), el.parent)
            }

            var model$2 = {
                preTransformNode: preTransformNode
            }

            var modules$1 = [
                klass$1,
                style$1,
                model$2
            ]

            /*  */

            function text(el, dir) {
                if (dir.value) {
                    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"));
                }
            }

            /*  */

            function html(el, dir) {
                if (dir.value) {
                    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"));
                }
            }

            var directives$1 = {
                model: model,
                text: text,
                html: html
            }

            /*  */

            var baseOptions = {
                expectHTML: true,
                modules: modules$1,
                directives: directives$1,
                isPreTag: isPreTag,
                isUnaryTag: isUnaryTag,
                mustUseProp: mustUseProp,
                canBeLeftOpenTag: canBeLeftOpenTag,
                isReservedTag: isReservedTag,
                getTagNamespace: getTagNamespace,
                staticKeys: genStaticKeys(modules$1)
            };

            /*  */

            var isStaticKey;
            var isPlatformReservedTag;

            var genStaticKeysCached = cached(genStaticKeys$1);

            /**
             * Goal of the optimizer: walk the generated template AST tree
             * and detect sub-trees that are purely static, i.e. parts of
             * the DOM that never needs to change.
             *
             * Once we detect these sub-trees, we can:
             *
             * 1. Hoist them into constants, so that we no longer need to
             *    create fresh nodes for them on each re-render;
             * 2. Completely skip them in the patching process.
             */
            function optimize(root, options) {
                if (!root) {
                    return
                }
                isStaticKey = genStaticKeysCached(options.staticKeys || '');
                isPlatformReservedTag = options.isReservedTag || no;
                // first pass: mark all non-static nodes.
                markStatic$1(root);
                // second pass: mark static roots.
                markStaticRoots(root, false);
            }

            function genStaticKeys$1(keys) {
                return makeMap(
                    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +
                    (keys ? ',' + keys : '')
                )
            }

            function markStatic$1(node) {
                node.static = isStatic(node);
                if (node.type === 1) {
                    // do not make component slot content static. this avoids
                    // 1. components not able to mutate slot nodes
                    // 2. static slot content fails for hot-reloading
                    if (!isPlatformReservedTag(node.tag) &&
                        node.tag !== 'slot' &&
                        node.attrsMap['inline-template'] == null
                    ) {
                        return
                    }
                    for (var i = 0, l = node.children.length; i < l; i++) {
                        var child = node.children[i];
                        markStatic$1(child);
                        if (!child.static) {
                            node.static = false;
                        }
                    }
                    if (node.ifConditions) {
                        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
                            var block = node.ifConditions[i$1].block;
                            markStatic$1(block);
                            if (!block.static) {
                                node.static = false;
                            }
                        }
                    }
                }
            }

            function markStaticRoots(node, isInFor) {
                if (node.type === 1) {
                    if (node.static || node.once) {
                        node.staticInFor = isInFor;
                    }
                    // For a node to qualify as a static root, it should have children that
                    // are not just static text. Otherwise the cost of hoisting out will
                    // outweigh the benefits and it's better off to just always render it fresh.
                    if (node.static && node.children.length && !(
                            node.children.length === 1 &&
                            node.children[0].type === 3
                        )) {
                        node.staticRoot = true;
                        return
                    } else {
                        node.staticRoot = false;
                    }
                    if (node.children) {
                        for (var i = 0, l = node.children.length; i < l; i++) {
                            markStaticRoots(node.children[i], isInFor || !!node.for);
                        }
                    }
                    if (node.ifConditions) {
                        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
                            markStaticRoots(node.ifConditions[i$1].block, isInFor);
                        }
                    }
                }
            }

            function isStatic(node) {
                if (node.type === 2) { // expression
                    return false
                }
                if (node.type === 3) { // text
                    return true
                }
                return !!(node.pre || (!node.hasBindings && // no dynamic bindings
                    !node.if && !node.for && // not v-if or v-for or v-else
                    !isBuiltInTag(node.tag) && // not a built-in
                    isPlatformReservedTag(node.tag) && // not a component
                    !isDirectChildOfTemplateFor(node) &&
                    Object.keys(node).every(isStaticKey)
                ))
            }

            function isDirectChildOfTemplateFor(node) {
                while (node.parent) {
                    node = node.parent;
                    if (node.tag !== 'template') {
                        return false
                    }
                    if (node.for) {
                        return true
                    }
                }
                return false
            }

            /*  */

            var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
            var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

            // KeyboardEvent.keyCode aliases
            var keyCodes = {
                esc: 27,
                tab: 9,
                enter: 13,
                space: 32,
                up: 38,
                left: 37,
                right: 39,
                down: 40,
                'delete': [8, 46]
            };

            // KeyboardEvent.key aliases
            var keyNames = {
                esc: 'Escape',
                tab: 'Tab',
                enter: 'Enter',
                space: ' ',
                // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
                up: ['Up', 'ArrowUp'],
                left: ['Left', 'ArrowLeft'],
                right: ['Right', 'ArrowRight'],
                down: ['Down', 'ArrowDown'],
                'delete': ['Backspace', 'Delete']
            };

            // #4868: modifiers that prevent the execution of the listener
            // need to explicitly return null so that we can determine whether to remove
            // the listener for .once
            var genGuard = function(condition) {
                return ("if(" + condition + ")return null;");
            };

            var modifierCode = {
                stop: '$event.stopPropagation();',
                prevent: '$event.preventDefault();',
                self: genGuard("$event.target !== $event.currentTarget"),
                ctrl: genGuard("!$event.ctrlKey"),
                shift: genGuard("!$event.shiftKey"),
                alt: genGuard("!$event.altKey"),
                meta: genGuard("!$event.metaKey"),
                left: genGuard("'button' in $event && $event.button !== 0"),
                middle: genGuard("'button' in $event && $event.button !== 1"),
                right: genGuard("'button' in $event && $event.button !== 2")
            };

            function genHandlers(
                events,
                isNative,
                warn
            ) {
                var res = isNative ? 'nativeOn:{' : 'on:{';
                for (var name in events) {
                    res += "\"" + name + "\":" + (genHandler(name, events[name])) + ",";
                }
                return res.slice(0, -1) + '}'
            }

            function genHandler(
                name,
                handler
            ) {
                if (!handler) {
                    return 'function(){}'
                }

                if (Array.isArray(handler)) {
                    return ("[" + (handler.map(function(handler) {
                        return genHandler(name, handler);
                    }).join(',')) + "]")
                }

                var isMethodPath = simplePathRE.test(handler.value);
                var isFunctionExpression = fnExpRE.test(handler.value);

                if (!handler.modifiers) {
                    if (isMethodPath || isFunctionExpression) {
                        return handler.value
                    }
                    /* istanbul ignore if */
                    return ("function($event){" + (handler.value) + "}") // inline statement
                } else {
                    var code = '';
                    var genModifierCode = '';
                    var keys = [];
                    for (var key in handler.modifiers) {
                        if (modifierCode[key]) {
                            genModifierCode += modifierCode[key];
                            // left/right
                            if (keyCodes[key]) {
                                keys.push(key);
                            }
                        } else if (key === 'exact') {
                            var modifiers = (handler.modifiers);
                            genModifierCode += genGuard(
                                ['ctrl', 'shift', 'alt', 'meta']
                                .filter(function(keyModifier) {
                                    return !modifiers[keyModifier];
                                })
                                .map(function(keyModifier) {
                                    return ("$event." + keyModifier + "Key");
                                })
                                .join('||')
                            );
                        } else {
                            keys.push(key);
                        }
                    }
                    if (keys.length) {
                        code += genKeyFilter(keys);
                    }
                    // Make sure modifiers like prevent and stop get executed after key filtering
                    if (genModifierCode) {
                        code += genModifierCode;
                    }
                    var handlerCode = isMethodPath ?
                        ("return " + (handler.value) + "($event)") :
                        isFunctionExpression ?
                        ("return (" + (handler.value) + ")($event)") :
                        handler.value;
                    /* istanbul ignore if */
                    return ("function($event){" + code + handlerCode + "}")
                }
            }

            function genKeyFilter(keys) {
                return ("if(!('button' in $event)&&" + (keys.map(genFilterCode).join('&&')) + ")return null;")
            }

            function genFilterCode(key) {
                var keyVal = parseInt(key, 10);
                if (keyVal) {
                    return ("$event.keyCode!==" + keyVal)
                }
                var keyCode = keyCodes[key];
                var keyName = keyNames[key];
                return (
                    "_k($event.keyCode," +
                    (JSON.stringify(key)) + "," +
                    (JSON.stringify(keyCode)) + "," +
                    "$event.key," +
                    "" + (JSON.stringify(keyName)) +
                    ")"
                )
            }

            /*  */

            function on(el, dir) {
                if (false) {
                    warn("v-on without argument does not support modifiers.");
                }
                el.wrapListeners = function(code) {
                    return ("_g(" + code + "," + (dir.value) + ")");
                };
            }

            /*  */

            function bind$1(el, dir) {
                el.wrapData = function(code) {
                    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
                };
            }

            /*  */

            var baseDirectives = {
                on: on,
                bind: bind$1,
                cloak: noop
            }

            /*  */

            var CodegenState = function CodegenState(options) {
                this.options = options;
                this.warn = options.warn || baseWarn;
                this.transforms = pluckModuleFunction(options.modules, 'transformCode');
                this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
                this.directives = extend(extend({}, baseDirectives), options.directives);
                var isReservedTag = options.isReservedTag || no;
                this.maybeComponent = function(el) {
                    return !isReservedTag(el.tag);
                };
                this.onceId = 0;
                this.staticRenderFns = [];
            };



            function generate(
                ast,
                options
            ) {
                var state = new CodegenState(options);
                var code = ast ? genElement(ast, state) : '_c("div")';
                return {
                    render: ("with(this){return " + code + "}"),
                    staticRenderFns: state.staticRenderFns
                }
            }

            function genElement(el, state) {
                if (el.staticRoot && !el.staticProcessed) {
                    return genStatic(el, state)
                } else if (el.once && !el.onceProcessed) {
                    return genOnce(el, state)
                } else if (el.for && !el.forProcessed) {
                    return genFor(el, state)
                } else if (el.if && !el.ifProcessed) {
                    return genIf(el, state)
                } else if (el.tag === 'template' && !el.slotTarget) {
                    return genChildren(el, state) || 'void 0'
                } else if (el.tag === 'slot') {
                    return genSlot(el, state)
                } else {
                    // component or element
                    var code;
                    if (el.component) {
                        code = genComponent(el.component, el, state);
                    } else {
                        var data = el.plain ? undefined : genData$2(el, state);

                        var children = el.inlineTemplate ? null : genChildren(el, state, true);
                        code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
                    }
                    // module transforms
                    for (var i = 0; i < state.transforms.length; i++) {
                        code = state.transforms[i](el, code);
                    }
                    return code
                }
            }

            // hoist static sub-trees out
            function genStatic(el, state) {
                el.staticProcessed = true;
                state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
                return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
            }

            // v-once
            function genOnce(el, state) {
                el.onceProcessed = true;
                if (el.if && !el.ifProcessed) {
                    return genIf(el, state)
                } else if (el.staticInFor) {
                    var key = '';
                    var parent = el.parent;
                    while (parent) {
                        if (parent.for) {
                            key = parent.key;
                            break
                        }
                        parent = parent.parent;
                    }
                    if (!key) {
                        "production" !== 'production' && state.warn(
                            "v-once can only be used inside v-for that is keyed. "
                        );
                        return genElement(el, state)
                    }
                    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
                } else {
                    return genStatic(el, state)
                }
            }

            function genIf(
                el,
                state,
                altGen,
                altEmpty
            ) {
                el.ifProcessed = true; // avoid recursion
                return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
            }

            function genIfConditions(
                conditions,
                state,
                altGen,
                altEmpty
            ) {
                if (!conditions.length) {
                    return altEmpty || '_e()'
                }

                var condition = conditions.shift();
                if (condition.exp) {
                    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
                } else {
                    return ("" + (genTernaryExp(condition.block)))
                }

                // v-if with v-once should generate code like (a)?_m(0):_m(1)
                function genTernaryExp(el) {
                    return altGen ?
                        altGen(el, state) :
                        el.once ?
                        genOnce(el, state) :
                        genElement(el, state)
                }
            }

            function genFor(
                el,
                state,
                altGen,
                altHelper
            ) {
                var exp = el.for;
                var alias = el.alias;
                var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
                var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

                if (false) {
                    state.warn(
                        "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
                        "v-for should have explicit keys. " +
                        "See https://vuejs.org/guide/list.html#key for more info.",
                        true /* tip */
                    );
                }

                el.forProcessed = true; // avoid recursion
                return (altHelper || '_l') + "((" + exp + ")," +
                    "function(" + alias + iterator1 + iterator2 + "){" +
                    "return " + ((altGen || genElement)(el, state)) +
                    '})'
            }

            function genData$2(el, state) {
                var data = '{';

                // directives first.
                // directives may mutate the el's other properties before they are generated.
                var dirs = genDirectives(el, state);
                if (dirs) {
                    data += dirs + ',';
                }

                // key
                if (el.key) {
                    data += "key:" + (el.key) + ",";
                }
                // ref
                if (el.ref) {
                    data += "ref:" + (el.ref) + ",";
                }
                if (el.refInFor) {
                    data += "refInFor:true,";
                }
                // pre
                if (el.pre) {
                    data += "pre:true,";
                }
                // record original tag name for components using "is" attribute
                if (el.component) {
                    data += "tag:\"" + (el.tag) + "\",";
                }
                // module data generation functions
                for (var i = 0; i < state.dataGenFns.length; i++) {
                    data += state.dataGenFns[i](el);
                }
                // attributes
                if (el.attrs) {
                    data += "attrs:{" + (genProps(el.attrs)) + "},";
                }
                // DOM props
                if (el.props) {
                    data += "domProps:{" + (genProps(el.props)) + "},";
                }
                // event handlers
                if (el.events) {
                    data += (genHandlers(el.events, false, state.warn)) + ",";
                }
                if (el.nativeEvents) {
                    data += (genHandlers(el.nativeEvents, true, state.warn)) + ",";
                }
                // slot target
                // only for non-scoped slots
                if (el.slotTarget && !el.slotScope) {
                    data += "slot:" + (el.slotTarget) + ",";
                }
                // scoped slots
                if (el.scopedSlots) {
                    data += (genScopedSlots(el.scopedSlots, state)) + ",";
                }
                // component v-model
                if (el.model) {
                    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
                }
                // inline-template
                if (el.inlineTemplate) {
                    var inlineTemplate = genInlineTemplate(el, state);
                    if (inlineTemplate) {
                        data += inlineTemplate + ",";
                    }
                }
                data = data.replace(/,$/, '') + '}';
                // v-bind data wrap
                if (el.wrapData) {
                    data = el.wrapData(data);
                }
                // v-on data wrap
                if (el.wrapListeners) {
                    data = el.wrapListeners(data);
                }
                return data
            }

            function genDirectives(el, state) {
                var dirs = el.directives;
                if (!dirs) {
                    return
                }
                var res = 'directives:[';
                var hasRuntime = false;
                var i, l, dir, needRuntime;
                for (i = 0, l = dirs.length; i < l; i++) {
                    dir = dirs[i];
                    needRuntime = true;
                    var gen = state.directives[dir.name];
                    if (gen) {
                        // compile-time directive that manipulates AST.
                        // returns true if it also needs a runtime counterpart.
                        needRuntime = !!gen(el, dir, state.warn);
                    }
                    if (needRuntime) {
                        hasRuntime = true;
                        res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:\"" + (dir.arg) + "\"") : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
                    }
                }
                if (hasRuntime) {
                    return res.slice(0, -1) + ']'
                }
            }

            function genInlineTemplate(el, state) {
                var ast = el.children[0];
                if (false) {
                    state.warn('Inline-template components must have exactly one child element.');
                }
                if (ast.type === 1) {
                    var inlineRenderFns = generate(ast, state.options);
                    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function(code) {
                        return ("function(){" + code + "}");
                    }).join(',')) + "]}")
                }
            }

            function genScopedSlots(
                slots,
                state
            ) {
                return ("scopedSlots:_u([" + (Object.keys(slots).map(function(key) {
                    return genScopedSlot(key, slots[key], state)
                }).join(',')) + "])")
            }

            function genScopedSlot(
                key,
                el,
                state
            ) {
                if (el.for && !el.forProcessed) {
                    return genForScopedSlot(key, el, state)
                }
                var fn = "function(" + (String(el.slotScope)) + "){" +
                    "return " + (el.tag === 'template' ?
                        el.if ?
                        ((el.if) + "?" + (genChildren(el, state) || 'undefined') + ":undefined") :
                        genChildren(el, state) || 'undefined' :
                        genElement(el, state)) + "}";
                return ("{key:" + key + ",fn:" + fn + "}")
            }

            function genForScopedSlot(
                key,
                el,
                state
            ) {
                var exp = el.for;
                var alias = el.alias;
                var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
                var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';
                el.forProcessed = true; // avoid recursion
                return "_l((" + exp + ")," +
                    "function(" + alias + iterator1 + iterator2 + "){" +
                    "return " + (genScopedSlot(key, el, state)) +
                    '})'
            }

            function genChildren(
                el,
                state,
                checkSkip,
                altGenElement,
                altGenNode
            ) {
                var children = el.children;
                if (children.length) {
                    var el$1 = children[0];
                    // optimize single v-for
                    if (children.length === 1 &&
                        el$1.for &&
                        el$1.tag !== 'template' &&
                        el$1.tag !== 'slot'
                    ) {
                        return (altGenElement || genElement)(el$1, state)
                    }
                    var normalizationType = checkSkip ?
                        getNormalizationType(children, state.maybeComponent) :
                        0;
                    var gen = altGenNode || genNode;
                    return ("[" + (children.map(function(c) {
                        return gen(c, state);
                    }).join(',')) + "]" + (normalizationType ? ("," + normalizationType) : ''))
                }
            }

            // determine the normalization needed for the children array.
            // 0: no normalization needed
            // 1: simple normalization needed (possible 1-level deep nested array)
            // 2: full normalization needed
            function getNormalizationType(
                children,
                maybeComponent
            ) {
                var res = 0;
                for (var i = 0; i < children.length; i++) {
                    var el = children[i];
                    if (el.type !== 1) {
                        continue
                    }
                    if (needsNormalization(el) ||
                        (el.ifConditions && el.ifConditions.some(function(c) {
                            return needsNormalization(c.block);
                        }))) {
                        res = 2;
                        break
                    }
                    if (maybeComponent(el) ||
                        (el.ifConditions && el.ifConditions.some(function(c) {
                            return maybeComponent(c.block);
                        }))) {
                        res = 1;
                    }
                }
                return res
            }

            function needsNormalization(el) {
                return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
            }

            function genNode(node, state) {
                if (node.type === 1) {
                    return genElement(node, state)
                }
                if (node.type === 3 && node.isComment) {
                    return genComment(node)
                } else {
                    return genText(node)
                }
            }

            function genText(text) {
                return ("_v(" + (text.type === 2 ?
                    text.expression // no need for () because already wrapped in _s()
                    :
                    transformSpecialNewlines(JSON.stringify(text.text))) + ")")
            }

            function genComment(comment) {
                return ("_e(" + (JSON.stringify(comment.text)) + ")")
            }

            function genSlot(el, state) {
                var slotName = el.slotName || '"default"';
                var children = genChildren(el, state);
                var res = "_t(" + slotName + (children ? ("," + children) : '');
                var attrs = el.attrs && ("{" + (el.attrs.map(function(a) {
                    return ((camelize(a.name)) + ":" + (a.value));
                }).join(',')) + "}");
                var bind$$1 = el.attrsMap['v-bind'];
                if ((attrs || bind$$1) && !children) {
                    res += ",null";
                }
                if (attrs) {
                    res += "," + attrs;
                }
                if (bind$$1) {
                    res += (attrs ? '' : ',null') + "," + bind$$1;
                }
                return res + ')'
            }

            // componentName is el.component, take it as argument to shun flow's pessimistic refinement
            function genComponent(
                componentName,
                el,
                state
            ) {
                var children = el.inlineTemplate ? null : genChildren(el, state, true);
                return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
            }

            function genProps(props) {
                var res = '';
                for (var i = 0; i < props.length; i++) {
                    var prop = props[i];
                    /* istanbul ignore if */
                    {
                        res += "\"" + (prop.name) + "\":" + (transformSpecialNewlines(prop.value)) + ",";
                    }
                }
                return res.slice(0, -1)
            }

            // #3895, #4268
            function transformSpecialNewlines(text) {
                return text
                    .replace(/\u2028/g, '\\u2028')
                    .replace(/\u2029/g, '\\u2029')
            }

            /*  */

            // these keywords should not appear inside expressions, but operators like
            // typeof, instanceof and in are allowed
            var prohibitedKeywordRE = new RegExp('\\b' + (
                'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
                'super,throw,while,yield,delete,export,import,return,switch,default,' +
                'extends,finally,continue,debugger,function,arguments'
            ).split(',').join('\\b|\\b') + '\\b');

            // these unary operators should not be used as property/method names
            var unaryOperatorsRE = new RegExp('\\b' + (
                'delete,typeof,void'
            ).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

            // strip strings in expressions
            var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

            // detect problematic expressions in a template
            function detectErrors(ast) {
                var errors = [];
                if (ast) {
                    checkNode(ast, errors);
                }
                return errors
            }

            function checkNode(node, errors) {
                if (node.type === 1) {
                    for (var name in node.attrsMap) {
                        if (dirRE.test(name)) {
                            var value = node.attrsMap[name];
                            if (value) {
                                if (name === 'v-for') {
                                    checkFor(node, ("v-for=\"" + value + "\""), errors);
                                } else if (onRE.test(name)) {
                                    checkEvent(value, (name + "=\"" + value + "\""), errors);
                                } else {
                                    checkExpression(value, (name + "=\"" + value + "\""), errors);
                                }
                            }
                        }
                    }
                    if (node.children) {
                        for (var i = 0; i < node.children.length; i++) {
                            checkNode(node.children[i], errors);
                        }
                    }
                } else if (node.type === 2) {
                    checkExpression(node.expression, node.text, errors);
                }
            }

            function checkEvent(exp, text, errors) {
                var stipped = exp.replace(stripStringRE, '');
                var keywordMatch = stipped.match(unaryOperatorsRE);
                if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
                    errors.push(
                        "avoid using JavaScript unary operator as property name: " +
                        "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim())
                    );
                }
                checkExpression(exp, text, errors);
            }

            function checkFor(node, text, errors) {
                checkExpression(node.for || '', text, errors);
                checkIdentifier(node.alias, 'v-for alias', text, errors);
                checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
                checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
            }

            function checkIdentifier(
                ident,
                type,
                text,
                errors
            ) {
                if (typeof ident === 'string') {
                    try {
                        new Function(("var " + ident + "=_"));
                    } catch (e) {
                        errors.push(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())));
                    }
                }
            }

            function checkExpression(exp, text, errors) {
                try {
                    new Function(("return " + exp));
                } catch (e) {
                    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
                    if (keywordMatch) {
                        errors.push(
                            "avoid using JavaScript keyword as property name: " +
                            "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim())
                        );
                    } else {
                        errors.push(
                            "invalid expression: " + (e.message) + " in\n\n" +
                            "    " + exp + "\n\n" +
                            "  Raw expression: " + (text.trim()) + "\n"
                        );
                    }
                }
            }

            /*  */

            function createFunction(code, errors) {
                try {
                    return new Function(code)
                } catch (err) {
                    errors.push({
                        err: err,
                        code: code
                    });
                    return noop
                }
            }

            function createCompileToFunctionFn(compile) {
                var cache = Object.create(null);

                return function compileToFunctions(
                    template,
                    options,
                    vm
                ) {
                    options = extend({}, options);
                    var warn$$1 = options.warn || warn;
                    delete options.warn;

                    /* istanbul ignore if */
                    if (false) {
                        // detect possible CSP restriction
                        try {
                            new Function('return 1');
                        } catch (e) {
                            if (e.toString().match(/unsafe-eval|CSP/)) {
                                warn$$1(
                                    'It seems you are using the standalone build of Vue.js in an ' +
                                    'environment with Content Security Policy that prohibits unsafe-eval. ' +
                                    'The template compiler cannot work in this environment. Consider ' +
                                    'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
                                    'templates into render functions.'
                                );
                            }
                        }
                    }

                    // check cache
                    var key = options.delimiters ?
                        String(options.delimiters) + template :
                        template;
                    if (cache[key]) {
                        return cache[key]
                    }

                    // compile
                    var compiled = compile(template, options);

                    // check compilation errors/tips
                    if (false) {
                        if (compiled.errors && compiled.errors.length) {
                            warn$$1(
                                "Error compiling template:\n\n" + template + "\n\n" +
                                compiled.errors.map(function(e) {
                                    return ("- " + e);
                                }).join('\n') + '\n',
                                vm
                            );
                        }
                        if (compiled.tips && compiled.tips.length) {
                            compiled.tips.forEach(function(msg) {
                                return tip(msg, vm);
                            });
                        }
                    }

                    // turn code into functions
                    var res = {};
                    var fnGenErrors = [];
                    res.render = createFunction(compiled.render, fnGenErrors);
                    res.staticRenderFns = compiled.staticRenderFns.map(function(code) {
                        return createFunction(code, fnGenErrors)
                    });

                    // check function generation errors.
                    // this should only happen if there is a bug in the compiler itself.
                    // mostly for codegen development use
                    /* istanbul ignore if */
                    if (false) {
                        if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
                            warn$$1(
                                "Failed to generate render function:\n\n" +
                                fnGenErrors.map(function(ref) {
                                    var err = ref.err;
                                    var code = ref.code;

                                    return ((err.toString()) + " in\n\n" + code + "\n");
                                }).join('\n'),
                                vm
                            );
                        }
                    }

                    return (cache[key] = res)
                }
            }

            /*  */

            function createCompilerCreator(baseCompile) {
                return function createCompiler(baseOptions) {
                    function compile(
                        template,
                        options
                    ) {
                        var finalOptions = Object.create(baseOptions);
                        var errors = [];
                        var tips = [];
                        finalOptions.warn = function(msg, tip) {
                            (tip ? tips : errors).push(msg);
                        };

                        if (options) {
                            // merge custom modules
                            if (options.modules) {
                                finalOptions.modules =
                                    (baseOptions.modules || []).concat(options.modules);
                            }
                            // merge custom directives
                            if (options.directives) {
                                finalOptions.directives = extend(
                                    Object.create(baseOptions.directives || null),
                                    options.directives
                                );
                            }
                            // copy other options
                            for (var key in options) {
                                if (key !== 'modules' && key !== 'directives') {
                                    finalOptions[key] = options[key];
                                }
                            }
                        }

                        var compiled = baseCompile(template, finalOptions);
                        if (false) {
                            errors.push.apply(errors, detectErrors(compiled.ast));
                        }
                        compiled.errors = errors;
                        compiled.tips = tips;
                        return compiled
                    }

                    return {
                        compile: compile,
                        compileToFunctions: createCompileToFunctionFn(compile)
                    }
                }
            }

            /*  */

            // `createCompilerCreator` allows creating compilers that use alternative
            // parser/optimizer/codegen, e.g the SSR optimizing compiler.
            // Here we just export a default compiler using the default parts.
            var createCompiler = createCompilerCreator(function baseCompile(
                template,
                options
            ) {
                var ast = parse(template.trim(), options);
                if (options.optimize !== false) {
                    optimize(ast, options);
                }
                var code = generate(ast, options);
                return {
                    ast: ast,
                    render: code.render,
                    staticRenderFns: code.staticRenderFns
                }
            });

            /*  */

            var ref$1 = createCompiler(baseOptions);
            var compileToFunctions = ref$1.compileToFunctions;

            /*  */

            // check whether current browser encodes a char inside attribute values
            var div;

            function getShouldDecode(href) {
                div = div || document.createElement('div');
                div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
                return div.innerHTML.indexOf('&#10;') > 0
            }

            // #3663: IE encodes newlines inside attribute values while other browsers don't
            var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
            // #6828: chrome encodes content in a[href]
            var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

            /*  */

            var idToTemplate = cached(function(id) {
                var el = query(id);
                return el && el.innerHTML
            });

            var mount = Vue.prototype.$mount;
            Vue.prototype.$mount = function(
                el,
                hydrating
            ) {
                el = el && query(el);

                /* istanbul ignore if */
                if (el === document.body || el === document.documentElement) {
                    "production" !== 'production' && warn(
                        "Do not mount Vue to <html> or <body> - mount to normal elements instead."
                    );
                    return this
                }

                var options = this.$options;
                // resolve template/el and convert to render function
                if (!options.render) {
                    var template = options.template;
                    if (template) {
                        if (typeof template === 'string') {
                            if (template.charAt(0) === '#') {
                                template = idToTemplate(template);
                                /* istanbul ignore if */
                                if (false) {
                                    warn(
                                        ("Template element not found or is empty: " + (options.template)),
                                        this
                                    );
                                }
                            }
                        } else if (template.nodeType) {
                            template = template.innerHTML;
                        } else {
                            if (false) {
                                warn('invalid template option:' + template, this);
                            }
                            return this
                        }
                    } else if (el) {
                        template = getOuterHTML(el);
                    }
                    if (template) {
                        /* istanbul ignore if */
                        if (false) {
                            mark('compile');
                        }

                        var ref = compileToFunctions(template, {
                            shouldDecodeNewlines: shouldDecodeNewlines,
                            shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
                            delimiters: options.delimiters,
                            comments: options.comments
                        }, this);
                        var render = ref.render;
                        var staticRenderFns = ref.staticRenderFns;
                        options.render = render;
                        options.staticRenderFns = staticRenderFns;

                        /* istanbul ignore if */
                        if (false) {
                            mark('compile end');
                            measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
                        }
                    }
                }
                return mount.call(this, el, hydrating)
            };

            /**
             * Get outerHTML of elements, taking care
             * of SVG elements in IE as well.
             */
            function getOuterHTML(el) {
                if (el.outerHTML) {
                    return el.outerHTML
                } else {
                    var container = document.createElement('div');
                    container.appendChild(el.cloneNode(true));
                    return container.innerHTML
                }
            }

            Vue.compile = compileToFunctions;

            module.exports = Vue;

            /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(15), __webpack_require__(237).setImmediate))

        /***/
    }),
    /* 37 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        var EventEmitter = __webpack_require__(134).EventEmitter;

        function Emitter() {
            EventEmitter.call(this);
            this.setMaxListeners(20);
        }

        Emitter.prototype = Object.create(EventEmitter.prototype);
        Emitter.prototype.constructor = Emitter;

        Emitter.prototype.off = function(type, listener) {
            if (listener) {
                return this.removeListener(type, listener);
            }
            if (type) {
                return this.removeAllListeners(type);
            }
            return this.removeAllListeners();
        };

        module.exports = Emitter;


        /***/
    }),
    /* 38 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        var assetsLoader = __webpack_require__(80);
        assetsLoader.stats = __webpack_require__(39);

        module.exports = assetsLoader;


        /***/
    }),
    /* 39 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        module.exports = {
            mbs: 0,
            secs: 0,
            update: function(request, startTime, url, log) {
                var length;
                var headers = request.getAllResponseHeaders();
                if (headers) {
                    var match = headers.match(/content-length: (\d+)/i);
                    if (match && match.length) {
                        length = match[1];
                    }
                }
                // var length = request.getResponseHeader('Content-Length');
                if (length) {
                    length = parseInt(length, 10);
                    var mbs = length / 1024 / 1024;
                    var secs = (Date.now() - startTime) / 1000;
                    this.secs += secs;
                    this.mbs += mbs;
                    if (log) {
                        this.log(url, mbs, secs);
                    }
                } else if (log) {
                    console.warn.call(console, 'Can\'t get Content-Length:', url);
                }
            },
            log: function(url, mbs, secs) {
                if (url) {
                    var file = 'File loaded: ' +
                        url.substr(url.lastIndexOf('/') + 1) +
                        ' size:' + mbs.toFixed(2) + 'mb' +
                        ' time:' + secs.toFixed(2) + 's' +
                        ' speed:' + (mbs / secs).toFixed(2) + 'mbps';

                    console.log.call(console, file);
                }
                var total = 'Total loaded: ' + this.mbs.toFixed(2) + 'mb' +
                    ' time:' + this.secs.toFixed(2) + 's' +
                    ' speed:' + this.getMbps().toFixed(2) + 'mbps';
                console.log.call(console, total);
            },
            getMbps: function() {
                return this.mbs / this.secs;
            }
        };


        /***/
    }),
    /* 40 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var HexToRgba = function() {
            function HexToRgba(hex, alpha) {
                _classCallCheck(this, HexToRgba);
            }

            _createClass(HexToRgba, [{
                key: "convert",
                value: function convert(hex, alpha) {
                    var r = parseInt(hex.slice(1, 3), 16),
                        g = parseInt(hex.slice(3, 5), 16),
                        b = parseInt(hex.slice(5, 7), 16);

                    if (alpha) {
                        return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
                    } else {
                        return "rgb(" + r + ", " + g + ", " + b + ")";
                    }
                }
            }]);

            return HexToRgba;
        }();

        /* harmony default export */
        __webpack_exports__["a"] = (HexToRgba);

        /***/
    }),
    /* 41 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        var assets = __webpack_require__(311);

        var LoaderMixin = {
            methods: {
                findAssets: function findAssets(size, caseStudyName) {
                    var assetsToLoad = [];
                    assetsToLoad = assetsToLoad.concat(assets['default'][size]);

                    if (this.$route.name === 'case-study') {
                        var _caseStudyName = this.$route.params.id;
                        if (assets['case-study'][_caseStudyName] !== undefined) {
                            var assetsPath = assets['case-study'][_caseStudyName];
                            assetsToLoad = assetsToLoad.concat(assetsPath[size]);
                        }
                    } else if (caseStudyName !== undefined && assets['case-study'][caseStudyName] !== undefined) {
                        var _assetsPath = assets['case-study'][caseStudyName];
                        assetsToLoad = assetsToLoad.concat(_assetsPath[size]);
                    }

                    return assetsToLoad;
                }
            }
        };

        /* harmony default export */
        __webpack_exports__["a"] = (LoaderMixin);

        /***/
    }),
    /* 42 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return AttrPlugin;
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__ = __webpack_require__(6);
        /*!
         * VERSION: 0.6.1
         * DATE: 2018-05-30
         * UPDATES AND DOCS AT: http://greensock.com
         *
         * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
         * This work is subject to the terms at http://greensock.com/standard-license or for
         * Club GreenSock members, the software agreement that was issued with your membership.
         * 
         * @author: Jack Doyle, jack@greensock.com
         */



        const AttrPlugin = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine.plugin({
            propName: "attr",
            API: 2,
            version: "0.6.1",

            //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
            init: function(target, value, tween, index) {
                var p, end;
                if (typeof(target.setAttribute) !== "function") {
                    return false;
                }
                for (p in value) {
                    end = value[p];
                    if (typeof(end) === "function") {
                        end = end(index, target);
                    }
                    this._addTween(target, "setAttribute", target.getAttribute(p) + "", end + "", p, false, p);
                    this._overwriteProps.push(p);
                }
                return true;
            }

        });
        /* unused harmony export AttrPlugin */








        /***/
    }),
    /* 43 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export BezierPlugin */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return BezierPlugin;
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__ = __webpack_require__(6);
        /*!
         * VERSION: 1.3.8
         * DATE: 2018-05-30
         * UPDATES AND DOCS AT: http://greensock.com
         *
         * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
         * This work is subject to the terms at http://greensock.com/standard-license or for
         * Club GreenSock members, the software agreement that was issued with your membership.
         * 
         * @author: Jack Doyle, jack@greensock.com
         **/


        var _RAD2DEG = 180 / Math.PI,
            _r1 = [],
            _r2 = [],
            _r3 = [],
            _corProps = {},
            _globals = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine.globals,
            Segment = function(a, b, c, d) {
                if (c === d) { //if c and d match, the final autoRotate value could lock at -90 degrees, so differentiate them slightly.
                    c = d - (d - b) / 1000000;
                }
                if (a === b) { //if a and b match, the starting autoRotate value could lock at -90 degrees, so differentiate them slightly.
                    b = a + (c - a) / 1000000;
                }
                this.a = a;
                this.b = b;
                this.c = c;
                this.d = d;
                this.da = d - a;
                this.ca = c - a;
                this.ba = b - a;
            },
            _correlate = ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",
            cubicToQuadratic = function(a, b, c, d) {
                var q1 = {
                        a: a
                    },
                    q2 = {},
                    q3 = {},
                    q4 = {
                        c: d
                    },
                    mab = (a + b) / 2,
                    mbc = (b + c) / 2,
                    mcd = (c + d) / 2,
                    mabc = (mab + mbc) / 2,
                    mbcd = (mbc + mcd) / 2,
                    m8 = (mbcd - mabc) / 8;
                q1.b = mab + (a - mab) / 4;
                q2.b = mabc + m8;
                q1.c = q2.a = (q1.b + q2.b) / 2;
                q2.c = q3.a = (mabc + mbcd) / 2;
                q3.b = mbcd - m8;
                q4.b = mcd + (d - mcd) / 4;
                q3.c = q4.a = (q3.b + q4.b) / 2;
                return [q1, q2, q3, q4];
            },
            _calculateControlPoints = function(a, curviness, quad, basic, correlate) {
                var l = a.length - 1,
                    ii = 0,
                    cp1 = a[0].a,
                    i, p1, p2, p3, seg, m1, m2, mm, cp2, qb, r1, r2, tl;
                for (i = 0; i < l; i++) {
                    seg = a[ii];
                    p1 = seg.a;
                    p2 = seg.d;
                    p3 = a[ii + 1].d;

                    if (correlate) {
                        r1 = _r1[i];
                        r2 = _r2[i];
                        tl = ((r2 + r1) * curviness * 0.25) / (basic ? 0.5 : _r3[i] || 0.5);
                        m1 = p2 - (p2 - p1) * (basic ? curviness * 0.5 : (r1 !== 0 ? tl / r1 : 0));
                        m2 = p2 + (p3 - p2) * (basic ? curviness * 0.5 : (r2 !== 0 ? tl / r2 : 0));
                        mm = p2 - (m1 + (((m2 - m1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
                    } else {
                        m1 = p2 - (p2 - p1) * curviness * 0.5;
                        m2 = p2 + (p3 - p2) * curviness * 0.5;
                        mm = p2 - (m1 + m2) / 2;
                    }
                    m1 += mm;
                    m2 += mm;

                    seg.c = cp2 = m1;
                    if (i !== 0) {
                        seg.b = cp1;
                    } else {
                        seg.b = cp1 = seg.a + (seg.c - seg.a) * 0.6; //instead of placing b on a exactly, we move it inline with c so that if the user specifies an ease like Back.easeIn or Elastic.easeIn which goes BEYOND the beginning, it will do so smoothly.
                    }

                    seg.da = p2 - p1;
                    seg.ca = cp2 - p1;
                    seg.ba = cp1 - p1;

                    if (quad) {
                        qb = cubicToQuadratic(p1, cp1, cp2, p2);
                        a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
                        ii += 4;
                    } else {
                        ii++;
                    }

                    cp1 = m2;
                }
                seg = a[ii];
                seg.b = cp1;
                seg.c = cp1 + (seg.d - cp1) * 0.4; //instead of placing c on d exactly, we move it inline with b so that if the user specifies an ease like Back.easeOut or Elastic.easeOut which goes BEYOND the end, it will do so smoothly.
                seg.da = seg.d - seg.a;
                seg.ca = seg.c - seg.a;
                seg.ba = cp1 - seg.a;
                if (quad) {
                    qb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);
                    a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
                }
            },
            _parseAnchors = function(values, p, correlate, prepend) {
                var a = [],
                    l, i, p1, p2, p3, tmp;
                if (prepend) {
                    values = [prepend].concat(values);
                    i = values.length;
                    while (--i > -1) {
                        if (typeof((tmp = values[i][p])) === "string")
                            if (tmp.charAt(1) === "=") {
                                values[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)); //accommodate relative values. Do it inline instead of breaking it out into a function for speed reasons
                            }
                    }
                }
                l = values.length - 2;
                if (l < 0) {
                    a[0] = new Segment(values[0][p], 0, 0, values[0][p]);
                    return a;
                }
                for (i = 0; i < l; i++) {
                    p1 = values[i][p];
                    p2 = values[i + 1][p];
                    a[i] = new Segment(p1, 0, 0, p2);
                    if (correlate) {
                        p3 = values[i + 2][p];
                        _r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);
                        _r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);
                    }
                }
                a[i] = new Segment(values[i][p], 0, 0, values[i + 1][p]);
                return a;
            },
            bezierThrough = function(values, curviness, quadratic, basic, correlate, prepend) {
                var obj = {},
                    props = [],
                    first = prepend || values[0],
                    i, p, a, j, r, l, seamless, last;
                correlate = (typeof(correlate) === "string") ? "," + correlate + "," : _correlate;
                if (curviness == null) {
                    curviness = 1;
                }
                for (p in values[0]) {
                    props.push(p);
                }
                //check to see if the last and first values are identical (well, within 0.05). If so, make seamless by appending the second element to the very end of the values array and the 2nd-to-last element to the very beginning (we'll remove those segments later)
                if (values.length > 1) {
                    last = values[values.length - 1];
                    seamless = true;
                    i = props.length;
                    while (--i > -1) {
                        p = props[i];
                        if (Math.abs(first[p] - last[p]) > 0.05) { //build in a tolerance of +/-0.05 to accommodate rounding errors.
                            seamless = false;
                            break;
                        }
                    }
                    if (seamless) {
                        values = values.concat(); //duplicate the array to avoid contaminating the original which the user may be reusing for other tweens
                        if (prepend) {
                            values.unshift(prepend);
                        }
                        values.push(values[1]);
                        prepend = values[values.length - 3];
                    }
                }
                _r1.length = _r2.length = _r3.length = 0;
                i = props.length;
                while (--i > -1) {
                    p = props[i];
                    _corProps[p] = (correlate.indexOf("," + p + ",") !== -1);
                    obj[p] = _parseAnchors(values, p, _corProps[p], prepend);
                }
                i = _r1.length;
                while (--i > -1) {
                    _r1[i] = Math.sqrt(_r1[i]);
                    _r2[i] = Math.sqrt(_r2[i]);
                }
                if (!basic) {
                    i = props.length;
                    while (--i > -1) {
                        if (_corProps[p]) {
                            a = obj[props[i]];
                            l = a.length - 1;
                            for (j = 0; j < l; j++) {
                                r = (a[j + 1].da / _r2[j] + a[j].da / _r1[j]) || 0;
                                _r3[j] = (_r3[j] || 0) + r * r;
                            }
                        }
                    }
                    i = _r3.length;
                    while (--i > -1) {
                        _r3[i] = Math.sqrt(_r3[i]);
                    }
                }
                i = props.length;
                j = quadratic ? 4 : 1;
                while (--i > -1) {
                    p = props[i];
                    a = obj[p];
                    _calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]); //this method requires that _parseAnchors() and _setSegmentRatios() ran first so that _r1, _r2, and _r3 values are populated for all properties
                    if (seamless) {
                        a.splice(0, j);
                        a.splice(a.length - j, j);
                    }
                }
                return obj;
            },
            _parseBezierData = function(values, type, prepend) {
                type = type || "soft";
                var obj = {},
                    inc = (type === "cubic") ? 3 : 2,
                    soft = (type === "soft"),
                    props = [],
                    a, b, c, d, cur, i, j, l, p, cnt, tmp;
                if (soft && prepend) {
                    values = [prepend].concat(values);
                }
                if (values == null || values.length < inc + 1) {
                    throw "invalid Bezier data";
                }
                for (p in values[0]) {
                    props.push(p);
                }
                i = props.length;
                while (--i > -1) {
                    p = props[i];
                    obj[p] = cur = [];
                    cnt = 0;
                    l = values.length;
                    for (j = 0; j < l; j++) {
                        a = (prepend == null) ? values[j][p] : (typeof((tmp = values[j][p])) === "string" && tmp.charAt(1) === "=") ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);
                        if (soft)
                            if (j > 1)
                                if (j < l - 1) {
                                    cur[cnt++] = (a + cur[cnt - 2]) / 2;
                                }
                        cur[cnt++] = a;
                    }
                    l = cnt - inc + 1;
                    cnt = 0;
                    for (j = 0; j < l; j += inc) {
                        a = cur[j];
                        b = cur[j + 1];
                        c = cur[j + 2];
                        d = (inc === 2) ? 0 : cur[j + 3];
                        cur[cnt++] = tmp = (inc === 3) ? new Segment(a, b, c, d) : new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
                    }
                    cur.length = cnt;
                }
                return obj;
            },
            _addCubicLengths = function(a, steps, resolution) {
                var inc = 1 / resolution,
                    j = a.length,
                    d, d1, s, da, ca, ba, p, i, inv, bez, index;
                while (--j > -1) {
                    bez = a[j];
                    s = bez.a;
                    da = bez.d - s;
                    ca = bez.c - s;
                    ba = bez.b - s;
                    d = d1 = 0;
                    for (i = 1; i <= resolution; i++) {
                        p = inc * i;
                        inv = 1 - p;
                        d = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);
                        index = j * resolution + i - 1;
                        steps[index] = (steps[index] || 0) + d * d;
                    }
                }
            },
            _parseLengthData = function(obj, resolution) {
                resolution = resolution >> 0 || 6;
                var a = [],
                    lengths = [],
                    d = 0,
                    total = 0,
                    threshold = resolution - 1,
                    segments = [],
                    curLS = [], //current length segments array
                    p, i, l, index;
                for (p in obj) {
                    _addCubicLengths(obj[p], a, resolution);
                }
                l = a.length;
                for (i = 0; i < l; i++) {
                    d += Math.sqrt(a[i]);
                    index = i % resolution;
                    curLS[index] = d;
                    if (index === threshold) {
                        total += d;
                        index = (i / resolution) >> 0;
                        segments[index] = curLS;
                        lengths[index] = total;
                        d = 0;
                        curLS = [];
                    }
                }
                return {
                    length: total,
                    lengths: lengths,
                    segments: segments
                };
            },



            BezierPlugin = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine.plugin({
                propName: "bezier",
                priority: -1,
                version: "1.3.8",
                API: 2,
                global: true,

                //gets called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                init: function(target, vars, tween) {
                    this._target = target;
                    if (vars instanceof Array) {
                        vars = {
                            values: vars
                        };
                    }
                    this._func = {};
                    this._mod = {};
                    this._props = [];
                    this._timeRes = (vars.timeResolution == null) ? 6 : parseInt(vars.timeResolution, 10);
                    var values = vars.values || [],
                        first = {},
                        second = values[0],
                        autoRotate = vars.autoRotate || tween.vars.orientToBezier,
                        p, isFunc, i, j, prepend;

                    this._autoRotate = autoRotate ? (autoRotate instanceof Array) ? autoRotate : [
                        ["x", "y", "rotation", ((autoRotate === true) ? 0 : Number(autoRotate) || 0)]
                    ] : null;
                    for (p in second) {
                        this._props.push(p);
                    }

                    i = this._props.length;
                    while (--i > -1) {
                        p = this._props[i];

                        this._overwriteProps.push(p);
                        isFunc = this._func[p] = (typeof(target[p]) === "function");
                        first[p] = (!isFunc) ? parseFloat(target[p]) : target[((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3))]();
                        if (!prepend)
                            if (first[p] !== values[0][p]) {
                                prepend = first;
                            }
                    }
                    this._beziers = (vars.type !== "cubic" && vars.type !== "quadratic" && vars.type !== "soft") ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, (vars.type === "thruBasic"), vars.correlate, prepend) : _parseBezierData(values, vars.type, first);
                    this._segCount = this._beziers[p].length;

                    if (this._timeRes) {
                        var ld = _parseLengthData(this._beziers, this._timeRes);
                        this._length = ld.length;
                        this._lengths = ld.lengths;
                        this._segments = ld.segments;
                        this._l1 = this._li = this._s1 = this._si = 0;
                        this._l2 = this._lengths[0];
                        this._curSeg = this._segments[0];
                        this._s2 = this._curSeg[0];
                        this._prec = 1 / this._curSeg.length;
                    }

                    if ((autoRotate = this._autoRotate)) {
                        this._initialRotations = [];
                        if (!(autoRotate[0] instanceof Array)) {
                            this._autoRotate = autoRotate = [autoRotate];
                        }
                        i = autoRotate.length;
                        while (--i > -1) {
                            for (j = 0; j < 3; j++) {
                                p = autoRotate[i][j];
                                this._func[p] = (typeof(target[p]) === "function") ? target[((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3))] : false;
                            }
                            p = autoRotate[i][2];
                            this._initialRotations[i] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;
                            this._overwriteProps.push(p);
                        }
                    }
                    this._startRatio = tween.vars.runBackwards ? 1 : 0; //we determine the starting ratio when the tween inits which is always 0 unless the tween has runBackwards:true (indicating it's a from() tween) in which case it's 1.
                    return true;
                },

                //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
                set: function(v) {
                    var segments = this._segCount,
                        func = this._func,
                        target = this._target,
                        notStart = (v !== this._startRatio),
                        curIndex, inv, i, p, b, t, val, l, lengths, curSeg;
                    if (!this._timeRes) {
                        curIndex = (v < 0) ? 0 : (v >= 1) ? segments - 1 : (segments * v) >> 0;
                        t = (v - (curIndex * (1 / segments))) * segments;
                    } else {
                        lengths = this._lengths;
                        curSeg = this._curSeg;
                        v *= this._length;
                        i = this._li;
                        //find the appropriate segment (if the currently cached one isn't correct)
                        if (v > this._l2 && i < segments - 1) {
                            l = segments - 1;
                            while (i < l && (this._l2 = lengths[++i]) <= v) {}
                            this._l1 = lengths[i - 1];
                            this._li = i;
                            this._curSeg = curSeg = this._segments[i];
                            this._s2 = curSeg[(this._s1 = this._si = 0)];
                        } else if (v < this._l1 && i > 0) {
                            while (i > 0 && (this._l1 = lengths[--i]) >= v) {}
                            if (i === 0 && v < this._l1) {
                                this._l1 = 0;
                            } else {
                                i++;
                            }
                            this._l2 = lengths[i];
                            this._li = i;
                            this._curSeg = curSeg = this._segments[i];
                            this._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;
                            this._s2 = curSeg[this._si];
                        }
                        curIndex = i;
                        //now find the appropriate sub-segment (we split it into the number of pieces that was defined by "precision" and measured each one)
                        v -= this._l1;
                        i = this._si;
                        if (v > this._s2 && i < curSeg.length - 1) {
                            l = curSeg.length - 1;
                            while (i < l && (this._s2 = curSeg[++i]) <= v) {}
                            this._s1 = curSeg[i - 1];
                            this._si = i;
                        } else if (v < this._s1 && i > 0) {
                            while (i > 0 && (this._s1 = curSeg[--i]) >= v) {}
                            if (i === 0 && v < this._s1) {
                                this._s1 = 0;
                            } else {
                                i++;
                            }
                            this._s2 = curSeg[i];
                            this._si = i;
                        }
                        t = ((i + (v - this._s1) / (this._s2 - this._s1)) * this._prec) || 0;
                    }
                    inv = 1 - t;

                    i = this._props.length;
                    while (--i > -1) {
                        p = this._props[i];
                        b = this._beziers[p][curIndex];
                        val = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;
                        if (this._mod[p]) {
                            val = this._mod[p](val, target);
                        }
                        if (func[p]) {
                            target[p](val);
                        } else {
                            target[p] = val;
                        }
                    }

                    if (this._autoRotate) {
                        var ar = this._autoRotate,
                            b2, x1, y1, x2, y2, add, conv;
                        i = ar.length;
                        while (--i > -1) {
                            p = ar[i][2];
                            add = ar[i][3] || 0;
                            conv = (ar[i][4] === true) ? 1 : _RAD2DEG;
                            b = this._beziers[ar[i][0]];
                            b2 = this._beziers[ar[i][1]];

                            if (b && b2) { //in case one of the properties got overwritten.
                                b = b[curIndex];
                                b2 = b2[curIndex];

                                x1 = b.a + (b.b - b.a) * t;
                                x2 = b.b + (b.c - b.b) * t;
                                x1 += (x2 - x1) * t;
                                x2 += ((b.c + (b.d - b.c) * t) - x2) * t;

                                y1 = b2.a + (b2.b - b2.a) * t;
                                y2 = b2.b + (b2.c - b2.b) * t;
                                y1 += (y2 - y1) * t;
                                y2 += ((b2.c + (b2.d - b2.c) * t) - y2) * t;

                                val = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];

                                if (this._mod[p]) {
                                    val = this._mod[p](val, target); //for modProps
                                }

                                if (func[p]) {
                                    target[p](val);
                                } else {
                                    target[p] = val;
                                }
                            }
                        }
                    }
                }
            }),
            p = BezierPlugin.prototype;


        BezierPlugin.bezierThrough = bezierThrough;
        BezierPlugin.cubicToQuadratic = cubicToQuadratic;
        BezierPlugin._autoCSS = true; //indicates that this plugin can be inserted into the "css" object using the autoCSS feature of TweenLite
        BezierPlugin.quadraticToCubic = function(a, b, c) {
            return new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
        };

        BezierPlugin._cssRegister = function() {
            var CSSPlugin = _globals.CSSPlugin;
            if (!CSSPlugin) {
                return;
            }
            var _internals = CSSPlugin._internals,
                _parseToProxy = _internals._parseToProxy,
                _setPluginRatio = _internals._setPluginRatio,
                CSSPropTween = _internals.CSSPropTween;
            _internals._registerComplexSpecialProp("bezier", {
                parser: function(t, e, prop, cssp, pt, plugin) {
                    if (e instanceof Array) {
                        e = {
                            values: e
                        };
                    }
                    plugin = new BezierPlugin();
                    var values = e.values,
                        l = values.length - 1,
                        pluginValues = [],
                        v = {},
                        i, p, data;
                    if (l < 0) {
                        return pt;
                    }
                    for (i = 0; i <= l; i++) {
                        data = _parseToProxy(t, values[i], cssp, pt, plugin, (l !== i));
                        pluginValues[i] = data.end;
                    }
                    for (p in e) {
                        v[p] = e[p]; //duplicate the vars object because we need to alter some things which would cause problems if the user plans to reuse the same vars object for another tween.
                    }
                    v.values = pluginValues;
                    pt = new CSSPropTween(t, "bezier", 0, 0, data.pt, 2);
                    pt.data = data;
                    pt.plugin = plugin;
                    pt.setRatio = _setPluginRatio;
                    if (v.autoRotate === 0) {
                        v.autoRotate = true;
                    }
                    if (v.autoRotate && !(v.autoRotate instanceof Array)) {
                        i = (v.autoRotate === true) ? 0 : Number(v.autoRotate);
                        v.autoRotate = (data.end.left != null) ? [
                            ["left", "top", "rotation", i, false]
                        ] : (data.end.x != null) ? [
                            ["x", "y", "rotation", i, false]
                        ] : false;
                    }
                    if (v.autoRotate) {
                        if (!cssp._transform) {
                            cssp._enableTransforms(false);
                        }
                        data.autoRotate = cssp._target._gsTransform;
                        data.proxy.rotation = data.autoRotate.rotation || 0;
                        cssp._overwriteProps.push("rotation");
                    }
                    plugin._onInitTween(data.proxy, v, cssp._tween);
                    return pt;
                }
            });
        };

        p._mod = function(lookup) {
            var op = this._overwriteProps,
                i = op.length,
                val;
            while (--i > -1) {
                val = lookup[op[i]];
                if (val && typeof(val) === "function") {
                    this._mod[op[i]] = val;
                }
            }
        };

        p._kill = function(lookup) {
            var a = this._props,
                p, i;
            for (p in this._beziers) {
                if (p in lookup) {
                    delete this._beziers[p];
                    delete this._func[p];
                    i = a.length;
                    while (--i > -1) {
                        if (a[i] === p) {
                            a.splice(i, 1);
                        }
                    }
                }
            }
            a = this._autoRotate;
            if (a) {
                i = a.length;
                while (--i > -1) {
                    if (lookup[a[i][2]]) {
                        a.splice(i, 1);
                    }
                }
            }
            return this._super._kill.call(this, lookup);
        };



        /***/
    }),
    /* 44 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return CSSPlugin;
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__ = __webpack_require__(6);
        /*!
         * VERSION: 1.20.5
         * DATE: 2018-05-30
         * UPDATES AND DOCS AT: http://greensock.com
         *
         * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
         * This work is subject to the terms at http://greensock.com/standard-license or for
         * Club GreenSock members, the software agreement that was issued with your membership.
         * 
         * @author: Jack Doyle, jack@greensock.com
         */


        __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine("plugins.CSSPlugin", ["plugins.TweenPlugin", "TweenLite"], function() {

            /** @constructor **/
            var CSSPlugin = function() {
                    __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["f" /* TweenPlugin */ ].call(this, "css");
                    this._overwriteProps.length = 0;
                    this.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this "hot" method)
                },
                _globals = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine.globals,
                _hasPriority, //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.
                _suffixMap, //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance
                _cs, //computed style (we store this in a shared variable to conserve memory and make minification tighter
                _overwriteProps, //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.
                _specialProps = {},
                p = CSSPlugin.prototype = new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["f" /* TweenPlugin */ ]("css");

            p.constructor = CSSPlugin;
            CSSPlugin.version = "1.20.5";
            CSSPlugin.API = 2;
            CSSPlugin.defaultTransformPerspective = 0;
            CSSPlugin.defaultSkewType = "compensated";
            CSSPlugin.defaultSmoothOrigin = true;
            p = "px"; //we'll reuse the "p" variable to keep file size down
            CSSPlugin.suffixMap = {
                top: p,
                right: p,
                bottom: p,
                left: p,
                width: p,
                height: p,
                fontSize: p,
                padding: p,
                margin: p,
                perspective: p,
                lineHeight: ""
            };


            var _numExp = /(?:\-|\.|\b)(\d|\.|e\-)+/g,
                _relNumExp = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,
                _valuesExp = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like "1px 5px 20px rgb(255,102,51)"
                _NaNExp = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g, //also allows scientific notation and doesn't kill the leading -/+ in -= and +=
                _suffixExp = /(?:\d|\-|\+|=|#|\.)*/g,
                _opacityExp = /opacity *= *([^)]*)/i,
                _opacityValExp = /opacity:([^;]*)/i,
                _alphaFilterExp = /alpha\(opacity *=.+?\)/i,
                _rgbhslExp = /^(rgb|hsl)/,
                _capsExp = /([A-Z])/g,
                _camelExp = /-([a-z])/gi,
                _urlExp = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi, //for pulling out urls from url(...) or url("...") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)
                _camelFunc = function(s, g) {
                    return g.toUpperCase();
                },
                _horizExp = /(?:Left|Right|Width)/i,
                _ieGetMatrixExp = /(M11|M12|M21|M22)=[\d\-\.e]+/gi,
                _ieSetMatrixExp = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,
                _commasOutsideParenExp = /,(?=[^\)]*(?:\(|$))/gi, //finds any commas that are not within parenthesis
                _complexExp = /[\s,\(]/i, //for testing a string to find if it has a space, comma, or open parenthesis (clues that it's a complex value)
                _DEG2RAD = Math.PI / 180,
                _RAD2DEG = 180 / Math.PI,
                _forcePT = {},
                _dummyElement = {
                    style: {}
                },
                _doc = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].document || {
                    createElement: function() {
                        return _dummyElement;
                    }
                },
                _createElement = function(type, ns) {
                    return _doc.createElementNS ? _doc.createElementNS(ns || "http://www.w3.org/1999/xhtml", type) : _doc.createElement(type);
                },
                _tempDiv = _createElement("div"),
                _tempImg = _createElement("img"),
                _internals = CSSPlugin._internals = {
                    _specialProps: _specialProps
                }, //provides a hook to a few internal methods that we need to access from inside other plugins
                _agent = (__WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].navigator || {}).userAgent || "",
                _autoRound,
                _reqSafariFix, //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).

                _isSafari,
                _isFirefox, //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.
                _isSafariLT6, //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to "top" and "left" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)
                _ieVers,
                _supportsOpacity = (function() { //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.
                    var i = _agent.indexOf("Android"),
                        a = _createElement("a");
                    _isSafari = (_agent.indexOf("Safari") !== -1 && _agent.indexOf("Chrome") === -1 && (i === -1 || parseFloat(_agent.substr(i + 8, 2)) > 3));
                    _isSafariLT6 = (_isSafari && (parseFloat(_agent.substr(_agent.indexOf("Version/") + 8, 2)) < 6));
                    _isFirefox = (_agent.indexOf("Firefox") !== -1);
                    if ((/MSIE ([0-9]{1,}[\.0-9]{0,})/).exec(_agent) || (/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/).exec(_agent)) {
                        _ieVers = parseFloat(RegExp.$1);
                    }
                    if (!a) {
                        return false;
                    }
                    a.style.cssText = "top:1px;opacity:.55;";
                    return /^0.55/.test(a.style.opacity);
                }()),
                _getIEOpacity = function(v) {
                    return (_opacityExp.test(((typeof(v) === "string") ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || "")) ? (parseFloat(RegExp.$1) / 100) : 1);
                },
                _log = function(s) { //for logging messages, but in a way that won't throw errors in old versions of IE.
                    if (__WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].console) {
                        console.log(s);
                    }
                },
                _target, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params
                _index, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params

                _prefixCSS = "", //the non-camelCase vendor prefix like "-o-", "-moz-", "-ms-", or "-webkit-"
                _prefix = "", //camelCase vendor prefix like "O", "ms", "Webkit", or "Moz".

                // @private feed in a camelCase property name like "transform" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. "WebkitTransform" or "MozTransform" or "transform" or null if no such property is found, like if the browser is IE8 or before, "transform" won't be found at all)
                _checkPropPrefix = function(p, e) {
                    e = e || _tempDiv;
                    var s = e.style,
                        a, i;
                    if (s[p] !== undefined) {
                        return p;
                    }
                    p = p.charAt(0).toUpperCase() + p.substr(1);
                    a = ["O", "Moz", "ms", "Ms", "Webkit"];
                    i = 5;
                    while (--i > -1 && s[a[i] + p] === undefined) {}
                    if (i >= 0) {
                        _prefix = (i === 3) ? "ms" : a[i];
                        _prefixCSS = "-" + _prefix.toLowerCase() + "-";
                        return _prefix + p;
                    }
                    return null;
                },

                _getComputedStyle = (typeof(window) !== "undefined" ? window : _doc.defaultView || {
                    getComputedStyle: function() {}
                }).getComputedStyle,

                /**
                 * @private Returns the css style for a particular property of an element. For example, to get whatever the current "left" css value for an element with an ID of "myElement", you could do:
                 * var currentLeft = CSSPlugin.getStyle( document.getElementById("myElement"), "left");
                 *
                 * @param {!Object} t Target element whose style property you want to query
                 * @param {!string} p Property name (like "left" or "top" or "marginTop", etc.)
                 * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.
                 * @param {boolean=} calc If true, the value will not be read directly from the element's "style" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.
                 * @param {string=} dflt Default value that should be returned in the place of null, "none", "auto" or "auto auto".
                 * @return {?string} The current property value
                 */
                _getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {
                    var rv;
                    if (!_supportsOpacity)
                        if (p === "opacity") { //several versions of IE don't use the standard "opacity" property - they use things like filter:alpha(opacity=50), so we parse that here.
                            return _getIEOpacity(t);
                        }
                    if (!calc && t.style[p]) {
                        rv = t.style[p];
                    } else if ((cs = cs || _getComputedStyle(t))) {
                        rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, "-$1").toLowerCase());
                    } else if (t.currentStyle) {
                        rv = t.currentStyle[p];
                    }
                    return (dflt != null && (!rv || rv === "none" || rv === "auto" || rv === "auto auto")) ? dflt : rv;
                },

                /**
                 * @private Pass the target element, the property name, the numeric value, and the suffix (like "%", "em", "px", etc.) and it will spit back the equivalent pixel number.
                 * @param {!Object} t Target element
                 * @param {!string} p Property name (like "left", "top", "marginLeft", etc.)
                 * @param {!number} v Value
                 * @param {string=} sfx Suffix (like "px" or "%" or "em")
                 * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.
                 * @return {number} value in pixels
                 */
                _convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {
                    if (sfx === "px" || (!sfx && p !== "lineHeight")) {
                        return v;
                    }
                    if (sfx === "auto" || !v) {
                        return 0;
                    }
                    var horiz = _horizExp.test(p),
                        node = t,
                        style = _tempDiv.style,
                        neg = (v < 0),
                        precise = (v === 1),
                        pix, cache, time;
                    if (neg) {
                        v = -v;
                    }
                    if (precise) {
                        v *= 100;
                    }
                    if (p === "lineHeight" && !sfx) { //special case of when a simple lineHeight (without a unit) is used. Set it to the value, read back the computed value, and then revert.
                        cache = _getComputedStyle(t).lineHeight;
                        t.style.lineHeight = v;
                        pix = parseFloat(_getComputedStyle(t).lineHeight);
                        t.style.lineHeight = cache;
                    } else if (sfx === "%" && p.indexOf("border") !== -1) {
                        pix = (v / 100) * (horiz ? t.clientWidth : t.clientHeight);
                    } else {
                        style.cssText = "border:0 solid red;position:" + _getStyle(t, "position") + ";line-height:0;";
                        if (sfx === "%" || !node.appendChild || sfx.charAt(0) === "v" || sfx === "rem") {
                            node = t.parentNode || _doc.body;
                            if (_getStyle(node, "display").indexOf("flex") !== -1) { //Edge and IE11 have a bug that causes offsetWidth to report as 0 if the container has display:flex and the child is position:relative. Switching to position: absolute solves it.
                                style.position = "absolute";
                            }
                            cache = node._gsCache;
                            time = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].ticker.frame;
                            if (cache && horiz && cache.time === time) { //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)
                                return cache.width * v / 100;
                            }
                            style[(horiz ? "width" : "height")] = v + sfx;
                        } else {
                            style[(horiz ? "borderLeftWidth" : "borderTopWidth")] = v + sfx;
                        }
                        node.appendChild(_tempDiv);
                        pix = parseFloat(_tempDiv[(horiz ? "offsetWidth" : "offsetHeight")]);
                        node.removeChild(_tempDiv);
                        if (horiz && sfx === "%" && CSSPlugin.cacheWidths !== false) {
                            cache = node._gsCache = node._gsCache || {};
                            cache.time = time;
                            cache.width = pix / v * 100;
                        }
                        if (pix === 0 && !recurse) {
                            pix = _convertToPixels(t, p, v, sfx, true);
                        }
                    }
                    if (precise) {
                        pix /= 100;
                    }
                    return neg ? -pix : pix;
                },
                _calculateOffset = _internals.calculateOffset = function(t, p, cs) { //for figuring out "top" or "left" in px when it's "auto". We need to factor in margin with the offsetLeft/offsetTop
                    if (_getStyle(t, "position", cs) !== "absolute") {
                        return 0;
                    }
                    var dim = ((p === "left") ? "Left" : "Top"),
                        v = _getStyle(t, "margin" + dim, cs);
                    return t["offset" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, "")) || 0);
                },

                // @private returns at object containing ALL of the style properties in camelCase and their associated values.
                _getAllStyles = function(t, cs) {
                    var s = {},
                        i, tr, p;
                    if ((cs = cs || _getComputedStyle(t, null))) {
                        if ((i = cs.length)) {
                            while (--i > -1) {
                                p = cs[i];
                                if (p.indexOf("-transform") === -1 || _transformPropCSS === p) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
                                    s[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);
                                }
                            }
                        } else { //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.
                            for (i in cs) {
                                if (i.indexOf("Transform") === -1 || _transformProp === i) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
                                    s[i] = cs[i];
                                }
                            }
                        }
                    } else if ((cs = t.currentStyle || t.style)) {
                        for (i in cs) {
                            if (typeof(i) === "string" && s[i] === undefined) {
                                s[i.replace(_camelExp, _camelFunc)] = cs[i];
                            }
                        }
                    }
                    if (!_supportsOpacity) {
                        s.opacity = _getIEOpacity(t);
                    }
                    tr = _getTransform(t, cs, false);
                    s.rotation = tr.rotation;
                    s.skewX = tr.skewX;
                    s.scaleX = tr.scaleX;
                    s.scaleY = tr.scaleY;
                    s.x = tr.x;
                    s.y = tr.y;
                    if (_supports3D) {
                        s.z = tr.z;
                        s.rotationX = tr.rotationX;
                        s.rotationY = tr.rotationY;
                        s.scaleZ = tr.scaleZ;
                    }
                    if (s.filters) {
                        delete s.filters;
                    }
                    return s;
                },

                // @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a "difs" property which refers to an object containing only those isolated properties and values for tweening, and a "firstMPT" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.
                _cssDif = function(t, s1, s2, vars, forceLookup) {
                    var difs = {},
                        style = t.style,
                        val, p, mpt;
                    for (p in s2) {
                        if (p !== "cssText")
                            if (p !== "length")
                                if (isNaN(p))
                                    if (s1[p] !== (val = s2[p]) || (forceLookup && forceLookup[p]))
                                        if (p.indexOf("Origin") === -1)
                                            if (typeof(val) === "number" || typeof(val) === "string") {
                                                difs[p] = (val === "auto" && (p === "left" || p === "top")) ? _calculateOffset(t, p) : ((val === "" || val === "auto" || val === "none") && typeof(s1[p]) === "string" && s1[p].replace(_NaNExp, "") !== "") ? 0 : val; //if the ending value is defaulting ("" or "auto"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for "" or "auto" so that things actually tween.
                                                if (style[p] !== undefined) { //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.
                                                    mpt = new MiniPropTween(style, p, style[p], mpt);
                                                }
                                            }
                    }
                    if (vars) {
                        for (p in vars) { //copy properties (except className)
                            if (p !== "className") {
                                difs[p] = vars[p];
                            }
                        }
                    }
                    return {
                        difs: difs,
                        firstMPT: mpt
                    };
                },
                _dimensions = {
                    width: ["Left", "Right"],
                    height: ["Top", "Bottom"]
                },
                _margins = ["marginLeft", "marginRight", "marginTop", "marginBottom"],

                /**
                 * @private Gets the width or height of an element
                 * @param {!Object} t Target element
                 * @param {!string} p Property name ("width" or "height")
                 * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.
                 * @return {number} Dimension (in pixels)
                 */
                _getDimension = function(t, p, cs) {
                    if ((t.nodeName + "").toLowerCase() === "svg") { //Chrome no longer supports offsetWidth/offsetHeight on SVG elements.
                        return (cs || _getComputedStyle(t))[p] || 0;
                    } else if (t.getCTM && _isSVG(t)) {
                        return t.getBBox()[p] || 0;
                    }
                    var v = parseFloat((p === "width") ? t.offsetWidth : t.offsetHeight),
                        a = _dimensions[p],
                        i = a.length;
                    cs = cs || _getComputedStyle(t, null);
                    while (--i > -1) {
                        v -= parseFloat(_getStyle(t, "padding" + a[i], cs, true)) || 0;
                        v -= parseFloat(_getStyle(t, "border" + a[i] + "Width", cs, true)) || 0;
                    }
                    return v;
                },

                // @private Parses position-related complex strings like "top left" or "50px 10px" or "70% 20%", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: "ox" (offsetX), "oy" (offsetY), "oxp" (if true, "ox" is a percentage not a pixel value), and "oxy" (if true, "oy" is a percentage not a pixel value)
                _parsePosition = function(v, recObj) {
                    if (v === "contain" || v === "auto" || v === "auto auto") { //note: Firefox uses "auto auto" as default whereas Chrome uses "auto".
                        return v + " ";
                    }
                    if (v == null || v === "") {
                        v = "0 0";
                    }
                    var a = v.split(" "),
                        x = (v.indexOf("left") !== -1) ? "0%" : (v.indexOf("right") !== -1) ? "100%" : a[0],
                        y = (v.indexOf("top") !== -1) ? "0%" : (v.indexOf("bottom") !== -1) ? "100%" : a[1],
                        i;
                    if (a.length > 3 && !recObj) { //multiple positions
                        a = v.split(", ").join(",").split(",");
                        v = [];
                        for (i = 0; i < a.length; i++) {
                            v.push(_parsePosition(a[i]));
                        }
                        return v.join(",");
                    }
                    if (y == null) {
                        y = (x === "center") ? "50%" : "0";
                    } else if (y === "center") {
                        y = "50%";
                    }
                    if (x === "center" || (isNaN(parseFloat(x)) && (x + "").indexOf("=") === -1)) { //remember, the user could flip-flop the values and say "bottom center" or "center bottom", etc. "center" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an "=" sign in the value, it's relative.
                        x = "50%";
                    }
                    v = x + " " + y + ((a.length > 2) ? " " + a[2] : "");
                    if (recObj) {
                        recObj.oxp = (x.indexOf("%") !== -1);
                        recObj.oyp = (y.indexOf("%") !== -1);
                        recObj.oxr = (x.charAt(1) === "=");
                        recObj.oyr = (y.charAt(1) === "=");
                        recObj.ox = parseFloat(x.replace(_NaNExp, ""));
                        recObj.oy = parseFloat(y.replace(_NaNExp, ""));
                        recObj.v = v;
                    }
                    return recObj || v;
                },

                /**
                 * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)
                 * @param {(number|string)} e End value which is typically a string, but could be a number
                 * @param {(number|string)} b Beginning value which is typically a string but could be a number
                 * @return {number} Amount of change between the beginning and ending values (relative values that have a "+=" or "-=" are recognized)
                 */
                _parseChange = function(e, b) {
                    if (typeof(e) === "function") {
                        e = e(_index, _target);
                    }
                    return (typeof(e) === "string" && e.charAt(1) === "=") ? parseInt(e.charAt(0) + "1", 10) * parseFloat(e.substr(2)) : (parseFloat(e) - parseFloat(b)) || 0;
                },

                /**
                 * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.
                 * @param {Object} v Value to be parsed
                 * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
                 * @return {number} Parsed value
                 */
                _parseVal = function(v, d) {
                    if (typeof(v) === "function") {
                        v = v(_index, _target);
                    }
                    return (v == null) ? d : (typeof(v) === "string" && v.charAt(1) === "=") ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;
                },

                /**
                 * @private Translates strings like "40deg" or "40" or 40rad" or "+=40deg" or "270_short" or "-90_cw" or "+=45_ccw" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.
                 * @param {Object} v Value to be parsed
                 * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
                 * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be "rotation", "rotationX", or "rotationY"
                 * @param {Object=} directionalEnd An object that will store the raw end values for directional angles ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.
                 * @return {number} parsed angle in radians
                 */
                _parseAngle = function(v, d, p, directionalEnd) {
                    var min = 0.000001,
                        cap, split, dif, result, isRelative;
                    if (typeof(v) === "function") {
                        v = v(_index, _target);
                    }
                    if (v == null) {
                        result = d;
                    } else if (typeof(v) === "number") {
                        result = v;
                    } else {
                        cap = 360;
                        split = v.split("_");
                        isRelative = (v.charAt(1) === "=");
                        dif = (isRelative ? parseInt(v.charAt(0) + "1", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * ((v.indexOf("rad") === -1) ? 1 : _RAD2DEG) - (isRelative ? 0 : d);
                        if (split.length) {
                            if (directionalEnd) {
                                directionalEnd[p] = d + dif;
                            }
                            if (v.indexOf("short") !== -1) {
                                dif = dif % cap;
                                if (dif !== dif % (cap / 2)) {
                                    dif = (dif < 0) ? dif + cap : dif - cap;
                                }
                            }
                            if (v.indexOf("_cw") !== -1 && dif < 0) {
                                dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                            } else if (v.indexOf("ccw") !== -1 && dif > 0) {
                                dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                            }
                        }
                        result = d + dif;
                    }
                    if (result < min && result > -min) {
                        result = 0;
                    }
                    return result;
                },

                _colorLookup = {
                    aqua: [0, 255, 255],
                    lime: [0, 255, 0],
                    silver: [192, 192, 192],
                    black: [0, 0, 0],
                    maroon: [128, 0, 0],
                    teal: [0, 128, 128],
                    blue: [0, 0, 255],
                    navy: [0, 0, 128],
                    white: [255, 255, 255],
                    fuchsia: [255, 0, 255],
                    olive: [128, 128, 0],
                    yellow: [255, 255, 0],
                    orange: [255, 165, 0],
                    gray: [128, 128, 128],
                    purple: [128, 0, 128],
                    green: [0, 128, 0],
                    red: [255, 0, 0],
                    pink: [255, 192, 203],
                    cyan: [0, 255, 255],
                    transparent: [255, 255, 255, 0]
                },

                _hue = function(h, m1, m2) {
                    h = (h < 0) ? h + 1 : (h > 1) ? h - 1 : h;
                    return ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : (h < 0.5) ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255) + 0.5) | 0;
                },

                /**
                 * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).
                 * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.
                 * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()
                 * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.
                 */
                _parseColor = CSSPlugin.parseColor = function(v, toHSL) {
                    var a, r, g, b, h, s, l, max, min, d, wasHSL;
                    if (!v) {
                        a = _colorLookup.black;
                    } else if (typeof(v) === "number") {
                        a = [v >> 16, (v >> 8) & 255, v & 255];
                    } else {
                        if (v.charAt(v.length - 1) === ",") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
                            v = v.substr(0, v.length - 1);
                        }
                        if (_colorLookup[v]) {
                            a = _colorLookup[v];
                        } else if (v.charAt(0) === "#") {
                            if (v.length === 4) { //for shorthand like #9F0
                                r = v.charAt(1);
                                g = v.charAt(2);
                                b = v.charAt(3);
                                v = "#" + r + r + g + g + b + b;
                            }
                            v = parseInt(v.substr(1), 16);
                            a = [v >> 16, (v >> 8) & 255, v & 255];
                        } else if (v.substr(0, 3) === "hsl") {
                            a = wasHSL = v.match(_numExp);
                            if (!toHSL) {
                                h = (Number(a[0]) % 360) / 360;
                                s = Number(a[1]) / 100;
                                l = Number(a[2]) / 100;
                                g = (l <= 0.5) ? l * (s + 1) : l + s - l * s;
                                r = l * 2 - g;
                                if (a.length > 3) {
                                    a[3] = Number(a[3]);
                                }
                                a[0] = _hue(h + 1 / 3, r, g);
                                a[1] = _hue(h, r, g);
                                a[2] = _hue(h - 1 / 3, r, g);
                            } else if (v.indexOf("=") !== -1) { //if relative values are found, just return the raw strings with the relative prefixes in place.
                                return v.match(_relNumExp);
                            }
                        } else {
                            a = v.match(_numExp) || _colorLookup.transparent;
                        }
                        a[0] = Number(a[0]);
                        a[1] = Number(a[1]);
                        a[2] = Number(a[2]);
                        if (a.length > 3) {
                            a[3] = Number(a[3]);
                        }
                    }
                    if (toHSL && !wasHSL) {
                        r = a[0] / 255;
                        g = a[1] / 255;
                        b = a[2] / 255;
                        max = Math.max(r, g, b);
                        min = Math.min(r, g, b);
                        l = (max + min) / 2;
                        if (max === min) {
                            h = s = 0;
                        } else {
                            d = max - min;
                            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                            h = (max === r) ? (g - b) / d + (g < b ? 6 : 0) : (max === g) ? (b - r) / d + 2 : (r - g) / d + 4;
                            h *= 60;
                        }
                        a[0] = (h + 0.5) | 0;
                        a[1] = (s * 100 + 0.5) | 0;
                        a[2] = (l * 100 + 0.5) | 0;
                    }
                    return a;
                },
                _formatColors = function(s, toHSL) {
                    var colors = s.match(_colorExp) || [],
                        charIndex = 0,
                        parsed = "",
                        i, color, temp;
                    if (!colors.length) {
                        return s;
                    }
                    for (i = 0; i < colors.length; i++) {
                        color = colors[i];
                        temp = s.substr(charIndex, s.indexOf(color, charIndex) - charIndex);
                        charIndex += temp.length + color.length;
                        color = _parseColor(color, toHSL);
                        if (color.length === 3) {
                            color.push(1);
                        }
                        parsed += temp + (toHSL ? "hsla(" + color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : "rgba(" + color.join(",")) + ")";
                    }
                    return parsed + s.substr(charIndex);
                },
                _colorExp = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.

            for (p in _colorLookup) {
                _colorExp += "|" + p + "\\b";
            }
            _colorExp = new RegExp(_colorExp + ")", "gi");

            CSSPlugin.colorStringFilter = function(a) {
                var combined = a[0] + " " + a[1],
                    toHSL;
                if (_colorExp.test(combined)) {
                    toHSL = (combined.indexOf("hsl(") !== -1 || combined.indexOf("hsla(") !== -1);
                    a[0] = _formatColors(a[0], toHSL);
                    a[1] = _formatColors(a[1], toHSL);
                }
                _colorExp.lastIndex = 0;
            };

            if (!__WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].defaultStringFilter) {
                __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].defaultStringFilter = CSSPlugin.colorStringFilter;
            }

            /**
             * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as "0px red" or "0px 0px 10px rgb(255,0,0)" or "0px 0px 20px 20px #F00" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter("0px 0px 0px 0px #777", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.
             * @param {!string} dflt The default value and pattern to follow. So "0px 0px 0px 0px #777" will ensure that 4 numbers and a color will always get returned.
             * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.
             * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.
             * @return {Function} formatter function
             */
            var _getFormatter = function(dflt, clr, collapsible, multi) {
                    if (dflt == null) {
                        return function(v) {
                            return v;
                        };
                    }
                    var dColor = clr ? (dflt.match(_colorExp) || [""])[0] : "",
                        dVals = dflt.split(dColor).join("").match(_valuesExp) || [],
                        pfx = dflt.substr(0, dflt.indexOf(dVals[0])),
                        sfx = (dflt.charAt(dflt.length - 1) === ")") ? ")" : "",
                        delim = (dflt.indexOf(" ") !== -1) ? " " : ",",
                        numVals = dVals.length,
                        dSfx = (numVals > 0) ? dVals[0].replace(_numExp, "") : "",
                        formatter;
                    if (!numVals) {
                        return function(v) {
                            return v;
                        };
                    }
                    if (clr) {
                        formatter = function(v) {
                            var color, vals, i, a;
                            if (typeof(v) === "number") {
                                v += dSfx;
                            } else if (multi && _commasOutsideParenExp.test(v)) {
                                a = v.replace(_commasOutsideParenExp, "|").split("|");
                                for (i = 0; i < a.length; i++) {
                                    a[i] = formatter(a[i]);
                                }
                                return a.join(",");
                            }
                            color = (v.match(_colorExp) || [dColor])[0];
                            vals = v.split(color).join("").match(_valuesExp) || [];
                            i = vals.length;
                            if (numVals > i--) {
                                while (++i < numVals) {
                                    vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
                                }
                            }
                            return pfx + vals.join(delim) + delim + color + sfx + (v.indexOf("inset") !== -1 ? " inset" : "");
                        };
                        return formatter;

                    }
                    formatter = function(v) {
                        var vals, a, i;
                        if (typeof(v) === "number") {
                            v += dSfx;
                        } else if (multi && _commasOutsideParenExp.test(v)) {
                            a = v.replace(_commasOutsideParenExp, "|").split("|");
                            for (i = 0; i < a.length; i++) {
                                a[i] = formatter(a[i]);
                            }
                            return a.join(",");
                        }
                        vals = v.match(_valuesExp) || [];
                        i = vals.length;
                        if (numVals > i--) {
                            while (++i < numVals) {
                                vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
                            }
                        }
                        return pfx + vals.join(delim) + sfx;
                    };
                    return formatter;
                },

                /**
                 * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.
                 * @param {!string} props a comma-delimited list of property names in order from top to left, like "marginTop,marginRight,marginBottom,marginLeft"
                 * @return {Function} a formatter function
                 */
                _getEdgeParser = function(props) {
                    props = props.split(",");
                    return function(t, e, p, cssp, pt, plugin, vars) {
                        var a = (e + "").split(" "),
                            i;
                        vars = {};
                        for (i = 0; i < 4; i++) {
                            vars[props[i]] = a[i] = a[i] || a[(((i - 1) / 2) >> 0)];
                        }
                        return cssp.parse(t, vars, pt, plugin);
                    };
                },

                // @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.
                _setPluginRatio = _internals._setPluginRatio = function(v) {
                    this.plugin.setRatio(v);
                    var d = this.data,
                        proxy = d.proxy,
                        mpt = d.firstMPT,
                        min = 0.000001,
                        val, pt, i, str, p;
                    while (mpt) {
                        val = proxy[mpt.v];
                        if (mpt.r) {
                            val = mpt.r(val);
                        } else if (val < min && val > -min) {
                            val = 0;
                        }
                        mpt.t[mpt.p] = val;
                        mpt = mpt._next;
                    }
                    if (d.autoRotate) {
                        d.autoRotate.rotation = d.mod ? d.mod.call(this._tween, proxy.rotation, this.t, this._tween) : proxy.rotation; //special case for ModifyPlugin to hook into an auto-rotating bezier
                    }
                    //at the end, we must set the CSSPropTween's "e" (end) value dynamically here because that's what is used in the final setRatio() method. Same for "b" at the beginning.
                    if (v === 1 || v === 0) {
                        mpt = d.firstMPT;
                        p = (v === 1) ? "e" : "b";
                        while (mpt) {
                            pt = mpt.t;
                            if (!pt.type) {
                                pt[p] = pt.s + pt.xs0;
                            } else if (pt.type === 1) {
                                str = pt.xs0 + pt.s + pt.xs1;
                                for (i = 1; i < pt.l; i++) {
                                    str += pt["xn" + i] + pt["xs" + (i + 1)];
                                }
                                pt[p] = str;
                            }
                            mpt = mpt._next;
                        }
                    }
                },

                /**
                 * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.
                 * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)
                 * @param {!string} p property name
                 * @param {(number|string|object)} v value
                 * @param {MiniPropTween=} next next MiniPropTween in the linked list
                 * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer
                 */
                MiniPropTween = function(t, p, v, next, r) {
                    this.t = t;
                    this.p = p;
                    this.v = v;
                    this.r = r;
                    if (next) {
                        next._prev = this;
                        this._next = next;
                    }
                },

                /**
                 * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like "10px 10px 20px 30px rgb(255,0,0)" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like "s" or "xn1" or "xn2") that we're tweening and the unique property name that was used for the proxy (like "boxShadow_xn1" and "boxShadow_xn2") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.
                 * This method returns an object that has the following properties:
                 *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target
                 *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values
                 *  - firstMPT: the first MiniPropTween in the linked list
                 *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the "pt" (4th) parameter.
                 * @param {!Object} t target object to be tweened
                 * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed
                 * @param {!CSSPlugin} cssp The CSSPlugin instance
                 * @param {CSSPropTween=} pt the next CSSPropTween in the linked list
                 * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values
                 * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the "pt" (4th) parameter.
                 * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)
                 */
                _parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {
                    var bpt = pt,
                        start = {},
                        end = {},
                        transform = cssp._transform,
                        oldForce = _forcePT,
                        i, p, xp, mpt, firstPT;
                    cssp._transform = null;
                    _forcePT = vars;
                    pt = firstPT = cssp.parse(t, vars, pt, plugin);
                    _forcePT = oldForce;
                    //break off from the linked list so the new ones are isolated.
                    if (shallow) {
                        cssp._transform = transform;
                        if (bpt) {
                            bpt._prev = null;
                            if (bpt._prev) {
                                bpt._prev._next = null;
                            }
                        }
                    }
                    while (pt && pt !== bpt) {
                        if (pt.type <= 1) {
                            p = pt.p;
                            end[p] = pt.s + pt.c;
                            start[p] = pt.s;
                            if (!shallow) {
                                mpt = new MiniPropTween(pt, "s", p, mpt, pt.r);
                                pt.c = 0;
                            }
                            if (pt.type === 1) {
                                i = pt.l;
                                while (--i > 0) {
                                    xp = "xn" + i;
                                    p = pt.p + "_" + xp;
                                    end[p] = pt.data[xp];
                                    start[p] = pt[xp];
                                    if (!shallow) {
                                        mpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);
                                    }
                                }
                            }
                        }
                        pt = pt._next;
                    }
                    return {
                        proxy: start,
                        end: end,
                        firstMPT: mpt,
                        pt: firstPT
                    };
                },



                /**
                 * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of "extra" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where "s" indicates string and "n" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be "5px 5px 8px rgb(102, 102, 51)". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.
                 * CSSPropTweens have the following optional properties as well (not defined through the constructor):
                 *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.
                 *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)
                 *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.
                 *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.
                 *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.
                 * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.
                 * @param {string} p Property to tween (name). For example, to tween element.width, p would be "width".
                 * @param {number} s Starting numeric value
                 * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.
                 * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.
                 * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:"1px solid red"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.
                 * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a "clip:rect(...)" tween in which case "p" might be xs1 but "n" is still "clip"
                 * @param {boolean=} r If true, the value(s) should be rounded
                 * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.
                 * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.
                 * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.
                 */
                CSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {
                    this.t = t; //target
                    this.p = p; //property
                    this.s = s; //starting value
                    this.c = c; //change value
                    this.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)
                    if (!(t instanceof CSSPropTween)) {
                        _overwriteProps.push(this.n);
                    }
                    this.r = !r ? r : (typeof(r) === "function") ? r : Math.round; //round (boolean)
                    this.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work
                    if (pr) {
                        this.pr = pr;
                        _hasPriority = true;
                    }
                    this.b = (b === undefined) ? s : b;
                    this.e = (e === undefined) ? s + c : e;
                    if (next) {
                        this._next = next;
                        next._prev = this;
                    }
                },

                _addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) { //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween
                    var pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);
                    pt.b = start;
                    pt.e = pt.xs0 = end;
                    return pt;
                },

                /**
                 * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:
                 * sp.parseComplex(element, "boxShadow", "5px 10px 20px rgb(255,102,51)", "0px 0px 0px red", true, "0px 0px 0px rgb(0,0,0,0)", pt);
                 * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the "data" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().
                 * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.
                 *
                 * @param {!Object} t Target whose property will be tweened
                 * @param {!string} p Property that will be tweened (its name, like "left" or "backgroundColor" or "boxShadow")
                 * @param {string} b Beginning value
                 * @param {string} e Ending value
                 * @param {boolean} clrs If true, the value could contain a color value like "rgb(255,0,0)" or "#F00" or "red". The default is false, so no colors will be recognized (a performance optimization)
                 * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match
                 * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).
                 * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.
                 * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the "data" property, like {s:100, xn1:50, xn2:300}
                 * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.
                 * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.
                 */
                _parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {
                    //DEBUG: _log("parseComplex: "+p+", b: "+b+", e: "+e);
                    b = b || dflt || "";
                    if (typeof(e) === "function") {
                        e = e(_index, _target);
                    }
                    pt = new CSSPropTween(t, p, 0, 0, pt, (setRatio ? 2 : 1), null, false, pr, b, e);
                    e += ""; //ensures it's a string
                    if (clrs && _colorExp.test(e + b)) { //if colors are found, normalize the formatting to rgba() or hsla().
                        e = [b, e];
                        CSSPlugin.colorStringFilter(e);
                        b = e[0];
                        e = e[1];
                    }
                    var ba = b.split(", ").join(",").split(" "), //beginning array
                        ea = e.split(", ").join(",").split(" "), //ending array
                        l = ba.length,
                        autoRound = (_autoRound !== false),
                        i, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;
                    if (e.indexOf(",") !== -1 || b.indexOf(",") !== -1) {
                        if ((e + b).indexOf("rgb") !== -1 || (e + b).indexOf("hsl") !== -1) { //keep rgb(), rgba(), hsl(), and hsla() values together! (remember, we're splitting on spaces)
                            ba = ba.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
                            ea = ea.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
                        } else {
                            ba = ba.join(" ").split(",").join(", ").split(" ");
                            ea = ea.join(" ").split(",").join(", ").split(" ");
                        }
                        l = ba.length;
                    }
                    if (l !== ea.length) {
                        //DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
                        ba = (dflt || "").split(" ");
                        l = ba.length;
                    }
                    pt.plugin = plugin;
                    pt.setRatio = setRatio;
                    _colorExp.lastIndex = 0;
                    for (i = 0; i < l; i++) {
                        bv = ba[i];
                        ev = ea[i] + "";
                        bn = parseFloat(bv);
                        //if the value begins with a number (most common). It's fine if it has a suffix like px
                        if (bn || bn === 0) {
                            pt.appendXtra("", bn, _parseChange(ev, bn), ev.replace(_relNumExp, ""), (autoRound && ev.indexOf("px") !== -1) ? Math.round : false, true);

                            //if the value is a color
                        } else if (clrs && _colorExp.test(bv)) {
                            str = ev.indexOf(")") + 1;
                            str = ")" + (str ? ev.substr(str) : ""); //if there's a comma or ) at the end, retain it.
                            useHSL = (ev.indexOf("hsl") !== -1 && _supportsOpacity);
                            temp = ev; //original string value so we can look for any prefix later.
                            bv = _parseColor(bv, useHSL);
                            ev = _parseColor(ev, useHSL);
                            hasAlpha = (bv.length + ev.length > 6);
                            if (hasAlpha && !_supportsOpacity && ev[3] === 0) { //older versions of IE don't support rgba(), so if the destination alpha is 0, just use "transparent" for the end color
                                pt["xs" + pt.l] += pt.l ? " transparent" : "transparent";
                                pt.e = pt.e.split(ea[i]).join("transparent");
                            } else {
                                if (!_supportsOpacity) { //old versions of IE don't support rgba().
                                    hasAlpha = false;
                                }
                                if (useHSL) {
                                    pt.appendXtra(temp.substr(0, temp.indexOf("hsl")) + (hasAlpha ? "hsla(" : "hsl("), bv[0], _parseChange(ev[0], bv[0]), ",", false, true)
                                        .appendXtra("", bv[1], _parseChange(ev[1], bv[1]), "%,", false)
                                        .appendXtra("", bv[2], _parseChange(ev[2], bv[2]), (hasAlpha ? "%," : "%" + str), false);
                                } else {
                                    pt.appendXtra(temp.substr(0, temp.indexOf("rgb")) + (hasAlpha ? "rgba(" : "rgb("), bv[0], ev[0] - bv[0], ",", Math.round, true)
                                        .appendXtra("", bv[1], ev[1] - bv[1], ",", Math.round)
                                        .appendXtra("", bv[2], ev[2] - bv[2], (hasAlpha ? "," : str), Math.round);
                                }

                                if (hasAlpha) {
                                    bv = (bv.length < 4) ? 1 : bv[3];
                                    pt.appendXtra("", bv, ((ev.length < 4) ? 1 : ev[3]) - bv, str, false);
                                }
                            }
                            _colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.

                        } else {
                            bnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array

                            //if no number is found, treat it as a non-tweening value and just append the string to the current xs.
                            if (!bnums) {
                                pt["xs" + pt.l] += (pt.l || pt["xs" + pt.l]) ? " " + ev : ev;

                                //loop through all the numbers that are found and construct the extra values on the pt.
                            } else {
                                enums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5
                                if (!enums || enums.length !== bnums.length) {
                                    //DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
                                    return pt;
                                }
                                ni = 0;
                                for (xi = 0; xi < bnums.length; xi++) {
                                    cv = bnums[xi];
                                    temp = bv.indexOf(cv, ni);
                                    pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), "", (autoRound && bv.substr(temp + cv.length, 2) === "px") ? Math.round : false, (xi === 0));
                                    ni = temp + cv.length;
                                }
                                pt["xs" + pt.l] += bv.substr(ni);
                            }
                        }
                    }
                    //if there are relative values ("+=" or "-=" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.
                    if (e.indexOf("=") !== -1)
                        if (pt.data) {
                            str = pt.xs0 + pt.data.s;
                            for (i = 1; i < pt.l; i++) {
                                str += pt["xs" + i] + pt.data["xn" + i];
                            }
                            pt.e = str + pt["xs" + i];
                        }
                    if (!pt.l) {
                        pt.type = -1;
                        pt.xs0 = pt.e;
                    }
                    return pt.xfirst || pt;
                },
                i = 9;


            p = CSSPropTween.prototype;
            p.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.
            while (--i > 0) {
                p["xn" + i] = 0;
                p["xs" + i] = "";
            }
            p.xs0 = "";
            p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;


            /**
             * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like "rect(10px, 5px, 0px, 20px)", the values would be stored like this:
             * xs0:"rect(", s:10, xs1:"px, ", xn1:5, xs2:"px, ", xn2:0, xs3:"px, ", xn3:20, xn4:"px)"
             * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).
             * @param {string=} pfx Prefix (if any)
             * @param {!number} s Starting value
             * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.
             * @param {string=} sfx Suffix (if any)
             * @param {boolean=} r Round (if true).
             * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.
             * @return {CSSPropTween} returns itself so that multiple methods can be chained together.
             */
            p.appendXtra = function(pfx, s, c, sfx, r, pad) {
                var pt = this,
                    l = pt.l;
                pt["xs" + l] += (pad && (l || pt["xs" + l])) ? " " + pfx : pfx || "";
                if (!c)
                    if (l !== 0 && !pt.plugin) { //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!
                        pt["xs" + l] += s + (sfx || "");
                        return pt;
                    }
                pt.l++;
                pt.type = pt.setRatio ? 2 : 1;
                pt["xs" + pt.l] = sfx || "";
                if (l > 0) {
                    pt.data["xn" + l] = s + c;
                    pt.rxp["xn" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)
                    pt["xn" + l] = s;
                    if (!pt.plugin) {
                        pt.xfirst = new CSSPropTween(pt, "xn" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);
                        pt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is "" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.
                    }
                    return pt;
                }
                pt.data = {
                    s: s + c
                };
                pt.rxp = {};
                pt.s = s;
                pt.c = c;
                pt.r = r;
                return pt;
            };

            /**
             * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:"5px 10px 15px rgb(255, 102, 51)" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like "boxShadow" or "throwProps" or "bezier" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.
             * @param {!string} p Property name (like "boxShadow" or "throwProps")
             * @param {Object=} options An object containing any of the following configuration options:
             *                      - defaultValue: the default value
             *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)
             *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take "5px 5px red" and format it to "5px 5px 0px 0px red" so that both the beginning and ending values have a common order and quantity of values.)
             *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)
             *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.
             *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.
             *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.
             *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like "5px" would apply to all, "5px, 10px" would use 5px for top/bottom and 10px for right/left, etc.
             *                      - keyword: a special keyword that can [optionally] be found inside the value (like "inset" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).
             */
            var SpecialProp = function(p, options) {
                    options = options || {};
                    this.p = options.prefix ? _checkPropPrefix(p) || p : p;
                    _specialProps[p] = _specialProps[this.p] = this;
                    this.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);
                    if (options.parser) {
                        this.parse = options.parser;
                    }
                    this.clrs = options.color;
                    this.multi = options.multi;
                    this.keyword = options.keyword;
                    this.dflt = options.defaultValue;
                    this.pr = options.priority || 0;
                },

                //shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.
                _registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {
                    if (typeof(options) !== "object") {
                        options = {
                            parser: defaults
                        }; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin
                    }
                    var a = p.split(","),
                        d = options.defaultValue,
                        i, temp;
                    defaults = defaults || [d];
                    for (i = 0; i < a.length; i++) {
                        options.prefix = (i === 0 && options.prefix);
                        options.defaultValue = defaults[i] || d;
                        temp = new SpecialProp(a[i], options);
                    }
                },

                //creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.
                _registerPluginProp = _internals._registerPluginProp = function(p) {
                    if (!_specialProps[p]) {
                        var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + "Plugin";
                        _registerComplexSpecialProp(p, {
                            parser: function(t, e, p, cssp, pt, plugin, vars) {
                                var pluginClass = _globals.com.greensock.plugins[pluginName];
                                if (!pluginClass) {
                                    _log("Error: " + pluginName + " js file not loaded.");
                                    return pt;
                                }
                                pluginClass._cssRegister();
                                return _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);
                            }
                        });
                    }
                };


            p = SpecialProp.prototype;

            /**
             * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like "inset" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)
             * @param {!Object} t target element
             * @param {(string|number|object)} b beginning value
             * @param {(string|number|object)} e ending (destination) value
             * @param {CSSPropTween=} pt next CSSPropTween in the linked list
             * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.
             * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.
             * @return {CSSPropTween=} First CSSPropTween in the linked list
             */
            p.parseComplex = function(t, b, e, pt, plugin, setRatio) {
                var kwd = this.keyword,
                    i, ba, ea, l, bi, ei;
                //if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like "inset" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)
                if (this.multi)
                    if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {
                        ba = b.replace(_commasOutsideParenExp, "|").split("|");
                        ea = e.replace(_commasOutsideParenExp, "|").split("|");
                    } else if (kwd) {
                    ba = [b];
                    ea = [e];
                }
                if (ea) {
                    l = (ea.length > ba.length) ? ea.length : ba.length;
                    for (i = 0; i < l; i++) {
                        b = ba[i] = ba[i] || this.dflt;
                        e = ea[i] = ea[i] || this.dflt;
                        if (kwd) {
                            bi = b.indexOf(kwd);
                            ei = e.indexOf(kwd);
                            if (bi !== ei) {
                                if (ei === -1) { //if the keyword isn't in the end value, remove it from the beginning one.
                                    ba[i] = ba[i].split(kwd).join("");
                                } else if (bi === -1) { //if the keyword isn't in the beginning, add it.
                                    ba[i] += " " + kwd;
                                }
                            }
                        }
                    }
                    b = ba.join(", ");
                    e = ea.join(", ");
                }
                return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);
            };

            /**
             * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:
             * this._firstPT = sp.parse(element, "5px 10px 20px rgb(2550,102,51)", "boxShadow", this);
             * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).
             * @param {!Object} t Target object whose property is being tweened
             * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).
             * @param {!string} p Property name
             * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.
             * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)
             * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.
             * @param {Object=} vars Original vars object that contains the data for parsing.
             * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.
             */
            p.parse = function(t, e, p, cssp, pt, plugin, vars) {
                return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);
            };

            /**
             * Registers a special property that should be intercepted from any "css" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:
             *  1) Target object whose property should be tweened (typically a DOM element)
             *  2) The end/destination value (could be a string, number, object, or whatever you want)
             *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)
             *
             * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric "ratio" parameter to your function that indicates the change factor (usually between 0 and 1). For example:
             *
             * CSSPlugin.registerSpecialProp("myCustomProp", function(target, value, tween) {
             *      var start = target.style.width;
             *      return function(ratio) {
             *              target.style.width = (start + value * ratio) + "px";
             *              console.log("set width to " + target.style.width);
             *          }
             * }, 0);
             *
             * Then, when I do this tween, it will trigger my special property:
             *
             * TweenLite.to(element, 1, {css:{myCustomProp:100}});
             *
             * In the example, of course, we're just changing the width, but you can do anything you want.
             *
             * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define "myCustomProp", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})
             * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a "change factor" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.
             * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.
             */
            CSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {
                _registerComplexSpecialProp(name, {
                    parser: function(t, e, p, cssp, pt, plugin, vars) {
                        var rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);
                        rv.plugin = plugin;
                        rv.setRatio = onInitTween(t, e, cssp._tween, p);
                        return rv;
                    },
                    priority: priority
                });
            };






            //transform-related methods and properties
            CSSPlugin.useSVGTransformAttr = true; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the "transform" attribute instead (users can override this).
            var _transformProps = ("scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent").split(","),
                _transformProp = _checkPropPrefix("transform"), //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.
                _transformPropCSS = _prefixCSS + "transform",
                _transformOriginProp = _checkPropPrefix("transformOrigin"),
                _supports3D = (_checkPropPrefix("perspective") !== null),
                Transform = _internals.Transform = function() {
                    this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;
                    this.force3D = (CSSPlugin.defaultForce3D === false || !_supports3D) ? false : CSSPlugin.defaultForce3D || "auto";
                },
                _SVGElement = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].SVGElement,
                _useSVGTransformAttr,
                //Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.

                _createSVG = function(type, container, attributes) {
                    var element = _doc.createElementNS("http://www.w3.org/2000/svg", type),
                        reg = /([a-z])([A-Z])/g,
                        p;
                    for (p in attributes) {
                        element.setAttributeNS(null, p.replace(reg, "$1-$2").toLowerCase(), attributes[p]);
                    }
                    container.appendChild(element);
                    return element;
                },
                _docElement = _doc.documentElement || {},
                _forceSVGTransformAttr = (function() {
                    //IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the "transform" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element
                    var force = _ieVers || (/Android/i.test(_agent) && !__WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].chrome),
                        svg, rect, width;
                    if (_doc.createElementNS && !force) { //IE8 and earlier doesn't support SVG anyway
                        svg = _createSVG("svg", _docElement);
                        rect = _createSVG("rect", svg, {
                            width: 100,
                            height: 50,
                            x: 100
                        });
                        width = rect.getBoundingClientRect().width;
                        rect.style[_transformOriginProp] = "50% 50%";
                        rect.style[_transformProp] = "scaleX(0.5)";
                        force = (width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D)); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).
                        _docElement.removeChild(svg);
                    }
                    return force;
                })(),
                _parseSVGOrigin = function(e, local, decoratee, absolute, smoothOrigin, skipRecord) {
                    var tm = e._gsTransform,
                        m = _getMatrix(e, true),
                        v, x, y, xOrigin, yOrigin, a, b, c, d, tx, ty, determinant, xOriginOld, yOriginOld;
                    if (tm) {
                        xOriginOld = tm.xOrigin; //record the original values before we alter them.
                        yOriginOld = tm.yOrigin;
                    }
                    if (!absolute || (v = absolute.split(" ")).length < 2) {
                        b = e.getBBox();
                        if (b.x === 0 && b.y === 0 && b.width + b.height === 0) { //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.
                            b = {
                                x: parseFloat(e.hasAttribute("x") ? e.getAttribute("x") : e.hasAttribute("cx") ? e.getAttribute("cx") : 0) || 0,
                                y: parseFloat(e.hasAttribute("y") ? e.getAttribute("y") : e.hasAttribute("cy") ? e.getAttribute("cy") : 0) || 0,
                                width: 0,
                                height: 0
                            };
                        }
                        local = _parsePosition(local).split(" ");
                        v = [(local[0].indexOf("%") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x,
                            (local[1].indexOf("%") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y
                        ];
                    }
                    decoratee.xOrigin = xOrigin = parseFloat(v[0]);
                    decoratee.yOrigin = yOrigin = parseFloat(v[1]);
                    if (absolute && m !== _identity2DMatrix) { //if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.
                        a = m[0];
                        b = m[1];
                        c = m[2];
                        d = m[3];
                        tx = m[4];
                        ty = m[5];
                        determinant = (a * d - b * c);
                        if (determinant) { //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
                            x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);
                            y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);
                            xOrigin = decoratee.xOrigin = v[0] = x;
                            yOrigin = decoratee.yOrigin = v[1] = y;
                        }
                    }
                    if (tm) { //avoid jump when transformOrigin is changed - adjust the x/y values accordingly
                        if (skipRecord) {
                            decoratee.xOffset = tm.xOffset;
                            decoratee.yOffset = tm.yOffset;
                            tm = decoratee;
                        }
                        if (smoothOrigin || (smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false)) {
                            x = xOrigin - xOriginOld;
                            y = yOrigin - yOriginOld;
                            //originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.
                            //tm.x -= x - (x * m[0] + y * m[2]);
                            //tm.y -= y - (x * m[1] + y * m[3]);
                            tm.xOffset += (x * m[0] + y * m[2]) - x;
                            tm.yOffset += (x * m[1] + y * m[3]) - y;
                        } else {
                            tm.xOffset = tm.yOffset = 0;
                        }
                    }
                    if (!skipRecord) {
                        e.setAttribute("data-svg-origin", v.join(" "));
                    }
                },
                _getBBoxHack = function(swapIfPossible) { //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
                    var svg = _createElement("svg", (this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns")) || "http://www.w3.org/2000/svg"),
                        oldParent = this.parentNode,
                        oldSibling = this.nextSibling,
                        oldCSS = this.style.cssText,
                        bbox;
                    _docElement.appendChild(svg);
                    svg.appendChild(this);
                    this.style.display = "block";
                    if (swapIfPossible) {
                        try {
                            bbox = this.getBBox();
                            this._originalGetBBox = this.getBBox;
                            this.getBBox = _getBBoxHack;
                        } catch (e) {}
                    } else if (this._originalGetBBox) {
                        bbox = this._originalGetBBox();
                    }
                    if (oldSibling) {
                        oldParent.insertBefore(this, oldSibling);
                    } else {
                        oldParent.appendChild(this);
                    }
                    _docElement.removeChild(svg);
                    this.style.cssText = oldCSS;
                    return bbox;
                },
                _getBBox = function(e) {
                    try {
                        return e.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
                    } catch (error) {
                        return _getBBoxHack.call(e, true);
                    }
                },
                _isSVG = function(e) { //reports if the element is an SVG on which getBBox() actually works
                    return !!(_SVGElement && e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
                },
                _identity2DMatrix = [1, 0, 0, 1, 0, 0],
                _getMatrix = function(e, force2D) {
                    var tm = e._gsTransform || new Transform(),
                        rnd = 100000,
                        style = e.style,
                        isDefault, s, m, n, dec, none;
                    if (_transformProp) {
                        s = _getStyle(e, _transformPropCSS, null, true);
                    } else if (e.currentStyle) {
                        //for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.
                        s = e.currentStyle.filter.match(_ieGetMatrixExp);
                        s = (s && s.length === 4) ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), (tm.x || 0), (tm.y || 0)].join(",") : "";
                    }
                    isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
                    if (_transformProp && ((none = (!_getComputedStyle(e) || _getComputedStyle(e).display === "none")) || !e.parentNode)) { //note: Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
                        if (none) { //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
                            n = style.display;
                            style.display = "block";
                        }
                        if (!e.parentNode) {
                            dec = 1; //flag
                            _docElement.appendChild(e);
                        }
                        s = _getStyle(e, _transformPropCSS, null, true);
                        isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
                        if (n) {
                            style.display = n;
                        } else if (none) {
                            _removeProp(style, "display");
                        }
                        if (dec) {
                            _docElement.removeChild(e);
                        }
                    }
                    if (tm.svg || (e.getCTM && _isSVG(e))) {
                        if (isDefault && (style[_transformProp] + "").indexOf("matrix") !== -1) { //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values
                            s = style[_transformProp];
                            isDefault = 0;
                        }
                        m = e.getAttribute("transform");
                        if (isDefault && m) {
                            m = e.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.
                            s = "matrix(" + m.a + "," + m.b + "," + m.c + "," + m.d + "," + m.e + "," + m.f + ")";
                            isDefault = 0;
                        }
                    }
                    if (isDefault) {
                        return _identity2DMatrix;
                    }
                    //split the matrix values out into an array (m for matrix)
                    m = (s || "").match(_numExp) || [];
                    i = m.length;
                    while (--i > -1) {
                        n = Number(m[i]);
                        m[i] = (dec = n - (n |= 0)) ? ((dec * rnd + (dec < 0 ? -0.5 : 0.5)) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).
                    }
                    return (force2D && m.length > 6) ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;
                },

                /**
                 * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.
                 * @param {!Object} t target element
                 * @param {Object=} cs computed style object (optional)
                 * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}
                 * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)
                 * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}
                 */
                _getTransform = _internals.getTransform = function(t, cs, rec, parse) {
                    if (t._gsTransform && rec && !parse) {
                        return t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.
                    }
                    var tm = rec ? t._gsTransform || new Transform() : new Transform(),
                        invX = (tm.scaleX < 0), //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.
                        min = 0.00002,
                        rnd = 100000,
                        zOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, "0 0 0").split(" ")[2]) || tm.zOrigin || 0 : 0,
                        defaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,
                        m, i, scaleX, scaleY, rotation, skewX;

                    tm.svg = !!(t.getCTM && _isSVG(t));
                    if (tm.svg) {
                        _parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, "50% 50%") + "", tm, t.getAttribute("data-svg-origin"));
                        _useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;
                    }
                    m = _getMatrix(t);
                    if (m !== _identity2DMatrix) {

                        if (m.length === 16) {
                            //we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)
                            var a11 = m[0],
                                a21 = m[1],
                                a31 = m[2],
                                a41 = m[3],
                                a12 = m[4],
                                a22 = m[5],
                                a32 = m[6],
                                a42 = m[7],
                                a13 = m[8],
                                a23 = m[9],
                                a33 = m[10],
                                a14 = m[12],
                                a24 = m[13],
                                a34 = m[14],
                                a43 = m[11],
                                angle = Math.atan2(a32, a33),
                                t1, t2, t3, t4, cos, sin;
                            //we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari
                            if (tm.zOrigin) {
                                a34 = -tm.zOrigin;
                                a14 = a13 * a34 - m[12];
                                a24 = a23 * a34 - m[13];
                                a34 = a33 * a34 + tm.zOrigin - m[14];
                            }
                            //note for possible future consolidation: rotationX: Math.atan2(a32, a33), rotationY: Math.atan2(-a31, Math.sqrt(a33 * a33 + a32 * a32)), rotation: Math.atan2(a21, a11), skew: Math.atan2(a12, a22). However, it doesn't seem to be quite as reliable as the full-on backwards rotation procedure.
                            tm.rotationX = angle * _RAD2DEG;
                            //rotationX
                            if (angle) {
                                cos = Math.cos(-angle);
                                sin = Math.sin(-angle);
                                t1 = a12 * cos + a13 * sin;
                                t2 = a22 * cos + a23 * sin;
                                t3 = a32 * cos + a33 * sin;
                                a13 = a12 * -sin + a13 * cos;
                                a23 = a22 * -sin + a23 * cos;
                                a33 = a32 * -sin + a33 * cos;
                                a43 = a42 * -sin + a43 * cos;
                                a12 = t1;
                                a22 = t2;
                                a32 = t3;
                            }
                            //rotationY
                            angle = Math.atan2(-a31, a33);
                            tm.rotationY = angle * _RAD2DEG;
                            if (angle) {
                                cos = Math.cos(-angle);
                                sin = Math.sin(-angle);
                                t1 = a11 * cos - a13 * sin;
                                t2 = a21 * cos - a23 * sin;
                                t3 = a31 * cos - a33 * sin;
                                a23 = a21 * sin + a23 * cos;
                                a33 = a31 * sin + a33 * cos;
                                a43 = a41 * sin + a43 * cos;
                                a11 = t1;
                                a21 = t2;
                                a31 = t3;
                            }
                            //rotationZ
                            angle = Math.atan2(a21, a11);
                            tm.rotation = angle * _RAD2DEG;
                            if (angle) {
                                cos = Math.cos(angle);
                                sin = Math.sin(angle);
                                t1 = a11 * cos + a21 * sin;
                                t2 = a12 * cos + a22 * sin;
                                t3 = a13 * cos + a23 * sin;
                                a21 = a21 * cos - a11 * sin;
                                a22 = a22 * cos - a12 * sin;
                                a23 = a23 * cos - a13 * sin;
                                a11 = t1;
                                a12 = t2;
                                a13 = t3;
                            }

                            if (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
                                tm.rotationX = tm.rotation = 0;
                                tm.rotationY = 180 - tm.rotationY;
                            }

                            //skewX
                            angle = Math.atan2(a12, a22);

                            //scales
                            tm.scaleX = ((Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31) * rnd + 0.5) | 0) / rnd;
                            tm.scaleY = ((Math.sqrt(a22 * a22 + a32 * a32) * rnd + 0.5) | 0) / rnd;
                            tm.scaleZ = ((Math.sqrt(a13 * a13 + a23 * a23 + a33 * a33) * rnd + 0.5) | 0) / rnd;
                            a11 /= tm.scaleX;
                            a12 /= tm.scaleY;
                            a21 /= tm.scaleX;
                            a22 /= tm.scaleY;
                            if (Math.abs(angle) > min) {
                                tm.skewX = angle * _RAD2DEG;
                                a12 = 0; //unskews
                                if (tm.skewType !== "simple") {
                                    tm.scaleY *= 1 / Math.cos(angle); //by default, we compensate the scale based on the skew so that the element maintains a similar proportion when skewed, so we have to alter the scaleY here accordingly to match the default (non-adjusted) skewing that CSS does (stretching more and more as it skews).
                                }

                            } else {
                                tm.skewX = 0;
                            }

                            /* //for testing purposes
                            var transform = "matrix3d(",
                            	comma = ",",
                            	zero = "0";
                            a13 /= tm.scaleZ;
                            a23 /= tm.scaleZ;
                            a31 /= tm.scaleX;
                            a32 /= tm.scaleY;
                            a33 /= tm.scaleZ;
                            transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);
                            transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);
                            transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);
                            transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;
                            transform += a14 + comma + a24 + comma + a34 + comma + (tm.perspective ? (1 + (-a34 / tm.perspective)) : 1) + ")";
                            console.log(transform);
                            document.querySelector(".test").style[_transformProp] = transform;
                            */

                            tm.perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;
                            tm.x = a14;
                            tm.y = a24;
                            tm.z = a34;
                            if (tm.svg) {
                                tm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);
                                tm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);
                            }

                        } else if ((!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || (!tm.rotationX && !tm.rotationY))) { //sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's "display" is "none", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.
                            var k = (m.length >= 6),
                                a = k ? m[0] : 1,
                                b = m[1] || 0,
                                c = m[2] || 0,
                                d = k ? m[3] : 1;
                            tm.x = m[4] || 0;
                            tm.y = m[5] || 0;
                            scaleX = Math.sqrt(a * a + b * b);
                            scaleY = Math.sqrt(d * d + c * c);
                            rotation = (a || b) ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
                            skewX = (c || d) ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;
                            tm.scaleX = scaleX;
                            tm.scaleY = scaleY;
                            tm.rotation = rotation;
                            tm.skewX = skewX;
                            if (_supports3D) {
                                tm.rotationX = tm.rotationY = tm.z = 0;
                                tm.perspective = defaultTransformPerspective;
                                tm.scaleZ = 1;
                            }
                            if (tm.svg) {
                                tm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);
                                tm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);
                            }
                        }
                        if (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {
                            if (invX) {
                                tm.scaleX *= -1;
                                tm.skewX += (tm.rotation <= 0) ? 180 : -180;
                                tm.rotation += (tm.rotation <= 0) ? 180 : -180;
                            } else {
                                tm.scaleY *= -1;
                                tm.skewX += (tm.skewX <= 0) ? 180 : -180;
                            }
                        }
                        tm.zOrigin = zOrigin;
                        //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.
                        for (i in tm) {
                            if (tm[i] < min)
                                if (tm[i] > -min) {
                                    tm[i] = 0;
                                }
                        }
                    }
                    //DEBUG: _log("parsed rotation of " + t.getAttribute("id")+": "+(tm.rotationX)+", "+(tm.rotationY)+", "+(tm.rotation)+", scale: "+tm.scaleX+", "+tm.scaleY+", "+tm.scaleZ+", position: "+tm.x+", "+tm.y+", "+tm.z+", perspective: "+tm.perspective+ ", origin: "+ tm.xOrigin+ ","+ tm.yOrigin);
                    if (rec) {
                        t._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)
                        if (tm.svg) { //if we're supposed to apply transforms to the SVG element's "transform" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.
                            if (_useSVGTransformAttr && t.style[_transformProp]) {
                                __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].delayedCall(0.001, function() { //if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).
                                    _removeProp(t.style, _transformProp);
                                });
                            } else if (!_useSVGTransformAttr && t.getAttribute("transform")) {
                                __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].delayedCall(0.001, function() {
                                    t.removeAttribute("transform");
                                });
                            }
                        }
                    }
                    return tm;
                },

                //for setting 2D transforms in IE6, IE7, and IE8 (must use a "filter" to emulate the behavior of modern day browser transforms)
                _setIETransformRatio = function(v) {
                    var t = this.data, //refers to the element's _gsTransform object
                        ang = -t.rotation * _DEG2RAD,
                        skew = ang + t.skewX * _DEG2RAD,
                        rnd = 100000,
                        a = ((Math.cos(ang) * t.scaleX * rnd) | 0) / rnd,
                        b = ((Math.sin(ang) * t.scaleX * rnd) | 0) / rnd,
                        c = ((Math.sin(skew) * -t.scaleY * rnd) | 0) / rnd,
                        d = ((Math.cos(skew) * t.scaleY * rnd) | 0) / rnd,
                        style = this.t.style,
                        cs = this.t.currentStyle,
                        filters, val;
                    if (!cs) {
                        return;
                    }
                    val = b; //just for swapping the variables an inverting them (reused "val" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)
                    b = -c;
                    c = -val;
                    filters = cs.filter;
                    style.filter = ""; //remove filters so that we can accurately measure offsetWidth/offsetHeight
                    var w = this.t.offsetWidth,
                        h = this.t.offsetHeight,
                        clip = (cs.position !== "absolute"),
                        m = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ", M12=" + b + ", M21=" + c + ", M22=" + d,
                        ox = t.x + (w * t.xPercent / 100),
                        oy = t.y + (h * t.yPercent / 100),
                        dx, dy;

                    //if transformOrigin is being used, adjust the offset x and y
                    if (t.ox != null) {
                        dx = ((t.oxp) ? w * t.ox * 0.01 : t.ox) - w / 2;
                        dy = ((t.oyp) ? h * t.oy * 0.01 : t.oy) - h / 2;
                        ox += dx - (dx * a + dy * b);
                        oy += dy - (dx * c + dy * d);
                    }

                    if (!clip) {
                        m += ", sizingMethod='auto expand')";
                    } else {
                        dx = (w / 2);
                        dy = (h / 2);
                        //translate to ensure that transformations occur around the correct origin (default is center).
                        m += ", Dx=" + (dx - (dx * a + dy * b) + ox) + ", Dy=" + (dy - (dx * c + dy * d) + oy) + ")";
                    }
                    if (filters.indexOf("DXImageTransform.Microsoft.Matrix(") !== -1) {
                        style.filter = filters.replace(_ieSetMatrixExp, m);
                    } else {
                        style.filter = m + " " + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.
                    }

                    //at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.
                    if (v === 0 || v === 1)
                        if (a === 1)
                            if (b === 0)
                                if (c === 0)
                                    if (d === 1)
                                        if (!clip || m.indexOf("Dx=0, Dy=0") !== -1)
                                            if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100)
                                                if (filters.indexOf("gradient(" && filters.indexOf("Alpha")) === -1) {
                                                    style.removeAttribute("filter");
                                                }

                    //we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).
                    if (!clip) {
                        var mult = (_ieVers < 8) ? 1 : -1, //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom
                            marg, prop, dif;
                        dx = t.ieOffsetX || 0;
                        dy = t.ieOffsetY || 0;
                        t.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);
                        t.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);
                        for (i = 0; i < 4; i++) {
                            prop = _margins[i];
                            marg = cs[prop];
                            //we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)
                            val = (marg.indexOf("px") !== -1) ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, "")) || 0;
                            if (val !== t[prop]) {
                                dif = (i < 2) ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.
                            } else {
                                dif = (i < 2) ? dx - t.ieOffsetX : dy - t.ieOffsetY;
                            }
                            style[prop] = (t[prop] = Math.round(val - dif * ((i === 0 || i === 2) ? 1 : mult))) + "px";
                        }
                    }
                },

                /* translates a super small decimal to a string WITHOUT scientific notation
                _safeDecimal = function(n) {
                	var s = (n < 0 ? -n : n) + "",
                		a = s.split("e-");
                	return (n < 0 ? "-0." : "0.") + new Array(parseInt(a[1], 10) || 0).join("0") + a[0].split(".").join("");
                },
                */

                _setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function(v) {
                    var t = this.data, //refers to the element's _gsTransform object
                        style = this.t.style,
                        angle = t.rotation,
                        rotationX = t.rotationX,
                        rotationY = t.rotationY,
                        sx = t.scaleX,
                        sy = t.scaleY,
                        sz = t.scaleZ,
                        x = t.x,
                        y = t.y,
                        z = t.z,
                        isSVG = t.svg,
                        perspective = t.perspective,
                        force3D = t.force3D,
                        skewY = t.skewY,
                        skewX = t.skewX,
                        t1, a11, a12, a13, a21, a22, a23, a31, a32, a33, a41, a42, a43,
                        zOrigin, min, cos, sin, t2, transform, comma, zero, skew, rnd;
                    if (skewY) { //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
                        skewX += skewY;
                        angle += skewY;
                    }

                    //check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)
                    if (((((v === 1 || v === 0) && force3D === "auto" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime)) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1) || (_useSVGTransformAttr && isSVG) || !_supports3D) { //on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.

                        //2D
                        if (angle || skewX || isSVG) {
                            angle *= _DEG2RAD;
                            skew = skewX * _DEG2RAD;
                            rnd = 100000;
                            a11 = Math.cos(angle) * sx;
                            a21 = Math.sin(angle) * sx;
                            a12 = Math.sin(angle - skew) * -sy;
                            a22 = Math.cos(angle - skew) * sy;
                            if (skew && t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
                                t1 = Math.tan(skew - skewY * _DEG2RAD);
                                t1 = Math.sqrt(1 + t1 * t1);
                                a12 *= t1;
                                a22 *= t1;
                                if (skewY) {
                                    t1 = Math.tan(skewY * _DEG2RAD);
                                    t1 = Math.sqrt(1 + t1 * t1);
                                    a11 *= t1;
                                    a21 *= t1;
                                }
                            }
                            if (isSVG) {
                                x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                                y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
                                if (_useSVGTransformAttr && (t.xPercent || t.yPercent)) { //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the matrix to simulate it.
                                    min = this.t.getBBox();
                                    x += t.xPercent * 0.01 * min.width;
                                    y += t.yPercent * 0.01 * min.height;
                                }
                                min = 0.000001;
                                if (x < min)
                                    if (x > -min) {
                                        x = 0;
                                    }
                                if (y < min)
                                    if (y > -min) {
                                        y = 0;
                                    }
                            }
                            transform = (((a11 * rnd) | 0) / rnd) + "," + (((a21 * rnd) | 0) / rnd) + "," + (((a12 * rnd) | 0) / rnd) + "," + (((a22 * rnd) | 0) / rnd) + "," + x + "," + y + ")";
                            if (isSVG && _useSVGTransformAttr) {
                                this.t.setAttribute("transform", "matrix(" + transform);
                            } else {
                                //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 5 decimal places.
                                style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + transform;
                            }
                        } else {
                            style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + sx + ",0,0," + sy + "," + x + "," + y + ")";
                        }
                        return;

                    }
                    if (_isFirefox) { //Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.
                        min = 0.0001;
                        if (sx < min && sx > -min) {
                            sx = sz = 0.00002;
                        }
                        if (sy < min && sy > -min) {
                            sy = sz = 0.00002;
                        }
                        if (perspective && !t.z && !t.rotationX && !t.rotationY) { //Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).
                            perspective = 0;
                        }
                    }
                    if (angle || skewX) {
                        angle *= _DEG2RAD;
                        cos = a11 = Math.cos(angle);
                        sin = a21 = Math.sin(angle);
                        if (skewX) {
                            angle -= skewX * _DEG2RAD;
                            cos = Math.cos(angle);
                            sin = Math.sin(angle);
                            if (t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
                                t1 = Math.tan((skewX - skewY) * _DEG2RAD);
                                t1 = Math.sqrt(1 + t1 * t1);
                                cos *= t1;
                                sin *= t1;
                                if (t.skewY) {
                                    t1 = Math.tan(skewY * _DEG2RAD);
                                    t1 = Math.sqrt(1 + t1 * t1);
                                    a11 *= t1;
                                    a21 *= t1;
                                }
                            }
                        }
                        a12 = -sin;
                        a22 = cos;

                    } else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) { //if we're only translating and/or 2D scaling, this is faster...
                        style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) translate3d(" : "translate3d(") + x + "px," + y + "px," + z + "px)" + ((sx !== 1 || sy !== 1) ? " scale(" + sx + "," + sy + ")" : "");
                        return;
                    } else {
                        a11 = a22 = 1;
                        a12 = a21 = 0;
                    }
                    // KEY  INDEX   AFFECTS a[row][column]
                    // a11  0       rotation, rotationY, scaleX
                    // a21  1       rotation, rotationY, scaleX
                    // a31  2       rotationY, scaleX
                    // a41  3       rotationY, scaleX
                    // a12  4       rotation, skewX, rotationX, scaleY
                    // a22  5       rotation, skewX, rotationX, scaleY
                    // a32  6       rotationX, scaleY
                    // a42  7       rotationX, scaleY
                    // a13  8       rotationY, rotationX, scaleZ
                    // a23  9       rotationY, rotationX, scaleZ
                    // a33  10      rotationY, rotationX, scaleZ
                    // a43  11      rotationY, rotationX, perspective, scaleZ
                    // a14  12      x, zOrigin, svgOrigin
                    // a24  13      y, zOrigin, svgOrigin
                    // a34  14      z, zOrigin
                    // a44  15
                    // rotation: Math.atan2(a21, a11)
                    // rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))
                    // rotationX: Math.atan2(a32, a33)
                    a33 = 1;
                    a13 = a23 = a31 = a32 = a41 = a42 = 0;
                    a43 = (perspective) ? -1 / perspective : 0;
                    zOrigin = t.zOrigin;
                    min = 0.000001; //threshold below which browsers use scientific notation which won't work.
                    comma = ",";
                    zero = "0";
                    angle = rotationY * _DEG2RAD;
                    if (angle) {
                        cos = Math.cos(angle);
                        sin = Math.sin(angle);
                        a31 = -sin;
                        a41 = a43 * -sin;
                        a13 = a11 * sin;
                        a23 = a21 * sin;
                        a33 = cos;
                        a43 *= cos;
                        a11 *= cos;
                        a21 *= cos;
                    }
                    angle = rotationX * _DEG2RAD;
                    if (angle) {
                        cos = Math.cos(angle);
                        sin = Math.sin(angle);
                        t1 = a12 * cos + a13 * sin;
                        t2 = a22 * cos + a23 * sin;
                        a32 = a33 * sin;
                        a42 = a43 * sin;
                        a13 = a12 * -sin + a13 * cos;
                        a23 = a22 * -sin + a23 * cos;
                        a33 = a33 * cos;
                        a43 = a43 * cos;
                        a12 = t1;
                        a22 = t2;
                    }
                    if (sz !== 1) {
                        a13 *= sz;
                        a23 *= sz;
                        a33 *= sz;
                        a43 *= sz;
                    }
                    if (sy !== 1) {
                        a12 *= sy;
                        a22 *= sy;
                        a32 *= sy;
                        a42 *= sy;
                    }
                    if (sx !== 1) {
                        a11 *= sx;
                        a21 *= sx;
                        a31 *= sx;
                        a41 *= sx;
                    }

                    if (zOrigin || isSVG) {
                        if (zOrigin) {
                            x += a13 * -zOrigin;
                            y += a23 * -zOrigin;
                            z += a33 * -zOrigin + zOrigin;
                        }
                        if (isSVG) { //due to bugs in some browsers, we need to manage the transform-origin of SVG manually
                            x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                            y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
                        }
                        if (x < min && x > -min) {
                            x = zero;
                        }
                        if (y < min && y > -min) {
                            y = zero;
                        }
                        if (z < min && z > -min) {
                            z = 0; //don't use string because we calculate perspective later and need the number.
                        }
                    }

                    //optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:
                    transform = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix3d(" : "matrix3d(");
                    transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);
                    transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);
                    if (rotationX || rotationY || sz !== 1) { //performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)
                        transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);
                        transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;
                    } else {
                        transform += ",0,0,0,0,1,0,";
                    }
                    transform += x + comma + y + comma + z + comma + (perspective ? (1 + (-z / perspective)) : 1) + ")";

                    style[_transformProp] = transform;
                };

            p = Transform.prototype;
            p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;
            p.scaleX = p.scaleY = p.scaleZ = 1;

            _registerComplexSpecialProp("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", {
                parser: function(t, e, parsingProp, cssp, pt, plugin, vars) {
                    if (cssp._lastParsedTransform === vars) {
                        return pt;
                    } //only need to parse the transform once, and only if the browser supports it.
                    cssp._lastParsedTransform = vars;
                    var scaleFunc = (vars.scale && typeof(vars.scale) === "function") ? vars.scale : 0, //if there's a function-based "scale" value, swap in the resulting numeric value temporarily. Otherwise, if it's called for both scaleX and scaleY independently, they may not match (like if the function uses Math.random()).
                        swapFunc;
                    if (typeof(vars[parsingProp]) === "function") { //whatever property triggers the initial parsing might be a function-based value in which case it already got called in parse(), thus we don't want to call it again in here. The most efficient way to avoid this is to temporarily swap the value directly into the vars object, and then after we do all our parsing in this function, we'll swap it back again.
                        swapFunc = vars[parsingProp];
                        vars[parsingProp] = e;
                    }
                    if (scaleFunc) {
                        vars.scale = scaleFunc(_index, t);
                    }
                    var originalGSTransform = t._gsTransform,
                        style = t.style,
                        min = 0.000001,
                        i = _transformProps.length,
                        v = vars,
                        endRotations = {},
                        transformOriginString = "transformOrigin",
                        m1 = _getTransform(t, _cs, true, v.parseTransform),
                        orig = v.transform && ((typeof(v.transform) === "function") ? v.transform(_index, _target) : v.transform),
                        m2, copy, has3D, hasChange, dr, x, y, matrix, p;
                    m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;
                    cssp._transform = m1;
                    if (orig && typeof(orig) === "string" && _transformProp) { //for values like transform:"rotate(60deg) scale(0.5, 0.8)"
                        copy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.
                        copy[_transformProp] = orig;
                        copy.display = "block"; //if display is "none", the browser often refuses to report the transform properties correctly.
                        copy.position = "absolute";
                        if (orig.indexOf("%") !== -1) { //%-based translations will fail unless we set the width/height to match the original target...
                            copy.width = _getStyle(t, "width");
                            copy.height = _getStyle(t, "height");
                        }
                        _doc.body.appendChild(_tempDiv);
                        m2 = _getTransform(_tempDiv, null, false);
                        if (m1.skewType === "simple") { //the default _getTransform() reports the skewX/scaleY as if skewType is "compensated", thus we need to adjust that here if skewType is "simple".
                            m2.scaleY *= Math.cos(m2.skewX * _DEG2RAD);
                        }
                        if (m1.svg) { //if it's an SVG element, x/y part of the matrix will be affected by whatever we use as the origin and the offsets, so compensate here...
                            x = m1.xOrigin;
                            y = m1.yOrigin;
                            m2.x -= m1.xOffset;
                            m2.y -= m1.yOffset;
                            if (v.transformOrigin || v.svgOrigin) { //if this tween is altering the origin, we must factor that in here. The actual work of recording the transformOrigin values and setting up the PropTween is done later (still inside this function) so we cannot leave the changes intact here - we only want to update the x/y accordingly.
                                orig = {};
                                _parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);
                                x = orig.xOrigin;
                                y = orig.yOrigin;
                                m2.x -= orig.xOffset - m1.xOffset;
                                m2.y -= orig.yOffset - m1.yOffset;
                            }
                            if (x || y) {
                                matrix = _getMatrix(_tempDiv, true);
                                m2.x -= x - (x * matrix[0] + y * matrix[2]);
                                m2.y -= y - (x * matrix[1] + y * matrix[3]);
                            }
                        }
                        _doc.body.removeChild(_tempDiv);
                        if (!m2.perspective) {
                            m2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
                        }
                        if (v.xPercent != null) {
                            m2.xPercent = _parseVal(v.xPercent, m1.xPercent);
                        }
                        if (v.yPercent != null) {
                            m2.yPercent = _parseVal(v.yPercent, m1.yPercent);
                        }
                    } else if (typeof(v) === "object") { //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)
                        m2 = {
                            scaleX: _parseVal((v.scaleX != null) ? v.scaleX : v.scale, m1.scaleX),
                            scaleY: _parseVal((v.scaleY != null) ? v.scaleY : v.scale, m1.scaleY),
                            scaleZ: _parseVal(v.scaleZ, m1.scaleZ),
                            x: _parseVal(v.x, m1.x),
                            y: _parseVal(v.y, m1.y),
                            z: _parseVal(v.z, m1.z),
                            xPercent: _parseVal(v.xPercent, m1.xPercent),
                            yPercent: _parseVal(v.yPercent, m1.yPercent),
                            perspective: _parseVal(v.transformPerspective, m1.perspective)
                        };
                        dr = v.directionalRotation;
                        if (dr != null) {
                            if (typeof(dr) === "object") {
                                for (copy in dr) {
                                    v[copy] = dr[copy];
                                }
                            } else {
                                v.rotation = dr;
                            }
                        }
                        if (typeof(v.x) === "string" && v.x.indexOf("%") !== -1) {
                            m2.x = 0;
                            m2.xPercent = _parseVal(v.x, m1.xPercent);
                        }
                        if (typeof(v.y) === "string" && v.y.indexOf("%") !== -1) {
                            m2.y = 0;
                            m2.yPercent = _parseVal(v.y, m1.yPercent);
                        }

                        m2.rotation = _parseAngle(("rotation" in v) ? v.rotation : ("shortRotation" in v) ? v.shortRotation + "_short" : ("rotationZ" in v) ? v.rotationZ : m1.rotation, m1.rotation, "rotation", endRotations);
                        if (_supports3D) {
                            m2.rotationX = _parseAngle(("rotationX" in v) ? v.rotationX : ("shortRotationX" in v) ? v.shortRotationX + "_short" : m1.rotationX || 0, m1.rotationX, "rotationX", endRotations);
                            m2.rotationY = _parseAngle(("rotationY" in v) ? v.rotationY : ("shortRotationY" in v) ? v.shortRotationY + "_short" : m1.rotationY || 0, m1.rotationY, "rotationY", endRotations);
                        }
                        m2.skewX = _parseAngle(v.skewX, m1.skewX);
                        m2.skewY = _parseAngle(v.skewY, m1.skewY);
                    }
                    if (_supports3D && v.force3D != null) {
                        m1.force3D = v.force3D;
                        hasChange = true;
                    }

                    has3D = (m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective);
                    if (!has3D && v.scale != null) {
                        m2.scaleZ = 1; //no need to tween scaleZ.
                    }

                    while (--i > -1) {
                        p = _transformProps[i];
                        orig = m2[p] - m1[p];
                        if (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {
                            hasChange = true;
                            pt = new CSSPropTween(m1, p, m1[p], orig, pt);
                            if (p in endRotations) {
                                pt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested
                            }
                            pt.xs0 = 0; //ensures the value stays numeric in setRatio()
                            pt.plugin = plugin;
                            cssp._overwriteProps.push(pt.n);
                        }
                    }

                    orig = v.transformOrigin;
                    if (m1.svg && (orig || v.svgOrigin)) {
                        x = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin
                        y = m1.yOffset;
                        _parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);
                        pt = _addNonTweeningNumericPT(m1, "xOrigin", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to("#wheel", 3, {rotation:180, transformOrigin:"50% 50%", delay:1}); TweenLite.fromTo("#wheel", 3, {scale:0.5, transformOrigin:"50% 50%"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.
                        pt = _addNonTweeningNumericPT(m1, "yOrigin", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);
                        if (x !== m1.xOffset || y !== m1.yOffset) {
                            pt = _addNonTweeningNumericPT(m1, "xOffset", (originalGSTransform ? x : m1.xOffset), m1.xOffset, pt, transformOriginString);
                            pt = _addNonTweeningNumericPT(m1, "yOffset", (originalGSTransform ? y : m1.yOffset), m1.yOffset, pt, transformOriginString);
                        }
                        orig = "0px 0px"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin
                    }
                    if (orig || (_supports3D && has3D && m1.zOrigin)) { //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a "transformOrigin" in this particular tween (maybe they did it via css directly).
                        if (_transformProp) {
                            hasChange = true;
                            p = _transformOriginProp;
                            orig = (orig || _getStyle(t, p, _cs, false, "50% 50%")) + ""; //cast as string to avoid errors
                            pt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);
                            pt.b = style[p];
                            pt.plugin = plugin;
                            if (_supports3D) {
                                copy = m1.zOrigin;
                                orig = orig.split(" ");
                                m1.zOrigin = ((orig.length > 2 && !(copy !== 0 && orig[2] === "0px")) ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.
                                pt.xs0 = pt.e = orig[0] + " " + (orig[1] || "50%") + " 0px"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!
                                pt = new CSSPropTween(m1, "zOrigin", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)
                                pt.b = copy;
                                pt.xs0 = pt.e = m1.zOrigin;
                            } else {
                                pt.xs0 = pt.e = orig;
                            }

                            //for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).
                        } else {
                            _parsePosition(orig + "", m1);
                        }
                    }
                    if (hasChange) {
                        cssp._transformType = (!(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3)) ? 3 : 2; //quicker than calling cssp._enableTransforms();
                    }
                    if (swapFunc) {
                        vars[parsingProp] = swapFunc;
                    }
                    if (scaleFunc) {
                        vars.scale = scaleFunc;
                    }
                    return pt;
                },
                prefix: true
            });

            _registerComplexSpecialProp("boxShadow", {
                defaultValue: "0px 0px 0px 0px #999",
                prefix: true,
                color: true,
                multi: true,
                keyword: "inset"
            });

            _registerComplexSpecialProp("borderRadius", {
                defaultValue: "0px",
                parser: function(t, e, p, cssp, pt, plugin) {
                    e = this.format(e);
                    var props = ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"],
                        style = t.style,
                        ea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;
                    w = parseFloat(t.offsetWidth);
                    h = parseFloat(t.offsetHeight);
                    ea1 = e.split(" ");
                    for (i = 0; i < props.length; i++) { //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!
                        if (this.p.indexOf("border")) { //older browsers used a prefix
                            props[i] = _checkPropPrefix(props[i]);
                        }
                        bs = bs2 = _getStyle(t, props[i], _cs, false, "0px");
                        if (bs.indexOf(" ") !== -1) {
                            bs2 = bs.split(" ");
                            bs = bs2[0];
                            bs2 = bs2[1];
                        }
                        es = es2 = ea1[i];
                        bn = parseFloat(bs);
                        bsfx = bs.substr((bn + "").length);
                        rel = (es.charAt(1) === "=");
                        if (rel) {
                            en = parseInt(es.charAt(0) + "1", 10);
                            es = es.substr(2);
                            en *= parseFloat(es);
                            esfx = es.substr((en + "").length - (en < 0 ? 1 : 0)) || "";
                        } else {
                            en = parseFloat(es);
                            esfx = es.substr((en + "").length);
                        }
                        if (esfx === "") {
                            esfx = _suffixMap[p] || bsfx;
                        }
                        if (esfx !== bsfx) {
                            hn = _convertToPixels(t, "borderLeft", bn, bsfx); //horizontal number (we use a bogus "borderLeft" property just because the _convertToPixels() method searches for the keywords "Left", "Right", "Top", and "Bottom" to determine of it's a horizontal or vertical property, and we need "border" in the name so that it knows it should measure relative to the element itself, not its parent.
                            vn = _convertToPixels(t, "borderTop", bn, bsfx); //vertical number
                            if (esfx === "%") {
                                bs = (hn / w * 100) + "%";
                                bs2 = (vn / h * 100) + "%";
                            } else if (esfx === "em") {
                                em = _convertToPixels(t, "borderLeft", 1, "em");
                                bs = (hn / em) + "em";
                                bs2 = (vn / em) + "em";
                            } else {
                                bs = hn + "px";
                                bs2 = vn + "px";
                            }
                            if (rel) {
                                es = (parseFloat(bs) + en) + esfx;
                                es2 = (parseFloat(bs2) + en) + esfx;
                            }
                        }
                        pt = _parseComplex(style, props[i], bs + " " + bs2, es + " " + es2, false, "0px", pt);
                    }
                    return pt;
                },
                prefix: true,
                formatter: _getFormatter("0px 0px 0px 0px", false, true)
            });
            _registerComplexSpecialProp("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius", {
                defaultValue: "0px",
                parser: function(t, e, p, cssp, pt, plugin) {
                    return _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, "0px 0px")), this.format(e), false, "0px", pt);
                },
                prefix: true,
                formatter: _getFormatter("0px 0px", false, true)
            });
            _registerComplexSpecialProp("backgroundPosition", {
                defaultValue: "0 0",
                parser: function(t, e, p, cssp, pt, plugin) {
                    var bp = "background-position",
                        cs = (_cs || _getComputedStyle(t, null)),
                        bs = this.format(((cs) ? _ieVers ? cs.getPropertyValue(bp + "-x") + " " + cs.getPropertyValue(bp + "-y") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"), //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase
                        es = this.format(e),
                        ba, ea, i, pct, overlap, src;
                    if ((bs.indexOf("%") !== -1) !== (es.indexOf("%") !== -1) && es.split(",").length < 2) {
                        src = _getStyle(t, "backgroundImage").replace(_urlExp, "");
                        if (src && src !== "none") {
                            ba = bs.split(" ");
                            ea = es.split(" ");
                            _tempImg.setAttribute("src", src); //set the temp IMG's src to the background-image so that we can measure its width/height
                            i = 2;
                            while (--i > -1) {
                                bs = ba[i];
                                pct = (bs.indexOf("%") !== -1);
                                if (pct !== (ea[i].indexOf("%") !== -1)) {
                                    overlap = (i === 0) ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;
                                    ba[i] = pct ? (parseFloat(bs) / 100 * overlap) + "px" : (parseFloat(bs) / overlap * 100) + "%";
                                }
                            }
                            bs = ba.join(" ");
                        }
                    }
                    return this.parseComplex(t.style, bs, es, pt, plugin);
                },
                formatter: _parsePosition
            });
            _registerComplexSpecialProp("backgroundSize", {
                defaultValue: "0 0",
                formatter: function(v) {
                    v += ""; //ensure it's a string
                    return (v.substr(0, 2) === "co") ? v : _parsePosition(v.indexOf(" ") === -1 ? v + " " + v : v); //if set to something like "100% 100%", Safari typically reports the computed style as just "100%" (no 2nd value), but we should ensure that there are two values, so copy the first one. Otherwise, it'd be interpreted as "100% 0" (wrong). Also remember that it could be "cover" or "contain" which we can't tween but should be able to set.
                }
            });
            _registerComplexSpecialProp("perspective", {
                defaultValue: "0px",
                prefix: true
            });
            _registerComplexSpecialProp("perspectiveOrigin", {
                defaultValue: "50% 50%",
                prefix: true
            });
            _registerComplexSpecialProp("transformStyle", {
                prefix: true
            });
            _registerComplexSpecialProp("backfaceVisibility", {
                prefix: true
            });
            _registerComplexSpecialProp("userSelect", {
                prefix: true
            });
            _registerComplexSpecialProp("margin", {
                parser: _getEdgeParser("marginTop,marginRight,marginBottom,marginLeft")
            });
            _registerComplexSpecialProp("padding", {
                parser: _getEdgeParser("paddingTop,paddingRight,paddingBottom,paddingLeft")
            });
            _registerComplexSpecialProp("clip", {
                defaultValue: "rect(0px,0px,0px,0px)",
                parser: function(t, e, p, cssp, pt, plugin) {
                    var b, cs, delim;
                    if (_ieVers < 9) { //IE8 and earlier don't report a "clip" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.
                        cs = t.currentStyle;
                        delim = _ieVers < 8 ? " " : ",";
                        b = "rect(" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + ")";
                        e = this.format(e).split(",").join(delim);
                    } else {
                        b = this.format(_getStyle(t, this.p, _cs, false, this.dflt));
                        e = this.format(e);
                    }
                    return this.parseComplex(t.style, b, e, pt, plugin);
                }
            });
            _registerComplexSpecialProp("textShadow", {
                defaultValue: "0px 0px 0px #999",
                color: true,
                multi: true
            });
            _registerComplexSpecialProp("autoRound,strictUnits", {
                parser: function(t, e, p, cssp, pt) {
                    return pt;
                }
            }); //just so that we can ignore these properties (not tween them)
            _registerComplexSpecialProp("border", {
                defaultValue: "0px solid #000",
                parser: function(t, e, p, cssp, pt, plugin) {
                    var bw = _getStyle(t, "borderTopWidth", _cs, false, "0px"),
                        end = this.format(e).split(" "),
                        esfx = end[0].replace(_suffixExp, "");
                    if (esfx !== "px") { //if we're animating to a non-px value, we need to convert the beginning width to that unit.
                        bw = (parseFloat(bw) / _convertToPixels(t, "borderTopWidth", 1, esfx)) + esfx;
                    }
                    return this.parseComplex(t.style, this.format(bw + " " + _getStyle(t, "borderTopStyle", _cs, false, "solid") + " " + _getStyle(t, "borderTopColor", _cs, false, "#000")), end.join(" "), pt, plugin);
                },
                color: true,
                formatter: function(v) {
                    var a = v.split(" ");
                    return a[0] + " " + (a[1] || "solid") + " " + (v.match(_colorExp) || ["#000"])[0];
                }
            });
            _registerComplexSpecialProp("borderWidth", {
                parser: _getEdgeParser("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")
            }); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).
            _registerComplexSpecialProp("float,cssFloat,styleFloat", {
                parser: function(t, e, p, cssp, pt, plugin) {
                    var s = t.style,
                        prop = ("cssFloat" in s) ? "cssFloat" : "styleFloat";
                    return new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);
                }
            });

            //opacity-related
            var _setIEOpacityRatio = function(v) {
                var t = this.t, //refers to the element's style property
                    filters = t.filter || _getStyle(this.data, "filter") || "",
                    val = (this.s + this.c * v) | 0,
                    skip;
                if (val === 100) { //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.
                    if (filters.indexOf("atrix(") === -1 && filters.indexOf("radient(") === -1 && filters.indexOf("oader(") === -1) {
                        t.removeAttribute("filter");
                        skip = (!_getStyle(this.data, "filter")); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.
                    } else {
                        t.filter = filters.replace(_alphaFilterExp, "");
                        skip = true;
                    }
                }
                if (!skip) {
                    if (this.xn1) {
                        t.filter = filters = filters || ("alpha(opacity=" + val + ")"); //works around bug in IE7/8 that prevents changes to "visibility" from being applied properly if the filter is changed to a different alpha on the same frame.
                    }
                    if (filters.indexOf("pacity") === -1) { //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the "O" to avoid case-sensitivity issues
                        if (val !== 0 || !this.xn1) { //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as "visibility" changes (this.xn1 is 1 if this tween is an "autoAlpha" tween)
                            t.filter = filters + " alpha(opacity=" + val + ")"; //we round the value because otherwise, bugs in IE7/8 can prevent "visibility" changes from being applied properly.
                        }
                    } else {
                        t.filter = filters.replace(_opacityExp, "opacity=" + val);
                    }
                }
            };
            _registerComplexSpecialProp("opacity,alpha,autoAlpha", {
                defaultValue: "1",
                parser: function(t, e, p, cssp, pt, plugin) {
                    var b = parseFloat(_getStyle(t, "opacity", _cs, false, "1")),
                        style = t.style,
                        isAutoAlpha = (p === "autoAlpha");
                    if (typeof(e) === "string" && e.charAt(1) === "=") {
                        e = ((e.charAt(0) === "-") ? -1 : 1) * parseFloat(e.substr(2)) + b;
                    }
                    if (isAutoAlpha && b === 1 && _getStyle(t, "visibility", _cs) === "hidden" && e !== 0) { //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
                        b = 0;
                    }
                    if (_supportsOpacity) {
                        pt = new CSSPropTween(style, "opacity", b, e - b, pt);
                    } else {
                        pt = new CSSPropTween(style, "opacity", b * 100, (e - b) * 100, pt);
                        pt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to "visibility" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.
                        style.zoom = 1; //helps correct an IE issue.
                        pt.type = 2;
                        pt.b = "alpha(opacity=" + pt.s + ")";
                        pt.e = "alpha(opacity=" + (pt.s + pt.c) + ")";
                        pt.data = t;
                        pt.plugin = plugin;
                        pt.setRatio = _setIEOpacityRatio;
                    }
                    if (isAutoAlpha) { //we have to create the "visibility" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier
                        pt = new CSSPropTween(style, "visibility", 0, 0, pt, -1, null, false, 0, ((b !== 0) ? "inherit" : "hidden"), ((e === 0) ? "hidden" : "inherit"));
                        pt.xs0 = "inherit";
                        cssp._overwriteProps.push(pt.n);
                        cssp._overwriteProps.push(p);
                    }
                    return pt;
                }
            });


            var _removeProp = function(s, p) {
                    if (p) {
                        if (s.removeProperty) {
                            if (p.substr(0, 2) === "ms" || p.substr(0, 6) === "webkit") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
                                p = "-" + p;
                            }
                            s.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
                        } else { //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
                            s.removeAttribute(p);
                        }
                    }
                },
                _setClassNameRatio = function(v) {
                    this.t._gsClassPT = this;
                    if (v === 1 || v === 0) {
                        this.t.setAttribute("class", (v === 0) ? this.b : this.e);
                        var mpt = this.data, //first MiniPropTween
                            s = this.t.style;
                        while (mpt) {
                            if (!mpt.v) {
                                _removeProp(s, mpt.p);
                            } else {
                                s[mpt.p] = mpt.v;
                            }
                            mpt = mpt._next;
                        }
                        if (v === 1 && this.t._gsClassPT === this) {
                            this.t._gsClassPT = null;
                        }
                    } else if (this.t.getAttribute("class") !== this.e) {
                        this.t.setAttribute("class", this.e);
                    }
                };
            _registerComplexSpecialProp("className", {
                parser: function(t, e, p, cssp, pt, plugin, vars) {
                    var b = t.getAttribute("class") || "", //don't use t.className because it doesn't work consistently on SVG elements; getAttribute("class") and setAttribute("class", value") is more reliable.
                        cssText = t.style.cssText,
                        difData, bs, cnpt, cnptLookup, mpt;
                    pt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);
                    pt.setRatio = _setClassNameRatio;
                    pt.pr = -11;
                    _hasPriority = true;
                    pt.b = b;
                    bs = _getAllStyles(t, _cs);
                    //if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)
                    cnpt = t._gsClassPT;
                    if (cnpt) {
                        cnptLookup = {};
                        mpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.
                        while (mpt) {
                            cnptLookup[mpt.p] = 1;
                            mpt = mpt._next;
                        }
                        cnpt.setRatio(1);
                    }
                    t._gsClassPT = pt;
                    pt.e = (e.charAt(1) !== "=") ? e : b.replace(new RegExp("(?:\\s|^)" + e.substr(2) + "(?![\\w-])"), "") + ((e.charAt(0) === "+") ? " " + e.substr(2) : "");
                    t.setAttribute("class", pt.e);
                    difData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);
                    t.setAttribute("class", b);
                    pt.data = difData.firstMPT;
                    t.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
                    pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if "className" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)
                    return pt;
                }
            });


            var _setClearPropsRatio = function(v) {
                if (v === 1 || v === 0)
                    if (this.data._totalTime === this.data._totalDuration && this.data.data !== "isFromStart") { //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).
                        var s = this.t.style,
                            transformParse = _specialProps.transform.parse,
                            a, p, i, clearTransform, transform;
                        if (this.e === "all") {
                            s.cssText = "";
                            clearTransform = true;
                        } else {
                            a = this.e.split(" ").join("").split(",");
                            i = a.length;
                            while (--i > -1) {
                                p = a[i];
                                if (_specialProps[p]) {
                                    if (_specialProps[p].parse === transformParse) {
                                        clearTransform = true;
                                    } else {
                                        p = (p === "transformOrigin") ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like "scaleX" might be "-webkit-transform" or "boxShadow" might be "-moz-box-shadow"
                                    }
                                }
                                _removeProp(s, p);
                            }
                        }
                        if (clearTransform) {
                            _removeProp(s, _transformProp);
                            transform = this.t._gsTransform;
                            if (transform) {
                                if (transform.svg) {
                                    this.t.removeAttribute("data-svg-origin");
                                    this.t.removeAttribute("transform");
                                }
                                delete this.t._gsTransform;
                            }
                        }

                    }
            };
            _registerComplexSpecialProp("clearProps", {
                parser: function(t, e, p, cssp, pt) {
                    pt = new CSSPropTween(t, p, 0, 0, pt, 2);
                    pt.setRatio = _setClearPropsRatio;
                    pt.e = e;
                    pt.pr = -10;
                    pt.data = cssp._tween;
                    _hasPriority = true;
                    return pt;
                }
            });

            p = "bezier,throwProps,physicsProps,physics2D".split(",");
            i = p.length;
            while (i--) {
                _registerPluginProp(p[i]);
            }








            p = CSSPlugin.prototype;
            p._firstPT = p._lastParsedTransform = p._transform = null;

            //gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.
            p._onInitTween = function(target, vars, tween, index) {
                if (!target.nodeType) { //css is only for dom elements
                    return false;
                }
                this._target = _target = target;
                this._tween = tween;
                this._vars = vars;
                _index = index;
                _autoRound = vars.autoRound;
                _hasPriority = false;
                _suffixMap = vars.suffixMap || CSSPlugin.suffixMap;
                _cs = _getComputedStyle(target, "");
                _overwriteProps = this._overwriteProps;
                var style = target.style,
                    v, pt, pt2, first, last, next, zIndex, tpt, threeD;
                if (_reqSafariFix)
                    if (style.zIndex === "") {
                        v = _getStyle(target, "zIndex", _cs);
                        if (v === "auto" || v === "") {
                            //corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using "left" or "top" instead of transforms like "x" and "y") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.
                            this._addLazySet(style, "zIndex", 0);
                        }
                    }

                if (typeof(vars) === "string") {
                    first = style.cssText;
                    v = _getAllStyles(target, _cs);
                    style.cssText = first + ";" + vars;
                    v = _cssDif(target, v, _getAllStyles(target)).difs;
                    if (!_supportsOpacity && _opacityValExp.test(vars)) {
                        v.opacity = parseFloat(RegExp.$1);
                    }
                    vars = v;
                    style.cssText = first;
                }

                if (vars.className) { //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:"myClass", scale:0.5, left:20} would work.
                    this._firstPT = pt = _specialProps.className.parse(target, vars.className, "className", this, null, null, vars);
                } else {
                    this._firstPT = pt = this.parse(target, vars, null);
                }

                if (this._transformType) {
                    threeD = (this._transformType === 3);
                    if (!_transformProp) {
                        style.zoom = 1; //helps correct an IE issue.
                    } else if (_isSafari) {
                        _reqSafariFix = true;
                        //if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).
                        if (style.zIndex === "") {
                            zIndex = _getStyle(target, "zIndex", _cs);
                            if (zIndex === "auto" || zIndex === "") {
                                this._addLazySet(style, "zIndex", 0);
                            }
                        }
                        //Setting WebkitBackfaceVisibility corrects 3 bugs:
                        // 1) [non-Android] Safari skips rendering changes to "top" and "left" that are made on the same frame/render as a transform update.
                        // 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly.
                        // 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.
                        //Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.
                        if (_isSafariLT6) {
                            this._addLazySet(style, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (threeD ? "visible" : "hidden"));
                        }
                    }
                    pt2 = pt;
                    while (pt2 && pt2._next) {
                        pt2 = pt2._next;
                    }
                    tpt = new CSSPropTween(target, "transform", 0, 0, null, 2);
                    this._linkCSSP(tpt, null, pt2);
                    tpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;
                    tpt.data = this._transform || _getTransform(target, _cs, true);
                    tpt.tween = tween;
                    tpt.pr = -1; //ensures that the transforms get applied after the components are updated.
                    _overwriteProps.pop(); //we don't want to force the overwrite of all "transform" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.
                }

                if (_hasPriority) {
                    //reorders the linked list in order of pr (priority)
                    while (pt) {
                        next = pt._next;
                        pt2 = first;
                        while (pt2 && pt2.pr > pt.pr) {
                            pt2 = pt2._next;
                        }
                        if ((pt._prev = pt2 ? pt2._prev : last)) {
                            pt._prev._next = pt;
                        } else {
                            first = pt;
                        }
                        if ((pt._next = pt2)) {
                            pt2._prev = pt;
                        } else {
                            last = pt;
                        }
                        pt = next;
                    }
                    this._firstPT = first;
                }
                return true;
            };


            p.parse = function(target, vars, pt, plugin) {
                var style = target.style,
                    p, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;
                for (p in vars) {
                    es = vars[p]; //ending value string
                    if (typeof(es) === "function") {
                        es = es(_index, _target);
                    }
                    sp = _specialProps[p]; //SpecialProp lookup.
                    if (sp) {
                        pt = sp.parse(target, es, p, this, pt, plugin, vars);
                    } else if (p.substr(0, 2) === "--") { //for tweening CSS variables (which always start with "--"). To maximize performance and simplicity, we bypass CSSPlugin altogether and just add a normal property tween to the tween instance itself.
                        this._tween._propLookup[p] = this._addTween.call(this._tween, target.style, "setProperty", _getComputedStyle(target).getPropertyValue(p) + "", es + "", p, false, p);
                        continue;
                    } else {
                        bs = _getStyle(target, p, _cs) + "";
                        isStr = (typeof(es) === "string");
                        if (p === "color" || p === "fill" || p === "stroke" || p.indexOf("Color") !== -1 || (isStr && _rgbhslExp.test(es))) { //Opera uses background: to define color sometimes in addition to backgroundColor:
                            if (!isStr) {
                                es = _parseColor(es);
                                es = ((es.length > 3) ? "rgba(" : "rgb(") + es.join(",") + ")";
                            }
                            pt = _parseComplex(style, p, bs, es, true, "transparent", pt, 0, plugin);

                        } else if (isStr && _complexExp.test(es)) {
                            pt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);

                        } else {
                            bn = parseFloat(bs);
                            bsfx = (bn || bn === 0) ? bs.substr((bn + "").length) : ""; //remember, bs could be non-numeric like "normal" for fontWeight, so we should default to a blank suffix in that case.

                            if (bs === "" || bs === "auto") {
                                if (p === "width" || p === "height") {
                                    bn = _getDimension(target, p, _cs);
                                    bsfx = "px";
                                } else if (p === "left" || p === "top") {
                                    bn = _calculateOffset(target, p, _cs);
                                    bsfx = "px";
                                } else {
                                    bn = (p !== "opacity") ? 0 : 1;
                                    bsfx = "";
                                }
                            }

                            rel = (isStr && es.charAt(1) === "=");
                            if (rel) {
                                en = parseInt(es.charAt(0) + "1", 10);
                                es = es.substr(2);
                                en *= parseFloat(es);
                                esfx = es.replace(_suffixExp, "");
                            } else {
                                en = parseFloat(es);
                                esfx = isStr ? es.replace(_suffixExp, "") : "";
                            }

                            if (esfx === "") {
                                esfx = (p in _suffixMap) ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.
                            }

                            es = (en || en === 0) ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.
                            //if the beginning/ending suffixes don't match, normalize them...
                            if (bsfx !== esfx)
                                if (esfx !== "" || p === "lineHeight")
                                    if (en || en === 0)
                                        if (bn) { //note: if the beginning value (bn) is 0, we don't need to convert units!
                                            bn = _convertToPixels(target, p, bn, bsfx);
                                            if (esfx === "%") {
                                                bn /= _convertToPixels(target, p, 100, "%") / 100;
                                                if (vars.strictUnits !== true) { //some browsers report only "px" values instead of allowing "%" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.
                                                    bs = bn + "%";
                                                }

                                            } else if (esfx === "em" || esfx === "rem" || esfx === "vw" || esfx === "vh") {
                                                bn /= _convertToPixels(target, p, 1, esfx);

                                                //otherwise convert to pixels.
                                            } else if (esfx !== "px") {
                                                en = _convertToPixels(target, p, en, esfx);
                                                esfx = "px"; //we don't use bsfx after this, so we don't need to set it to px too.
                                            }
                                            if (rel)
                                                if (en || en === 0) {
                                                    es = (en + bn) + esfx; //the changes we made affect relative calculations, so adjust the end value here.
                                                }
                                        }

                            if (rel) {
                                en += bn;
                            }

                            if ((bn || bn === 0) && (en || en === 0)) { //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.
                                pt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, (_autoRound !== false && (esfx === "px" || p === "zIndex")), 0, bs, es);
                                pt.xs0 = esfx;
                                //DEBUG: _log("tween "+p+" from "+pt.b+" ("+bn+esfx+") to "+pt.e+" with suffix: "+pt.xs0);
                            } else if (style[p] === undefined || !es && (es + "" === "NaN" || es == null)) {
                                _log("invalid " + p + " tween value: " + vars[p]);
                            } else {
                                pt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);
                                pt.xs0 = (es === "none" && (p === "display" || p.indexOf("Style") !== -1)) ? bs : es; //intermediate value should typically be set immediately (end value) except for "display" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.
                                //DEBUG: _log("non-tweening value "+p+": "+pt.xs0);
                            }
                        }
                    }
                    if (plugin)
                        if (pt && !pt.plugin) {
                            pt.plugin = plugin;
                        }
                }
                return pt;
            };


            //gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.
            p.setRatio = function(v) {
                var pt = this._firstPT,
                    min = 0.000001,
                    val, str, i;
                //at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like "position" or "float" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).
                if (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {
                    while (pt) {
                        if (pt.type !== 2) {
                            if (pt.r && pt.type !== -1) {
                                val = pt.r(pt.s + pt.c);
                                if (!pt.type) {
                                    pt.t[pt.p] = val + pt.xs0;
                                } else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
                                    i = pt.l;
                                    str = pt.xs0 + val + pt.xs1;
                                    for (i = 1; i < pt.l; i++) {
                                        str += pt["xn" + i] + pt["xs" + (i + 1)];
                                    }
                                    pt.t[pt.p] = str;
                                }
                            } else {
                                pt.t[pt.p] = pt.e;
                            }
                        } else {
                            pt.setRatio(v);
                        }
                        pt = pt._next;
                    }

                } else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {
                    while (pt) {
                        val = pt.c * v + pt.s;
                        if (pt.r) {
                            val = pt.r(val);
                        } else if (val < min)
                            if (val > -min) {
                                val = 0;
                            }
                        if (!pt.type) {
                            pt.t[pt.p] = val + pt.xs0;
                        } else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
                            i = pt.l;
                            if (i === 2) {
                                pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;
                            } else if (i === 3) {
                                pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;
                            } else if (i === 4) {
                                pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;
                            } else if (i === 5) {
                                pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;
                            } else {
                                str = pt.xs0 + val + pt.xs1;
                                for (i = 1; i < pt.l; i++) {
                                    str += pt["xn" + i] + pt["xs" + (i + 1)];
                                }
                                pt.t[pt.p] = str;
                            }

                        } else if (pt.type === -1) { //non-tweening value
                            pt.t[pt.p] = pt.xs0;

                        } else if (pt.setRatio) { //custom setRatio() for things like SpecialProps, external plugins, etc.
                            pt.setRatio(v);
                        }
                        pt = pt._next;
                    }

                    //if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).
                } else {
                    while (pt) {
                        if (pt.type !== 2) {
                            pt.t[pt.p] = pt.b;
                        } else {
                            pt.setRatio(v);
                        }
                        pt = pt._next;
                    }
                }
            };

            /**
             * @private
             * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.
             * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked
             * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call
             * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin
             * doesn't have any transform-related properties of its own. You can call this method as many times as you
             * want and it won't create duplicate CSSPropTweens.
             *
             * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)
             */
            p._enableTransforms = function(threeD) {
                this._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.
                this._transformType = (!(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3)) ? 3 : 2;
            };

            var lazySet = function(v) {
                this.t[this.p] = this.e;
                this.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.
            };
            /** @private Gives us a way to set a value on the first render (and only the first render). **/
            p._addLazySet = function(t, p, v) {
                var pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);
                pt.e = v;
                pt.setRatio = lazySet;
                pt.data = this;
            };

            /** @private **/
            p._linkCSSP = function(pt, next, prev, remove) {
                if (pt) {
                    if (next) {
                        next._prev = pt;
                    }
                    if (pt._next) {
                        pt._next._prev = pt._prev;
                    }
                    if (pt._prev) {
                        pt._prev._next = pt._next;
                    } else if (this._firstPT === pt) {
                        this._firstPT = pt._next;
                        remove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)
                    }
                    if (prev) {
                        prev._next = pt;
                    } else if (!remove && this._firstPT === null) {
                        this._firstPT = pt;
                    }
                    pt._next = next;
                    pt._prev = prev;
                }
                return pt;
            };

            p._mod = function(lookup) {
                var pt = this._firstPT;
                while (pt) {
                    if (typeof(lookup[pt.p]) === "function") { //only gets called by RoundPropsPlugin (ModifyPlugin manages all the rendering internally for CSSPlugin properties that need modification). Remember, we handle rounding a bit differently in this plugin for performance reasons, leveraging "r" as an indicator that the value should be rounded internally.
                        pt.r = lookup[pt.p];
                    }
                    pt = pt._next;
                }
            };

            //we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the "visibility" property.
            p._kill = function(lookup) {
                var copy = lookup,
                    pt, p, xfirst;
                if (lookup.autoAlpha || lookup.alpha) {
                    copy = {};
                    for (p in lookup) { //copy the lookup so that we're not changing the original which may be passed elsewhere.
                        copy[p] = lookup[p];
                    }
                    copy.opacity = 1;
                    if (copy.autoAlpha) {
                        copy.visibility = 1;
                    }
                }
                if (lookup.className && (pt = this._classNamePT)) { //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's "xfirst".
                    xfirst = pt.xfirst;
                    if (xfirst && xfirst._prev) {
                        this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev
                    } else if (xfirst === this._firstPT) {
                        this._firstPT = pt._next;
                    }
                    if (pt._next) {
                        this._linkCSSP(pt._next, pt._next._next, xfirst._prev);
                    }
                    this._classNamePT = null;
                }
                pt = this._firstPT;
                while (pt) {
                    if (pt.plugin && pt.plugin !== p && pt.plugin._kill) { //for plugins that are registered with CSSPlugin, we should notify them of the kill.
                        pt.plugin._kill(lookup);
                        p = pt.plugin;
                    }
                    pt = pt._next;
                }
                return __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["f" /* TweenPlugin */ ].prototype._kill.call(this, copy);
            };



            //used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.
            var _getChildStyles = function(e, props, targets) {
                var children, i, child, type;
                if (e.slice) {
                    i = e.length;
                    while (--i > -1) {
                        _getChildStyles(e[i], props, targets);
                    }
                    return;
                }
                children = e.childNodes;
                i = children.length;
                while (--i > -1) {
                    child = children[i];
                    type = child.type;
                    if (child.style) {
                        props.push(_getAllStyles(child));
                        if (targets) {
                            targets.push(child);
                        }
                    }
                    if ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {
                        _getChildStyles(child, props, targets);
                    }
                }
            };

            /**
             * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite
             * and then compares the style properties of all the target's child elements at the tween's start and end, and
             * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting
             * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is
             * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens
             * is because it creates entirely new tweens that may have completely different targets than the original tween,
             * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API
             * and it would create other problems. For example:
             *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)
             *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.
             *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.
             *
             * @param {Object} target object to be tweened
             * @param {number} Duration in seconds (or frames for frames-based tweens)
             * @param {Object} Object containing the end values, like {className:"newClass", ease:Linear.easeNone}
             * @return {Array} An array of TweenLite instances
             */
            CSSPlugin.cascadeTo = function(target, duration, vars) {
                var tween = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].to(target, duration, vars),
                    results = [tween],
                    b = [],
                    e = [],
                    targets = [],
                    _reservedProps = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ]._internals.reservedProps,
                    i, difs, p, from;
                target = tween._targets || tween.target;
                _getChildStyles(target, b, targets);
                tween.render(duration, true, true);
                _getChildStyles(target, e);
                tween.render(0, true, true);
                tween._enabled(true);
                i = targets.length;
                while (--i > -1) {
                    difs = _cssDif(targets[i], b[i], e[i]);
                    if (difs.firstMPT) {
                        difs = difs.difs;
                        for (p in vars) {
                            if (_reservedProps[p]) {
                                difs[p] = vars[p];
                            }
                        }
                        from = {};
                        for (p in difs) {
                            from[p] = b[i][p];
                        }
                        results.push(__WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].fromTo(targets[i], duration, from, difs));
                    }
                }
                return results;
            };

            __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["f" /* TweenPlugin */ ].activate([CSSPlugin]);
            return CSSPlugin;

        }, true);

        const CSSPlugin = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].CSSPlugin;
        /* unused harmony export CSSPlugin */



        /***/
    }),
    /* 45 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return DirectionalRotationPlugin;
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__ = __webpack_require__(6);
        /*!
         * VERSION: 0.3.1
         * DATE: 2018-05-30
         * UPDATES AND DOCS AT: http://greensock.com
         *
         * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
         * This work is subject to the terms at http://greensock.com/standard-license or for
         * Club GreenSock members, the software agreement that was issued with your membership.
         * 
         * @author: Jack Doyle, jack@greensock.com
         **/



        const DirectionalRotationPlugin = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine.plugin({
            propName: "directionalRotation",
            version: "0.3.1",
            API: 2,

            //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
            init: function(target, value, tween, index) {
                if (typeof(value) !== "object") {
                    value = {
                        rotation: value
                    };
                }
                this.finals = {};
                var cap = (value.useRadians === true) ? Math.PI * 2 : 360,
                    min = 0.000001,
                    p, v, start, end, dif, split;
                for (p in value) {
                    if (p !== "useRadians") {
                        end = value[p];
                        if (typeof(end) === "function") {
                            end = end(index, target);
                        }
                        split = (end + "").split("_");
                        v = split[0];
                        start = parseFloat((typeof(target[p]) !== "function") ? target[p] : target[((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3))]());
                        end = this.finals[p] = (typeof(v) === "string" && v.charAt(1) === "=") ? start + parseInt(v.charAt(0) + "1", 10) * Number(v.substr(2)) : Number(v) || 0;
                        dif = end - start;
                        if (split.length) {
                            v = split.join("_");
                            if (v.indexOf("short") !== -1) {
                                dif = dif % cap;
                                if (dif !== dif % (cap / 2)) {
                                    dif = (dif < 0) ? dif + cap : dif - cap;
                                }
                            }
                            if (v.indexOf("_cw") !== -1 && dif < 0) {
                                dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                            } else if (v.indexOf("ccw") !== -1 && dif > 0) {
                                dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                            }
                        }
                        if (dif > min || dif < -min) {
                            this._addTween(target, p, start, start + dif, p);
                            this._overwriteProps.push(p);
                        }
                    }
                }
                return true;
            },

            //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
            set: function(ratio) {
                var pt;
                if (ratio !== 1) {
                    this._super.setRatio.call(this, ratio);
                } else {
                    pt = this._firstPT;
                    while (pt) {
                        if (pt.f) {
                            pt.t[pt.p](this.finals[pt.p]);
                        } else {
                            pt.t[pt.p] = this.finals[pt.p];
                        }
                        pt = pt._next;
                    }
                }
            }

        });
        /* unused harmony export DirectionalRotationPlugin */


        DirectionalRotationPlugin._autoCSS = true;



        /***/
    }),
    /* 46 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__ = __webpack_require__(6);
        /* unused harmony reexport Linear */
        /* unused harmony reexport Power0 */
        /* unused harmony reexport Power1 */
        /* unused harmony reexport Power2 */
        /* unused harmony reexport Power3 */
        /* unused harmony reexport Power4 */
        /*!
         * VERSION: 1.16.0
         * DATE: 2018-05-30
         * UPDATES AND DOCS AT: http://greensock.com
         *
         * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
         * This work is subject to the terms at http://greensock.com/standard-license or for
         * Club GreenSock members, the software agreement that was issued with your membership.
         * 
         * @author: Jack Doyle, jack@greensock.com
         **/



        __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine("easing.Back", ["easing.Ease"], function() {

            var w = (__WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].GreenSockGlobals || __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]),
                gs = w.com.greensock,
                _2PI = Math.PI * 2,
                _HALF_PI = Math.PI / 2,
                _class = gs._class,
                _create = function(n, f) {
                    var C = _class("easing." + n, function() {}, true),
                        p = C.prototype = new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ]();
                    p.constructor = C;
                    p.getRatio = f;
                    return C;
                },
                _easeReg = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ].register || function() {}, //put an empty function in place just as a safety measure in case someone loads an OLD version of TweenLite.js where Ease.register doesn't exist.
                _wrap = function(name, EaseOut, EaseIn, EaseInOut, aliases) {
                    var C = _class("easing." + name, {
                        easeOut: new EaseOut(),
                        easeIn: new EaseIn(),
                        easeInOut: new EaseInOut()
                    }, true);
                    _easeReg(C, name);
                    return C;
                },
                EasePoint = function(time, value, next) {
                    this.t = time;
                    this.v = value;
                    if (next) {
                        this.next = next;
                        next.prev = this;
                        this.c = next.v - value;
                        this.gap = next.t - time;
                    }
                },

                //Back
                _createBack = function(n, f) {
                    var C = _class("easing." + n, function(overshoot) {
                            this._p1 = (overshoot || overshoot === 0) ? overshoot : 1.70158;
                            this._p2 = this._p1 * 1.525;
                        }, true),
                        p = C.prototype = new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ]();
                    p.constructor = C;
                    p.getRatio = f;
                    p.config = function(overshoot) {
                        return new C(overshoot);
                    };
                    return C;
                },

                Back = _wrap("Back",
                    _createBack("BackOut", function(p) {
                        return ((p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1);
                    }),
                    _createBack("BackIn", function(p) {
                        return p * p * ((this._p1 + 1) * p - this._p1);
                    }),
                    _createBack("BackInOut", function(p) {
                        return ((p *= 2) < 1) ? 0.5 * p * p * ((this._p2 + 1) * p - this._p2) : 0.5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);
                    })
                ),


                //SlowMo
                SlowMo = _class("easing.SlowMo", function(linearRatio, power, yoyoMode) {
                    power = (power || power === 0) ? power : 0.7;
                    if (linearRatio == null) {
                        linearRatio = 0.7;
                    } else if (linearRatio > 1) {
                        linearRatio = 1;
                    }
                    this._p = (linearRatio !== 1) ? power : 0;
                    this._p1 = (1 - linearRatio) / 2;
                    this._p2 = linearRatio;
                    this._p3 = this._p1 + this._p2;
                    this._calcEnd = (yoyoMode === true);
                }, true),
                p = SlowMo.prototype = new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ](),
                SteppedEase, ExpoScaleEase, RoughEase, _createElastic;

            p.constructor = SlowMo;
            p.getRatio = function(p) {
                var r = p + (0.5 - p) * this._p;
                if (p < this._p1) {
                    return this._calcEnd ? 1 - ((p = 1 - (p / this._p1)) * p) : r - ((p = 1 - (p / this._p1)) * p * p * p * r);
                } else if (p > this._p3) {
                    return this._calcEnd ? (p === 1 ? 0 : 1 - (p = (p - this._p3) / this._p1) * p) : r + ((p - r) * (p = (p - this._p3) / this._p1) * p * p * p); //added p === 1 ? 0 to avoid floating point rounding errors from affecting the final value, like 1 - 0.7 = 0.30000000000000004 instead of 0.3
                }
                return this._calcEnd ? 1 : r;
            };
            SlowMo.ease = new SlowMo(0.7, 0.7);

            p.config = SlowMo.config = function(linearRatio, power, yoyoMode) {
                return new SlowMo(linearRatio, power, yoyoMode);
            };


            //SteppedEase
            SteppedEase = _class("easing.SteppedEase", function(steps, immediateStart) {
                steps = steps || 1;
                this._p1 = 1 / steps;
                this._p2 = steps + (immediateStart ? 0 : 1);
                this._p3 = immediateStart ? 1 : 0;
            }, true);
            p = SteppedEase.prototype = new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ]();
            p.constructor = SteppedEase;
            p.getRatio = function(p) {
                if (p < 0) {
                    p = 0;
                } else if (p >= 1) {
                    p = 0.999999999;
                }
                return (((this._p2 * p) | 0) + this._p3) * this._p1;
            };
            p.config = SteppedEase.config = function(steps, immediateStart) {
                return new SteppedEase(steps, immediateStart);
            };


            //ExpoScaleEase
            ExpoScaleEase = _class("easing.ExpoScaleEase", function(start, end, ease) {
                this._p1 = Math.log(end / start);
                this._p2 = end - start;
                this._p3 = start;
                this._ease = ease;
            }, true);
            p = ExpoScaleEase.prototype = new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ]();
            p.constructor = ExpoScaleEase;
            p.getRatio = function(p) {
                if (this._ease) {
                    p = this._ease.getRatio(p);
                }
                return (this._p3 * Math.exp(this._p1 * p) - this._p3) / this._p2;
            };
            p.config = ExpoScaleEase.config = function(start, end, ease) {
                return new ExpoScaleEase(start, end, ease);
            };


            //RoughEase
            RoughEase = _class("easing.RoughEase", function(vars) {
                vars = vars || {};
                var taper = vars.taper || "none",
                    a = [],
                    cnt = 0,
                    points = (vars.points || 20) | 0,
                    i = points,
                    randomize = (vars.randomize !== false),
                    clamp = (vars.clamp === true),
                    template = (vars.template instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ]) ? vars.template : null,
                    strength = (typeof(vars.strength) === "number") ? vars.strength * 0.4 : 0.4,
                    x, y, bump, invX, obj, pnt;
                while (--i > -1) {
                    x = randomize ? Math.random() : (1 / points) * i;
                    y = template ? template.getRatio(x) : x;
                    if (taper === "none") {
                        bump = strength;
                    } else if (taper === "out") {
                        invX = 1 - x;
                        bump = invX * invX * strength;
                    } else if (taper === "in") {
                        bump = x * x * strength;
                    } else if (x < 0.5) { //"both" (start)
                        invX = x * 2;
                        bump = invX * invX * 0.5 * strength;
                    } else { //"both" (end)
                        invX = (1 - x) * 2;
                        bump = invX * invX * 0.5 * strength;
                    }
                    if (randomize) {
                        y += (Math.random() * bump) - (bump * 0.5);
                    } else if (i % 2) {
                        y += bump * 0.5;
                    } else {
                        y -= bump * 0.5;
                    }
                    if (clamp) {
                        if (y > 1) {
                            y = 1;
                        } else if (y < 0) {
                            y = 0;
                        }
                    }
                    a[cnt++] = {
                        x: x,
                        y: y
                    };
                }
                a.sort(function(a, b) {
                    return a.x - b.x;
                });

                pnt = new EasePoint(1, 1, null);
                i = points;
                while (--i > -1) {
                    obj = a[i];
                    pnt = new EasePoint(obj.x, obj.y, pnt);
                }

                this._prev = new EasePoint(0, 0, (pnt.t !== 0) ? pnt : pnt.next);
            }, true);
            p = RoughEase.prototype = new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ]();
            p.constructor = RoughEase;
            p.getRatio = function(p) {
                var pnt = this._prev;
                if (p > pnt.t) {
                    while (pnt.next && p >= pnt.t) {
                        pnt = pnt.next;
                    }
                    pnt = pnt.prev;
                } else {
                    while (pnt.prev && p <= pnt.t) {
                        pnt = pnt.prev;
                    }
                }
                this._prev = pnt;
                return (pnt.v + ((p - pnt.t) / pnt.gap) * pnt.c);
            };
            p.config = function(vars) {
                return new RoughEase(vars);
            };
            RoughEase.ease = new RoughEase();


            //Bounce
            _wrap("Bounce",
                _create("BounceOut", function(p) {
                    if (p < 1 / 2.75) {
                        return 7.5625 * p * p;
                    } else if (p < 2 / 2.75) {
                        return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
                    } else if (p < 2.5 / 2.75) {
                        return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
                    }
                    return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
                }),
                _create("BounceIn", function(p) {
                    if ((p = 1 - p) < 1 / 2.75) {
                        return 1 - (7.5625 * p * p);
                    } else if (p < 2 / 2.75) {
                        return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);
                    } else if (p < 2.5 / 2.75) {
                        return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);
                    }
                    return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);
                }),
                _create("BounceInOut", function(p) {
                    var invert = (p < 0.5);
                    if (invert) {
                        p = 1 - (p * 2);
                    } else {
                        p = (p * 2) - 1;
                    }
                    if (p < 1 / 2.75) {
                        p = 7.5625 * p * p;
                    } else if (p < 2 / 2.75) {
                        p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
                    } else if (p < 2.5 / 2.75) {
                        p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
                    } else {
                        p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
                    }
                    return invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;
                })
            );


            //CIRC
            _wrap("Circ",
                _create("CircOut", function(p) {
                    return Math.sqrt(1 - (p = p - 1) * p);
                }),
                _create("CircIn", function(p) {
                    return -(Math.sqrt(1 - (p * p)) - 1);
                }),
                _create("CircInOut", function(p) {
                    return ((p *= 2) < 1) ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);
                })
            );


            //Elastic
            _createElastic = function(n, f, def) {
                var C = _class("easing." + n, function(amplitude, period) {
                        this._p1 = (amplitude >= 1) ? amplitude : 1; //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
                        this._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);
                        this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);
                        this._p2 = _2PI / this._p2; //precalculate to optimize
                    }, true),
                    p = C.prototype = new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ]();
                p.constructor = C;
                p.getRatio = f;
                p.config = function(amplitude, period) {
                    return new C(amplitude, period);
                };
                return C;
            };
            _wrap("Elastic",
                _createElastic("ElasticOut", function(p) {
                    return this._p1 * Math.pow(2, -10 * p) * Math.sin((p - this._p3) * this._p2) + 1;
                }, 0.3),
                _createElastic("ElasticIn", function(p) {
                    return -(this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2));
                }, 0.3),
                _createElastic("ElasticInOut", function(p) {
                    return ((p *= 2) < 1) ? -0.5 * (this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2)) : this._p1 * Math.pow(2, -10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2) * 0.5 + 1;
                }, 0.45)
            );


            //Expo
            _wrap("Expo",
                _create("ExpoOut", function(p) {
                    return 1 - Math.pow(2, -10 * p);
                }),
                _create("ExpoIn", function(p) {
                    return Math.pow(2, 10 * (p - 1)) - 0.001;
                }),
                _create("ExpoInOut", function(p) {
                    return ((p *= 2) < 1) ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
                })
            );


            //Sine
            _wrap("Sine",
                _create("SineOut", function(p) {
                    return Math.sin(p * _HALF_PI);
                }),
                _create("SineIn", function(p) {
                    return -Math.cos(p * _HALF_PI) + 1;
                }),
                _create("SineInOut", function(p) {
                    return -0.5 * (Math.cos(Math.PI * p) - 1);
                })
            );

            _class("easing.EaseLookup", {
                find: function(s) {
                    return __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ].map[s];
                }
            }, true);

            //register the non-standard eases
            _easeReg(w.SlowMo, "SlowMo", "ease,");
            _easeReg(RoughEase, "RoughEase", "ease,");
            _easeReg(SteppedEase, "SteppedEase", "ease,");

            return Back;

        }, true);

        const Back = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].Back;
        /* harmony export (immutable) */
        __webpack_exports__["b"] = Back;

        const Elastic = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].Elastic;
        /* harmony export (immutable) */
        __webpack_exports__["c"] = Elastic;

        const Bounce = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].Bounce;
        /* harmony export (immutable) */
        __webpack_exports__["d"] = Bounce;

        const RoughEase = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].RoughEase;
        /* harmony export (immutable) */
        __webpack_exports__["e"] = RoughEase;

        const SlowMo = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].SlowMo;
        /* harmony export (immutable) */
        __webpack_exports__["f"] = SlowMo;

        const SteppedEase = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].SteppedEase;
        /* harmony export (immutable) */
        __webpack_exports__["g"] = SteppedEase;

        const Circ = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].Circ;
        /* harmony export (immutable) */
        __webpack_exports__["h"] = Circ;

        const Expo = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].Expo;
        /* harmony export (immutable) */
        __webpack_exports__["a"] = Expo;

        const Sine = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].Sine;
        /* harmony export (immutable) */
        __webpack_exports__["i"] = Sine;

        const ExpoScaleEase = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].ExpoScaleEase;
        /* harmony export (immutable) */
        __webpack_exports__["j"] = ExpoScaleEase;



        /***/
    }),
    /* 47 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return RoundPropsPlugin;
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__ = __webpack_require__(6);
        /*!
         * VERSION: 1.6.0
         * DATE: 2018-05-30
         * UPDATES AND DOCS AT: http://greensock.com
         *
         * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
         * This work is subject to the terms at http://greensock.com/standard-license or for
         * Club GreenSock members, the software agreement that was issued with your membership.
         * 
         * @author: Jack Doyle, jack@greensock.com
         **/


        const RoundPropsPlugin = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine.plugin({
                propName: "roundProps",
                version: "1.7.0",
                priority: -1,
                API: 2,

                //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                init: function(target, value, tween) {
                    this._tween = tween;
                    return true;
                }

            }),
            _getRoundFunc = function(v) { //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
                var p = v < 1 ? Math.pow(10, (v + "").length - 2) : 1; //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed()
                return function(n) {
                    return ((Math.round(n / v) * v * p) | 0) / p;
                };
            },
            _roundLinkedList = function(node, mod) {
                while (node) {
                    if (!node.f && !node.blob) {
                        node.m = mod || Math.round;
                    }
                    node = node._next;
                }
            },
            p = RoundPropsPlugin.prototype;
        /* unused harmony export RoundPropsPlugin */

        /* unused harmony export _getRoundFunc */

        /* unused harmony export _roundLinkedList */

        /* unused harmony export p */


        p._onInitAllProps = function() {
            var tween = this._tween,
                rp = tween.vars.roundProps,
                lookup = {},
                rpt = tween._propLookup.roundProps,
                pt, next, i, p;
            if (typeof(rp) === "object" && !rp.push) {
                for (p in rp) {
                    lookup[p] = _getRoundFunc(rp[p]);
                }
            } else {
                if (typeof(rp) === "string") {
                    rp = rp.split(",");
                }
                i = rp.length;
                while (--i > -1) {
                    lookup[rp[i]] = Math.round;
                }
            }

            for (p in lookup) {
                pt = tween._firstPT;
                while (pt) {
                    next = pt._next; //record here, because it may get removed
                    if (pt.pg) {
                        pt.t._mod(lookup);
                    } else if (pt.n === p) {
                        if (pt.f === 2 && pt.t) { //a blob (text containing multiple numeric values)
                            _roundLinkedList(pt.t._firstPT, lookup[p]);
                        } else {
                            this._add(pt.t, p, pt.s, pt.c, lookup[p]);
                            //remove from linked list
                            if (next) {
                                next._prev = pt._prev;
                            }
                            if (pt._prev) {
                                pt._prev._next = next;
                            } else if (tween._firstPT === pt) {
                                tween._firstPT = next;
                            }
                            pt._next = pt._prev = null;
                            tween._propLookup[p] = rpt;
                        }
                    }
                    pt = next;
                }
            }
            return false;
        };

        p._add = function(target, p, s, c, mod) {
            this._addTween(target, p, s, s + c, p, mod || Math.round);
            this._overwriteProps.push(p);
        };




        /***/
    }),
    /* 48 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return TimelineMax;
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__ = __webpack_require__(6);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__TimelineLite_js__ = __webpack_require__(27);
        /* unused harmony reexport TimelineLite */
        /*!
         * VERSION: 2.0.1
         * DATE: 2018-05-30
         * UPDATES AND DOCS AT: http://greensock.com
         *
         * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
         * This work is subject to the terms at http://greensock.com/standard-license or for
         * Club GreenSock members, the software agreement that was issued with your membership.
         * 
         * @author: Jack Doyle, jack@greensock.com
         */




        __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine("TimelineMax", ["TimelineLite", "TweenLite", "easing.Ease"], function() {

            var TimelineMax = function(vars) {
                    __WEBPACK_IMPORTED_MODULE_1__TimelineLite_js__["a" /* default */ ].call(this, vars);
                    this._repeat = this.vars.repeat || 0;
                    this._repeatDelay = this.vars.repeatDelay || 0;
                    this._cycle = 0;
                    this._yoyo = (this.vars.yoyo === true);
                    this._dirty = true;
                },
                _tinyNum = 0.0000000001,
                TweenLiteInternals = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ]._internals,
                _lazyTweens = TweenLiteInternals.lazyTweens,
                _lazyRender = TweenLiteInternals.lazyRender,
                _globals = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine.globals,
                _easeNone = new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ](null, null, 1, 0),
                p = TimelineMax.prototype = new __WEBPACK_IMPORTED_MODULE_1__TimelineLite_js__["a" /* default */ ]();

            p.constructor = TimelineMax;
            p.kill()._gc = false;
            TimelineMax.version = "2.0.1";

            p.invalidate = function() {
                this._yoyo = (this.vars.yoyo === true);
                this._repeat = this.vars.repeat || 0;
                this._repeatDelay = this.vars.repeatDelay || 0;
                this._uncache(true);
                return __WEBPACK_IMPORTED_MODULE_1__TimelineLite_js__["a" /* default */ ].prototype.invalidate.call(this);
            };

            p.addCallback = function(callback, position, params, scope) {
                return this.add(__WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].delayedCall(0, callback, params, scope), position);
            };

            p.removeCallback = function(callback, position) {
                if (callback) {
                    if (position == null) {
                        this._kill(null, callback);
                    } else {
                        var a = this.getTweensOf(callback, false),
                            i = a.length,
                            time = this._parseTimeOrLabel(position);
                        while (--i > -1) {
                            if (a[i]._startTime === time) {
                                a[i]._enabled(false, false);
                            }
                        }
                    }
                }
                return this;
            };

            p.removePause = function(position) {
                return this.removeCallback(__WEBPACK_IMPORTED_MODULE_1__TimelineLite_js__["a" /* default */ ]._internals.pauseCallback, position);
            };

            p.tweenTo = function(position, vars) {
                vars = vars || {};
                var copy = {
                        ease: _easeNone,
                        useFrames: this.usesFrames(),
                        immediateRender: false,
                        lazy: false
                    },
                    Engine = (vars.repeat && _globals.TweenMax) || __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ],
                    duration, p, t;
                for (p in vars) {
                    copy[p] = vars[p];
                }
                copy.time = this._parseTimeOrLabel(position);
                duration = (Math.abs(Number(copy.time) - this._time) / this._timeScale) || 0.001;
                t = new Engine(this, duration, copy);
                copy.onStart = function() {
                    t.target.paused(true);
                    if (t.vars.time !== t.target.time() && duration === t.duration() && !t.isFromTo) { //don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.
                        t.duration(Math.abs(t.vars.time - t.target.time()) / t.target._timeScale).render(t.time(), true, true); //render() right away to ensure that things look right, especially in the case of .tweenTo(0).
                    }
                    if (vars.onStart) { //in case the user had an onStart in the vars - we don't want to overwrite it.
                        vars.onStart.apply(vars.onStartScope || vars.callbackScope || t, vars.onStartParams || []); //don't use t._callback("onStart") or it'll point to the copy.onStart and we'll get a recursion error.
                    }
                };
                return t;
            };

            p.tweenFromTo = function(fromPosition, toPosition, vars) {
                vars = vars || {};
                fromPosition = this._parseTimeOrLabel(fromPosition);
                vars.startAt = {
                    onComplete: this.seek,
                    onCompleteParams: [fromPosition],
                    callbackScope: this
                };
                vars.immediateRender = (vars.immediateRender !== false);
                var t = this.tweenTo(toPosition, vars);
                t.isFromTo = 1; //to ensure we don't mess with the duration in the onStart (we've got the start and end values here, so lock it in)
                return t.duration((Math.abs(t.vars.time - fromPosition) / this._timeScale) || 0.001);
            };

            p.render = function(time, suppressEvents, force) {
                if (this._gc) {
                    this._enabled(true, false);
                }
                var prevTime = this._time,
                    totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                    dur = this._duration,
                    prevTotalTime = this._totalTime,
                    prevStart = this._startTime,
                    prevTimeScale = this._timeScale,
                    prevRawPrevTime = this._rawPrevTime,
                    prevPaused = this._paused,
                    prevCycle = this._cycle,
                    tween, isComplete, next, callback, internalForce, cycleDuration, pauseTween, curTime;
                if (prevTime !== this._time) { //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
                    time += this._time - prevTime;
                }
                if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                    if (!this._locked) {
                        this._totalTime = totalDur;
                        this._cycle = this._repeat;
                    }
                    if (!this._reversed)
                        if (!this._hasPausedChild()) {
                            isComplete = true;
                            callback = "onComplete";
                            internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                            if (this._duration === 0)
                                if ((time <= 0 && time >= -0.0000001) || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum)
                                    if (prevRawPrevTime !== time && this._first) {
                                        internalForce = true;
                                        if (prevRawPrevTime > _tinyNum) {
                                            callback = "onReverseComplete";
                                        }
                                    }
                        }
                    this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    if (this._yoyo && (this._cycle & 1) !== 0) {
                        this._time = time = 0;
                    } else {
                        this._time = dur;
                        time = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.
                    }

                } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                    if (!this._locked) {
                        this._totalTime = this._cycle = 0;
                    }
                    this._time = 0;
                    if (prevTime !== 0 || (dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || (time < 0 && prevRawPrevTime >= 0)) && !this._locked)) { //edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)
                        callback = "onReverseComplete";
                        isComplete = this._reversed;
                    }
                    if (time < 0) {
                        this._active = false;
                        if (this._timeline.autoRemoveChildren && this._reversed) {
                            internalForce = isComplete = true;
                            callback = "onReverseComplete";
                        } else if (prevRawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
                            internalForce = true;
                        }
                        this._rawPrevTime = time;
                    } else {
                        this._rawPrevTime = (dur || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                        if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
                            tween = this._first;
                            while (tween && tween._startTime === 0) {
                                if (!tween._duration) {
                                    isComplete = false;
                                }
                                tween = tween._next;
                            }
                        }
                        time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
                        if (!this._initted) {
                            internalForce = true;
                        }
                    }

                } else {
                    if (dur === 0 && prevRawPrevTime < 0) { //without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.
                        internalForce = true;
                    }
                    this._time = this._rawPrevTime = time;
                    if (!this._locked) {
                        this._totalTime = time;
                        if (this._repeat !== 0) {
                            cycleDuration = dur + this._repeatDelay;
                            this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)
                            if (this._cycle !== 0)
                                if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
                                    this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
                                }
                            this._time = this._totalTime - (this._cycle * cycleDuration);
                            if (this._yoyo)
                                if ((this._cycle & 1) !== 0) {
                                    this._time = dur - this._time;
                                }
                            if (this._time > dur) {
                                this._time = dur;
                                time = dur + 0.0001; //to avoid occasional floating point rounding error
                            } else if (this._time < 0) {
                                this._time = time = 0;
                            } else {
                                time = this._time;
                            }
                        }
                    }

                    if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                        time = this._time;
                        if (time >= prevTime || (this._repeat && prevCycle !== this._cycle)) {
                            tween = this._first;
                            while (tween && tween._startTime <= time && !pauseTween) {
                                if (!tween._duration)
                                    if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                        pauseTween = tween;
                                    }
                                tween = tween._next;
                            }
                        } else {
                            tween = this._last;
                            while (tween && tween._startTime >= time && !pauseTween) {
                                if (!tween._duration)
                                    if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                        pauseTween = tween;
                                    }
                                tween = tween._prev;
                            }
                        }
                        if (pauseTween && pauseTween._startTime < dur) {
                            this._time = time = pauseTween._startTime;
                            this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
                        }
                    }

                }

                if (this._cycle !== prevCycle)
                    if (!this._locked) {
                        /*
                        make sure children at the end/beginning of the timeline are rendered properly. If, for example, 
                        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
                        would get transated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
                        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So 
                        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
                        ensure that zero-duration tweens at the very beginning or end of the TimelineMax work. 
                        */
                        var backwards = (this._yoyo && (prevCycle & 1) !== 0),
                            wrap = (backwards === (this._yoyo && (this._cycle & 1) !== 0)),
                            recTotalTime = this._totalTime,
                            recCycle = this._cycle,
                            recRawPrevTime = this._rawPrevTime,
                            recTime = this._time;

                        this._totalTime = prevCycle * dur;
                        if (this._cycle < prevCycle) {
                            backwards = !backwards;
                        } else {
                            this._totalTime += dur;
                        }
                        this._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a "cleaner" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.

                        this._rawPrevTime = (dur === 0) ? prevRawPrevTime - 0.0001 : prevRawPrevTime;
                        this._cycle = prevCycle;
                        this._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()
                        prevTime = (backwards) ? 0 : dur;
                        this.render(prevTime, suppressEvents, (dur === 0));
                        if (!suppressEvents)
                            if (!this._gc) {
                                if (this.vars.onRepeat) {
                                    this._cycle = recCycle; //in case the onRepeat alters the playhead or invalidates(), we shouldn't stay locked or use the previous cycle.
                                    this._locked = false;
                                    this._callback("onRepeat");
                                }
                            }
                        if (prevTime !== this._time) { //in case there's a callback like onComplete in a nested tween/timeline that changes the playhead position, like via seek(), we should just abort.
                            return;
                        }
                        if (wrap) {
                            this._cycle = prevCycle; //if there's an onRepeat, we reverted this above, so make sure it's set properly again. We also unlocked in that scenario, so reset that too.
                            this._locked = true;
                            prevTime = (backwards) ? dur + 0.0001 : -0.0001;
                            this.render(prevTime, true, false);
                        }
                        this._locked = false;
                        if (this._paused && !prevPaused) { //if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)
                            return;
                        }
                        this._time = recTime;
                        this._totalTime = recTotalTime;
                        this._cycle = recCycle;
                        this._rawPrevTime = recRawPrevTime;
                    }

                if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                    if (prevTotalTime !== this._totalTime)
                        if (this._onUpdate)
                            if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
                                this._callback("onUpdate");
                            }
                    return;
                } else if (!this._initted) {
                    this._initted = true;
                }

                if (!this._active)
                    if (!this._paused && this._totalTime !== prevTotalTime && time > 0) {
                        this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
                    }

                if (prevTotalTime === 0)
                    if (this.vars.onStart)
                        if (this._totalTime !== 0 || !this._totalDuration)
                            if (!suppressEvents) {
                                this._callback("onStart");
                            }

                curTime = this._time;
                if (curTime >= prevTime) {
                    tween = this._first;
                    while (tween) {
                        next = tween._next; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= this._time && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                } else {
                    tween = this._last;
                    while (tween) {
                        next = tween._prev; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
                                while (pauseTween && pauseTween.endTime() > this._time) {
                                    pauseTween.render((pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
                                    pauseTween = pauseTween._prev;
                                }
                                pauseTween = null;
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                }

                if (this._onUpdate)
                    if (!suppressEvents) {
                        if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
                            _lazyRender();
                        }
                        this._callback("onUpdate");
                    }
                if (callback)
                    if (!this._locked)
                        if (!this._gc)
                            if (prevStart === this._startTime || prevTimeScale !== this._timeScale)
                                if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
                                    if (isComplete) {
                                        if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
                                            _lazyRender();
                                        }
                                        if (this._timeline.autoRemoveChildren) {
                                            this._enabled(false, false);
                                        }
                                        this._active = false;
                                    }
                                    if (!suppressEvents && this.vars[callback]) {
                                        this._callback(callback);
                                    }
                                }
            };

            p.getActive = function(nested, tweens, timelines) {
                if (nested == null) {
                    nested = true;
                }
                if (tweens == null) {
                    tweens = true;
                }
                if (timelines == null) {
                    timelines = false;
                }
                var a = [],
                    all = this.getChildren(nested, tweens, timelines),
                    cnt = 0,
                    l = all.length,
                    i, tween;
                for (i = 0; i < l; i++) {
                    tween = all[i];
                    if (tween.isActive()) {
                        a[cnt++] = tween;
                    }
                }
                return a;
            };


            p.getLabelAfter = function(time) {
                if (!time)
                    if (time !== 0) { //faster than isNan()
                        time = this._time;
                    }
                var labels = this.getLabelsArray(),
                    l = labels.length,
                    i;
                for (i = 0; i < l; i++) {
                    if (labels[i].time > time) {
                        return labels[i].name;
                    }
                }
                return null;
            };

            p.getLabelBefore = function(time) {
                if (time == null) {
                    time = this._time;
                }
                var labels = this.getLabelsArray(),
                    i = labels.length;
                while (--i > -1) {
                    if (labels[i].time < time) {
                        return labels[i].name;
                    }
                }
                return null;
            };

            p.getLabelsArray = function() {
                var a = [],
                    cnt = 0,
                    p;
                for (p in this._labels) {
                    a[cnt++] = {
                        time: this._labels[p],
                        name: p
                    };
                }
                a.sort(function(a, b) {
                    return a.time - b.time;
                });
                return a;
            };

            p.invalidate = function() {
                this._locked = false; //unlock and set cycle in case invalidate() is called from inside an onRepeat
                return __WEBPACK_IMPORTED_MODULE_1__TimelineLite_js__["a" /* default */ ].prototype.invalidate.call(this);
            };


            //---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------

            p.progress = function(value, suppressEvents) {
                return (!arguments.length) ? (this._time / this.duration()) || 0 : this.totalTime(this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
            };

            p.totalProgress = function(value, suppressEvents) {
                return (!arguments.length) ? (this._totalTime / this.totalDuration()) || 0 : this.totalTime(this.totalDuration() * value, suppressEvents);
            };

            p.totalDuration = function(value) {
                if (!arguments.length) {
                    if (this._dirty) {
                        __WEBPACK_IMPORTED_MODULE_1__TimelineLite_js__["a" /* default */ ].prototype.totalDuration.call(this); //just forces refresh
                        //Instead of Infinity, we use 999999999999 so that we can accommodate reverses.
                        this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
                    }
                    return this._totalDuration;
                }
                return (this._repeat === -1 || !value) ? this : this.timeScale(this.totalDuration() / value);
            };

            p.time = function(value, suppressEvents) {
                if (!arguments.length) {
                    return this._time;
                }
                if (this._dirty) {
                    this.totalDuration();
                }
                if (value > this._duration) {
                    value = this._duration;
                }
                if (this._yoyo && (this._cycle & 1) !== 0) {
                    value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
                } else if (this._repeat !== 0) {
                    value += this._cycle * (this._duration + this._repeatDelay);
                }
                return this.totalTime(value, suppressEvents);
            };

            p.repeat = function(value) {
                if (!arguments.length) {
                    return this._repeat;
                }
                this._repeat = value;
                return this._uncache(true);
            };

            p.repeatDelay = function(value) {
                if (!arguments.length) {
                    return this._repeatDelay;
                }
                this._repeatDelay = value;
                return this._uncache(true);
            };

            p.yoyo = function(value) {
                if (!arguments.length) {
                    return this._yoyo;
                }
                this._yoyo = value;
                return this;
            };

            p.currentLabel = function(value) {
                if (!arguments.length) {
                    return this.getLabelBefore(this._time + 0.00000001);
                }
                return this.seek(value, true);
            };

            return TimelineMax;

        }, true);

        const TimelineMax = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].TimelineMax;
        /* unused harmony export TimelineMax */



        /***/
    }),
    /* 49 */
    /***/
    (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {
            module.exports = inViewport;

            var instances = [];
            var supportsMutationObserver = typeof global.MutationObserver === 'function';

            function inViewport(elt, params, cb) {
                var opts = {
                    container: global.document.body,
                    offset: 0,
                    debounce: 15,
                    failsafe: 150
                };

                if (params === undefined || typeof params === 'function') {
                    cb = params;
                    params = {};
                }

                var container = opts.container = params.container || opts.container;
                var offset = opts.offset = params.offset || opts.offset;
                var debounceValue = opts.debounce = params.debounce || opts.debounce;
                var failsafe = opts.failsafe = params.failsafe || opts.failsafe;

                // ensure backward compatibility with failsafe as boolean
                if (failsafe === true) {
                    failsafe = 150;
                } else if (failsafe === false) {
                    failsafe = 0;
                }

                // failsafe check always needs to be higher than debounceValue
                if (failsafe > 0 && failsafe < debounceValue) {
                    failsafe = debounceValue + 50;
                }

                for (var i = 0; i < instances.length; i++) {
                    if (
                        instances[i].container === container &&
                        instances[i]._debounce === debounceValue &&
                        instances[i]._failsafe === failsafe
                    ) {
                        return instances[i].isInViewport(elt, offset, cb);
                    }
                }

                return instances[
                    instances.push(createInViewport(container, debounceValue, failsafe)) - 1
                ].isInViewport(elt, offset, cb);
            }

            function addEvent(el, type, fn) {
                if (el.attachEvent) {
                    el.attachEvent('on' + type, fn);
                } else {
                    el.addEventListener(type, fn, false);
                }
            }

            function debounce(func, wait, immediate) {
                var timeout;
                return function() {
                    var context = this,
                        args = arguments;
                    var callNow = immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                    if (callNow) func.apply(context, args);

                    function later() {
                        timeout = null;
                        if (!immediate) func.apply(context, args);
                    }
                };
            }

            // https://github.com/jquery/sizzle/blob/3136f48b90e3edc84cbaaa6f6f7734ef03775a07/sizzle.js#L708
            var contains = function() {
                if (!global.document) {
                    return true;
                }
                return global.document.documentElement.compareDocumentPosition ?
                    function(a, b) {
                        return !!(a.compareDocumentPosition(b) & 16);
                    } :
                    global.document.documentElement.contains ?
                    function(a, b) {
                        return a !== b && (a.contains ? a.contains(b) : false);
                    } :
                    function(a, b) {
                        while (b = b.parentNode) {
                            if (b === a) {
                                return true;
                            }
                        }
                        return false;
                    };
            }

            function createInViewport(container, debounceValue, failsafe) {
                var watches = createWatches();

                var scrollContainer = container === global.document.body ? global : container;
                var debouncedCheck = debounce(watches.checkAll(watchInViewport), debounceValue);

                addEvent(scrollContainer, 'scroll', debouncedCheck);

                if (scrollContainer === global) {
                    addEvent(global, 'resize', debouncedCheck);
                }

                if (supportsMutationObserver) {
                    observeDOM(watches, container, debouncedCheck);
                }

                // failsafe check, every X we check for visible images
                // usecase: a hidden parent containing eleements
                // when the parent becomes visible, we have no event that the children
                // became visible
                if (failsafe > 0) {
                    setInterval(debouncedCheck, failsafe);
                }

                function isInViewport(elt, offset, cb) {
                    if (!cb) {
                        return isVisible(elt, offset);
                    }

                    var remote = createRemote(elt, offset, cb);
                    remote.watch();
                    return remote;
                }

                function createRemote(elt, offset, cb) {
                    function watch() {
                        watches.add(elt, offset, cb);
                    }

                    function dispose() {
                        watches.remove(elt);
                    }

                    return {
                        watch: watch,
                        dispose: dispose
                    };
                }

                function watchInViewport(elt, offset, cb) {
                    if (isVisible(elt, offset)) {
                        watches.remove(elt);
                        cb(elt);
                    }
                }

                function isVisible(elt, offset) {
                    if (!elt) {
                        return false;
                    }

                    if (!contains(global.document.documentElement, elt) || !contains(global.document.documentElement, container)) {
                        return false;
                    }

                    // Check if the element is visible
                    // https://github.com/jquery/jquery/blob/740e190223d19a114d5373758127285d14d6b71e/src/css/hiddenVisibleSelectors.js
                    if (!elt.offsetWidth || !elt.offsetHeight) {
                        return false;
                    }

                    var eltRect = elt.getBoundingClientRect();
                    var viewport = {};

                    if (container === global.document.body) {
                        viewport = {
                            top: -offset,
                            left: -offset,
                            right: global.document.documentElement.clientWidth + offset,
                            bottom: global.document.documentElement.clientHeight + offset
                        };
                    } else {
                        var containerRect = container.getBoundingClientRect();
                        viewport = {
                            top: containerRect.top - offset,
                            left: containerRect.left - offset,
                            right: containerRect.right + offset,
                            bottom: containerRect.bottom + offset
                        };
                    }

                    // The element must overlap with the visible part of the viewport
                    var visible =
                        (
                            eltRect.right >= viewport.left &&
                            eltRect.left <= viewport.right &&
                            eltRect.bottom >= viewport.top &&
                            eltRect.top <= viewport.bottom
                        );

                    return visible;
                }

                return {
                    container: container,
                    isInViewport: isInViewport,
                    _debounce: debounceValue,
                    _failsafe: failsafe
                };
            }

            function createWatches() {
                var watches = [];

                function add(elt, offset, cb) {
                    if (!isWatched(elt)) {
                        watches.push([elt, offset, cb]);
                    }
                }

                function remove(elt) {
                    var pos = indexOf(elt);
                    if (pos !== -1) {
                        watches.splice(pos, 1);
                    }
                }

                function indexOf(elt) {
                    for (var i = watches.length - 1; i >= 0; i--) {
                        if (watches[i][0] === elt) {
                            return i;
                        }
                    }
                    return -1;
                }

                function isWatched(elt) {
                    return indexOf(elt) !== -1;
                }

                function checkAll(cb) {
                    return function() {
                        for (var i = watches.length - 1; i >= 0; i--) {
                            cb.apply(this, watches[i]);
                        }
                    };
                }

                return {
                    add: add,
                    remove: remove,
                    isWatched: isWatched,
                    checkAll: checkAll
                };
            }

            function observeDOM(watches, container, cb) {
                var observer = new MutationObserver(watch);
                var filter = Array.prototype.filter;
                var concat = Array.prototype.concat;

                observer.observe(container, {
                    childList: true,
                    subtree: true,
                    // changes like style/width/height/display will be catched
                    attributes: true
                });

                function watch(mutations) {
                    // some new DOM nodes where previously watched
                    // we should check their positions
                    if (mutations.some(knownNodes) === true) {
                        setTimeout(cb, 0);
                    }
                }

                function knownNodes(mutation) {
                    var nodes = concat.call([],
                        Array.prototype.slice.call(mutation.addedNodes),
                        mutation.target
                    );
                    return filter.call(nodes, watches.isWatched).length > 0;
                }
            }

            /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(15)))

        /***/
    }),
    /* 50 */
    /***/
    (function(module, exports, __webpack_require__) {

        var ListCache = __webpack_require__(20),
            stackClear = __webpack_require__(214),
            stackDelete = __webpack_require__(215),
            stackGet = __webpack_require__(216),
            stackHas = __webpack_require__(217),
            stackSet = __webpack_require__(218);

        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }

        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;

        module.exports = Stack;


        /***/
    }),
    /* 51 */
    /***/
    (function(module, exports, __webpack_require__) {

        var castPath = __webpack_require__(53),
            toKey = __webpack_require__(25);

        /**
         * The base implementation of `_.get` without support for default values.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @returns {*} Returns the resolved value.
         */
        function baseGet(object, path) {
            path = castPath(path, object);

            var index = 0,
                length = path.length;

            while (object != null && index < length) {
                object = object[toKey(path[index++])];
            }
            return (index && index == length) ? object : undefined;
        }

        module.exports = baseGet;


        /***/
    }),
    /* 52 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseIsEqualDeep = __webpack_require__(157),
            isObjectLike = __webpack_require__(19);

        /**
         * The base implementation of `_.isEqual` which supports partial comparisons
         * and tracks traversed objects.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Unordered comparison
         *  2 - Partial comparison
         * @param {Function} [customizer] The function to customize comparisons.
         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         */
        function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
                return true;
            }
            if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }

        module.exports = baseIsEqual;


        /***/
    }),
    /* 53 */
    /***/
    (function(module, exports, __webpack_require__) {

        var isArray = __webpack_require__(9),
            isKey = __webpack_require__(30),
            stringToPath = __webpack_require__(219),
            toString = __webpack_require__(232);

        /**
         * Casts `value` to a path array if it's not one.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {Object} [object] The object to query keys on.
         * @returns {Array} Returns the cast property path array.
         */
        function castPath(value, object) {
            if (isArray(value)) {
                return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
        }

        module.exports = castPath;


        /***/
    }),
    /* 54 */
    /***/
    (function(module, exports, __webpack_require__) {

        var SetCache = __webpack_require__(143),
            arraySome = __webpack_require__(151),
            cacheHas = __webpack_require__(172);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

        /**
         * A specialized version of `baseIsEqualDeep` for arrays with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Array} array The array to compare.
         * @param {Array} other The other array to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `array` and `other` objects.
         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
         */
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                arrLength = array.length,
                othLength = other.length;

            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(array);
            if (stacked && stack.get(other)) {
                return stacked == other;
            }
            var index = -1,
                result = true,
                seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

            stack.set(array, other);
            stack.set(other, array);

            // Ignore non-index properties.
            while (++index < arrLength) {
                var arrValue = array[index],
                    othValue = other[index];

                if (customizer) {
                    var compared = isPartial ?
                        customizer(othValue, arrValue, index, other, array, stack) :
                        customizer(arrValue, othValue, index, array, other, stack);
                }
                if (compared !== undefined) {
                    if (compared) {
                        continue;
                    }
                    result = false;
                    break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                    if (!arraySome(other, function(othValue, othIndex) {
                            if (!cacheHas(seen, othIndex) &&
                                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                return seen.push(othIndex);
                            }
                        })) {
                        result = false;
                        break;
                    }
                } else if (!(
                        arrValue === othValue ||
                        equalFunc(arrValue, othValue, bitmask, customizer, stack)
                    )) {
                    result = false;
                    break;
                }
            }
            stack['delete'](array);
            stack['delete'](other);
            return result;
        }

        module.exports = equalArrays;


        /***/
    }),
    /* 55 */
    /***/
    (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) { /** Detect free variable `global` from Node.js. */
            var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

            module.exports = freeGlobal;

            /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(15)))

        /***/
    }),
    /* 56 */
    /***/
    (function(module, exports) {

        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/;

        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;

            return !!length &&
                (type == 'number' ||
                    (type != 'symbol' && reIsUint.test(value))) &&
                (value > -1 && value % 1 == 0 && value < length);
        }

        module.exports = isIndex;


        /***/
    }),
    /* 57 */
    /***/
    (function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__(14);

        /**
         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` if suitable for strict
         *  equality comparisons, else `false`.
         */
        function isStrictComparable(value) {
            return value === value && !isObject(value);
        }

        module.exports = isStrictComparable;


        /***/
    }),
    /* 58 */
    /***/
    (function(module, exports) {

        /**
         * A specialized version of `matchesProperty` for source values suitable
         * for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function matchesStrictComparable(key, srcValue) {
            return function(object) {
                if (object == null) {
                    return false;
                }
                return object[key] === srcValue &&
                    (srcValue !== undefined || (key in Object(object)));
            };
        }

        module.exports = matchesStrictComparable;


        /***/
    }),
    /* 59 */
    /***/
    (function(module, exports) {

        /** Used for built-in method references. */
        var funcProto = Function.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {}
                try {
                    return (func + '');
                } catch (e) {}
            }
            return '';
        }

        module.exports = toSource;


        /***/
    }),
    /* 60 */
    /***/
    (function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__(14),
            now = __webpack_require__(226),
            toNumber = __webpack_require__(33);

        /** Error message constants. */
        var FUNC_ERROR_TEXT = 'Expected a function';

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max,
            nativeMin = Math.min;

        /**
         * Creates a debounced function that delays invoking `func` until after `wait`
         * milliseconds have elapsed since the last time the debounced function was
         * invoked. The debounced function comes with a `cancel` method to cancel
         * delayed `func` invocations and a `flush` method to immediately invoke them.
         * Provide `options` to indicate whether `func` should be invoked on the
         * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
         * with the last arguments provided to the debounced function. Subsequent
         * calls to the debounced function return the result of the last `func`
         * invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the debounced function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.debounce` and `_.throttle`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to debounce.
         * @param {number} [wait=0] The number of milliseconds to delay.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=false]
         *  Specify invoking on the leading edge of the timeout.
         * @param {number} [options.maxWait]
         *  The maximum time `func` is allowed to be delayed before it's invoked.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new debounced function.
         * @example
         *
         * // Avoid costly calculations while the window size is in flux.
         * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
         *
         * // Invoke `sendMail` when clicked, debouncing subsequent calls.
         * jQuery(element).on('click', _.debounce(sendMail, 300, {
         *   'leading': true,
         *   'trailing': false
         * }));
         *
         * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
         * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
         * var source = new EventSource('/stream');
         * jQuery(source).on('message', debounced);
         *
         * // Cancel the trailing debounced invocation.
         * jQuery(window).on('popstate', debounced.cancel);
         */
        function debounce(func, wait, options) {
            var lastArgs,
                lastThis,
                maxWait,
                result,
                timerId,
                lastCallTime,
                lastInvokeTime = 0,
                leading = false,
                maxing = false,
                trailing = true;

            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxing = 'maxWait' in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }

            function invokeFunc(time) {
                var args = lastArgs,
                    thisArg = lastThis;

                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
            }

            function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
            }

            function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime,
                    timeSinceLastInvoke = time - lastInvokeTime,
                    timeWaiting = wait - timeSinceLastCall;

                return maxing ?
                    nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) :
                    timeWaiting;
            }

            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime,
                    timeSinceLastInvoke = time - lastInvokeTime;

                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
                    (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
            }

            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                    return trailingEdge(time);
                }
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
            }

            function trailingEdge(time) {
                timerId = undefined;

                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) {
                    return invokeFunc(time);
                }
                lastArgs = lastThis = undefined;
                return result;
            }

            function cancel() {
                if (timerId !== undefined) {
                    clearTimeout(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
            }

            function flush() {
                return timerId === undefined ? result : trailingEdge(now());
            }

            function debounced() {
                var time = now(),
                    isInvoking = shouldInvoke(time);

                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;

                if (isInvoking) {
                    if (timerId === undefined) {
                        return leadingEdge(lastCallTime);
                    }
                    if (maxing) {
                        // Handle invocations in a tight loop.
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                    }
                }
                if (timerId === undefined) {
                    timerId = setTimeout(timerExpired, wait);
                }
                return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
        }

        module.exports = debounce;


        /***/
    }),
    /* 61 */
    /***/
    (function(module, exports) {

        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
            return value === other || (value !== value && other !== other);
        }

        module.exports = eq;


        /***/
    }),
    /* 62 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseFindIndex = __webpack_require__(153),
            baseIteratee = __webpack_require__(161),
            toInteger = __webpack_require__(69);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * This method is like `_.find` except that it returns the index of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.findIndex(users, function(o) { return o.user == 'barney'; });
         * // => 0
         *
         * // The `_.matches` iteratee shorthand.
         * _.findIndex(users, { 'user': 'fred', 'active': false });
         * // => 1
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findIndex(users, ['active', false]);
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.findIndex(users, 'active');
         * // => 2
         */
        function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
                index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, baseIteratee(predicate, 3), index);
        }

        module.exports = findIndex;


        /***/
    }),
    /* 63 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseIsArguments = __webpack_require__(156),
            isObjectLike = __webpack_require__(19);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Built-in value references. */
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;

        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = baseIsArguments(function() {
            return arguments;
        }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                !propertyIsEnumerable.call(value, 'callee');
        };

        module.exports = isArguments;


        /***/
    }),
    /* 64 */
    /***/
    (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(module) {
            var root = __webpack_require__(8),
                stubFalse = __webpack_require__(230);

            /** Detect free variable `exports`. */
            var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Built-in value references. */
            var Buffer = moduleExports ? root.Buffer : undefined;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;

            module.exports = isBuffer;

            /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(72)(module)))

        /***/
    }),
    /* 65 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseGetTag = __webpack_require__(18),
            isObject = __webpack_require__(14);

        /** `Object#toString` result references. */
        var asyncTag = '[object AsyncFunction]',
            funcTag = '[object Function]',
            genTag = '[object GeneratorFunction]',
            proxyTag = '[object Proxy]';

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
            if (!isObject(value)) {
                return false;
            }
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }

        module.exports = isFunction;


        /***/
    }),
    /* 66 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseIsTypedArray = __webpack_require__(160),
            baseUnary = __webpack_require__(171),
            nodeUtil = __webpack_require__(205);

        /* Node.js helper references. */
        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

        module.exports = isTypedArray;


        /***/
    }),
    /* 67 */
    /***/
    (function(module, exports, __webpack_require__) {

        var arrayLikeKeys = __webpack_require__(148),
            baseKeys = __webpack_require__(162),
            isArrayLike = __webpack_require__(224);

        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        module.exports = keys;


        /***/
    }),
    /* 68 */
    /***/
    (function(module, exports, __webpack_require__) {

        var debounce = __webpack_require__(60),
            isObject = __webpack_require__(14);

        /** Error message constants. */
        var FUNC_ERROR_TEXT = 'Expected a function';

        /**
         * Creates a throttled function that only invokes `func` at most once per
         * every `wait` milliseconds. The throttled function comes with a `cancel`
         * method to cancel delayed `func` invocations and a `flush` method to
         * immediately invoke them. Provide `options` to indicate whether `func`
         * should be invoked on the leading and/or trailing edge of the `wait`
         * timeout. The `func` is invoked with the last arguments provided to the
         * throttled function. Subsequent calls to the throttled function return the
         * result of the last `func` invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the throttled function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.throttle` and `_.debounce`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to throttle.
         * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=true]
         *  Specify invoking on the leading edge of the timeout.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new throttled function.
         * @example
         *
         * // Avoid excessively updating the position while scrolling.
         * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
         *
         * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
         * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
         * jQuery(element).on('click', throttled);
         *
         * // Cancel the trailing throttled invocation.
         * jQuery(window).on('popstate', throttled.cancel);
         */
        function throttle(func, wait, options) {
            var leading = true,
                trailing = true;

            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
                leading = 'leading' in options ? !!options.leading : leading;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                'leading': leading,
                'maxWait': wait,
                'trailing': trailing
            });
        }

        module.exports = throttle;


        /***/
    }),
    /* 69 */
    /***/
    (function(module, exports, __webpack_require__) {

        var toFinite = __webpack_require__(231);

        /**
         * Converts `value` to an integer.
         *
         * **Note:** This method is loosely based on
         * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toInteger(3.2);
         * // => 3
         *
         * _.toInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toInteger(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toInteger('3.2');
         * // => 3
         */
        function toInteger(value) {
            var result = toFinite(value),
                remainder = result % 1;

            return result === result ? (remainder ? result - remainder : result) : 0;
        }

        module.exports = toInteger;


        /***/
    }),
    /* 70 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(294)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(83),
            /* template */
            __webpack_require__(271),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 71 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(302)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(99),
            /* template */
            __webpack_require__(279),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 72 */
    /***/
    (function(module, exports) {

        module.exports = function(module) {
            if (!module.webpackPolyfill) {
                module.deprecate = function() {};
                module.paths = [];
                // module.parent = undefined by default
                if (!module.children) module.children = [];
                Object.defineProperty(module, "loaded", {
                    enumerable: true,
                    get: function() {
                        return module.l;
                    }
                });
                Object.defineProperty(module, "id", {
                    enumerable: true,
                    get: function() {
                        return module.i;
                    }
                });
                module.webpackPolyfill = 1;
            }
            return module;
        };


        /***/
    }),
    /* 73 */
    /***/
    (function(module, exports) {

        module.exports = {
            "from": {
                "home": {
                    "to": {
                        "work": {
                            "appear": "appearDown",
                            "leave": "leaveUp"
                        },
                        "case-study": {
                            "appear": "appearDown",
                            "leave": "leaveUp"
                        },
                        "about": {
                            "appear": "appearForward",
                            "leave": "leaveForward"
                        }
                    }
                },
                "work": {
                    "to": {
                        "home": {
                            "appear": "appearUp",
                            "leave": "leaveDown"
                        },
                        "about": {
                            "appear": "appearForward",
                            "leave": "leaveForward"
                        }
                    }
                },
                "about": {
                    "to": {
                        "home": {
                            "appear": "appearBackward",
                            "leave": "leaveBackward"
                        },
                        "work": {
                            "appear": "appearBackward",
                            "leave": "leaveBackward"
                        },
                        "case-study": {
                            "appear": "appearBackward",
                            "leave": "leaveBackward"
                        }
                    }
                },
                "case-study": {
                    "to": {
                        "home": {
                            "appear": "appearUp",
                            "leave": "leaveDown"
                        },
                        "about": {
                            "appear": "appearForward",
                            "leave": "leaveForward"
                        }
                    }
                }
            },
            "default": {
                "appear": "appearAnim",
                "leave": "leaveAnim"
            }
        }

        /***/
    }),
    /* 74 */
    /***/
    (function(module, exports) {

        module.exports = {
            "home": [{
                "name": "home",
                "backgroundColor": "#011832",
                "navigationGradient": ["#8A86BE", "#EEE0FB"],
                "shapes": [{
                    "x": 11,
                    "y": -1,
                    "z": -1.5,
                    "size": 0.8,
                    "edges": 8,
                    "materialId": 1
                }, {
                    "x": -5,
                    "y": -3,
                    "z": 2,
                    "size": 0.8,
                    "edges": 8,
                    "materialId": 3
                }, {
                    "x": -15,
                    "y": -0.5,
                    "z": -7,
                    "size": 0.8,
                    "edges": 60,
                    "materialId": 5
                }, {
                    "x": -7,
                    "y": 3.5,
                    "z": 3,
                    "size": 1,
                    "edges": 60,
                    "materialId": 6
                }, {
                    "x": -2,
                    "y": 5,
                    "z": -3,
                    "size": 0.6,
                    "edges": 3,
                    "materialId": 8
                }, {
                    "x": 3,
                    "y": 5.5,
                    "z": 0,
                    "size": 0.9,
                    "edges": 60,
                    "materialId": 7
                }, {
                    "x": 11,
                    "y": 4,
                    "z": -6,
                    "size": 1,
                    "edges": 60,
                    "materialId": 9
                }, {
                    "x": 7.5,
                    "y": 4,
                    "z": 3,
                    "size": 0.8,
                    "edges": 3,
                    "materialId": 10,
                    "rotateZ": 0.53
                }, {
                    "x": 8,
                    "y": -8,
                    "z": -6,
                    "size": 1,
                    "edges": 3,
                    "materialId": 11,
                    "rotateZ": 1.3
                }]
            }],
            "work": [{
                "name": "lightswan",
                "backgroundColor": "#F7F3EA",
                "navigationGradient": ["#8F8D89", "#DAD9D7"],
                "shapes": [{
                    "x": 11,
                    "y": -5,
                    "z": -1.5,
                    "size": 0.8,
                    "edges": 60,
                    "materialId": 0
                }, {
                    "x": -11,
                    "y": -5,
                    "z": 0.5,
                    "size": 0.8,
                    "edges": 60,
                    "materialId": 0
                }, {
                    "x": -7,
                    "y": 2,
                    "z": 4,
                    "size": 0.7,
                    "edges": 60,
                    "materialId": 0
                }, {
                    "x": -5,
                    "y": 8,
                    "z": -5,
                    "size": 1,
                    "edges": 60,
                    "materialId": 0
                }, {
                    "x": 7,
                    "y": 5,
                    "z": 0,
                    "size": 1.3,
                    "edges": 60,
                    "materialId": 0
                }, {
                    "x": 0,
                    "y": -7,
                    "z": -10,
                    "size": 1,
                    "edges": 60,
                    "materialId": 0
                }]
            }, {
                "name": "shopsquare",
                "backgroundColor": "#E3F0FF",
                "navigationGradient": ["#8A86BE", "#EEE0FB"],
                "shapes": [{
                    "x": 11,
                    "y": -5,
                    "z": -0.5,
                    "size": 0.8,
                    "edges": 8,
                    "materialId": 1
                }, {
                    "x": -7,
                    "y": -4.5,
                    "z": 2,
                    "size": 0.8,
                    "edges": 8,
                    "materialId": 1
                }, {
                    "x": -6,
                    "y": 3,
                    "z": 4,
                    "size": 0.8,
                    "edges": 8,
                    "materialId": 1
                }, {
                    "x": 5,
                    "y": 8,
                    "z": -6,
                    "size": 1,
                    "edges": 8,
                    "materialId": 1
                }, {
                    "x": 7.5,
                    "y": 3,
                    "z": 3,
                    "size": 0.8,
                    "edges": 8,
                    "materialId": 1
                }, {
                    "x": 8,
                    "y": -8.5,
                    "z": -6,
                    "size": 1,
                    "edges": 8,
                    "materialId": 1
                }]
            }, {
                "name": "maje",
                "backgroundColor": "#303496",
                "navigationGradient": ["#8A86BE", "#EEE0FB"],
                "shapes": [{
                    "x": 11,
                    "y": -5,
                    "z": -0.5,
                    "size": 0.8,
                    "edges": 3,
                    "materialId": 2,
                    "rotateZ": 1
                }, {
                    "x": -7,
                    "y": -4.5,
                    "z": 2,
                    "size": 0.8,
                    "edges": 3,
                    "materialId": 2,
                    "rotateZ": 0.3
                }, {
                    "x": -6,
                    "y": 3,
                    "z": 4,
                    "size": 1.1,
                    "edges": 3,
                    "materialId": 2,
                    "rotateZ": 2
                }, {
                    "x": -11.5,
                    "y": 0,
                    "z": -1,
                    "size": 0.8,
                    "edges": 3,
                    "materialId": 2,
                    "rotateZ": 2
                }, {
                    "x": 5,
                    "y": 8,
                    "z": -6,
                    "size": 1,
                    "edges": 3,
                    "materialId": 2,
                    "rotateZ": 0.8
                }, {
                    "x": 7.5,
                    "y": 3,
                    "z": 3,
                    "size": 1.2,
                    "edges": 3,
                    "materialId": 2,
                    "rotateZ": 0.2
                }, {
                    "x": 8,
                    "y": -8.5,
                    "z": -6,
                    "size": 1,
                    "edges": 3,
                    "materialId": 2,
                    "rotateZ": 3
                }]
            }, {
                "name": "google-a&c",
                "backgroundColor": "#D2414F",
                "navigationGradient": ["#FDEFBD", "#D54C5C"],
                "shapes": [{
                    "x": 11,
                    "y": -5,
                    "z": -0.5,
                    "size": 0.8,
                    "edges": 6,
                    "rotateZ": 10,
                    "materialId": 12
                }, {
                    "x": -7,
                    "y": -4.5,
                    "z": 2,
                    "size": 0.8,
                    "edges": 6,
                    "rotateZ": 4,
                    "materialId": 12
                }, {
                    "x": -6,
                    "y": 3,
                    "z": 4,
                    "size": 0.8,
                    "edges": 6,
                    "rotateZ": 2,
                    "materialId": 12
                }, {
                    "x": 5,
                    "y": 8,
                    "z": -6,
                    "size": 1,
                    "edges": 6,
                    "rotateZ": 0.4,
                    "materialId": 12
                }, {
                    "x": 7.5,
                    "y": 3,
                    "z": 3,
                    "size": 0.8,
                    "edges": 6,
                    "rotateZ": 0.5,
                    "materialId": 12
                }, {
                    "x": 8,
                    "y": -8.5,
                    "z": -6,
                    "size": 1,
                    "edges": 6,
                    "rotateZ": 8,
                    "materialId": 12
                }]
            }],
            "case-study": "work",
            "about": [{
                "name": "about",
                "backgroundColor": "#011832",
                "navigationGradient": ["#8A86BE", "#EEE0FB"],
                "shapes": [{
                    "x": 11,
                    "y": -1,
                    "z": -1.5,
                    "size": 1,
                    "edges": 8,
                    "materialId": 3
                }, {
                    "x": -3.5,
                    "y": -4,
                    "z": 2,
                    "size": 1,
                    "edges": 80,
                    "materialId": 10
                }, {
                    "x": -15,
                    "y": -0.5,
                    "z": -7,
                    "size": 1,
                    "edges": 80,
                    "materialId": 1
                }, {
                    "x": -7,
                    "y": 3.5,
                    "z": 3,
                    "size": 1,
                    "edges": 80,
                    "materialId": 4
                }, {
                    "x": -3,
                    "y": 7,
                    "z": -3,
                    "size": 1,
                    "edges": 3,
                    "materialId": 6
                }, {
                    "x": 3,
                    "y": 5.5,
                    "z": 0,
                    "size": 1,
                    "edges": 80,
                    "materialId": 7
                }, {
                    "x": 11,
                    "y": 4,
                    "z": -6,
                    "size": 1,
                    "edges": 80,
                    "materialId": 11
                }, {
                    "x": 7.5,
                    "y": 4,
                    "z": 3,
                    "size": 1,
                    "edges": 3,
                    "materialId": 10
                }, {
                    "x": 8,
                    "y": -8,
                    "z": -6,
                    "size": 1,
                    "edges": 10,
                    "materialId": 4,
                    "rotateZ": 3
                }]
            }],
            "default": [{
                "name": "default",
                "backgroundColor": "#011832",
                "navigationGradient": ["#8A86BE", "#EEE0FB"],
                "shapes": [{
                    "x": 11,
                    "y": -1,
                    "z": -1.5,
                    "size": 0.8,
                    "edges": 8,
                    "materialId": 1
                }, {
                    "x": -5,
                    "y": -3,
                    "z": 2,
                    "size": 0.8,
                    "edges": 8,
                    "materialId": 3
                }, {
                    "x": -15,
                    "y": -0.5,
                    "z": -7,
                    "size": 0.8,
                    "edges": 60,
                    "materialId": 5
                }, {
                    "x": -7,
                    "y": 3.5,
                    "z": 3,
                    "size": 1,
                    "edges": 60,
                    "materialId": 6
                }, {
                    "x": -2,
                    "y": 5,
                    "z": -3,
                    "size": 0.6,
                    "edges": 3,
                    "materialId": 8
                }, {
                    "x": 3,
                    "y": 5.5,
                    "z": 0,
                    "size": 0.9,
                    "edges": 60,
                    "materialId": 7
                }, {
                    "x": 11,
                    "y": 4,
                    "z": -6,
                    "size": 1,
                    "edges": 60,
                    "materialId": 9
                }, {
                    "x": 7.5,
                    "y": 4,
                    "z": 3,
                    "size": 0.8,
                    "edges": 3,
                    "materialId": 10
                }, {
                    "x": 8,
                    "y": -8,
                    "z": -6,
                    "size": 1,
                    "edges": 3,
                    "materialId": 11
                }]
            }]
        }

        /***/
    }),
    /* 75 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return routes;
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__spa_Home_Home_vue__ = __webpack_require__(256);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__spa_Home_Home_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__spa_Home_Home_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__spa_NotFound_NotFound_vue__ = __webpack_require__(259);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__spa_NotFound_NotFound_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__spa_NotFound_NotFound_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__spa_Work_Work_vue__ = __webpack_require__(260);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__spa_Work_Work_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__spa_Work_Work_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__spa_About_About_vue__ = __webpack_require__(254);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__spa_About_About_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__spa_About_About_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__spa_CaseStudy_CaseStudy_vue__ = __webpack_require__(255);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__spa_CaseStudy_CaseStudy_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__spa_CaseStudy_CaseStudy_vue__);






        var routes = [{
            path: '/',
            component: __WEBPACK_IMPORTED_MODULE_0__spa_Home_Home_vue___default.a,
            name: 'home'
        }, {
            path: '/work',
            name: 'work',
            component: __WEBPACK_IMPORTED_MODULE_2__spa_Work_Work_vue___default.a,
            children: [{
                path: ':id',
                name: 'case-study',
                component: __WEBPACK_IMPORTED_MODULE_4__spa_CaseStudy_CaseStudy_vue___default.a
            }]
        }, {
            path: '/about',
            name: 'about',
            component: __WEBPACK_IMPORTED_MODULE_3__spa_About_About_vue___default.a
        }, {
            path: '*',
            name: 'all',
            component: __WEBPACK_IMPORTED_MODULE_1__spa_NotFound_NotFound_vue___default.a
        }];

        /***/
    }),
    /* 76 */
    /***/
    (function(module, exports, __webpack_require__) {

        /*!
         * vue-analytics v3.2.1
         * (c) 2017 Matteo Gabriele
         * Released under the ISC License.
         */
        (function(global, factory) {
            true ? module.exports = factory(__webpack_require__(138)) :
                typeof define === 'function' && define.amd ? define(['load-script'], factory) :
                (global.VueAnalytics = factory(global.loadScript));
        }(this, (function(loadScript) {
            'use strict';

            loadScript = 'default' in loadScript ? loadScript['default'] : loadScript;

            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj;
            } : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };

            /**
             * Whining helper
             * @param  {String} message
             */
            var warn = function warn() {
                for (var _len = arguments.length, message = Array(_len), _key = 0; _key < _len; _key++) {
                    message[_key] = arguments[_key];
                }

                /* eslint-disable */
                console.warn('[VueAnalytics] ' + message.join(' '));
                /* eslint-enable */
            };

            /**
             * Returns if a string exists in the array of routes
             * @param  {String} name
             * @return {Boolean}
             */
            var exists = function exists(name) {
                return !!(config.ignoreRoutes.length && config.ignoreRoutes.indexOf(name) !== -1);
            };

            /**
             * Merges two objects
             * @param  {Object} obj
             * @param  {Object} src
             * @return {Object}
             */
            var merge = function merge(obj, src) {
                Object.keys(src).forEach(function(key) {
                    if (obj[key] && _typeof(obj[key]) === 'object') {
                        merge(obj[key], src[key]);
                        return;
                    }

                    obj[key] = src[key];
                });

                return obj;
            };

            function getName(value) {
                return value.replace(/-/gi, '');
            }

            function getListId() {
                return [].concat(config.id);
            }

            /**
             * Default configuration
             */
            var config = {
                debug: {
                    enabled: false,
                    trace: false,
                    sendHitTask: true
                },
                autoTracking: true,
                id: null,
                userId: null,
                ignoreRoutes: []
            };

            /**
             * Returns the new configuation object
             * @param  {Object} params
             * @return {Object}
             */
            function updateConfig(params) {
                return merge(config, params);
            }

            function ga(method) {
                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                }

                if (typeof window.ga === 'undefined') {
                    return;
                }

                var ids = getListId();

                ids.forEach(function(id) {
                    var _window;

                    var domain = getName(id);
                    var name = ids.length > 1 ? domain + '.' + method : method;

                    (_window = window).ga.apply(_window, [name].concat(args));
                });
            }

            /**
             * Page tracking
             * @param  {String} page
             * @param  {String} title
             * @param  {String} location
             */
            function page(page) {
                var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                var location = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

                ga('send', 'pageview', {
                    page: page,
                    title: title,
                    location: location
                });
            }

            /**
             * Updating tracker data
             * @param {any} data
             */
            function set$1() {
                if (typeof window.ga === 'undefined') {
                    return;
                }

                for (var _len = arguments.length, data = Array(_len), _key = 0; _key < _len; _key++) {
                    data[_key] = arguments[_key];
                }

                if (!data.length) {
                    return;
                }

                if (_typeof(data[0]) === 'object' && data[0].constructor === Object) {
                    // Use the ga.set with an object literal
                    ga('set', data[0]);
                    return;
                }

                if (data.length < 2 || typeof data[0] !== 'string' && typeof data[1] !== 'string') {
                    warn('$ga.set needs a field name and a field value, or you can pass an object literal');
                    return;
                }

                // Use ga.set with field name and field value
                ga('set', data[0], data[1]);
            }

            /**
             * Enable route autoTracking page
             * @param  {VueRouter} router
             */
            function autoTracking(router) {
                if (config.manual && !router && config.autoTracking) {
                    var url = 'https://github.com/MatteoGabriele/vue-analytics#auto-tracking';
                    warn('auto-tracking doesn\'t work without a router instance.', url);
                    return;
                }

                if (!config.autoTracking || !router) {
                    return;
                }

                // Track the first page when the user lands on it
                var route = router.currentRoute;

                if (!exists(route.name)) {
                    page(route.path, route.name, window.location.href);
                }

                // Track all other pages
                router.afterEach(function(_ref) {
                    var path = _ref.path,
                        name = _ref.name;

                    if (exists(name)) {
                        return;
                    }

                    set$1('page', path);
                    page(path, name, window.location.href);
                });
            }

            /**
             * Event tracking
             * @param  {String} category
             * @param  {String} action
             * @param  {String} [label='']
             * @param  {Number} [value=0]
             */
            function events(category, action) {
                var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
                var value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

                ga('send', 'event', category, action, label, value);
            }

            /**
             * Time tracking
             * @param  {String} category
             * @param  {String} variable
             * @param  {Number} value
             * @param  {String} [label='']
             */
            function time(category, variable, value) {
                var label = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

                ga('send', 'timing', category, variable, value, label);
            }

            /**
             * Plain access to the GA
             * with the query method is possible to pass everything.
             * if there's some new command that is not implemented yet, just use this
             * @param  {any} args
             */
            function query() {
                ga.apply(undefined, arguments);
            }

            var features = {
                autoTracking: autoTracking,
                trackEvent: events,
                trackPage: page,
                trackTime: time,
                set: set$1,
                query: query
            };

            function init(router, callback) {
                if (config.manual) {
                    return;
                }

                if (!config.id || !config.id.length) {
                    var url = 'https://github.com/MatteoGabriele/vue-analytics#usage';
                    warn('Please enter a Google Analaytics tracking ID', url);
                    return;
                }

                var options = config.userId || {};
                var debugSource = config.debug.enabled ? '_debug' : '';
                var source = 'https://www.google-analytics.com/analytics' + debugSource + '.js';

                loadScript(source, function(error, script) {
                    if (error) {
                        warn('Ops! Could\'t load the Google Analytics script');
                        return;
                    }

                    var poll = setInterval(function() {
                        if (!window.ga) {
                            return;
                        }

                        clearInterval(poll);

                        if (config.debug.enabled) {
                            window.ga_debug = {
                                trace: config.debug.trace
                            };
                        }

                        var ids = getListId();
                        ids.forEach(function(id) {
                            if (ids.length > 1) {
                                // we need to register the name used by the ga methods so that
                                // when a method is used Google knows which account did it
                                options['name'] = getName(id);
                            }

                            window.ga('create', id, 'auto', options);
                        });

                        // the callback is fired when window.ga is available and before any other hit is sent
                        // see MatteoGabriele/vue-analytics/issues/20
                        if (callback && typeof callback === 'function') {
                            callback();
                        }

                        if (!config.debug.sendHitTask) {
                            features.set('sendHitTask', null);
                        }

                        // send the first pageview hit
                        ga('send', 'pageview');

                        features.autoTracking(router);
                    }, 10);
                });
            }

            /**
             * Vue installer
             * @param  {Vue instance} Vue
             * @param  {Object} [options={}]
             */
            function install(Vue) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var router = options.router;


                delete options.router;
                updateConfig(options);

                init(router, options.onAnalyticsReady);

                Vue.prototype.$ga = Vue.$ga = features;
            }

            var index = {
                install: install,
                getName: getName
            };

            return index;

        })));


        /***/
    }),
    /* 77 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(293)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(82),
            /* template */
            __webpack_require__(270),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 78 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /**
         * vue-router v2.8.1
         * (c) 2017 Evan You
         * @license MIT
         */
        /*  */

        function assert(condition, message) {
            if (!condition) {
                throw new Error(("[vue-router] " + message))
            }
        }

        function warn(condition, message) {
            if (false) {
                typeof console !== 'undefined' && console.warn(("[vue-router] " + message));
            }
        }

        function isError(err) {
            return Object.prototype.toString.call(err).indexOf('Error') > -1
        }

        var View = {
            name: 'router-view',
            functional: true,
            props: {
                name: {
                    type: String,
                    default: 'default'
                }
            },
            render: function render(_, ref) {
                var props = ref.props;
                var children = ref.children;
                var parent = ref.parent;
                var data = ref.data;

                data.routerView = true;

                // directly use parent context's createElement() function
                // so that components rendered by router-view can resolve named slots
                var h = parent.$createElement;
                var name = props.name;
                var route = parent.$route;
                var cache = parent._routerViewCache || (parent._routerViewCache = {});

                // determine current view depth, also check to see if the tree
                // has been toggled inactive but kept-alive.
                var depth = 0;
                var inactive = false;
                while (parent && parent._routerRoot !== parent) {
                    if (parent.$vnode && parent.$vnode.data.routerView) {
                        depth++;
                    }
                    if (parent._inactive) {
                        inactive = true;
                    }
                    parent = parent.$parent;
                }
                data.routerViewDepth = depth;

                // render previous view if the tree is inactive and kept-alive
                if (inactive) {
                    return h(cache[name], data, children)
                }

                var matched = route.matched[depth];
                // render empty node if no matched route
                if (!matched) {
                    cache[name] = null;
                    return h()
                }

                var component = cache[name] = matched.components[name];

                // attach instance registration hook
                // this will be called in the instance's injected lifecycle hooks
                data.registerRouteInstance = function(vm, val) {
                    // val could be undefined for unregistration
                    var current = matched.instances[name];
                    if (
                        (val && current !== vm) ||
                        (!val && current === vm)
                    ) {
                        matched.instances[name] = val;
                    }
                }

                // also register instance in prepatch hook
                // in case the same component instance is reused across different routes
                ;
                (data.hook || (data.hook = {})).prepatch = function(_, vnode) {
                    matched.instances[name] = vnode.componentInstance;
                };

                // resolve props
                var propsToPass = data.props = resolveProps(route, matched.props && matched.props[name]);
                if (propsToPass) {
                    // clone to prevent mutation
                    propsToPass = data.props = extend({}, propsToPass);
                    // pass non-declared props as attrs
                    var attrs = data.attrs = data.attrs || {};
                    for (var key in propsToPass) {
                        if (!component.props || !(key in component.props)) {
                            attrs[key] = propsToPass[key];
                            delete propsToPass[key];
                        }
                    }
                }

                return h(component, data, children)
            }
        };

        function resolveProps(route, config) {
            switch (typeof config) {
                case 'undefined':
                    return
                case 'object':
                    return config
                case 'function':
                    return config(route)
                case 'boolean':
                    return config ? route.params : undefined
                default:
                    if (false) {
                        warn(
                            false,
                            "props in \"" + (route.path) + "\" is a " + (typeof config) + ", " +
                            "expecting an object, function or boolean."
                        );
                    }
            }
        }

        function extend(to, from) {
            for (var key in from) {
                to[key] = from[key];
            }
            return to
        }

        /*  */

        var encodeReserveRE = /[!'()*]/g;
        var encodeReserveReplacer = function(c) {
            return '%' + c.charCodeAt(0).toString(16);
        };
        var commaRE = /%2C/g;

        // fixed encodeURIComponent which is more conformant to RFC3986:
        // - escapes [!'()*]
        // - preserve commas
        var encode = function(str) {
            return encodeURIComponent(str)
                .replace(encodeReserveRE, encodeReserveReplacer)
                .replace(commaRE, ',');
        };

        var decode = decodeURIComponent;

        function resolveQuery(
            query,
            extraQuery,
            _parseQuery
        ) {
            if (extraQuery === void 0) extraQuery = {};

            var parse = _parseQuery || parseQuery;
            var parsedQuery;
            try {
                parsedQuery = parse(query || '');
            } catch (e) {
                "production" !== 'production' && warn(false, e.message);
                parsedQuery = {};
            }
            for (var key in extraQuery) {
                parsedQuery[key] = extraQuery[key];
            }
            return parsedQuery
        }

        function parseQuery(query) {
            var res = {};

            query = query.trim().replace(/^(\?|#|&)/, '');

            if (!query) {
                return res
            }

            query.split('&').forEach(function(param) {
                var parts = param.replace(/\+/g, ' ').split('=');
                var key = decode(parts.shift());
                var val = parts.length > 0 ?
                    decode(parts.join('=')) :
                    null;

                if (res[key] === undefined) {
                    res[key] = val;
                } else if (Array.isArray(res[key])) {
                    res[key].push(val);
                } else {
                    res[key] = [res[key], val];
                }
            });

            return res
        }

        function stringifyQuery(obj) {
            var res = obj ? Object.keys(obj).map(function(key) {
                var val = obj[key];

                if (val === undefined) {
                    return ''
                }

                if (val === null) {
                    return encode(key)
                }

                if (Array.isArray(val)) {
                    var result = [];
                    val.forEach(function(val2) {
                        if (val2 === undefined) {
                            return
                        }
                        if (val2 === null) {
                            result.push(encode(key));
                        } else {
                            result.push(encode(key) + '=' + encode(val2));
                        }
                    });
                    return result.join('&')
                }

                return encode(key) + '=' + encode(val)
            }).filter(function(x) {
                return x.length > 0;
            }).join('&') : null;
            return res ? ("?" + res) : ''
        }

        /*  */


        var trailingSlashRE = /\/?$/;

        function createRoute(
            record,
            location,
            redirectedFrom,
            router
        ) {
            var stringifyQuery$$1 = router && router.options.stringifyQuery;

            var query = location.query || {};
            try {
                query = clone(query);
            } catch (e) {}

            var route = {
                name: location.name || (record && record.name),
                meta: (record && record.meta) || {},
                path: location.path || '/',
                hash: location.hash || '',
                query: query,
                params: location.params || {},
                fullPath: getFullPath(location, stringifyQuery$$1),
                matched: record ? formatMatch(record) : []
            };
            if (redirectedFrom) {
                route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);
            }
            return Object.freeze(route)
        }

        function clone(value) {
            if (Array.isArray(value)) {
                return value.map(clone)
            } else if (value && typeof value === 'object') {
                var res = {};
                for (var key in value) {
                    res[key] = clone(value[key]);
                }
                return res
            } else {
                return value
            }
        }

        // the starting route that represents the initial state
        var START = createRoute(null, {
            path: '/'
        });

        function formatMatch(record) {
            var res = [];
            while (record) {
                res.unshift(record);
                record = record.parent;
            }
            return res
        }

        function getFullPath(
            ref,
            _stringifyQuery
        ) {
            var path = ref.path;
            var query = ref.query;
            if (query === void 0) query = {};
            var hash = ref.hash;
            if (hash === void 0) hash = '';

            var stringify = _stringifyQuery || stringifyQuery;
            return (path || '/') + stringify(query) + hash
        }

        function isSameRoute(a, b) {
            if (b === START) {
                return a === b
            } else if (!b) {
                return false
            } else if (a.path && b.path) {
                return (
                    a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&
                    a.hash === b.hash &&
                    isObjectEqual(a.query, b.query)
                )
            } else if (a.name && b.name) {
                return (
                    a.name === b.name &&
                    a.hash === b.hash &&
                    isObjectEqual(a.query, b.query) &&
                    isObjectEqual(a.params, b.params)
                )
            } else {
                return false
            }
        }

        function isObjectEqual(a, b) {
            if (a === void 0) a = {};
            if (b === void 0) b = {};

            // handle null value #1566
            if (!a || !b) {
                return a === b
            }
            var aKeys = Object.keys(a);
            var bKeys = Object.keys(b);
            if (aKeys.length !== bKeys.length) {
                return false
            }
            return aKeys.every(function(key) {
                var aVal = a[key];
                var bVal = b[key];
                // check nested equality
                if (typeof aVal === 'object' && typeof bVal === 'object') {
                    return isObjectEqual(aVal, bVal)
                }
                return String(aVal) === String(bVal)
            })
        }

        function isIncludedRoute(current, target) {
            return (
                current.path.replace(trailingSlashRE, '/').indexOf(
                    target.path.replace(trailingSlashRE, '/')
                ) === 0 &&
                (!target.hash || current.hash === target.hash) &&
                queryIncludes(current.query, target.query)
            )
        }

        function queryIncludes(current, target) {
            for (var key in target) {
                if (!(key in current)) {
                    return false
                }
            }
            return true
        }

        /*  */

        // work around weird flow bug
        var toTypes = [String, Object];
        var eventTypes = [String, Array];

        var Link = {
            name: 'router-link',
            props: {
                to: {
                    type: toTypes,
                    required: true
                },
                tag: {
                    type: String,
                    default: 'a'
                },
                exact: Boolean,
                append: Boolean,
                replace: Boolean,
                activeClass: String,
                exactActiveClass: String,
                event: {
                    type: eventTypes,
                    default: 'click'
                }
            },
            render: function render(h) {
                var this$1 = this;

                var router = this.$router;
                var current = this.$route;
                var ref = router.resolve(this.to, current, this.append);
                var location = ref.location;
                var route = ref.route;
                var href = ref.href;

                var classes = {};
                var globalActiveClass = router.options.linkActiveClass;
                var globalExactActiveClass = router.options.linkExactActiveClass;
                // Support global empty active class
                var activeClassFallback = globalActiveClass == null ?
                    'router-link-active' :
                    globalActiveClass;
                var exactActiveClassFallback = globalExactActiveClass == null ?
                    'router-link-exact-active' :
                    globalExactActiveClass;
                var activeClass = this.activeClass == null ?
                    activeClassFallback :
                    this.activeClass;
                var exactActiveClass = this.exactActiveClass == null ?
                    exactActiveClassFallback :
                    this.exactActiveClass;
                var compareTarget = location.path ?
                    createRoute(null, location, null, router) :
                    route;

                classes[exactActiveClass] = isSameRoute(current, compareTarget);
                classes[activeClass] = this.exact ?
                    classes[exactActiveClass] :
                    isIncludedRoute(current, compareTarget);

                var handler = function(e) {
                    if (guardEvent(e)) {
                        if (this$1.replace) {
                            router.replace(location);
                        } else {
                            router.push(location);
                        }
                    }
                };

                var on = {
                    click: guardEvent
                };
                if (Array.isArray(this.event)) {
                    this.event.forEach(function(e) {
                        on[e] = handler;
                    });
                } else {
                    on[this.event] = handler;
                }

                var data = {
                    class: classes
                };

                if (this.tag === 'a') {
                    data.on = on;
                    data.attrs = {
                        href: href
                    };
                } else {
                    // find the first <a> child and apply listener and href
                    var a = findAnchor(this.$slots.default);
                    if (a) {
                        // in case the <a> is a static node
                        a.isStatic = false;
                        var extend = _Vue.util.extend;
                        var aData = a.data = extend({}, a.data);
                        aData.on = on;
                        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
                        aAttrs.href = href;
                    } else {
                        // doesn't have <a> child, apply listener to self
                        data.on = on;
                    }
                }

                return h(this.tag, data, this.$slots.default)
            }
        };

        function guardEvent(e) {
            // don't redirect with control keys
            if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) {
                return
            }
            // don't redirect when preventDefault called
            if (e.defaultPrevented) {
                return
            }
            // don't redirect on right click
            if (e.button !== undefined && e.button !== 0) {
                return
            }
            // don't redirect if `target="_blank"`
            if (e.currentTarget && e.currentTarget.getAttribute) {
                var target = e.currentTarget.getAttribute('target');
                if (/\b_blank\b/i.test(target)) {
                    return
                }
            }
            // this may be a Weex event which doesn't have this method
            if (e.preventDefault) {
                e.preventDefault();
            }
            return true
        }

        function findAnchor(children) {
            if (children) {
                var child;
                for (var i = 0; i < children.length; i++) {
                    child = children[i];
                    if (child.tag === 'a') {
                        return child
                    }
                    if (child.children && (child = findAnchor(child.children))) {
                        return child
                    }
                }
            }
        }

        var _Vue;

        function install(Vue) {
            if (install.installed && _Vue === Vue) {
                return
            }
            install.installed = true;

            _Vue = Vue;

            var isDef = function(v) {
                return v !== undefined;
            };

            var registerInstance = function(vm, callVal) {
                var i = vm.$options._parentVnode;
                if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
                    i(vm, callVal);
                }
            };

            Vue.mixin({
                beforeCreate: function beforeCreate() {
                    if (isDef(this.$options.router)) {
                        this._routerRoot = this;
                        this._router = this.$options.router;
                        this._router.init(this);
                        Vue.util.defineReactive(this, '_route', this._router.history.current);
                    } else {
                        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;
                    }
                    registerInstance(this, this);
                },
                destroyed: function destroyed() {
                    registerInstance(this);
                }
            });

            Object.defineProperty(Vue.prototype, '$router', {
                get: function get() {
                    return this._routerRoot._router
                }
            });

            Object.defineProperty(Vue.prototype, '$route', {
                get: function get() {
                    return this._routerRoot._route
                }
            });

            Vue.component('router-view', View);
            Vue.component('router-link', Link);

            var strats = Vue.config.optionMergeStrategies;
            // use the same hook merging strategy for route hooks
            strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
        }

        /*  */

        var inBrowser = typeof window !== 'undefined';

        /*  */

        function resolvePath(
            relative,
            base,
            append
        ) {
            var firstChar = relative.charAt(0);
            if (firstChar === '/') {
                return relative
            }

            if (firstChar === '?' || firstChar === '#') {
                return base + relative
            }

            var stack = base.split('/');

            // remove trailing segment if:
            // - not appending
            // - appending to trailing slash (last segment is empty)
            if (!append || !stack[stack.length - 1]) {
                stack.pop();
            }

            // resolve relative path
            var segments = relative.replace(/^\//, '').split('/');
            for (var i = 0; i < segments.length; i++) {
                var segment = segments[i];
                if (segment === '..') {
                    stack.pop();
                } else if (segment !== '.') {
                    stack.push(segment);
                }
            }

            // ensure leading slash
            if (stack[0] !== '') {
                stack.unshift('');
            }

            return stack.join('/')
        }

        function parsePath(path) {
            var hash = '';
            var query = '';

            var hashIndex = path.indexOf('#');
            if (hashIndex >= 0) {
                hash = path.slice(hashIndex);
                path = path.slice(0, hashIndex);
            }

            var queryIndex = path.indexOf('?');
            if (queryIndex >= 0) {
                query = path.slice(queryIndex + 1);
                path = path.slice(0, queryIndex);
            }

            return {
                path: path,
                query: query,
                hash: hash
            }
        }

        function cleanPath(path) {
            return path.replace(/\/\//g, '/')
        }

        var isarray = Array.isArray || function(arr) {
            return Object.prototype.toString.call(arr) == '[object Array]';
        };

        /**
         * Expose `pathToRegexp`.
         */
        var pathToRegexp_1 = pathToRegexp;
        var parse_1 = parse;
        var compile_1 = compile;
        var tokensToFunction_1 = tokensToFunction;
        var tokensToRegExp_1 = tokensToRegExp;

        /**
         * The main path matching regexp utility.
         *
         * @type {RegExp}
         */
        var PATH_REGEXP = new RegExp([
            // Match escaped characters that would otherwise appear in future matches.
            // This allows the user to escape special characters that won't transform.
            '(\\\\.)',
            // Match Express-style parameters and un-named parameters with a prefix
            // and optional suffixes. Matches appear as:
            //
            // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
            // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
            // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
            '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
        ].join('|'), 'g');

        /**
         * Parse a string for the raw tokens.
         *
         * @param  {string}  str
         * @param  {Object=} options
         * @return {!Array}
         */
        function parse(str, options) {
            var tokens = [];
            var key = 0;
            var index = 0;
            var path = '';
            var defaultDelimiter = options && options.delimiter || '/';
            var res;

            while ((res = PATH_REGEXP.exec(str)) != null) {
                var m = res[0];
                var escaped = res[1];
                var offset = res.index;
                path += str.slice(index, offset);
                index = offset + m.length;

                // Ignore already escaped sequences.
                if (escaped) {
                    path += escaped[1];
                    continue
                }

                var next = str[index];
                var prefix = res[2];
                var name = res[3];
                var capture = res[4];
                var group = res[5];
                var modifier = res[6];
                var asterisk = res[7];

                // Push the current path onto the tokens.
                if (path) {
                    tokens.push(path);
                    path = '';
                }

                var partial = prefix != null && next != null && next !== prefix;
                var repeat = modifier === '+' || modifier === '*';
                var optional = modifier === '?' || modifier === '*';
                var delimiter = res[2] || defaultDelimiter;
                var pattern = capture || group;

                tokens.push({
                    name: name || key++,
                    prefix: prefix || '',
                    delimiter: delimiter,
                    optional: optional,
                    repeat: repeat,
                    partial: partial,
                    asterisk: !!asterisk,
                    pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
                });
            }

            // Match any characters still remaining.
            if (index < str.length) {
                path += str.substr(index);
            }

            // If the path exists, push it onto the end.
            if (path) {
                tokens.push(path);
            }

            return tokens
        }

        /**
         * Compile a string to a template function for the path.
         *
         * @param  {string}             str
         * @param  {Object=}            options
         * @return {!function(Object=, Object=)}
         */
        function compile(str, options) {
            return tokensToFunction(parse(str, options))
        }

        /**
         * Prettier encoding of URI path segments.
         *
         * @param  {string}
         * @return {string}
         */
        function encodeURIComponentPretty(str) {
            return encodeURI(str).replace(/[\/?#]/g, function(c) {
                return '%' + c.charCodeAt(0).toString(16).toUpperCase()
            })
        }

        /**
         * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
         *
         * @param  {string}
         * @return {string}
         */
        function encodeAsterisk(str) {
            return encodeURI(str).replace(/[?#]/g, function(c) {
                return '%' + c.charCodeAt(0).toString(16).toUpperCase()
            })
        }

        /**
         * Expose a method for transforming tokens into the path function.
         */
        function tokensToFunction(tokens) {
            // Compile all the tokens into regexps.
            var matches = new Array(tokens.length);

            // Compile all the patterns before compilation.
            for (var i = 0; i < tokens.length; i++) {
                if (typeof tokens[i] === 'object') {
                    matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
                }
            }

            return function(obj, opts) {
                var path = '';
                var data = obj || {};
                var options = opts || {};
                var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

                for (var i = 0; i < tokens.length; i++) {
                    var token = tokens[i];

                    if (typeof token === 'string') {
                        path += token;

                        continue
                    }

                    var value = data[token.name];
                    var segment;

                    if (value == null) {
                        if (token.optional) {
                            // Prepend partial segment prefixes.
                            if (token.partial) {
                                path += token.prefix;
                            }

                            continue
                        } else {
                            throw new TypeError('Expected "' + token.name + '" to be defined')
                        }
                    }

                    if (isarray(value)) {
                        if (!token.repeat) {
                            throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
                        }

                        if (value.length === 0) {
                            if (token.optional) {
                                continue
                            } else {
                                throw new TypeError('Expected "' + token.name + '" to not be empty')
                            }
                        }

                        for (var j = 0; j < value.length; j++) {
                            segment = encode(value[j]);

                            if (!matches[i].test(segment)) {
                                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
                            }

                            path += (j === 0 ? token.prefix : token.delimiter) + segment;
                        }

                        continue
                    }

                    segment = token.asterisk ? encodeAsterisk(value) : encode(value);

                    if (!matches[i].test(segment)) {
                        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
                    }

                    path += token.prefix + segment;
                }

                return path
            }
        }

        /**
         * Escape a regular expression string.
         *
         * @param  {string} str
         * @return {string}
         */
        function escapeString(str) {
            return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
        }

        /**
         * Escape the capturing group by escaping special characters and meaning.
         *
         * @param  {string} group
         * @return {string}
         */
        function escapeGroup(group) {
            return group.replace(/([=!:$\/()])/g, '\\$1')
        }

        /**
         * Attach the keys as a property of the regexp.
         *
         * @param  {!RegExp} re
         * @param  {Array}   keys
         * @return {!RegExp}
         */
        function attachKeys(re, keys) {
            re.keys = keys;
            return re
        }

        /**
         * Get the flags for a regexp from the options.
         *
         * @param  {Object} options
         * @return {string}
         */
        function flags(options) {
            return options.sensitive ? '' : 'i'
        }

        /**
         * Pull out keys from a regexp.
         *
         * @param  {!RegExp} path
         * @param  {!Array}  keys
         * @return {!RegExp}
         */
        function regexpToRegexp(path, keys) {
            // Use a negative lookahead to match only capturing groups.
            var groups = path.source.match(/\((?!\?)/g);

            if (groups) {
                for (var i = 0; i < groups.length; i++) {
                    keys.push({
                        name: i,
                        prefix: null,
                        delimiter: null,
                        optional: false,
                        repeat: false,
                        partial: false,
                        asterisk: false,
                        pattern: null
                    });
                }
            }

            return attachKeys(path, keys)
        }

        /**
         * Transform an array into a regexp.
         *
         * @param  {!Array}  path
         * @param  {Array}   keys
         * @param  {!Object} options
         * @return {!RegExp}
         */
        function arrayToRegexp(path, keys, options) {
            var parts = [];

            for (var i = 0; i < path.length; i++) {
                parts.push(pathToRegexp(path[i], keys, options).source);
            }

            var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

            return attachKeys(regexp, keys)
        }

        /**
         * Create a path regexp from string input.
         *
         * @param  {string}  path
         * @param  {!Array}  keys
         * @param  {!Object} options
         * @return {!RegExp}
         */
        function stringToRegexp(path, keys, options) {
            return tokensToRegExp(parse(path, options), keys, options)
        }

        /**
         * Expose a function for taking tokens and returning a RegExp.
         *
         * @param  {!Array}          tokens
         * @param  {(Array|Object)=} keys
         * @param  {Object=}         options
         * @return {!RegExp}
         */
        function tokensToRegExp(tokens, keys, options) {
            if (!isarray(keys)) {
                options = /** @type {!Object} */ (keys || options);
                keys = [];
            }

            options = options || {};

            var strict = options.strict;
            var end = options.end !== false;
            var route = '';

            // Iterate over the tokens and create our regexp string.
            for (var i = 0; i < tokens.length; i++) {
                var token = tokens[i];

                if (typeof token === 'string') {
                    route += escapeString(token);
                } else {
                    var prefix = escapeString(token.prefix);
                    var capture = '(?:' + token.pattern + ')';

                    keys.push(token);

                    if (token.repeat) {
                        capture += '(?:' + prefix + capture + ')*';
                    }

                    if (token.optional) {
                        if (!token.partial) {
                            capture = '(?:' + prefix + '(' + capture + '))?';
                        } else {
                            capture = prefix + '(' + capture + ')?';
                        }
                    } else {
                        capture = prefix + '(' + capture + ')';
                    }

                    route += capture;
                }
            }

            var delimiter = escapeString(options.delimiter || '/');
            var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

            // In non-strict mode we allow a slash at the end of match. If the path to
            // match already ends with a slash, we remove it for consistency. The slash
            // is valid at the end of a path match, not in the middle. This is important
            // in non-ending mode, where "/test/" shouldn't match "/test//route".
            if (!strict) {
                route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
            }

            if (end) {
                route += '$';
            } else {
                // In non-ending mode, we need the capturing groups to match as much as
                // possible by using a positive lookahead to the end or next path segment.
                route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
            }

            return attachKeys(new RegExp('^' + route, flags(options)), keys)
        }

        /**
         * Normalize the given path string, returning a regular expression.
         *
         * An empty array can be passed in for the keys, which will hold the
         * placeholder key descriptions. For example, using `/user/:id`, `keys` will
         * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
         *
         * @param  {(string|RegExp|Array)} path
         * @param  {(Array|Object)=}       keys
         * @param  {Object=}               options
         * @return {!RegExp}
         */
        function pathToRegexp(path, keys, options) {
            if (!isarray(keys)) {
                options = /** @type {!Object} */ (keys || options);
                keys = [];
            }

            options = options || {};

            if (path instanceof RegExp) {
                return regexpToRegexp(path, /** @type {!Array} */ (keys))
            }

            if (isarray(path)) {
                return arrayToRegexp( /** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
            }

            return stringToRegexp( /** @type {string} */ (path), /** @type {!Array} */ (keys), options)
        }

        pathToRegexp_1.parse = parse_1;
        pathToRegexp_1.compile = compile_1;
        pathToRegexp_1.tokensToFunction = tokensToFunction_1;
        pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

        /*  */

        // $flow-disable-line
        var regexpCompileCache = Object.create(null);

        function fillParams(
            path,
            params,
            routeMsg
        ) {
            try {
                var filler =
                    regexpCompileCache[path] ||
                    (regexpCompileCache[path] = pathToRegexp_1.compile(path));
                return filler(params || {}, {
                    pretty: true
                })
            } catch (e) {
                if (false) {
                    warn(false, ("missing param for " + routeMsg + ": " + (e.message)));
                }
                return ''
            }
        }

        /*  */

        function createRouteMap(
            routes,
            oldPathList,
            oldPathMap,
            oldNameMap
        ) {
            // the path list is used to control path matching priority
            var pathList = oldPathList || [];
            // $flow-disable-line
            var pathMap = oldPathMap || Object.create(null);
            // $flow-disable-line
            var nameMap = oldNameMap || Object.create(null);

            routes.forEach(function(route) {
                addRouteRecord(pathList, pathMap, nameMap, route);
            });

            // ensure wildcard routes are always at the end
            for (var i = 0, l = pathList.length; i < l; i++) {
                if (pathList[i] === '*') {
                    pathList.push(pathList.splice(i, 1)[0]);
                    l--;
                    i--;
                }
            }

            return {
                pathList: pathList,
                pathMap: pathMap,
                nameMap: nameMap
            }
        }

        function addRouteRecord(
            pathList,
            pathMap,
            nameMap,
            route,
            parent,
            matchAs
        ) {
            var path = route.path;
            var name = route.name;
            if (false) {
                assert(path != null, "\"path\" is required in a route configuration.");
                assert(
                    typeof route.component !== 'string',
                    "route config \"component\" for path: " + (String(path || name)) + " cannot be a " +
                    "string id. Use an actual component instead."
                );
            }

            var pathToRegexpOptions = route.pathToRegexpOptions || {};
            var normalizedPath = normalizePath(
                path,
                parent,
                pathToRegexpOptions.strict
            );

            if (typeof route.caseSensitive === 'boolean') {
                pathToRegexpOptions.sensitive = route.caseSensitive;
            }

            var record = {
                path: normalizedPath,
                regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
                components: route.components || {
                    default: route.component
                },
                instances: {},
                name: name,
                parent: parent,
                matchAs: matchAs,
                redirect: route.redirect,
                beforeEnter: route.beforeEnter,
                meta: route.meta || {},
                props: route.props == null ?
                    {} :
                    route.components ?
                    route.props :
                    {
                        default: route.props
                    }
            };

            if (route.children) {
                // Warn if route is named, does not redirect and has a default child route.
                // If users navigate to this route by name, the default child will
                // not be rendered (GH Issue #629)
                if (false) {
                    if (route.name && !route.redirect && route.children.some(function(child) {
                            return /^\/?$/.test(child.path);
                        })) {
                        warn(
                            false,
                            "Named Route '" + (route.name) + "' has a default child route. " +
                            "When navigating to this named route (:to=\"{name: '" + (route.name) + "'\"), " +
                            "the default child route will not be rendered. Remove the name from " +
                            "this route and use the name of the default child route for named " +
                            "links instead."
                        );
                    }
                }
                route.children.forEach(function(child) {
                    var childMatchAs = matchAs ?
                        cleanPath((matchAs + "/" + (child.path))) :
                        undefined;
                    addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
                });
            }

            if (route.alias !== undefined) {
                var aliases = Array.isArray(route.alias) ?
                    route.alias :
                    [route.alias];

                aliases.forEach(function(alias) {
                    var aliasRoute = {
                        path: alias,
                        children: route.children
                    };
                    addRouteRecord(
                        pathList,
                        pathMap,
                        nameMap,
                        aliasRoute,
                        parent,
                        record.path || '/' // matchAs
                    );
                });
            }

            if (!pathMap[record.path]) {
                pathList.push(record.path);
                pathMap[record.path] = record;
            }

            if (name) {
                if (!nameMap[name]) {
                    nameMap[name] = record;
                } else if (false) {
                    warn(
                        false,
                        "Duplicate named routes definition: " +
                        "{ name: \"" + name + "\", path: \"" + (record.path) + "\" }"
                    );
                }
            }
        }

        function compileRouteRegex(path, pathToRegexpOptions) {
            var regex = pathToRegexp_1(path, [], pathToRegexpOptions);
            if (false) {
                var keys = Object.create(null);
                regex.keys.forEach(function(key) {
                    warn(!keys[key.name], ("Duplicate param keys in route with path: \"" + path + "\""));
                    keys[key.name] = true;
                });
            }
            return regex
        }

        function normalizePath(path, parent, strict) {
            if (!strict) {
                path = path.replace(/\/$/, '');
            }
            if (path[0] === '/') {
                return path
            }
            if (parent == null) {
                return path
            }
            return cleanPath(((parent.path) + "/" + path))
        }

        /*  */


        function normalizeLocation(
            raw,
            current,
            append,
            router
        ) {
            var next = typeof raw === 'string' ? {
                path: raw
            } : raw;
            // named target
            if (next.name || next._normalized) {
                return next
            }

            // relative params
            if (!next.path && next.params && current) {
                next = assign({}, next);
                next._normalized = true;
                var params = assign(assign({}, current.params), next.params);
                if (current.name) {
                    next.name = current.name;
                    next.params = params;
                } else if (current.matched.length) {
                    var rawPath = current.matched[current.matched.length - 1].path;
                    next.path = fillParams(rawPath, params, ("path " + (current.path)));
                } else if (false) {
                    warn(false, "relative params navigation requires a current route.");
                }
                return next
            }

            var parsedPath = parsePath(next.path || '');
            var basePath = (current && current.path) || '/';
            var path = parsedPath.path ?
                resolvePath(parsedPath.path, basePath, append || next.append) :
                basePath;

            var query = resolveQuery(
                parsedPath.query,
                next.query,
                router && router.options.parseQuery
            );

            var hash = next.hash || parsedPath.hash;
            if (hash && hash.charAt(0) !== '#') {
                hash = "#" + hash;
            }

            return {
                _normalized: true,
                path: path,
                query: query,
                hash: hash
            }
        }

        function assign(a, b) {
            for (var key in b) {
                a[key] = b[key];
            }
            return a
        }

        /*  */


        function createMatcher(
            routes,
            router
        ) {
            var ref = createRouteMap(routes);
            var pathList = ref.pathList;
            var pathMap = ref.pathMap;
            var nameMap = ref.nameMap;

            function addRoutes(routes) {
                createRouteMap(routes, pathList, pathMap, nameMap);
            }

            function match(
                raw,
                currentRoute,
                redirectedFrom
            ) {
                var location = normalizeLocation(raw, currentRoute, false, router);
                var name = location.name;

                if (name) {
                    var record = nameMap[name];
                    if (false) {
                        warn(record, ("Route with name '" + name + "' does not exist"));
                    }
                    if (!record) {
                        return _createRoute(null, location)
                    }
                    var paramNames = record.regex.keys
                        .filter(function(key) {
                            return !key.optional;
                        })
                        .map(function(key) {
                            return key.name;
                        });

                    if (typeof location.params !== 'object') {
                        location.params = {};
                    }

                    if (currentRoute && typeof currentRoute.params === 'object') {
                        for (var key in currentRoute.params) {
                            if (!(key in location.params) && paramNames.indexOf(key) > -1) {
                                location.params[key] = currentRoute.params[key];
                            }
                        }
                    }

                    if (record) {
                        location.path = fillParams(record.path, location.params, ("named route \"" + name + "\""));
                        return _createRoute(record, location, redirectedFrom)
                    }
                } else if (location.path) {
                    location.params = {};
                    for (var i = 0; i < pathList.length; i++) {
                        var path = pathList[i];
                        var record$1 = pathMap[path];
                        if (matchRoute(record$1.regex, location.path, location.params)) {
                            return _createRoute(record$1, location, redirectedFrom)
                        }
                    }
                }
                // no match
                return _createRoute(null, location)
            }

            function redirect(
                record,
                location
            ) {
                var originalRedirect = record.redirect;
                var redirect = typeof originalRedirect === 'function' ?
                    originalRedirect(createRoute(record, location, null, router)) :
                    originalRedirect;

                if (typeof redirect === 'string') {
                    redirect = {
                        path: redirect
                    };
                }

                if (!redirect || typeof redirect !== 'object') {
                    if (false) {
                        warn(
                            false, ("invalid redirect option: " + (JSON.stringify(redirect)))
                        );
                    }
                    return _createRoute(null, location)
                }

                var re = redirect;
                var name = re.name;
                var path = re.path;
                var query = location.query;
                var hash = location.hash;
                var params = location.params;
                query = re.hasOwnProperty('query') ? re.query : query;
                hash = re.hasOwnProperty('hash') ? re.hash : hash;
                params = re.hasOwnProperty('params') ? re.params : params;

                if (name) {
                    // resolved named direct
                    var targetRecord = nameMap[name];
                    if (false) {
                        assert(targetRecord, ("redirect failed: named route \"" + name + "\" not found."));
                    }
                    return match({
                        _normalized: true,
                        name: name,
                        query: query,
                        hash: hash,
                        params: params
                    }, undefined, location)
                } else if (path) {
                    // 1. resolve relative redirect
                    var rawPath = resolveRecordPath(path, record);
                    // 2. resolve params
                    var resolvedPath = fillParams(rawPath, params, ("redirect route with path \"" + rawPath + "\""));
                    // 3. rematch with existing query and hash
                    return match({
                        _normalized: true,
                        path: resolvedPath,
                        query: query,
                        hash: hash
                    }, undefined, location)
                } else {
                    if (false) {
                        warn(false, ("invalid redirect option: " + (JSON.stringify(redirect))));
                    }
                    return _createRoute(null, location)
                }
            }

            function alias(
                record,
                location,
                matchAs
            ) {
                var aliasedPath = fillParams(matchAs, location.params, ("aliased route with path \"" + matchAs + "\""));
                var aliasedMatch = match({
                    _normalized: true,
                    path: aliasedPath
                });
                if (aliasedMatch) {
                    var matched = aliasedMatch.matched;
                    var aliasedRecord = matched[matched.length - 1];
                    location.params = aliasedMatch.params;
                    return _createRoute(aliasedRecord, location)
                }
                return _createRoute(null, location)
            }

            function _createRoute(
                record,
                location,
                redirectedFrom
            ) {
                if (record && record.redirect) {
                    return redirect(record, redirectedFrom || location)
                }
                if (record && record.matchAs) {
                    return alias(record, location, record.matchAs)
                }
                return createRoute(record, location, redirectedFrom, router)
            }

            return {
                match: match,
                addRoutes: addRoutes
            }
        }

        function matchRoute(
            regex,
            path,
            params
        ) {
            var m = path.match(regex);

            if (!m) {
                return false
            } else if (!params) {
                return true
            }

            for (var i = 1, len = m.length; i < len; ++i) {
                var key = regex.keys[i - 1];
                var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];
                if (key) {
                    params[key.name] = val;
                }
            }

            return true
        }

        function resolveRecordPath(path, record) {
            return resolvePath(path, record.parent ? record.parent.path : '/', true)
        }

        /*  */


        var positionStore = Object.create(null);

        function setupScroll() {
            // Fix for #1585 for Firefox
            window.history.replaceState({
                key: getStateKey()
            }, '');
            window.addEventListener('popstate', function(e) {
                saveScrollPosition();
                if (e.state && e.state.key) {
                    setStateKey(e.state.key);
                }
            });
        }

        function handleScroll(
            router,
            to,
            from,
            isPop
        ) {
            if (!router.app) {
                return
            }

            var behavior = router.options.scrollBehavior;
            if (!behavior) {
                return
            }

            if (false) {
                assert(typeof behavior === 'function', "scrollBehavior must be a function");
            }

            // wait until re-render finishes before scrolling
            router.app.$nextTick(function() {
                var position = getScrollPosition();
                var shouldScroll = behavior(to, from, isPop ? position : null);

                if (!shouldScroll) {
                    return
                }

                if (typeof shouldScroll.then === 'function') {
                    shouldScroll.then(function(shouldScroll) {
                        scrollToPosition((shouldScroll), position);
                    }).catch(function(err) {
                        if (false) {
                            assert(false, err.toString());
                        }
                    });
                } else {
                    scrollToPosition(shouldScroll, position);
                }
            });
        }

        function saveScrollPosition() {
            var key = getStateKey();
            if (key) {
                positionStore[key] = {
                    x: window.pageXOffset,
                    y: window.pageYOffset
                };
            }
        }

        function getScrollPosition() {
            var key = getStateKey();
            if (key) {
                return positionStore[key]
            }
        }

        function getElementPosition(el, offset) {
            var docEl = document.documentElement;
            var docRect = docEl.getBoundingClientRect();
            var elRect = el.getBoundingClientRect();
            return {
                x: elRect.left - docRect.left - offset.x,
                y: elRect.top - docRect.top - offset.y
            }
        }

        function isValidPosition(obj) {
            return isNumber(obj.x) || isNumber(obj.y)
        }

        function normalizePosition(obj) {
            return {
                x: isNumber(obj.x) ? obj.x : window.pageXOffset,
                y: isNumber(obj.y) ? obj.y : window.pageYOffset
            }
        }

        function normalizeOffset(obj) {
            return {
                x: isNumber(obj.x) ? obj.x : 0,
                y: isNumber(obj.y) ? obj.y : 0
            }
        }

        function isNumber(v) {
            return typeof v === 'number'
        }

        function scrollToPosition(shouldScroll, position) {
            var isObject = typeof shouldScroll === 'object';
            if (isObject && typeof shouldScroll.selector === 'string') {
                var el = document.querySelector(shouldScroll.selector);
                if (el) {
                    var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};
                    offset = normalizeOffset(offset);
                    position = getElementPosition(el, offset);
                } else if (isValidPosition(shouldScroll)) {
                    position = normalizePosition(shouldScroll);
                }
            } else if (isObject && isValidPosition(shouldScroll)) {
                position = normalizePosition(shouldScroll);
            }

            if (position) {
                window.scrollTo(position.x, position.y);
            }
        }

        /*  */

        var supportsPushState = inBrowser && (function() {
            var ua = window.navigator.userAgent;

            if (
                (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&
                ua.indexOf('Mobile Safari') !== -1 &&
                ua.indexOf('Chrome') === -1 &&
                ua.indexOf('Windows Phone') === -1
            ) {
                return false
            }

            return window.history && 'pushState' in window.history
        })();

        // use User Timing api (if present) for more accurate key precision
        var Time = inBrowser && window.performance && window.performance.now ?
            window.performance :
            Date;

        var _key = genKey();

        function genKey() {
            return Time.now().toFixed(3)
        }

        function getStateKey() {
            return _key
        }

        function setStateKey(key) {
            _key = key;
        }

        function pushState(url, replace) {
            saveScrollPosition();
            // try...catch the pushState call to get around Safari
            // DOM Exception 18 where it limits to 100 pushState calls
            var history = window.history;
            try {
                if (replace) {
                    history.replaceState({
                        key: _key
                    }, '', url);
                } else {
                    _key = genKey();
                    history.pushState({
                        key: _key
                    }, '', url);
                }
            } catch (e) {
                window.location[replace ? 'replace' : 'assign'](url);
            }
        }

        function replaceState(url) {
            pushState(url, true);
        }

        /*  */

        function runQueue(queue, fn, cb) {
            var step = function(index) {
                if (index >= queue.length) {
                    cb();
                } else {
                    if (queue[index]) {
                        fn(queue[index], function() {
                            step(index + 1);
                        });
                    } else {
                        step(index + 1);
                    }
                }
            };
            step(0);
        }

        /*  */

        function resolveAsyncComponents(matched) {
            return function(to, from, next) {
                var hasAsync = false;
                var pending = 0;
                var error = null;

                flatMapComponents(matched, function(def, _, match, key) {
                    // if it's a function and doesn't have cid attached,
                    // assume it's an async component resolve function.
                    // we are not using Vue's default async resolving mechanism because
                    // we want to halt the navigation until the incoming component has been
                    // resolved.
                    if (typeof def === 'function' && def.cid === undefined) {
                        hasAsync = true;
                        pending++;

                        var resolve = once(function(resolvedDef) {
                            if (isESModule(resolvedDef)) {
                                resolvedDef = resolvedDef.default;
                            }
                            // save resolved on async factory in case it's used elsewhere
                            def.resolved = typeof resolvedDef === 'function' ?
                                resolvedDef :
                                _Vue.extend(resolvedDef);
                            match.components[key] = resolvedDef;
                            pending--;
                            if (pending <= 0) {
                                next();
                            }
                        });

                        var reject = once(function(reason) {
                            var msg = "Failed to resolve async component " + key + ": " + reason;
                            "production" !== 'production' && warn(false, msg);
                            if (!error) {
                                error = isError(reason) ?
                                    reason :
                                    new Error(msg);
                                next(error);
                            }
                        });

                        var res;
                        try {
                            res = def(resolve, reject);
                        } catch (e) {
                            reject(e);
                        }
                        if (res) {
                            if (typeof res.then === 'function') {
                                res.then(resolve, reject);
                            } else {
                                // new syntax in Vue 2.3
                                var comp = res.component;
                                if (comp && typeof comp.then === 'function') {
                                    comp.then(resolve, reject);
                                }
                            }
                        }
                    }
                });

                if (!hasAsync) {
                    next();
                }
            }
        }

        function flatMapComponents(
            matched,
            fn
        ) {
            return flatten(matched.map(function(m) {
                return Object.keys(m.components).map(function(key) {
                    return fn(
                        m.components[key],
                        m.instances[key],
                        m, key
                    );
                })
            }))
        }

        function flatten(arr) {
            return Array.prototype.concat.apply([], arr)
        }

        var hasSymbol =
            typeof Symbol === 'function' &&
            typeof Symbol.toStringTag === 'symbol';

        function isESModule(obj) {
            return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')
        }

        // in Webpack 2, require.ensure now also returns a Promise
        // so the resolve/reject functions may get called an extra time
        // if the user uses an arrow function shorthand that happens to
        // return that Promise.
        function once(fn) {
            var called = false;
            return function() {
                var args = [],
                    len = arguments.length;
                while (len--) args[len] = arguments[len];

                if (called) {
                    return
                }
                called = true;
                return fn.apply(this, args)
            }
        }

        /*  */

        var History = function History(router, base) {
            this.router = router;
            this.base = normalizeBase(base);
            // start with a route object that stands for "nowhere"
            this.current = START;
            this.pending = null;
            this.ready = false;
            this.readyCbs = [];
            this.readyErrorCbs = [];
            this.errorCbs = [];
        };

        History.prototype.listen = function listen(cb) {
            this.cb = cb;
        };

        History.prototype.onReady = function onReady(cb, errorCb) {
            if (this.ready) {
                cb();
            } else {
                this.readyCbs.push(cb);
                if (errorCb) {
                    this.readyErrorCbs.push(errorCb);
                }
            }
        };

        History.prototype.onError = function onError(errorCb) {
            this.errorCbs.push(errorCb);
        };

        History.prototype.transitionTo = function transitionTo(location, onComplete, onAbort) {
            var this$1 = this;

            var route = this.router.match(location, this.current);
            this.confirmTransition(route, function() {
                this$1.updateRoute(route);
                onComplete && onComplete(route);
                this$1.ensureURL();

                // fire ready cbs once
                if (!this$1.ready) {
                    this$1.ready = true;
                    this$1.readyCbs.forEach(function(cb) {
                        cb(route);
                    });
                }
            }, function(err) {
                if (onAbort) {
                    onAbort(err);
                }
                if (err && !this$1.ready) {
                    this$1.ready = true;
                    this$1.readyErrorCbs.forEach(function(cb) {
                        cb(err);
                    });
                }
            });
        };

        History.prototype.confirmTransition = function confirmTransition(route, onComplete, onAbort) {
            var this$1 = this;

            var current = this.current;
            var abort = function(err) {
                if (isError(err)) {
                    if (this$1.errorCbs.length) {
                        this$1.errorCbs.forEach(function(cb) {
                            cb(err);
                        });
                    } else {
                        warn(false, 'uncaught error during route navigation:');
                        console.error(err);
                    }
                }
                onAbort && onAbort(err);
            };
            if (
                isSameRoute(route, current) &&
                // in the case the route map has been dynamically appended to
                route.matched.length === current.matched.length
            ) {
                this.ensureURL();
                return abort()
            }

            var ref = resolveQueue(this.current.matched, route.matched);
            var updated = ref.updated;
            var deactivated = ref.deactivated;
            var activated = ref.activated;

            var queue = [].concat(
                // in-component leave guards
                extractLeaveGuards(deactivated),
                // global before hooks
                this.router.beforeHooks,
                // in-component update hooks
                extractUpdateHooks(updated),
                // in-config enter guards
                activated.map(function(m) {
                    return m.beforeEnter;
                }),
                // async components
                resolveAsyncComponents(activated)
            );

            this.pending = route;
            var iterator = function(hook, next) {
                if (this$1.pending !== route) {
                    return abort()
                }
                try {
                    hook(route, current, function(to) {
                        if (to === false || isError(to)) {
                            // next(false) -> abort navigation, ensure current URL
                            this$1.ensureURL(true);
                            abort(to);
                        } else if (
                            typeof to === 'string' ||
                            (typeof to === 'object' && (
                                typeof to.path === 'string' ||
                                typeof to.name === 'string'
                            ))
                        ) {
                            // next('/') or next({ path: '/' }) -> redirect
                            abort();
                            if (typeof to === 'object' && to.replace) {
                                this$1.replace(to);
                            } else {
                                this$1.push(to);
                            }
                        } else {
                            // confirm transition and pass on the value
                            next(to);
                        }
                    });
                } catch (e) {
                    abort(e);
                }
            };

            runQueue(queue, iterator, function() {
                var postEnterCbs = [];
                var isValid = function() {
                    return this$1.current === route;
                };
                // wait until async components are resolved before
                // extracting in-component enter guards
                var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
                var queue = enterGuards.concat(this$1.router.resolveHooks);
                runQueue(queue, iterator, function() {
                    if (this$1.pending !== route) {
                        return abort()
                    }
                    this$1.pending = null;
                    onComplete(route);
                    if (this$1.router.app) {
                        this$1.router.app.$nextTick(function() {
                            postEnterCbs.forEach(function(cb) {
                                cb();
                            });
                        });
                    }
                });
            });
        };

        History.prototype.updateRoute = function updateRoute(route) {
            var prev = this.current;
            this.current = route;
            this.cb && this.cb(route);
            this.router.afterHooks.forEach(function(hook) {
                hook && hook(route, prev);
            });
        };

        function normalizeBase(base) {
            if (!base) {
                if (inBrowser) {
                    // respect <base> tag
                    var baseEl = document.querySelector('base');
                    base = (baseEl && baseEl.getAttribute('href')) || '/';
                    // strip full URL origin
                    base = base.replace(/^https?:\/\/[^\/]+/, '');
                } else {
                    base = '/';
                }
            }
            // make sure there's the starting slash
            if (base.charAt(0) !== '/') {
                base = '/' + base;
            }
            // remove trailing slash
            return base.replace(/\/$/, '')
        }

        function resolveQueue(
            current,
            next
        ) {
            var i;
            var max = Math.max(current.length, next.length);
            for (i = 0; i < max; i++) {
                if (current[i] !== next[i]) {
                    break
                }
            }
            return {
                updated: next.slice(0, i),
                activated: next.slice(i),
                deactivated: current.slice(i)
            }
        }

        function extractGuards(
            records,
            name,
            bind,
            reverse
        ) {
            var guards = flatMapComponents(records, function(def, instance, match, key) {
                var guard = extractGuard(def, name);
                if (guard) {
                    return Array.isArray(guard) ?
                        guard.map(function(guard) {
                            return bind(guard, instance, match, key);
                        }) :
                        bind(guard, instance, match, key)
                }
            });
            return flatten(reverse ? guards.reverse() : guards)
        }

        function extractGuard(
            def,
            key
        ) {
            if (typeof def !== 'function') {
                // extend now so that global mixins are applied.
                def = _Vue.extend(def);
            }
            return def.options[key]
        }

        function extractLeaveGuards(deactivated) {
            return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)
        }

        function extractUpdateHooks(updated) {
            return extractGuards(updated, 'beforeRouteUpdate', bindGuard)
        }

        function bindGuard(guard, instance) {
            if (instance) {
                return function boundRouteGuard() {
                    return guard.apply(instance, arguments)
                }
            }
        }

        function extractEnterGuards(
            activated,
            cbs,
            isValid
        ) {
            return extractGuards(activated, 'beforeRouteEnter', function(guard, _, match, key) {
                return bindEnterGuard(guard, match, key, cbs, isValid)
            })
        }

        function bindEnterGuard(
            guard,
            match,
            key,
            cbs,
            isValid
        ) {
            return function routeEnterGuard(to, from, next) {
                return guard(to, from, function(cb) {
                    next(cb);
                    if (typeof cb === 'function') {
                        cbs.push(function() {
                            // #750
                            // if a router-view is wrapped with an out-in transition,
                            // the instance may not have been registered at this time.
                            // we will need to poll for registration until current route
                            // is no longer valid.
                            poll(cb, match.instances, key, isValid);
                        });
                    }
                })
            }
        }

        function poll(
            cb, // somehow flow cannot infer this is a function
            instances,
            key,
            isValid
        ) {
            if (instances[key]) {
                cb(instances[key]);
            } else if (isValid()) {
                setTimeout(function() {
                    poll(cb, instances, key, isValid);
                }, 16);
            }
        }

        /*  */


        var HTML5History = (function(History$$1) {
            function HTML5History(router, base) {
                var this$1 = this;

                History$$1.call(this, router, base);

                var expectScroll = router.options.scrollBehavior;

                if (expectScroll) {
                    setupScroll();
                }

                var initLocation = getLocation(this.base);
                window.addEventListener('popstate', function(e) {
                    var current = this$1.current;

                    // Avoiding first `popstate` event dispatched in some browsers but first
                    // history route not updated since async guard at the same time.
                    var location = getLocation(this$1.base);
                    if (this$1.current === START && location === initLocation) {
                        return
                    }

                    this$1.transitionTo(location, function(route) {
                        if (expectScroll) {
                            handleScroll(router, route, current, true);
                        }
                    });
                });
            }

            if (History$$1) HTML5History.__proto__ = History$$1;
            HTML5History.prototype = Object.create(History$$1 && History$$1.prototype);
            HTML5History.prototype.constructor = HTML5History;

            HTML5History.prototype.go = function go(n) {
                window.history.go(n);
            };

            HTML5History.prototype.push = function push(location, onComplete, onAbort) {
                var this$1 = this;

                var ref = this;
                var fromRoute = ref.current;
                this.transitionTo(location, function(route) {
                    pushState(cleanPath(this$1.base + route.fullPath));
                    handleScroll(this$1.router, route, fromRoute, false);
                    onComplete && onComplete(route);
                }, onAbort);
            };

            HTML5History.prototype.replace = function replace(location, onComplete, onAbort) {
                var this$1 = this;

                var ref = this;
                var fromRoute = ref.current;
                this.transitionTo(location, function(route) {
                    replaceState(cleanPath(this$1.base + route.fullPath));
                    handleScroll(this$1.router, route, fromRoute, false);
                    onComplete && onComplete(route);
                }, onAbort);
            };

            HTML5History.prototype.ensureURL = function ensureURL(push) {
                if (getLocation(this.base) !== this.current.fullPath) {
                    var current = cleanPath(this.base + this.current.fullPath);
                    push ? pushState(current) : replaceState(current);
                }
            };

            HTML5History.prototype.getCurrentLocation = function getCurrentLocation() {
                return getLocation(this.base)
            };

            return HTML5History;
        }(History));

        function getLocation(base) {
            var path = window.location.pathname;
            if (base && path.indexOf(base) === 0) {
                path = path.slice(base.length);
            }
            return (path || '/') + window.location.search + window.location.hash
        }

        /*  */


        var HashHistory = (function(History$$1) {
            function HashHistory(router, base, fallback) {
                History$$1.call(this, router, base);
                // check history fallback deeplinking
                if (fallback && checkFallback(this.base)) {
                    return
                }
                ensureSlash();
            }

            if (History$$1) HashHistory.__proto__ = History$$1;
            HashHistory.prototype = Object.create(History$$1 && History$$1.prototype);
            HashHistory.prototype.constructor = HashHistory;

            // this is delayed until the app mounts
            // to avoid the hashchange listener being fired too early
            HashHistory.prototype.setupListeners = function setupListeners() {
                var this$1 = this;

                var router = this.router;
                var expectScroll = router.options.scrollBehavior;
                var supportsScroll = supportsPushState && expectScroll;

                if (supportsScroll) {
                    setupScroll();
                }

                window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', function() {
                    var current = this$1.current;
                    if (!ensureSlash()) {
                        return
                    }
                    this$1.transitionTo(getHash(), function(route) {
                        if (supportsScroll) {
                            handleScroll(this$1.router, route, current, true);
                        }
                        if (!supportsPushState) {
                            replaceHash(route.fullPath);
                        }
                    });
                });
            };

            HashHistory.prototype.push = function push(location, onComplete, onAbort) {
                var this$1 = this;

                var ref = this;
                var fromRoute = ref.current;
                this.transitionTo(location, function(route) {
                    pushHash(route.fullPath);
                    handleScroll(this$1.router, route, fromRoute, false);
                    onComplete && onComplete(route);
                }, onAbort);
            };

            HashHistory.prototype.replace = function replace(location, onComplete, onAbort) {
                var this$1 = this;

                var ref = this;
                var fromRoute = ref.current;
                this.transitionTo(location, function(route) {
                    replaceHash(route.fullPath);
                    handleScroll(this$1.router, route, fromRoute, false);
                    onComplete && onComplete(route);
                }, onAbort);
            };

            HashHistory.prototype.go = function go(n) {
                window.history.go(n);
            };

            HashHistory.prototype.ensureURL = function ensureURL(push) {
                var current = this.current.fullPath;
                if (getHash() !== current) {
                    push ? pushHash(current) : replaceHash(current);
                }
            };

            HashHistory.prototype.getCurrentLocation = function getCurrentLocation() {
                return getHash()
            };

            return HashHistory;
        }(History));

        function checkFallback(base) {
            var location = getLocation(base);
            if (!/^\/#/.test(location)) {
                window.location.replace(
                    cleanPath(base + '/#' + location)
                );
                return true
            }
        }

        function ensureSlash() {
            var path = getHash();
            if (path.charAt(0) === '/') {
                return true
            }
            replaceHash('/' + path);
            return false
        }

        function getHash() {
            // We can't use window.location.hash here because it's not
            // consistent across browsers - Firefox will pre-decode it!
            var href = window.location.href;
            var index = href.indexOf('#');
            return index === -1 ? '' : href.slice(index + 1)
        }

        function getUrl(path) {
            var href = window.location.href;
            var i = href.indexOf('#');
            var base = i >= 0 ? href.slice(0, i) : href;
            return (base + "#" + path)
        }

        function pushHash(path) {
            if (supportsPushState) {
                pushState(getUrl(path));
            } else {
                window.location.hash = path;
            }
        }

        function replaceHash(path) {
            if (supportsPushState) {
                replaceState(getUrl(path));
            } else {
                window.location.replace(getUrl(path));
            }
        }

        /*  */


        var AbstractHistory = (function(History$$1) {
            function AbstractHistory(router, base) {
                History$$1.call(this, router, base);
                this.stack = [];
                this.index = -1;
            }

            if (History$$1) AbstractHistory.__proto__ = History$$1;
            AbstractHistory.prototype = Object.create(History$$1 && History$$1.prototype);
            AbstractHistory.prototype.constructor = AbstractHistory;

            AbstractHistory.prototype.push = function push(location, onComplete, onAbort) {
                var this$1 = this;

                this.transitionTo(location, function(route) {
                    this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
                    this$1.index++;
                    onComplete && onComplete(route);
                }, onAbort);
            };

            AbstractHistory.prototype.replace = function replace(location, onComplete, onAbort) {
                var this$1 = this;

                this.transitionTo(location, function(route) {
                    this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
                    onComplete && onComplete(route);
                }, onAbort);
            };

            AbstractHistory.prototype.go = function go(n) {
                var this$1 = this;

                var targetIndex = this.index + n;
                if (targetIndex < 0 || targetIndex >= this.stack.length) {
                    return
                }
                var route = this.stack[targetIndex];
                this.confirmTransition(route, function() {
                    this$1.index = targetIndex;
                    this$1.updateRoute(route);
                });
            };

            AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation() {
                var current = this.stack[this.stack.length - 1];
                return current ? current.fullPath : '/'
            };

            AbstractHistory.prototype.ensureURL = function ensureURL() {
                // noop
            };

            return AbstractHistory;
        }(History));

        /*  */

        var VueRouter = function VueRouter(options) {
            if (options === void 0) options = {};

            this.app = null;
            this.apps = [];
            this.options = options;
            this.beforeHooks = [];
            this.resolveHooks = [];
            this.afterHooks = [];
            this.matcher = createMatcher(options.routes || [], this);

            var mode = options.mode || 'hash';
            this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;
            if (this.fallback) {
                mode = 'hash';
            }
            if (!inBrowser) {
                mode = 'abstract';
            }
            this.mode = mode;

            switch (mode) {
                case 'history':
                    this.history = new HTML5History(this, options.base);
                    break
                case 'hash':
                    this.history = new HashHistory(this, options.base, this.fallback);
                    break
                case 'abstract':
                    this.history = new AbstractHistory(this, options.base);
                    break
                default:
                    if (false) {
                        assert(false, ("invalid mode: " + mode));
                    }
            }
        };

        var prototypeAccessors = {
            currentRoute: {
                configurable: true
            }
        };

        VueRouter.prototype.match = function match(
            raw,
            current,
            redirectedFrom
        ) {
            return this.matcher.match(raw, current, redirectedFrom)
        };

        prototypeAccessors.currentRoute.get = function() {
            return this.history && this.history.current
        };

        VueRouter.prototype.init = function init(app /* Vue component instance */ ) {
            var this$1 = this;

            "production" !== 'production' && assert(
                install.installed,
                "not installed. Make sure to call `Vue.use(VueRouter)` " +
                "before creating root instance."
            );

            this.apps.push(app);

            // main app already initialized.
            if (this.app) {
                return
            }

            this.app = app;

            var history = this.history;

            if (history instanceof HTML5History) {
                history.transitionTo(history.getCurrentLocation());
            } else if (history instanceof HashHistory) {
                var setupHashListener = function() {
                    history.setupListeners();
                };
                history.transitionTo(
                    history.getCurrentLocation(),
                    setupHashListener,
                    setupHashListener
                );
            }

            history.listen(function(route) {
                this$1.apps.forEach(function(app) {
                    app._route = route;
                });
            });
        };

        VueRouter.prototype.beforeEach = function beforeEach(fn) {
            return registerHook(this.beforeHooks, fn)
        };

        VueRouter.prototype.beforeResolve = function beforeResolve(fn) {
            return registerHook(this.resolveHooks, fn)
        };

        VueRouter.prototype.afterEach = function afterEach(fn) {
            return registerHook(this.afterHooks, fn)
        };

        VueRouter.prototype.onReady = function onReady(cb, errorCb) {
            this.history.onReady(cb, errorCb);
        };

        VueRouter.prototype.onError = function onError(errorCb) {
            this.history.onError(errorCb);
        };

        VueRouter.prototype.push = function push(location, onComplete, onAbort) {
            this.history.push(location, onComplete, onAbort);
        };

        VueRouter.prototype.replace = function replace(location, onComplete, onAbort) {
            this.history.replace(location, onComplete, onAbort);
        };

        VueRouter.prototype.go = function go(n) {
            this.history.go(n);
        };

        VueRouter.prototype.back = function back() {
            this.go(-1);
        };

        VueRouter.prototype.forward = function forward() {
            this.go(1);
        };

        VueRouter.prototype.getMatchedComponents = function getMatchedComponents(to) {
            var route = to ?
                to.matched ?
                to :
                this.resolve(to).route :
                this.currentRoute;
            if (!route) {
                return []
            }
            return [].concat.apply([], route.matched.map(function(m) {
                return Object.keys(m.components).map(function(key) {
                    return m.components[key]
                })
            }))
        };

        VueRouter.prototype.resolve = function resolve(
            to,
            current,
            append
        ) {
            var location = normalizeLocation(
                to,
                current || this.history.current,
                append,
                this
            );
            var route = this.match(location, current);
            var fullPath = route.redirectedFrom || route.fullPath;
            var base = this.history.base;
            var href = createHref(base, fullPath, this.mode);
            return {
                location: location,
                route: route,
                href: href,
                // for backwards compat
                normalizedTo: location,
                resolved: route
            }
        };

        VueRouter.prototype.addRoutes = function addRoutes(routes) {
            this.matcher.addRoutes(routes);
            if (this.history.current !== START) {
                this.history.transitionTo(this.history.getCurrentLocation());
            }
        };

        Object.defineProperties(VueRouter.prototype, prototypeAccessors);

        function registerHook(list, fn) {
            list.push(fn);
            return function() {
                var i = list.indexOf(fn);
                if (i > -1) {
                    list.splice(i, 1);
                }
            }
        }

        function createHref(base, fullPath, mode) {
            var path = mode === 'hash' ? '#' + fullPath : fullPath;
            return base ? cleanPath(base + '/' + path) : path
        }

        VueRouter.install = install;
        VueRouter.version = '2.8.1';

        if (inBrowser && window.Vue) {
            window.Vue.use(VueRouter);
        }

        /* harmony default export */
        __webpack_exports__["a"] = (VueRouter);


        /***/
    }),
    /* 79 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        module.exports = (function() {
            try {
                return !!new Blob();
            } catch (e) {
                return false;
            }
        }());


        /***/
    }),
    /* 80 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        var Emitter = __webpack_require__(37);
        var createLoader = __webpack_require__(81);
        var autoId = 0;

        module.exports = function createGroup(config) {
            var group;
            var map = {};
            var assets = [];
            var queue = [];
            var numLoaded = 0;
            var numTotal = 0;
            var loaders = {};

            var add = function(options) {
                // console.debug('add', options);
                if (Array.isArray(options)) {
                    options.forEach(add);
                    return group;
                }
                var isGroup = !!options.assets && Array.isArray(options.assets);
                // console.debug('isGroup', isGroup);
                var loader;
                if (isGroup) {
                    loader = createGroup(configure(options, config));
                } else {
                    loader = createLoader(configure(options, config));
                }
                loader.once('destroy', destroyHandler);
                queue.push(loader);
                loaders[loader.id] = loader;
                return group;
            };

            var get = function(id) {
                if (!arguments.length) {
                    return assets;
                }
                if (map[id]) {
                    return map[id];
                }
                return loaders[id];
            };

            var find = function(id) {
                if (get(id)) {
                    return get(id);
                }
                var found = null;
                Object.keys(loaders).some(function(key) {
                    found = loaders[key].find && loaders[key].find(id);
                    return !!found;
                });
                return found;
            };

            var getExtension = function(url) {
                return url && url.split('?')[0].split('.').pop().toLowerCase();
            };

            var configure = function(options, defaults) {
                if (typeof options === 'string') {
                    var url = options;
                    options = {
                        url: url
                    };
                }

                if (options.isTouchLocked === undefined) {
                    options.isTouchLocked = defaults.isTouchLocked;
                }

                if (options.blob === undefined) {
                    options.blob = defaults.blob;
                }

                if (options.basePath === undefined) {
                    options.basePath = defaults.basePath;
                }

                options.id = options.id || options.url || String(++autoId);
                options.type = options.type || getExtension(options.url);
                options.crossOrigin = options.crossOrigin || defaults.crossOrigin;
                options.webAudioContext = options.webAudioContext || defaults.webAudioContext;
                options.log = defaults.log;

                return options;
            };

            var start = function() {
                numTotal = queue.length;

                queue.forEach(function(loader) {
                    loader
                        .on('progress', progressHandler)
                        .once('complete', completeHandler)
                        .once('error', errorHandler)
                        .start();
                });

                queue = [];

                return group;
            };

            var progressHandler = function(progress) {
                var loaded = numLoaded + progress;
                group.emit('progress', loaded / numTotal);
            };

            var completeHandler = function(asset, id, type) {
                if (Array.isArray(asset)) {
                    asset = {
                        id: id,
                        file: asset,
                        type: type
                    };
                }
                numLoaded++;
                group.emit('progress', numLoaded / numTotal);
                map[asset.id] = asset.file;
                assets.push(asset);
                group.emit('childcomplete', asset);
                checkComplete();
            };

            var errorHandler = function(err) {
                numTotal--;
                if (group.listeners('error').length) {
                    group.emit('error', err);
                } else {
                    console.error(err);
                }
                checkComplete();
            };

            var destroyHandler = function(id) {
                loaders[id] = null;
                delete loaders[id];

                map[id] = null;
                delete map[id];

                assets.some(function(asset, i) {
                    if (asset.id === id) {
                        assets.splice(i, 1);
                        return true;
                    }
                });
            };

            var checkComplete = function() {
                if (numLoaded >= numTotal) {
                    group.emit('complete', assets, map, config.id, 'group');
                }
            };

            var destroy = function() {
                while (queue.length) {
                    queue.pop().destroy();
                }
                group.off('error');
                group.off('progress');
                group.off('complete');
                assets = [];
                map = {};
                config.webAudioContext = null;
                numTotal = 0;
                numLoaded = 0;

                Object.keys(loaders).forEach(function(key) {
                    loaders[key].destroy();
                });
                loaders = {};

                group.emit('destroy', group.id);

                return group;
            };

            // emits: progress, error, complete, destroy

            group = Object.create(Emitter.prototype, {
                _events: {
                    value: {}
                },
                id: {
                    get: function() {
                        return config.id;
                    }
                },
                add: {
                    value: add
                },
                start: {
                    value: start
                },
                get: {
                    value: get
                },
                find: {
                    value: find
                },
                getLoader: {
                    value: function(id) {
                        return loaders[id];
                    }
                },
                loaded: {
                    get: function() {
                        return numLoaded >= numTotal;
                    }
                },
                file: {
                    get: function() {
                        return assets;
                    }
                },
                destroy: {
                    value: destroy
                }
            });

            config = configure(config || {}, {
                basePath: '',
                blob: false,
                touchLocked: false,
                crossOrigin: null,
                webAudioContext: null,
                log: false
            });

            if (Array.isArray(config.assets)) {
                add(config.assets);
            }

            return Object.freeze(group);
        };


        /***/
    }),
    /* 81 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        var Emitter = __webpack_require__(37);
        var browserHasBlob = __webpack_require__(79);
        var stats = __webpack_require__(39);

        module.exports = function(options) {
            var id = options.id;
            var basePath = options.basePath || '';
            var url = options.url;
            var type = options.type;
            var crossOrigin = options.crossOrigin;
            var isTouchLocked = options.isTouchLocked;
            var blob = options.blob && browserHasBlob;
            var webAudioContext = options.webAudioContext;
            var log = options.log;

            var loader;
            var loadHandler;
            var request;
            var startTime;
            var timeout;
            var file;

            var start = function() {
                startTime = Date.now();

                switch (type) {
                    case 'json':
                        loadJSON();
                        break;
                    case 'jpg':
                    case 'png':
                    case 'gif':
                    case 'webp':
                    case 'svg':
                        loadImage();
                        break;
                    case 'mp3':
                    case 'ogg':
                    case 'opus':
                    case 'wav':
                    case 'm4a':
                        loadAudio();
                        break;
                    case 'ogv':
                    case 'mp4':
                    case 'webm':
                    case 'hls':
                        loadVideo();
                        break;
                    case 'bin':
                    case 'binary':
                        loadXHR('arraybuffer');
                        break;
                    case 'txt':
                    case 'text':
                        loadXHR('text');
                        break;
                    default:
                        throw 'AssetsLoader ERROR: Unknown type for file with URL: ' + basePath + url + ' (' + type + ')';
                }
            };

            var dispatchComplete = function(data) {
                if (!data) {
                    return;
                }
                file = {
                    id: id,
                    file: data,
                    type: type
                };
                loader.emit('progress', 1);
                loader.emit('complete', file, id, type);
                removeListeners();
            };

            var loadXHR = function(responseType, customLoadHandler) {
                loadHandler = customLoadHandler || completeHandler;

                request = new XMLHttpRequest();
                request.open('GET', basePath + url, true);
                request.responseType = responseType;
                request.addEventListener('progress', progressHandler);
                request.addEventListener('load', loadHandler);
                request.addEventListener('error', errorHandler);
                request.send();
            };

            var progressHandler = function(event) {
                if (event.lengthComputable) {
                    loader.emit('progress', event.loaded / event.total);
                }
            };

            var completeHandler = function() {
                if (success()) {
                    dispatchComplete(request.response);
                }
            };

            var success = function() {
                // console.log('success', url, request.status);
                if (request && request.status < 400) {
                    stats.update(request, startTime, url, log);
                    return true;
                }
                errorHandler(request && request.statusText);
                return false;
            };

            // json

            var loadJSON = function() {
                loadXHR('json', function() {
                    if (success()) {
                        var data = request.response;
                        if (typeof data === 'string') {
                            data = JSON.parse(data);
                        }
                        dispatchComplete(data);
                    }
                });
            };

            // image

            var loadImage = function() {
                if (blob) {
                    loadImageBlob();
                } else {
                    loadImageElement();
                }
            };

            var loadImageElement = function() {
                request = new Image();
                if (crossOrigin) {
                    request.crossOrigin = 'anonymous';
                }
                request.addEventListener('error', errorHandler, false);
                request.addEventListener('load', elementLoadHandler, false);
                request.src = basePath + url;
            };

            var elementLoadHandler = function(event) {
                window.clearTimeout(timeout);
                if (!event && (request.error || !request.readyState)) {
                    errorHandler();
                    return;
                }
                dispatchComplete(request);
            };

            var loadImageBlob = function() {
                loadXHR('blob', function() {
                    if (success()) {
                        request = new Image();
                        request.addEventListener('error', errorHandler, false);
                        request.addEventListener('load', imageBlobHandler, false);
                        request.src = window.URL.createObjectURL(request.response);
                    }
                });
            };

            var imageBlobHandler = function() {
                window.URL.revokeObjectURL(request.src);
                dispatchComplete(request);
            };

            // audio

            var loadAudio = function() {
                if (webAudioContext) {
                    loadAudioBuffer();
                } else {
                    loadMediaElement('audio');
                }
            };

            // video

            var loadVideo = function() {
                if (blob) {
                    loadXHR('blob');
                } else {
                    loadMediaElement('video');
                }
            };

            // audio buffer

            var loadAudioBuffer = function() {
                loadXHR('arraybuffer', function() {
                    if (success()) {
                        webAudioContext.decodeAudioData(
                            request.response,
                            function(buffer) {
                                request = null;
                                dispatchComplete(buffer);
                            },
                            function(e) {
                                errorHandler(e);
                            }
                        );
                    }
                });
            };

            // media element

            var loadMediaElement = function(tagName) {
                request = document.createElement(tagName);

                if (!isTouchLocked) {
                    // timeout because sometimes canplaythrough doesn't fire
                    window.clearTimeout(timeout);
                    timeout = window.setTimeout(elementLoadHandler, 2000);
                    request.addEventListener('canplaythrough', elementLoadHandler, false);
                }

                request.addEventListener('error', errorHandler, false);
                request.preload = 'auto';
                request.src = basePath + url;
                request.load();

                if (isTouchLocked) {
                    dispatchComplete(request);
                }
            };

            // error

            var errorHandler = function(err) {
                // console.log('errorHandler', url, err);
                window.clearTimeout(timeout);

                var message = err;

                if (request && request.tagName && request.error) {
                    var ERROR_STATE = ['', 'ABORTED', 'NETWORK', 'DECODE', 'SRC_NOT_SUPPORTED'];
                    message = 'MediaError: ' + ERROR_STATE[request.error.code] + ' ' + request.src;
                } else if (request && request.statusText) {
                    message = request.statusText;
                } else if (err && err.message) {
                    message = err.message;
                } else if (err && err.type) {
                    message = err.type;
                }

                loader.emit('error', 'Error loading "' + basePath + url + '" ' + message);

                destroy();
            };

            // clean up

            var removeListeners = function() {
                loader.off('error');
                loader.off('progress');
                loader.off('complete');

                if (request) {
                    request.removeEventListener('progress', progressHandler);
                    request.removeEventListener('load', loadHandler);
                    request.removeEventListener('error', errorHandler);
                    request.removeEventListener('load', elementLoadHandler);
                    request.removeEventListener('canplaythrough', elementLoadHandler);
                    request.removeEventListener('load', imageBlobHandler);
                }
            };

            var destroy = function() {
                removeListeners();

                if (request && request.abort && request.readyState < 4) {
                    request.abort();
                }

                request = null;
                webAudioContext = null;
                file = null;

                window.clearTimeout(timeout);

                loader.emit('destroy', id);
            };

            // emits: progress, error, complete

            loader = Object.create(Emitter.prototype, {
                _events: {
                    value: {}
                },
                id: {
                    value: options.id
                },
                start: {
                    value: start
                },
                loaded: {
                    get: function() {
                        return !!file;
                    }
                },
                file: {
                    get: function() {
                        return file;
                    }
                },
                destroy: {
                    value: destroy
                }
            });

            return Object.freeze(loader);
        };


        /***/
    }),
    /* 82 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__shared_components_ThreeBackground_ThreeBackground_vue__ = __webpack_require__(253);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__shared_components_ThreeBackground_ThreeBackground_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__shared_components_ThreeBackground_ThreeBackground_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__shared_components_OnMobile_OnMobile_vue__ = __webpack_require__(249);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__shared_components_OnMobile_OnMobile_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__shared_components_OnMobile_OnMobile_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__shared_components_Loader_Loader_vue__ = __webpack_require__(247);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__shared_components_Loader_Loader_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__shared_components_Loader_Loader_vue__);
        //
        //
        //
        //
        //
        //
        //
        //
        //






        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'app',
            components: {
                ThreeBackground: __WEBPACK_IMPORTED_MODULE_0__shared_components_ThreeBackground_ThreeBackground_vue___default.a,
                Loader: __WEBPACK_IMPORTED_MODULE_2__shared_components_Loader_Loader_vue___default.a,
                OnMobile: __WEBPACK_IMPORTED_MODULE_1__shared_components_OnMobile_OnMobile_vue___default.a
            }
        });

        /***/
    }),
    /* 83 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_in_viewport__ = __webpack_require__(49);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_in_viewport___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_in_viewport__);
        //
        //
        //
        //
        //
        //





        /* harmony default export */
        __webpack_exports__["default"] = ({
            mounted: function mounted() {
                this.events();
            },
            beforeDestroy: function beforeDestroy() {
                this.unlistenEvents();
            },


            methods: {
                events: function events() {
                    window.addEventListener('wheel', this.isVisible);
                },
                unlistenEvents: function unlistenEvents() {
                    window.removeEventListener('wheel', this.isVisible);
                },
                isVisible: function isVisible() {

                    if (__WEBPACK_IMPORTED_MODULE_0_in_viewport___default()(this.$refs.video)) {
                        if (this.$refs.video.paused) {
                            this.$refs.video.play();
                        }
                    } else if (!this.$refs.video.paused) {
                        this.$refs.video.pause();
                    }
                }
            }

        });

        /***/
    }),
    /* 84 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_gsap__ = __webpack_require__(4);
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //




        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'close-button',

            data: function data() {
                return {
                    isActive: true
                };
            },
            mounted: function mounted() {
                this.events();
                this.$lineFill = this.$el.querySelectorAll('.close-button__line-fill');
                this.appear();
            },
            beforeDestroy: function beforeDestroy() {
                this.unlistenEvents();
            },


            methods: {
                events: function events() {
                    __WEBPACK_IMPORTED_MODULE_0__event_bus_js__["a" /* EventBus */ ].$on('page-ready', this.pageReady);
                    __WEBPACK_IMPORTED_MODULE_0__event_bus_js__["a" /* EventBus */ ].$on('toggle-header', this.toggleHeader);
                },
                unlistenEvents: function unlistenEvents() {
                    __WEBPACK_IMPORTED_MODULE_0__event_bus_js__["a" /* EventBus */ ].$off('page-ready', this.pageReady);
                    __WEBPACK_IMPORTED_MODULE_0__event_bus_js__["a" /* EventBus */ ].$off('toggle-header', this.toggleHeader);
                },
                toggleHeader: function toggleHeader(isOpen) {
                    isOpen ? this.appear() : undefined;
                },
                pageReady: function pageReady() {
                    this.appear();
                },
                appear: function appear() {
                    TweenMax.staggerFromTo(this.$lineFill, .7, {
                        scaleY: 0
                    }, {
                        scaleY: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut,
                        overwrite: 'all',
                        delay: .5
                    }, .15);
                },
                leave: function leave() {
                    TweenMax.staggerFromTo(this.$lineFill, .7, {
                        scaleY: 0
                    }, {
                        scaleY: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn,
                        overwrite: 'all'
                    }, .15);
                },
                click: function click() {
                    if (this.$parent.isApear && this.isActive) {
                        __WEBPACK_IMPORTED_MODULE_0__event_bus_js__["a" /* EventBus */ ].$emit('click-close-button');
                        this.$router.replace({
                            name: 'work'
                        });
                        this.isActive = false;
                    }
                }
            }
        });

        /***/
    }),
    /* 85 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //

        /* harmony default export */
        __webpack_exports__["default"] = ({
            data: function data() {
                return {
                    colors: [{
                        hex: '#F7F3EA'
                    }, {
                        hex: '#2A3142'
                    }, {
                        hex: '#82CAC4'
                    }, {
                        hex: '#EE8A73'
                    }]
                };
            },
            mounted: function mounted() {
                var parallaxElements = [{
                    el: this.$refs.paraPhoto,
                    ratio: .06
                }, {
                    el: this.$refs.iphone1,
                    ratio: .07
                }, {
                    el: this.$refs.iphone2,
                    ratio: .07
                }, {
                    el: this.$refs.bg1,
                    ratio: -.1
                }, {
                    el: this.$refs.bg2,
                    ratio: -.1
                }];
                this.$parent.smoothScroll.setParallaxElements(parallaxElements);
            }
        });

        /***/
    }),
    /* 86 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__commons_script_HexToRgba_js__ = __webpack_require__(40);
        //
        //
        //
        //
        //
        //
        //
        //




        /* harmony default export */
        __webpack_exports__["default"] = ({
            props: ['url'],

            data: function data() {
                return {
                    textColor: '#ffffff',
                    buttonStyle: {
                        borderColor: new __WEBPACK_IMPORTED_MODULE_0__commons_script_HexToRgba_js__["a" /* default */ ]().convert('#ffffff', 0.3)
                    }
                };
            },
            mounted: function mounted() {
                this.buttonHoverAnim = new TimelineLite({
                    paused: true
                });
                this.buttonHoverAnim.to(this.$refs.buttonText, .2, {
                    y: -20,
                    rotationX: 45,
                    autoAlpha: 0,
                    ease: Expo.easeIn
                });
                this.buttonHoverAnim.set(this.$refs.buttonText, {
                    y: 20,
                    rotationX: -45
                });
                this.buttonHoverAnim.to(this.$refs.buttonText, .2, {
                    y: 0,
                    rotationX: 0,
                    autoAlpha: 1,
                    ease: Expo.easeOut
                });
                this.buttonHoverAnim.to(this.$refs.button, .5, {
                    borderColor: new __WEBPACK_IMPORTED_MODULE_0__commons_script_HexToRgba_js__["a" /* default */ ]().convert(this.textColor, 1),
                    ease: Expo.easeInOut
                }, 0);
            },


            methods: {
                buttonHover: function buttonHover() {
                    this.buttonHoverAnim.play();
                },
                buttonOut: function buttonOut() {
                    this.buttonHoverAnim.reverse();
                }
            }

        });

        /***/
    }),
    /* 87 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__CaseStudyVideo_vue__ = __webpack_require__(70);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__CaseStudyVideo_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__CaseStudyVideo_vue__);
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //



        /* harmony default export */
        __webpack_exports__["default"] = ({
            mounted: function mounted() {
                var parallaxElements = [{
                    el: this.$refs.woman,
                    ratio: 0.07
                }];
                this.$parent.smoothScroll.setParallaxElements(parallaxElements);
            },


            components: {
                CaseStudyVideo: __WEBPACK_IMPORTED_MODULE_0__CaseStudyVideo_vue___default.a
            }
        });

        /***/
    }),
    /* 88 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_gsap__ = __webpack_require__(4);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__event_bus__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__stores_SliderStore_js__ = __webpack_require__(11);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__stores_MenuStore_js__ = __webpack_require__(5);
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //







        var slides = __webpack_require__(16).slides;

        /* harmony default export */
        __webpack_exports__["default"] = ({

            name: 'next-button',

            data: function data() {
                return {
                    slide: this.$parent.slide,
                    sliderState: __WEBPACK_IMPORTED_MODULE_2__stores_SliderStore_js__["a" /* default */ ].state,
                    blocked: false,
                    isHiding: false
                };
            },
            created: function created() {
                this.nextSlide = slides[this.getNextSlideId()];
            },
            mounted: function mounted() {
                this.mouseOverAnim = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.mouseOverAnim.to(this.$refs.hoverLine, .5, {
                    autoAlpha: 1,
                    scaleX: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                });
            },


            computed: {
                currentSlideId: function currentSlideId() {
                    return this.sliderState.currentSlideId;
                }
            },

            methods: {
                onClick: function onClick() {
                    var parentSmoothScroll = this.$parent.smoothScroll;
                    var offset = (parentSmoothScroll.height - window.innerHeight) * -1;
                    __WEBPACK_IMPORTED_MODULE_3__stores_MenuStore_js__["a" /* default */ ].blockMenu();
                    parentSmoothScroll.off();
                    parentSmoothScroll.scrollTo(offset, this.nextProject);
                },
                nextProject: function nextProject() {
                    this.newSlideId = this.getNextSlideId();
                    this.oldSlideId = this.currentSlideId;
                    __WEBPACK_IMPORTED_MODULE_2__stores_SliderStore_js__["a" /* default */ ].setSlideId(this.newSlideId);
                    __WEBPACK_IMPORTED_MODULE_1__event_bus__["a" /* EventBus */ ].$emit('next-case-study', {
                        currentId: this.newSlideId,
                        oldId: this.oldSlideId
                    });
                    this.blocked = true;
                    this.leaveAnim();
                },
                getNextSlideId: function getNextSlideId() {
                    var nextSlideId = void 0;
                    slides[this.currentSlideId + 1] ? nextSlideId = this.currentSlideId + 1 : nextSlideId = 0;
                    return nextSlideId;
                },
                leaveAnim: function leaveAnim() {
                    var _this = this;

                    var tl = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]({
                        onComplete: function onComplete() {
                            _this.$router.replace({
                                name: 'work'
                            });
                        }
                    });
                    tl.add(this.mouseOverAnim.reverse());
                    tl.to(this.$refs.background, 1, {
                        scaleY: 1.1,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    }, '-=.1');
                    tl.staggerTo(this.$refs.buttonContent.children, .7, {
                        y: -200,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeIn
                    }, .06, '-=1');
                    tl.call(this.hideCaseStudy);
                    tl.to(this.$refs.background, 1, {
                        transformOrigin: '0% 0%',
                        scaleY: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    });
                },
                hideCaseStudy: function hideCaseStudy() {
                    TweenLite.set(this.$el, {
                        backgroundColor: 'rgba(0,0,0,0)'
                    });
                    this.isHiding = true;
                    __WEBPACK_IMPORTED_MODULE_1__event_bus__["a" /* EventBus */ ].$emit('hide-case-study', {
                        currentId: this.newSlideId,
                        oldId: this.oldSlideId
                    });
                },
                onMouseOver: function onMouseOver() {
                    !this.blocked && this.mouseOverAnim.play();
                },
                onMouseOut: function onMouseOut() {
                    !this.blocked && this.mouseOverAnim.reverse();
                }
            }

        });

        /***/
    }),
    /* 89 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__CaseStudyVideo_vue__ = __webpack_require__(70);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__CaseStudyVideo_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__CaseStudyVideo_vue__);
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //




        /* harmony default export */
        __webpack_exports__["default"] = ({
            mounted: function mounted() {
                var parallaxElements = [{
                    el: this.$refs.shoes,
                    ratio: .06
                }];

                this.$parent.smoothScroll.setParallaxElements(parallaxElements);
            },


            components: {
                CaseStudyVideo: __WEBPACK_IMPORTED_MODULE_0__CaseStudyVideo_vue___default.a
            }

        });

        /***/
    }),
    /* 90 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_assets_loader__ = __webpack_require__(38);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_assets_loader___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assets_loader__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__LoaderMixin_js__ = __webpack_require__(41);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__stores_LoaderStore_js__ = __webpack_require__(7);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4_gsap__ = __webpack_require__(4);
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //









        /* harmony default export */
        __webpack_exports__["default"] = ({

            mixins: [__WEBPACK_IMPORTED_MODULE_2__LoaderMixin_js__["a" /* default */ ]],

            data: function data() {
                return {
                    linesScale: 0,
                    state: __WEBPACK_IMPORTED_MODULE_3__stores_LoaderStore_js__["a" /* default */ ].state,
                    targetState: 100 / 3 / 100,
                    complete: false
                };
            },


            computed: {
                pageReady: function pageReady() {
                    return this.state.pageReady;
                },
                loadingState: function loadingState() {
                    return Math.floor(this.linesScale * 100);
                }
            },

            mounted: function mounted() {
                var _this = this;

                var loader = __WEBPACK_IMPORTED_MODULE_0_assets_loader___default()();
                var assetsToLoad = void 0;

                if (window.devicePixelRatio <= 1) {
                    assetsToLoad = this.findAssets('1x');
                } else {
                    assetsToLoad = this.findAssets('2x');
                }
                loader.add(assetsToLoad);

                loader.on('progress', function(progress) {
                    _this.setProgression(progress);
                });
                loader.on('complete', function(assets) {
                    _this.complete = true;
                });
                loader.start();

                this.progress();
            },


            methods: {
                setPageReady: function setPageReady() {
                    this.linesScale = 1;

                    var tl = new __WEBPACK_IMPORTED_MODULE_4_gsap__["a" /* TimelineLite */ ]();
                    tl.staggerTo(this.$refs.loaderLines.children, 1, {
                        scaleX: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_4_gsap__["b" /* Expo */ ].easeInOut
                    }, -.08);
                    tl.call(function() {
                        __WEBPACK_IMPORTED_MODULE_3__stores_LoaderStore_js__["a" /* default */ ].setPageReady();
                        __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$emit('page-ready');
                    }, [], null, '-=.4');
                    tl.to(this.$el, .5, {
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_4_gsap__["c" /* Power1 */ ].easeIn
                    }, '-=.4');
                },
                setProgression: function setProgression(progress) {
                    progress > this.targetState ? this.targetState = progress : undefined;
                },
                progress: function progress() {
                    this.linesScale += (this.targetState - this.linesScale) * 0.05;

                    this.$refs.loaderBigLine.style.webkitTransform = "scaleX(" + this.linesScale + ")";
                    this.$refs.loaderBigLine.style.MozTransform = "scaleX(" + this.linesScale + ")";
                    this.$refs.loaderBigLine.style.msTransform = "scaleX(" + this.linesScale + ")";
                    this.$refs.loaderBigLine.style.OTransform = "scaleX(" + this.linesScale + ")";
                    this.$refs.loaderBigLine.style.transform = "scaleX(" + this.linesScale + ")";
                    this.linesScale < .99 ? requestAnimationFrame(this.progress.bind(this)) : undefined;
                    this.linesScale < 1 && this.linesScale > .99 && this.complete ? this.setPageReady() : undefined;
                }
            }

        });

        /***/
    }),
    /* 91 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_gsap__ = __webpack_require__(4);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__stores_MenuStore_js__ = __webpack_require__(5);
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //







        /* harmony default export */
        __webpack_exports__["default"] = ({

            props: ['to', 'title', 'subtitle'],

            data: function data() {
                return {
                    state: __WEBPACK_IMPORTED_MODULE_2__stores_MenuStore_js__["a" /* default */ ].state
                };
            },


            computed: {
                menuIsClosed: function menuIsClosed() {
                    return this.state.isClosed;
                },
                menuIsAnimated: function menuIsAnimated() {
                    return this.state.isAnimated;
                },
                isCurrentRoute: function isCurrentRoute() {
                    var isCurrentRoute = this.$route.name === this.to ? true : false;
                    return isCurrentRoute;
                }
            },

            mounted: function mounted() {
                this.hoverAnim = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.hoverAnim.to(this.$refs.hoverLine, .6, {
                    x: '-50%',
                    scaleX: 1,
                    autoAlpha: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                });
            },

            methods: {

                mouseover: function mouseover() {
                    this.hoverAnim.play();
                },

                mouseout: function mouseout() {
                    this.hoverAnim.reverse();
                },

                onClick: function onClick() {

                    if (!this.menuIsAnimated) {
                        if (this.isCurrentRoute) {
                            return __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$emit('click-current-link');
                        } else if (!this.menuIsAnimated) {
                            this.$router.push({
                                name: this.to
                            });
                        }
                    }
                }
            }

        });

        /***/
    }),
    /* 92 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_throttle__ = __webpack_require__(68);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_throttle___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_throttle__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_gsap__ = __webpack_require__(4);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__commons_script_SplitText_js__ = __webpack_require__(17);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__NavItem_vue__ = __webpack_require__(248);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__NavItem_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__NavItem_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__ = __webpack_require__(5);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__ = __webpack_require__(11);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_7__stores_LoaderStore_js__ = __webpack_require__(7);

        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //













        var slides = __webpack_require__(74);

        /* harmony default export */
        __webpack_exports__["default"] = ({

            name: 'navigation',

            data: function data() {
                return {
                    state: __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__["a" /* default */ ].state,
                    sliderState: __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].state,
                    loaderState: __WEBPACK_IMPORTED_MODULE_7__stores_LoaderStore_js__["a" /* default */ ].state,
                    navItems: [{
                        title: 'Home',
                        subtitle: 'Fresh start',
                        to: 'home'
                    }, {
                        title: 'Work',
                        subtitle: 'Some of my productions',
                        to: 'work'
                    }, {
                        title: 'About',
                        subtitle: 'Me myself and I',
                        to: 'about'
                    }]
                };
            },

            computed: {
                pageReady: function pageReady() {
                    return this.loaderState.pageReady;
                },
                isClosed: function isClosed() {
                    return this.state.isClosed;
                },
                isBlocked: function isBlocked() {
                    return this.state.isBlocked;
                },
                currentSlideId: function currentSlideId() {
                    return this.sliderState.currentSlideId;
                },
                sliderIsAnimated: function sliderIsAnimated() {
                    return this.sliderState.isAnimated;
                },
                menuIsNotAnimated: function menuIsNotAnimated() {
                    return !this.state.isAnimated;
                }
            },

            mounted: function mounted() {
                var el = this.$el;

                this.throttledOnResize = __WEBPACK_IMPORTED_MODULE_0_lodash_throttle___default()(this.onResize, 300);

                this.$menuLines = this.$refs.menuIcon.children;
                this.$menuCircleHover = this.$refs.menuCircleHover;
                this.$menuLinks = this.$refs.menuLinks.children;

                this.changeColor(this.$route.name);
                this.events();

                this.iconEnterAnim = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.iconEnterAnim.from(this.$menuLines[0], 0.4, {
                    scaleX: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["e" /* Power4 */ ].easeInOut
                }, '0.5');
                this.iconEnterAnim.from(this.$menuLines[2], 0.4, {
                    scaleX: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["e" /* Power4 */ ].easeInOut
                }, '-=0.2');
                this.iconEnterAnim.from(this.$menuLines[1], 0.4, {
                    scaleX: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["e" /* Power4 */ ].easeInOut
                }, '-=0.3');

                this.pageReady && this.iconEnterAnim.play();

                this.openMenuAnim = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    paused: true,
                    onStart: function onStart() {
                        __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__["a" /* default */ ].menuIsAnimated();
                    },
                    onComplete: function onComplete() {
                        __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__["a" /* default */ ].menuIsNotAnimated();
                    }
                });
                this.openMenuAnim.to(this.$menuLines[1], 0.5, {
                    x: -10,
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeInOut
                }).to(this.$menuLines[0], 0.5, {
                    rotation: 45,
                    scaleX: 0.68,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeInOut
                }, 0).to(this.$menuLines[2], 0.5, {
                    rotation: -45,
                    scaleX: 0.68,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeInOut
                }, 0).set(this.$refs.menuLinks, {
                    autoAlpha: 1
                }, 0).to(this.$refs.menuBackground, 1, {
                    autoAlpha: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                }, 0).staggerTo(this.$menuLinks, 1.5, {
                    y: 0,
                    autoAlpha: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut,
                    force3D: true
                }, 0.08, 0);

                this.closeMenuAnim = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    paused: true,
                    onStart: function onStart() {
                        __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__["a" /* default */ ].menuIsAnimated();
                    },
                    onComplete: function onComplete() {
                        __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__["a" /* default */ ].menuIsNotAnimated();
                    }
                });
                this.closeMenuAnim.to(this.$menuLines[1], 0.5, {
                    x: 0,
                    autoAlpha: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeInOut
                }).to(this.$menuLines[0], 0.5, {
                    rotation: 0,
                    scaleX: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeInOut
                }, 0).to(this.$menuLines[2], 0.5, {
                    rotation: 0,
                    scaleX: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeInOut
                }, 0).to(this.$refs.menuBackground, 1, {
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                }, 0).staggerTo(this.$menuLinks, 0.5, {
                    y: 200,
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["e" /* Power4 */ ].easeIn
                }, -0.05, 0).set(this.$refs.menuLinks, {
                    autoAlpha: 0
                });

                this.iconMouseOverAnim = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.iconMouseOverAnim.to(this.$menuLines[1], 0.3, {
                    x: 12,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                }, 0);

                this.circleWaveAnim = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                }).set(this.$menuCircleHover, {
                    scale: 0,
                    autoAlpha: 0
                }).to(this.$menuCircleHover, 0.6, {
                    scale: 2,
                    autoAlpha: .7,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeInOut
                }).to(this.$menuCircleHover, 0.5, {
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeInOut
                }, '-=0.4');

                this.iconMouseOutAnim = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.iconMouseOutAnim.to(this.$menuLines[1], 0.3, {
                    x: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                }, 0);
            },

            beforeDestroy: function beforeDestroy() {
                this.unlistenEvents();
            },


            methods: {
                events: function events() {
                    window.addEventListener('resize', this.throttledOnResize);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$on('slide-next', this.changeSlide);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$on('slide-prev', this.changeSlide);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$on('leave-page', this.leavePage);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$on('close-menu', this.closeMenu);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$on('page-ready', this.loaderReady);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$on('next-case-study', this.nextCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$on('hide-case-study', this.loaderReady);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$on('click-current-link', this.closeMenu);
                },
                unlistenEvents: function unlistenEvents() {
                    window.removeEventListener('resize', this.throttledOnResize);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$off('click-current-link', this.toggleClose);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$off('slide-next', this.changeSlide);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$off('slide-prev', this.changeSlide);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$off('leave-page', this.leavePage);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$off('page-ready', this.loaderReady);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$off('next-case-study', this.nextCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$off('hide-case-study', this.loaderReady);
                    __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$off('close-menu', this.closeMenu);
                },
                onResize: function onResize() {
                    if (window.innerWidth < 960 && !this.isClosed) {
                        this.closeMenu();
                    }
                },
                nextCaseStudy: function nextCaseStudy() {
                    this.iconEnterAnim.reverse();
                },
                loaderReady: function loaderReady() {
                    this.changeColor(this.$route.name);
                    this.iconEnterAnim.play();
                },
                changeSlide: function changeSlide() {
                    return this.changeColor(this.$route.name);
                },
                changeColor: function changeColor(routeName) {
                    var gradient = void 0;
                    if (slides[routeName] === undefined) {
                        gradient = slides['default'][0].navigationGradient;
                    } else if (slides[slides[routeName]]) {
                        return this.changeColor(slides[routeName]);
                    } else {
                        gradient = slides[routeName][this.currentSlideId].navigationGradient;
                    }
                    var backgroundImage = "linear-gradient(to right ," + gradient[0] + "," + gradient[1] + ")";
                    var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]();
                    tl.to(this.$menuLines, 3, {
                        backgroundImage: backgroundImage,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["f" /* Power0 */ ].easeInOut
                    });
                },


                toggleClose: function toggleClose() {
                    if (this.menuIsNotAnimated && !this.sliderIsAnimated && !this.isBlocked) {
                        if (this.isClosed) {
                            this.openMenu();
                        } else if (!this.isClosed) {
                            this.closeMenu();
                        }
                    }
                },

                leavePage: function leavePage() {
                    var _this = this;

                    this.closeMenuAnim.eventCallback('onComplete', function() {
                        __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__["a" /* default */ ].menuIsNotAnimated();
                        _this.iconEnterAnim.reverse(0);
                    });

                    if (!this.isClosed) {
                        __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__["a" /* default */ ].closeMenu();
                        this.closeMenuAnim.play(0);
                    } else {
                        this.iconEnterAnim.reverse(0);
                    }
                },


                iconMouseOver: function iconMouseOver() {
                    if (this.isClosed && (!this.iconMouseOverAnim.isActive() || !this.iconMouseOutAnim.isActive())) {
                        this.iconMouseOverAnim.play();
                        this.circleWaveAnim.play(0);
                    }
                },

                iconMouseOut: function iconMouseOut() {
                    if (this.isClosed) {
                        this.iconMouseOverAnim.reverse();
                    }
                },

                openMenu: function openMenu() {
                    this.openMenuAnim.play(0);
                    __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__["a" /* default */ ].openMenu();
                    this.$route.name !== 'case-study' ? __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$emit('toggle-menu', this.isClosed) : undefined;
                },

                closeMenu: function closeMenu() {
                    this.closeMenuAnim.play(0);
                    __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__["a" /* default */ ].closeMenu();
                    this.$route.name !== 'case-study' ? __WEBPACK_IMPORTED_MODULE_3__event_bus_js__["a" /* EventBus */ ].$emit('toggle-menu', this.isClosed) : undefined;
                }
            },

            components: {
                NavItem: __WEBPACK_IMPORTED_MODULE_4__NavItem_vue___default.a
            }

        });

        /***/
    }),
    /* 93 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__spa_About_AboutContent_vue__ = __webpack_require__(71);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__spa_About_AboutContent_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__spa_About_AboutContent_vue__);
        //
        //
        //
        //
        //
        //
        //
        //




        /* harmony default export */
        __webpack_exports__["default"] = ({

            components: {
                AboutContent: __WEBPACK_IMPORTED_MODULE_0__spa_About_AboutContent_vue___default.a
            }

        });

        /***/
    }),
    /* 94 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay__ = __webpack_require__(13);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_delay__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__commons_script_HexToRgba_js__ = __webpack_require__(40);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__commons_script_SplitText_js__ = __webpack_require__(17);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3_gsap__ = __webpack_require__(4);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5_assets_loader__ = __webpack_require__(38);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5_assets_loader___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_assets_loader__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__ = __webpack_require__(11);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_7__stores_MenuStore_js__ = __webpack_require__(5);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_8__stores_AnimationStore_js__ = __webpack_require__(10);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_9__stores_LoaderStore_js__ = __webpack_require__(7);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_10__Loader_LoaderMixin_js__ = __webpack_require__(41);

        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
















        var slides = __webpack_require__(16).slides;

        /* harmony default export */
        __webpack_exports__["default"] = ({
            props: ['title', 'description', 'context', 'role', 'period', 'slideId', 'titleColor', 'textColor', 'shapePath', 'shapePath2x', 'illustrationPath', 'illustrationPath2x', 'caseStudy', 'url'],

            mixins: [__WEBPACK_IMPORTED_MODULE_10__Loader_LoaderMixin_js__["a" /* default */ ]],

            data: function data() {
                return {
                    state: __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].state,
                    menuState: __WEBPACK_IMPORTED_MODULE_7__stores_MenuStore_js__["a" /* default */ ].state,
                    animationState: __WEBPACK_IMPORTED_MODULE_8__stores_AnimationStore_js__["a" /* default */ ].state,
                    loaderState: __WEBPACK_IMPORTED_MODULE_9__stores_LoaderStore_js__["a" /* default */ ].state,
                    imgName: this.title,
                    isLoading: false,
                    progress: 0,
                    nextHook: false,
                    buttonIsClickable: true,
                    loadNextProject: false,
                    textColorStyle: {
                        color: this.textColor
                    },
                    titleColorStyle: {
                        color: this.titleColor
                    },
                    loadingButtonStyle: {
                        backgroundColor: new __WEBPACK_IMPORTED_MODULE_1__commons_script_HexToRgba_js__["a" /* default */ ]().convert(this.textColor, 0.3)
                    },
                    buttonStyle: {
                        color: this.titleColor,
                        borderColor: new __WEBPACK_IMPORTED_MODULE_1__commons_script_HexToRgba_js__["a" /* default */ ]().convert(this.textColor, 0.3)
                    }
                };
            },


            computed: {
                pageReady: function pageReady() {
                    return this.loaderState.pageReady;
                },
                nextAppear: function nextAppear() {
                    return this.state.nextAppear;
                },
                getSliderPosY: function getSliderPosY() {
                    return this.state.posY;
                },
                currentSlideId: function currentSlideId() {
                    return this.state.currentSlideId;
                },
                menuIsClosed: function menuIsClosed() {
                    return this.menuState.isClosed;
                },
                sliderIsAnimated: function sliderIsAnimated() {
                    return this.state.isAnimated;
                },
                getCurrentAnimAppear: function getCurrentAnimAppear() {
                    return this.animationState.appear;
                },
                getCurrentAnimLeave: function getCurrentAnimLeave() {
                    return this.animationState.leave;
                },
                loadingState: function loadingState() {
                    var progress = this.progress * 100;
                    return 'Loading ' + progress.toFixed() + '%';
                }
            },

            mounted: function mounted() {
                var _this = this;

                this.goUpAnim = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.goUpAnim.staggerTo(this.$refs.slideInfo.children, .5, {
                    y: -100,
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeIn,
                    force3D: true
                }, .05);
                this.goUpAnim.to(this.$refs.slideImg, .8, {
                    y: -window.innerHeight,
                    ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeIn
                }, 0);
                this.goUpAnim.set(this.$el, {
                    autoAlpha: 0
                });

                this.goDownAnim = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.goDownAnim.staggerTo(this.$refs.slideInfo.children, .5, {
                    y: 100,
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeIn,
                    force3D: true
                }, -.05);
                this.goDownAnim.to(this.$refs.slideImg, .8, {
                    y: window.innerHeight,
                    ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeIn
                }, 0);
                this.goDownAnim.set(this.$el, {
                    autoAlpha: 0
                });

                this.openMenuAnim = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.openMenuAnim.call(function() {
                    _this.closeMenuAnim.kill();
                });
                this.openMenuAnim.staggerTo(this.$refs.slideInfo.children, 1.4, {
                    y: 0,
                    autoAlpha: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                    force3D: true
                }, .05);
                this.openMenuAnim.to(this.$refs.slideImg, 2, {
                    z: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                }, 0);

                this.closeMenuAnim = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.closeMenuAnim.call(function() {
                    _this.openMenuAnim.kill();
                });
                this.closeMenuAnim.staggerTo(this.$refs.slideInfo.children, .2, {
                    y: 100,
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeIn,
                    force3D: true
                }, -.04);
                this.closeMenuAnim.to(this.$refs.slideImg, 1.5, {
                    z: -800,
                    ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                }, 0);

                this.buttonHoverAnim = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.buttonHoverAnim.to(this.$refs.buttonText, .2, {
                    y: -20,
                    rotationX: 45,
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeIn
                });
                this.buttonHoverAnim.set(this.$refs.buttonText, {
                    y: 20,
                    rotationX: -45
                });
                this.buttonHoverAnim.to(this.$refs.buttonText, .2, {
                    y: 0,
                    rotationX: 0,
                    autoAlpha: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                });
                this.buttonHoverAnim.to(this.$refs.button, .5, {
                    borderColor: new __WEBPACK_IMPORTED_MODULE_1__commons_script_HexToRgba_js__["a" /* default */ ]().convert(this.textColor, 1),
                    ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeInOut
                }, 0);

                this.events();
                this.loaderReady();
            },
            beforeDestroy: function beforeDestroy() {
                this.unlistenEvents();
            },


            methods: {
                events: function events() {
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$on('slide-prev', this.slidePrev);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$on('slide-next', this.slideNext);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$on('toggle-menu', this.toggleMenu);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$on('leave-page', this.leavePage);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$on('close-case-study', this.closeCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$on('click-close-button', this.setNextHook);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$on('page-ready', this.loaderReady);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$on('hide-case-study', this.nextCaseStudy);
                },
                unlistenEvents: function unlistenEvents() {
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$off('slide-prev', this.slidePrev);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$off('slide-next', this.slideNext);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$off('toggle-menu', this.toggleMenu);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$off('click-close-button', this.setNextHook);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$off('leave-page', this.leavePage);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$off('close-case-study', this.closeCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$off('page-ready', this.loaderReady);
                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$off('hide-case-study', this.nextCaseStudy);
                },
                setNextHook: function setNextHook() {
                    this.nextHook = false;
                },
                nextCaseStudy: function nextCaseStudy(payload) {
                    var _this2 = this;

                    var currentSlideId = payload.currentId;
                    var oldSlideId = payload.oldId;

                    if (this.slideId === this.currentSlideId) {
                        this.loadNextProject = true;
                        this.isLoading = true;
                    }

                    this.nextHook = true;

                    if (this.slideId === currentSlideId) {
                        this.buttonIsClickable = false;
                        TweenLite.set(this.$el, {
                            autoAlpha: 1
                        });
                        TweenLite.set(this.$refs.slideInfo.children, {
                            y: 100,
                            autoAlpha: 0
                        });
                        TweenLite.set(this.$refs.slideInfo.children[0], {
                            y: 100,
                            autoAlpha: 1
                        });
                        TweenLite.set(this.$refs.slideInfo.children[1], {
                            y: 100,
                            autoAlpha: 1
                        });
                        TweenLite.set(this.$refs.slideImg, {
                            y: 0
                        });
                        TweenLite.set(this.$refs.slideImg, {
                            z: -100
                        });
                        TweenLite.set(this.$refs.slideInfo, {
                            y: 0
                        });
                        TweenMax.staggerTo(this.$refs.slideInfo.children, 1, {
                            y: 0,
                            autoAlpha: 1,
                            ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                            force3D: true
                        }, .04);
                        TweenLite.to(this.$refs.slideImg, 1.4, {
                            z: 0,
                            ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                        }, 0);
                        __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default()(function() {
                            _this2.caseStudyClosed();
                        }, 1500);
                    }

                    if (this.slideId === oldSlideId) {
                        this.buttonIsClickable = true;
                        TweenLite.set(this.$refs.slideImg, {
                            z: 0
                        });
                        TweenLite.set(this.$el, {
                            autoAlpha: 0
                        });
                    }
                },
                getOldSlideId: function getOldSlideId() {
                    var oldSlideId = void 0;
                    slides[this.currentSlideId - 1] ? oldSlideId = this.currentSlideId - 1 : oldSlideId = slides.length - 1;
                    return oldSlideId;
                },
                loaderReady: function loaderReady() {
                    this.pageReady && this.appearPage();
                },
                leavePage: function leavePage(routerInfo) {
                    var leaveAnim = this.getCurrentAnimLeave;
                    __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].setInactive();
                    TweenLite.to(this.$refs.slideImg, 1, {
                        z: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                    });
                    this.currentSlideId === this.slideId ? this[leaveAnim]() : undefined;
                },
                appearPage: function appearPage() {
                    var appearAnim = this.getCurrentAnimAppear;
                    this.currentSlideId === this.slideId ? this[appearAnim]() : undefined;
                },
                caseStudyClosed: function caseStudyClosed() {
                    var _this3 = this;

                    __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$emit('case-study-closed', this.loadNextProject);
                    __WEBPACK_IMPORTED_MODULE_7__stores_MenuStore_js__["a" /* default */ ].unblockMenu();
                    __WEBPACK_IMPORTED_MODULE_7__stores_MenuStore_js__["a" /* default */ ].menuIsNotAnimated();
                    __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default()(function() {
                        _this3.nextHook = false;
                        _this3.buttonIsClickable = true;
                        _this3.loadNextProject && _this3.caseStudy ? _this3.loadCaseStudy() : undefined;
                        _this3.loadNextProject = false;
                    }, 100);
                },
                closeCaseStudy: function closeCaseStudy() {
                    var _this4 = this;

                    var tl = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                        paused: true,
                        onComplete: function onComplete() {
                            _this4.caseStudyClosed();
                        }
                    });
                    tl.set(this.$refs.slideInfo.children, {
                        y: 100
                    });
                    tl.set(this.$refs.slideInfo.children[2], {
                        autoAlpha: 0
                    });
                    tl.set(this.$refs.slideInfo.children[3], {
                        autoAlpha: 0
                    });
                    tl.set(this.$refs.slideInfo.children[4], {
                        autoAlpha: 0
                    });
                    tl.set(this.$refs.slideImg, {
                        z: -100
                    });
                    tl.staggerTo(this.$refs.slideInfo.children, .6, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                        force3D: true
                    }, .04);
                    tl.to(this.$refs.slideImg, 1.4, {
                        z: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                    }, 0);

                    this.slideId === this.currentSlideId && !this.nextHook ? tl.play(0) : undefined;
                },
                goToCaseStudy: function goToCaseStudy() {
                    this.buttonIsClickable = false;
                    if (this.slideId === this.currentSlideId) {
                        __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$emit('go-to-case-study');
                        this.$router.replace({
                            name: 'case-study',
                            params: {
                                id: this.title
                            }
                        });
                        var tl = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]();
                        tl.to(this.$refs.slideInfo.children, 2, {
                            y: 100,
                            ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                            force3D: true
                        });
                        tl.to(this.$refs.slideInfo.children[2], 1, {
                            autoAlpha: 0,
                            ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                            force3D: true
                        }, 0);
                        tl.to(this.$refs.slideInfo.children[3], 1, {
                            autoAlpha: 0,
                            ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                            force3D: true
                        }, 0);
                        tl.to(this.$refs.slideInfo.children[4], 1, {
                            autoAlpha: 0,
                            ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                            force3D: true
                        }, 0);
                        tl.to(this.$refs.slideImg, 2, {
                            z: -100,
                            ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                        }, 0);
                        tl.set(this.$refs.loadingBar, {
                            scaleX: 0
                        });
                    } else {
                        TweenLite.to(this.$refs.loadingBar, 1, {
                            scaleX: 0,
                            ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                        });
                    }
                },
                loadCaseStudy: function loadCaseStudy() {
                    var _this5 = this;

                    if (!this.buttonIsClickable || this.getSliderPosY > 1 || this.getSliderPosY < -1 || this.sliderIsAnimated || this.$route.name !== 'work') {
                        return undefined;
                    }
                    var assetsToLoad = void 0;
                    var caseStudyName = this.title.toLowerCase();
                    window.devicePixelRatio <= 1 ? assetsToLoad = this.findAssets('1x', caseStudyName) : assetsToLoad = this.findAssets('2x', caseStudyName);

                    this.isLoading = true;
                    this.buttonOut();

                    var loader = __WEBPACK_IMPORTED_MODULE_5_assets_loader___default()().add(assetsToLoad);
                    loader.on('progress', function(progress) {
                        if (_this5.progress === undefined || progress > _this5.progress) {
                            _this5.progress = progress;
                            TweenLite.to(_this5.$refs.loadingBar, .6, {
                                scaleX: progress,
                                ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                            });
                        }
                    });
                    loader.on('complete', function() {
                        _this5.goToCaseStudy();
                        _this5.isLoading = false;
                        _this5.progress = 0;
                    });
                    loader.start();
                },
                appearAnim: function appearAnim() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                        paused: true,
                        onComplete: function onComplete() {
                            __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$emit('appear-slide');
                            __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].setActive();
                        }
                    });
                    tl.set(this.$el, {
                        autoAlpha: 1
                    });
                    tl.set(this.$refs.slideInfo.children, {
                        y: 100,
                        autoAlpha: 0
                    });
                    tl.set(this.$refs.slideImg, {
                        z: -800
                    });
                    tl.to(this.$refs.slideImg, 3, {
                        z: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                    });
                    tl.staggerTo(this.$refs.slideInfo.children, 2, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                    }, .05, '-=2.5');

                    var tlCaseStudy = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                        paused: true
                    });
                    tlCaseStudy.set(this.$el, {
                        autoAlpha: 1
                    });
                    tlCaseStudy.set(this.$refs.slideInfo.children, {
                        y: 200,
                        autoAlpha: 0
                    });
                    tlCaseStudy.set(this.$refs.slideImg, {
                        z: -1000
                    });
                    tlCaseStudy.to(this.$refs.slideImg, 3, {
                        z: -100,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                    });
                    tlCaseStudy.to(this.$refs.slideInfo.children[0], 2, {
                        y: 100,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                        force3D: true
                    }, '-=3');
                    tlCaseStudy.to(this.$refs.slideInfo.children[1], 2, {
                        y: 100,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                        force3D: true
                    }, '-=2.8');

                    this.$route.name === 'case-study' ? tlCaseStudy.play(0) : tl.play(0);
                },
                appearDown: function appearDown(delay) {
                    var tl = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                        paused: true,
                        delay: delay,
                        onComplete: function onComplete() {
                            __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].sliderIsNotAnimated();
                            __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$emit('appear-slide');
                            __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].setActive();
                        }
                    });
                    tl.set(this.$refs.slideImg, {
                        y: window.innerHeight * 2
                    });
                    tl.set(this.$el, {
                        autoAlpha: 1
                    });
                    tl.set(this.$refs.slideInfo, {
                        y: 0
                    });
                    tl.set(this.$refs.slideInfo.children, {
                        y: 100,
                        autoAlpha: 0
                    });
                    tl.to(this.$refs.slideImg, .55, {
                        y: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                    });
                    tl.staggerTo(this.$refs.slideInfo.children, .7, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                        force3D: true
                    }, .05, 0);

                    var tlCaseStudy = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                        paused: true
                    });
                    tlCaseStudy.set(this.$refs.slideInfo.children, {
                        y: 200,
                        autoAlpha: 0
                    });
                    tlCaseStudy.set(this.$refs.slideImg, {
                        y: window.innerHeight * 2
                    });
                    tlCaseStudy.set(this.$el, {
                        autoAlpha: 1
                    });
                    tlCaseStudy.set(this.$refs.slideInfo, {
                        y: 0
                    });
                    tlCaseStudy.to(this.$refs.slideImg, .55, {
                        y: 0,
                        z: -100,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                    });
                    tlCaseStudy.to(this.$refs.slideInfo.children[0], 2, {
                        y: 100,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                        force3D: true
                    }, 0);
                    tlCaseStudy.to(this.$refs.slideInfo.children[1], 2, {
                        y: 100,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                        force3D: true
                    }, '-=1.8');

                    this.$route.name === 'case-study' ? tlCaseStudy.play() : tl.play();
                },
                appearUp: function appearUp(delay) {
                    var tl = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                        delay: delay,
                        onComplete: function onComplete() {
                            __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].sliderIsNotAnimated();
                            __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$emit('appear-slide');
                            __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].setActive();
                        }
                    });
                    tl.set(this.$refs.slideImg, {
                        y: -window.innerHeight * 2
                    });
                    tl.set(this.$el, {
                        autoAlpha: 1
                    });
                    tl.set(this.$refs.slideInfo, {
                        y: 0
                    });
                    tl.set(this.$refs.slideInfo.children, {
                        y: -100,
                        autoAlpha: 0
                    });
                    tl.to(this.$refs.slideImg, .55, {
                        y: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                    });
                    tl.staggerTo(this.$refs.slideInfo.children, .7, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                        force3D: true
                    }, -.05, 0);
                },
                prevDown: function prevDown() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]();
                    tl.staggerTo(this.$refs.slideInfo.children, .4, {
                        y: 100,
                        autoAlpha: 0,
                        ease: Power1.easeIn,
                        force3D: true
                    }, -.04);
                    tl.to(this.$refs.slideImg, .35, {
                        y: window.innerHeight,
                        ease: Power1.easeIn
                    }, 0);
                    tl.to(this.$refs.slideInfo, .4, {
                        y: window.innerHeight,
                        ease: Power1.easeIn
                    }, 0);
                    tl.set(this.$el, {
                        autoAlpha: 0
                    });
                },
                leaveDown: function leaveDown() {
                    var transitionTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : .8;

                    var tl = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]();
                    tl.staggerTo(this.$refs.slideInfo.children, .5, {
                        y: 100,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeIn,
                        force3D: true
                    }, -.05);
                    tl.to(this.$refs.slideImg, transitionTime, {
                        y: window.innerHeight,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeIn
                    }, 0);
                    tl.set(this.$el, {
                        autoAlpha: 0
                    });
                },
                leaveUp: function leaveUp(transitionTime) {
                    var tl = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]();
                    tl.staggerTo(this.$refs.slideInfo.children, .4, {
                        y: -100,
                        autoAlpha: 0,
                        ease: Power1.easeIn,
                        force3D: true
                    }, .04);
                    tl.to(this.$refs.slideImg, transitionTime, {
                        y: -window.innerHeight,
                        ease: Power1.easeIn
                    }, 0);
                    tl.to(this.$refs.slideInfo, .4, {
                        y: -window.innerHeight,
                        ease: Power1.easeIn
                    }, 0);
                    tl.set(this.$el, {
                        autoAlpha: 0
                    });
                },
                leaveForward: function leaveForward() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]();
                    tl.add(TweenMax.to(this.$refs.slideImg, 1, {
                        z: 1000,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeIn,
                        overwrite: 'all',
                        force3D: true
                    }));
                    tl.add(TweenMax.staggerTo(this.$refs.slideInfo.children, .5, {
                        y: 100,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeIn,
                        overwrite: 'allOnStart'
                    }, -.03), 0);
                },
                appearBackward: function appearBackward(delay) {
                    var tl = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                        paused: true,
                        onComplete: function onComplete() {
                            __WEBPACK_IMPORTED_MODULE_4__event_bus_js__["a" /* EventBus */ ].$emit('appear-slide');
                            __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].setActive();
                        }
                    });
                    tl.set(this.$el, {
                        autoAlpha: 1
                    });
                    tl.set(this.$refs.slideInfo.children, {
                        y: 100,
                        autoAlpha: 0
                    });
                    tl.set(this.$refs.slideImg, {
                        z: 1000
                    });
                    tl.to(this.$refs.slideImg, 1.5, {
                        z: 0,
                        opacity: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                        force3D: true
                    });
                    tl.staggerTo(this.$refs.slideInfo.children, .9, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut,
                        force3D: true
                    }, .08, '-=.9');

                    var tlCaseStudy = new __WEBPACK_IMPORTED_MODULE_3_gsap__["a" /* TimelineLite */ ]({
                        paused: true
                    });
                    tlCaseStudy.set(this.$el, {
                        autoAlpha: 1
                    });
                    tlCaseStudy.set(this.$refs.slideImg, {
                        z: 1000
                    });
                    tlCaseStudy.set(this.$refs.slideInfo.children, {
                        y: 200,
                        autoAlpha: 0
                    });
                    tlCaseStudy.to(this.$refs.slideImg, 1, {
                        z: -100,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                    });
                    tlCaseStudy.to(this.$refs.slideInfo.children[0], 2, {
                        y: 100,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                    }, 0);
                    tlCaseStudy.to(this.$refs.slideInfo.children[1], 2, {
                        y: 100,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_3_gsap__["b" /* Expo */ ].easeOut
                    }, '-=1.8');

                    this.$route.name === 'case-study' ? tlCaseStudy.play(0) : tl.play(0);
                },
                toggleMenu: function toggleMenu() {
                    this.currentSlideId === this.slideId && this.menuIsClosed ? this.openMenuAnim.play(0) : undefined;
                    this.currentSlideId === this.slideId && !this.menuIsClosed ? this.closeMenuAnim.play(0) : undefined;
                },
                buttonHover: function buttonHover() {
                    !this.isLoading ? this.buttonHoverAnim.play() : undefined;
                },
                buttonOut: function buttonOut() {
                    this.buttonHoverAnim.reverse();
                },
                slidePrev: function slidePrev(lastSlideId) {
                    lastSlideId === this.slideId ? this.prevDown(.35) : undefined;
                    this.currentSlideId === this.slideId ? this.appearUp(1) : undefined;
                },
                slideNext: function slideNext(lastSlideId) {
                    lastSlideId === this.slideId ? this.leaveUp(.35) : undefined;
                    this.currentSlideId === this.slideId ? this.appearDown(1) : undefined;
                }
            }
        });

        /***/
    }),
    /* 95 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__commons_script_SplitText_js__ = __webpack_require__(17);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_gsap__ = __webpack_require__(4);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__ = __webpack_require__(11);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__stores_LoaderStore_js__ = __webpack_require__(7);
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //









        var slides = __webpack_require__(16).slides;

        /* harmony default export */
        __webpack_exports__["default"] = ({
            data: function data() {
                return {
                    state: __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].state,
                    loaderState: __WEBPACK_IMPORTED_MODULE_4__stores_LoaderStore_js__["a" /* default */ ].state,
                    currentSlideId: __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].state.currentSlideId,
                    sliderLength: slides.length,
                    sliderName: 'Projects',
                    isVisible: false
                };
            },


            computed: {
                pageReady: function pageReady() {
                    return this.loaderState.pageReady;
                },
                titleColor: function titleColor() {
                    return slides[this.state.currentSlideId].titleColor;
                },
                textColor: function textColor() {
                    return slides[this.state.currentSlideId].textColor;
                },
                currentTitleColor: function currentTitleColor() {
                    return slides[__WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].state.currentSlideId].titleColor;
                },
                currentTextColor: function currentTextColor() {
                    return slides[__WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].state.currentSlideId].textColor;
                }
            },

            mounted: function mounted() {

                var splittedSliderName = new __WEBPACK_IMPORTED_MODULE_0__commons_script_SplitText_js__["a" /* default */ ](this.$refs.sliderName, {
                    classToGive: 'slide-indicator__slider-name__splitted'
                });

                this.$route.name !== 'case-study' && this.pageReady ? this.appearAnim() : undefined;

                this.events();
            },
            beforeDestroy: function beforeDestroy() {
                this.unlistenEvents();
            },


            methods: {
                events: function events() {
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('slide-next', this.nextAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('slide-prev', this.prevAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('leave-page', this.leaveAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('go-to-case-study', this.leaveAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('close-case-study', this.appearAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('page-ready', this.loaderReady);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('hide-case-study', this.nextCaseStudy);
                },
                unlistenEvents: function unlistenEvents() {
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('slide-next', this.nextAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('slide-prev', this.prevAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('leave-page', this.leaveAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('go-to-case-study', this.leaveAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('close-case-study', this.appearAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('page-ready', this.loaderReady);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('hide-case-study', this.nextCaseStudy);
                },
                nextCaseStudy: function nextCaseStudy() {
                    this.setNewSlideId();
                    this.appearAnim();
                },
                loaderReady: function loaderReady() {
                    this.$route.name !== 'case-study' ? this.appearAnim() : undefined;
                },
                appearAnim: function appearAnim() {

                    var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                        delay: .5,
                        paused: true
                    });
                    tl.set(this.$el, {
                        autoAlpha: 1
                    });
                    tl.set(this.$refs.currentSlide, {
                        color: this.currentTitleColor
                    });
                    tl.set(this.$refs.sliderLength, {
                        color: this.currentTitleColor
                    });
                    tl.set(this.$refs.separator, {
                        backgroundColor: this.currentTitleColor
                    });
                    tl.set(this.$refs.sliderName, {
                        color: this.currentTextColor
                    });
                    tl.fromTo(this.$refs.currentSlide, 1.5, {
                        y: -30,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    });
                    tl.fromTo(this.$refs.sliderLength, 1.5, {
                        y: 30,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    }, 0);
                    tl.fromTo(this.$refs.separator, 1.5, {
                        scaleY: 0,
                        autoAlpha: 0
                    }, {
                        scaleY: 1,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    }, '-=1.5');
                    tl.staggerFromTo(this.$refs.sliderName.children, 2, {
                        y: 10,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut,
                        force3D: true
                    }, .06, 0);

                    if (!this.isVisible) {
                        tl.play();
                        this.isVisible = true;
                    }
                },
                leaveAnim: function leaveAnim() {
                    this.isVisible = false;

                    var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]();
                    tl.to(this.$refs.currentSlide, .6, {
                        y: -30,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                    });
                    tl.to(this.$refs.sliderLength, .6, {
                        y: 30,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                    }, 0);
                    tl.to(this.$refs.separator, .6, {
                        scaleY: 0,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                    }, '-=1');
                    tl.staggerTo(this.$refs.sliderName.children, .4, {
                        y: 5,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn,
                        force3D: true
                    }, -.04, 0);
                },
                prevAnim: function prevAnim() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]();
                    tl.to(this.$refs.currentSlide, 1, {
                        y: 30,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                    });
                    tl.set(this.$refs.currentSlide, {
                        y: -30
                    });
                    tl.call(this.setNewSlideId);
                    tl.to(this.$refs.currentSlide, 2, {
                        y: 0,
                        color: this.titleColor,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    });
                    tl.to(this.$refs.sliderLength, 2, {
                        color: this.titleColor,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    }, '-=2');
                    tl.to(this.$refs.separator, 2, {
                        backgroundColor: this.titleColor,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    }, '-=2');
                    tl.to(this.$refs.sliderName, 2, {
                        color: this.textColor,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    }, '-=2');
                },
                nextAnim: function nextAnim() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]();
                    tl.to(this.$refs.currentSlide, 1, {
                        y: -30,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                    });
                    tl.set(this.$refs.currentSlide, {
                        y: 30
                    });
                    tl.call(this.setNewSlideId);
                    tl.to(this.$refs.currentSlide, 2, {
                        y: 0,
                        color: this.titleColor,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    });
                    tl.to(this.$refs.sliderLength, 2, {
                        color: this.titleColor,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    }, '-=2');
                    tl.to(this.$refs.separator, 2, {
                        backgroundColor: this.titleColor,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    }, '-=2');
                    tl.to(this.$refs.sliderName, 2, {
                        color: this.textColor,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    }, '-=2');
                },
                setNewSlideId: function setNewSlideId() {
                    this.currentSlideId = __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].state.currentSlideId;
                }
            }

        });

        /***/
    }),
    /* 96 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay__ = __webpack_require__(13);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_delay__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_lodash_debounce__ = __webpack_require__(60);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_lodash_debounce___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash_debounce__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3_gsap__ = __webpack_require__(4);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__Slide_vue__ = __webpack_require__(250);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__Slide_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__Slide_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__SlideIndicator_vue__ = __webpack_require__(251);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__SlideIndicator_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__SlideIndicator_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__ = __webpack_require__(11);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_7_virtual_scroll__ = __webpack_require__(34);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_7_virtual_scroll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_virtual_scroll__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_8__stores_MenuStore_js__ = __webpack_require__(5);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_9__stores_LoaderStore_js__ = __webpack_require__(7);


        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //













        var slides = __webpack_require__(16).slides;

        /* harmony default export */
        __webpack_exports__["default"] = ({
            beforeCreate: function beforeCreate() {
                this.slides = slides;
            },
            mounted: function mounted() {
                this.vs = new __WEBPACK_IMPORTED_MODULE_7_virtual_scroll___default.a({
                    el: this.$el,
                    mouseMultiplier: .4,
                    keyStep: 400
                });
                this.events();
                this.loaderReady();
                this.debouncedBackToSlide = __WEBPACK_IMPORTED_MODULE_1_lodash_debounce___default()(this.backToSlide, 200);
            },
            beforeDestroy: function beforeDestroy() {
                this.unlistenEvents();
                __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].reset();
                __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].setInactive();
            },
            data: function data() {
                return {
                    state: __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].state,
                    menuState: __WEBPACK_IMPORTED_MODULE_8__stores_MenuStore_js__["a" /* default */ ].state,
                    loaderState: __WEBPACK_IMPORTED_MODULE_9__stores_LoaderStore_js__["a" /* default */ ].state,
                    targetPosY: 0,
                    slideTransform: 0,
                    oldSlideTransform: 0,
                    oldDeltaY: 0,
                    leave: false,
                    directionQueue: '',
                    mousemoveIsActive: false,
                    rotationX: 0,
                    rotationY: 0
                };
            },


            computed: {
                pageReady: function pageReady() {
                    return this.loaderState.pageReady;
                },
                currentSlideId: function currentSlideId() {
                    return this.state.currentSlideId;
                },
                sliderIsAnimated: function sliderIsAnimated() {
                    return this.state.isAnimated;
                },
                sliderIsActive: function sliderIsActive() {
                    return this.state.isActive;
                },
                menuIsClosed: function menuIsClosed() {
                    return this.menuState.isClosed;
                },
                menuIsAnimated: function menuIsAnimated() {
                    return this.menuState.isAnimated;
                },
                getSliderPosY: function getSliderPosY() {
                    return this.state.posY;
                },
                isSliding: function isSliding() {
                    return this.state.isSliding;
                }
            },

            methods: {
                events: function events() {
                    this.vs.on(this.wheel);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('appear-slide', this.appearSlide);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('add-mousemove', this.addMousemove);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('leave-page', this.leavePage);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('go-to-case-study', this.goToCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('close-case-study', this.closeCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('case-study-closed', this.caseStudyClosed);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('page-ready', this.loaderReady);
                },
                unlistenEvents: function unlistenEvents() {
                    this.removeMousemove();
                    this.vs.destroy();
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('add-mousemove', this.addMousemove);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('appear-slide', this.wheelLoop);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('leave-page', this.leavePage);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('go-to-case-study', this.goToCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('close-case-study', this.closeCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('case-study-closed', this.caseStudyClosed);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('page-ready', this.loaderReady);
                },
                leavePage: function leavePage() {
                    this.leave = true;
                },
                mousemove: function mousemove(e) {
                    e.preventDefault();

                    var centroX = e.clientX - window.innerWidth / 2;
                    var centroY = window.innerHeight / 2 - (e.clientY + 100);
                    var degX = centroX * .01;
                    var degY = centroY * .02;

                    if (this.menuIsClosed) {

                        __WEBPACK_IMPORTED_MODULE_3_gsap__["d" /* TweenLite */ ].killTweensOf(this.$refs.slideContainer, false, {
                            rotationX: true,
                            rotationY: true
                        });

                        if (this.menuIsClosed && !this.isSliding) {
                            __WEBPACK_IMPORTED_MODULE_3_gsap__["d" /* TweenLite */ ].to(this.$refs.slideContainer, .8, {
                                rotationX: degY
                            });
                        }

                        __WEBPACK_IMPORTED_MODULE_3_gsap__["d" /* TweenLite */ ].to(this.$refs.slideContainer, .8, {
                            rotationY: degX
                        });
                    }
                },
                loaderReady: function loaderReady() {
                    this.$route.name === 'case-study' && this.pageReady ? this.goToCaseStudy() : undefined;
                },
                addMousemove: function addMousemove() {
                    !this.mousemoveIsActive ? window.addEventListener('mousemove', this.mousemove) : undefined;
                    this.mousemoveIsActive = true;
                },
                removeMousemove: function removeMousemove() {
                    window.removeEventListener('mousemove', this.mousemove);
                },
                goToCaseStudy: function goToCaseStudy() {
                    this.caseStudyOpen = true;
                    this.vs.off(this.wheel);
                    this.wheelCaseStudy();
                    this.leave = true;

                    this.removeMousemove();
                    this.mousemoveIsActive = false;
                    __WEBPACK_IMPORTED_MODULE_3_gsap__["d" /* TweenLite */ ].to(this.$refs.slideContainer, 2, {
                        rotationY: 0,
                        rotationX: 0
                    });
                },
                closeCaseStudy: function closeCaseStudy() {
                    this.addMousemove();
                },
                caseStudyClosed: function caseStudyClosed(loadNextProject) {
                    var _this = this;

                    if (!loadNextProject || !slides[this.currentSlideId]['case-study']) {
                        __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default()(function() {
                            _this.caseStudyOpen = false;
                            _this.vs.on(_this.wheel);
                            __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].setActive();
                            _this.leave = false;
                            _this.wheelLoop();
                        }, 100);
                    }
                },
                wheel: function wheel(event) {
                    var targetModifier = event.deltaY;

                    if (!this.menuIsClosed) {
                        return undefined;
                    }

                    if (!this.sliderIsAnimated) {
                        this.targetPosY += targetModifier;
                        this.oldDeltaY = event.deltaY;
                    }

                    this.debouncedBackToSlide();
                },
                backToSlide: function backToSlide() {
                    this.targetPosY = 0;
                },
                wheelCaseStudy: function wheelCaseStudy() {
                    var newSlideTransform = this.getSliderPosY;
                    this.slideTransform = newSlideTransform;
                    __WEBPACK_IMPORTED_MODULE_3_gsap__["d" /* TweenLite */ ].set(this.$refs.slideContainer, {
                        y: this.slideTransform,
                        force3D: true
                    });
                    this.caseStudyOpen ? requestAnimationFrame(this.wheelCaseStudy) : undefined;
                },
                appearSlide: function appearSlide() {
                    this.addMousemove();
                    this.wheelLoop();
                },
                wheelLoop: function wheelLoop() {
                    var slideLimit = 165;
                    var newSlideTransform = this.slideTransform + (this.targetPosY - this.slideTransform) * .09;
                    newSlideTransform = this.getRoundedValue(newSlideTransform);

                    if (newSlideTransform !== this.oldSlideTransform) {
                        this.oldSlideTransform = this.slideTransform;
                        this.slideTransform = newSlideTransform;
                        __WEBPACK_IMPORTED_MODULE_3_gsap__["d" /* TweenLite */ ].set(this.$refs.slideContainer, {
                            y: this.slideTransform,
                            force3D: true
                        });
                        __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].setPosY(this.slideTransform);
                    }

                    if (this.slideTransform <= -slideLimit || this.directionQueue === 'next') {
                        this.nextSlide();
                        __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default()(this.resetWheel.bind(this), 1000);
                    } else if (this.slideTransform >= slideLimit || this.directionQueue === 'prev') {
                        this.prevSlide();
                        __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default()(this.resetWheel.bind(this), 1000);
                    } else if (!this.leave) {
                        requestAnimationFrame(this.wheelLoop);
                    }
                },
                getRoundedValue: function getRoundedValue(valueToRound) {
                    var roundedValue = valueToRound * 1000;
                    roundedValue = Math.round(roundedValue);
                    roundedValue = roundedValue / 1000;

                    return roundedValue;
                },
                resetWheel: function resetWheel() {
                    this.targetPosY = 0;
                    this.slideTransform = 0;
                    this.oldDeltaY = 0;
                    this.directionQueue = '';
                    __WEBPACK_IMPORTED_MODULE_3_gsap__["d" /* TweenLite */ ].set(this.$refs.slideContainer, {
                        y: 0,
                        force3D: true
                    });
                },
                containSlide: function containSlide(slideId) {
                    if (slideId >= 0 && slideId <= slides.length - 1) {
                        return true;
                    } else {
                        return false;
                    }
                },
                nextSlide: function nextSlide() {
                    this.goToSlide(this.currentSlideId + 1);
                },
                prevSlide: function prevSlide() {
                    this.goToSlide(this.currentSlideId - 1);
                },
                goToSlide: function goToSlide(slideId) {
                    var lastSlideId = this.currentSlideId;
                    var direction = void 0;

                    if (slideId >= slides.length) {
                        direction = 'next';
                        __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].reset();
                    } else if (slideId < 0) {
                        direction = 'prev';
                        __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].setSlideId(slides.length - 1);
                    } else {
                        this.currentSlideId < slideId ? direction = 'next' : direction = 'prev';
                        direction === 'next' ? __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].increment() : __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].decrement();
                    }

                    this.mousemoveIsActive = false;
                    this.removeMousemove();

                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$emit('slide-' + direction, lastSlideId);
                    __WEBPACK_IMPORTED_MODULE_6__stores_SliderStore_js__["a" /* default */ ].sliderIsAnimated();
                }
            },
            components: {
                Slide: __WEBPACK_IMPORTED_MODULE_4__Slide_vue___default.a,
                SlideIndicator: __WEBPACK_IMPORTED_MODULE_5__SlideIndicator_vue___default.a
            }
        });

        /***/
    }),
    /* 97 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_findIndex__ = __webpack_require__(62);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_findIndex___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_findIndex__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_gsap__ = __webpack_require__(4);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__ = __webpack_require__(11);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__stores_MenuStore_js__ = __webpack_require__(5);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__stores_AnimationStore_js__ = __webpack_require__(10);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_6__stores_LoaderStore_js__ = __webpack_require__(7);


        var _methods;

        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }

        //
        //
        //
        //
        //
        //
        //





        var THREE = __webpack_require__(236);

        var materials = __webpack_require__(312).materials;
        var slides = __webpack_require__(74);
        var slidesFromSlider = __webpack_require__(16).slides;






        /* harmony default export */
        __webpack_exports__["default"] = ({
            data: function data() {
                return {
                    cameraY: 0,
                    state: __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].state,
                    menuState: __WEBPACK_IMPORTED_MODULE_4__stores_MenuStore_js__["a" /* default */ ].state,
                    animationState: __WEBPACK_IMPORTED_MODULE_5__stores_AnimationStore_js__["a" /* default */ ].state,
                    loaderState: __WEBPACK_IMPORTED_MODULE_6__stores_LoaderStore_js__["a" /* default */ ].state,
                    targetZ: 10,
                    lookAt: false,
                    oldWheelPosition: 0,
                    mouse: {
                        x: 0,
                        y: 0,
                        ratio: {
                            x: 0,
                            y: 0
                        }
                    }
                };
            },


            computed: {
                pageReady: function pageReady() {
                    return this.loaderState.pageReady;
                },
                currentSlideId: function currentSlideId() {
                    return this.state.currentSlideId;
                },
                menuIsClosed: function menuIsClosed() {
                    return this.menuState.isClosed;
                },
                sliderIsAnimated: function sliderIsAnimated() {
                    return this.state.isAnimated;
                },
                getCurrentAnimAppear: function getCurrentAnimAppear() {
                    return this.animationState.appear;
                },
                getCurrentAnimLeave: function getCurrentAnimLeave() {
                    return this.animationState.leave;
                },
                getCurrentSlidePosY: function getCurrentSlidePosY() {
                    return this.state.posY;
                },
                sliderIsActive: function sliderIsActive() {
                    return this.state.isActive;
                },
                caseStudyIsOpen: function caseStudyIsOpen() {
                    return this.state.caseStudyIsOpen;
                },
                isSliding: function isSliding() {
                    return this.state.isSliding;
                }
            },

            mounted: function mounted() {
                this.init();

                this.animate();
                this.events();

                this.materials = [];
                this.generateMaterials();

                this.initCube();
                this.lookAt = true;
                this.initBg(this.$route.name);

                if (this.pageReady) {
                    this.$route.name === 'case-study' ? this.appearCaseStudy() : this.appearAnim();
                }
            },
            beforeDestroy: function beforeDestroy() {
                this.unlistenEvents();
            },


            methods: (_methods = {
                init: function init() {
                    this.scene = new THREE.Scene();
                    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
                    this.camera.position.z = 10;

                    this.renderer = new THREE.WebGLRenderer({
                        antialias: true,
                        alpha: true
                    });
                    this.renderer.setPixelRatio(window.devicePixelRatio ? window.devicePixelRatio : 1);
                    this.renderer.setSize(window.innerWidth, window.innerHeight);
                    this.$refs.bgRenderer.appendChild(this.renderer.domElement);
                    this.render();
                },
                initCube: function initCube() {
                    var geometry = new THREE.BoxBufferGeometry(1, 1, 1);
                    var material = new THREE.MeshBasicMaterial({
                        color: 0x00ff00
                    });
                    this.cube = new THREE.Mesh(geometry, material);
                    this.cube.position.set(0, 0, 0);
                    this.scene.add(this.cube);
                },
                loaderReady: function loaderReady() {
                    this.$route.name === 'case-study' ? this.appearCaseStudy() : this.appearAnim();
                },
                addMousemove: function addMousemove() {
                    if (this.$route.name !== 'case-study') {
                        window.addEventListener('mousemove', this.mousemove);
                    }
                },
                appearAnim: function appearAnim() {
                    this.addMousemove();
                    var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]();
                    tl.fromTo(this.camera.position, 3, {
                        z: 17
                    }, {
                        z: 10,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    });
                },
                remove3dMouse: function remove3dMouse() {
                    __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].setIsSliding(true);
                    window.removeEventListener('mousemove', this.mousemove);
                },
                appearCaseStudy: function appearCaseStudy() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]();
                    tl.fromTo(this.camera.position, 3, {
                        z: 17
                    }, {
                        z: 10.5,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    });
                },
                openMenuAnim: function openMenuAnim() {
                    window.removeEventListener('mousemove', this.mousemove);
                    var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]();
                    tl.add(__WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].to(this.camera.position, 1.5, {
                        z: 15,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut,
                        overwrite: 'all'
                    }));
                },
                closeMenuAnim: function closeMenuAnim() {
                    this.addMousemove();
                    var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]();
                    tl.add(__WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].to(this.camera.position, 1.5, {
                        z: 10,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut,
                        overwrite: 'all'
                    }));
                },
                render: function render() {
                    this.renderer.render(this.scene, this.camera);
                },
                rendererResize: function rendererResize() {
                    this.renderer.setSize(window.innerWidth, window.innerHeight);
                    this.camera.aspect = window.innerWidth / window.innerHeight;
                    this.camera.updateProjectionMatrix();
                },
                animate: function animate() {
                    this.wheel();
                    this.renderCameraRotation();
                    this.render();
                    requestAnimationFrame(this.animate.bind(this));
                },
                wheel: function wheel() {
                    if (!this.sliderIsAnimated && this.sliderIsActive && this.menuIsClosed) {

                        var positionY = this.getCurrentSlidePosY / 100;
                        var positionToAdd = this.oldWheelPosition - positionY;

                        if (positionY !== this.oldWheelPosition) {
                            __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].setIsSliding(true);
                            __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].killTweensOf(this.camera.position, true, {
                                y: true
                            });
                            __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].killTweensOf(this.cube.position);
                            this.cube.position.y -= positionToAdd;
                            this.camera.position.y -= positionToAdd;
                        }

                        if (this.getCurrentSlidePosY >= -.5 && this.getCurrentSlidePosY <= .5) {
                            __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].setIsSliding(false);
                        }

                        this.oldWheelPosition = positionY;
                    }
                },
                events: function events() {
                    window.addEventListener('resize', this.rendererResize.bind(this));
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('toggle-menu', this.toggleMenu);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('slide-next', this.nextAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('slide-prev', this.prevAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('leave-page', this.goToPage);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('page-ready', this.loaderReady);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('go-to-case-study', this.goToCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('close-case-study', this.leaveCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('hide-case-study', this.nextCaseStudy);
                },
                unlistenEvents: function unlistenEvents() {
                    window.removeEventListener('resize', this.rendererResize.bind(this));
                    window.removeEventListener('mousemove', this.mousemove);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('toggle-menu', this.toggleMenu);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('page-ready', this.loaderReady);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('slide-next', this.nextAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('slide-prev', this.prevAnim);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('leave-page', this.goToPage);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('go-to-case-study', this.goToCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('close-case-study', this.leaveCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('hide-case-study', this.nextCaseStudy);
                },
                mousemove: function mousemove(e) {
                    e.preventDefault();

                    __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].killTweensOf(this.camera.position, true, {
                        x: true
                    });

                    if (!this.isSliding) {
                        this.mouse.y = e.clientY;
                        this.mouse.ratio.y = this.mouse.y / window.innerHeight;

                        var cameraPosY = this.camera.position.y + ((this.mouse.ratio.y - 0.5) * 4 * .5 - this.camera.position.y);
                        __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].killTweensOf(this.camera.position, false, {
                            y: true
                        });
                        __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].to(this.camera.position, .8, {
                            y: cameraPosY
                        });
                    }

                    this.mouse.x = e.clientX;
                    this.mouse.ratio.x = this.mouse.x / window.innerWidth;

                    var cameraPosX = this.camera.position.x + (-(this.mouse.ratio.x - 0.5) * 4 * .5 - this.camera.position.x);
                    __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].to(this.camera.position, .8, {
                        x: cameraPosX
                    });
                },
                renderCameraRotation: function renderCameraRotation() {
                    this.lookAt && this.camera.lookAt(this.cube.position);
                },
                toggleMenu: function toggleMenu() {
                    this.menuIsClosed ? this.closeMenuAnim() : this.openMenuAnim();
                },
                nextCaseStudy: function nextCaseStudy() {
                    var targetedBg = slides['work'][this.currentSlideId].backgroundColor;
                    __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].set(this.$el, {
                        backgroundColor: targetedBg
                    });
                    this.generateShapesForSlide('work', this.currentSlideId);
                    __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].to(this.camera.position, 1.4, {
                        z: 10,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    });
                },
                goToPage: function goToPage(routerInfo) {
                    var targetedPage = routerInfo.to.name;
                    var leaveAnim = this.getCurrentAnimLeave;

                    if (routerInfo.to.name === 'case-study') {
                        this.setCaseStudyId(routerInfo.to.params.id);
                        this.targetZ = 10.5;
                    } else {
                        this.targetZ = 10;
                    }

                    this[leaveAnim](targetedPage);
                },
                goToCaseStudy: function goToCaseStudy() {
                    this.remove3dMouse();
                    __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].to(this.camera.position, 2, {
                        z: 10.5,
                        y: 0,
                        x: 0,
                        onComplete: function onComplete() {
                            __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].setIsSliding(true);
                        }
                    });
                },
                leaveCaseStudy: function leaveCaseStudy() {
                    __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].to(this.camera.position, 2, {
                        z: 10,
                        ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                    });

                    this.addMousemove();
                    __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].setIsSliding(false);
                },
                setCaseStudyId: function setCaseStudyId(projectToSearch) {
                    var projectId = __WEBPACK_IMPORTED_MODULE_0_lodash_findIndex___default()(slidesFromSlider, {
                        'title': projectToSearch,
                        'case-study': true
                    });
                    if (projectId < 0) {
                        return window.location = '/work';
                    } else {
                        __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].setSlideId(projectId);
                    }
                }
            }, _defineProperty(_methods, 'addMousemove', function addMousemove() {
                __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$emit('add-mousemove');
                window.addEventListener('mousemove', this.mousemove);
            }), _defineProperty(_methods, 'nextAnim', function nextAnim() {
                this.oldWheelPosition = 0;
                window.removeEventListener('mousemove', this.mousemove);
                var targetedBg = slides[this.$route.name][this.currentSlideId].backgroundColor;
                var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    onComplete: this.addMousemove
                });
                tl.to(this.camera.position, .5, {
                    y: -25,
                    ease: Power1.easeIn
                });
                tl.to(this.cube.position, .5, {
                    y: -25,
                    ease: Power1.easeIn
                }, 0);
                tl.to(this.$el, .5, {
                    backgroundColor: targetedBg,
                    ease: Power1.easeInOut
                });
                tl.call(this.generateShapesForSlide, [this.$route.name, this.currentSlideId]);
                tl.set(this.camera.position, {
                    y: 20
                });
                tl.set(this.cube.position, {
                    y: 20
                });
                tl.to(this.cube.position, .7, {
                    y: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                });
                tl.to(this.camera.position, .7, {
                    z: 10,
                    y: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                }, '-=.7');
            }), _defineProperty(_methods, 'prevAnim', function prevAnim() {
                this.oldWheelPosition = 0;
                window.removeEventListener('mousemove', this.mousemove);
                var targetedBg = slides[this.$route.name][this.currentSlideId].backgroundColor;
                var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    onComplete: this.addMousemove
                });
                tl.to(this.camera.position, .5, {
                    y: 25,
                    ease: Power1.easeIn
                });
                tl.to(this.cube.position, .5, {
                    y: 25,
                    ease: Power1.easeIn
                }, 0);
                tl.to(this.$el, .5, {
                    backgroundColor: targetedBg,
                    ease: Power1.easeInOut
                });
                tl.call(this.generateShapesForSlide, [this.$route.name, this.currentSlideId]);
                tl.set(this.camera.position, {
                    y: -20
                });
                tl.set(this.cube.position, {
                    y: -20
                });
                tl.to(this.cube.position, .7, {
                    y: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                });
                tl.to(this.camera.position, .7, {
                    z: 10,
                    y: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                }, '-=.7');
            }), _defineProperty(_methods, 'leaveUp', function leaveUp(to) {
                this.remove3dMouse();
                var targetedBg = this.findTargetedBg(to);
                __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].to(this.camera.position, .8, {
                    z: 10,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                });
                var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    onComplete: this.addMousemove
                });
                tl.to(this.camera.position, 1, {
                    y: -25,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                });
                tl.to(this.cube.position, 1, {
                    y: -25,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                }, '-=1');
                tl.to(this.$el, .5, {
                    backgroundColor: targetedBg,
                    ease: Power1.easeInOut
                });
                tl.call(this.generateShapesForSlide, [to, this.currentSlideId]);
                tl.set(this.camera.position, {
                    y: 20
                });
                tl.set(this.cube.position, {
                    y: 20
                });
                tl.to(this.camera.position, 1, {
                    y: 0,
                    z: this.targetZ,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                });
                tl.to(this.cube.position, 1, {
                    y: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                }, '-=1');
            }), _defineProperty(_methods, 'leaveDown', function leaveDown(to) {
                this.remove3dMouse();
                var targetedBg = this.findTargetedBg(to);
                __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].to(this.camera.position, .8, {
                    z: 10,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                });
                var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    onComplete: this.addMousemove
                });
                tl.to(this.camera.position, 1, {
                    y: 25,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                });
                tl.to(this.cube.position, 1, {
                    y: 25,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                }, '-=1');
                tl.to(this.$el, .5, {
                    backgroundColor: targetedBg,
                    ease: Power1.easeInOut
                });
                tl.call(this.generateShapesForSlide, [to, 0]);
                tl.call(function() {
                    __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].setIsSliding(false);
                });
                tl.set(this.camera.position, {
                    y: -20
                });
                tl.set(this.cube.position, {
                    y: -20
                });
                tl.to(this.cube.position, 1, {
                    y: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                });
                tl.to(this.camera.position, 1, {
                    y: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                }, '-=1');
            }), _defineProperty(_methods, 'leaveForward', function leaveForward(to) {
                var _this = this;

                this.remove3dMouse();
                this.lookAt = false;
                var targetedBg = slides[to][0].backgroundColor;
                var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]();
                tl.to(this.camera.position, 1, {
                    z: -10,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                });
                tl.to(this.$el, .5, {
                    backgroundColor: targetedBg,
                    ease: Power1.easeInOut
                });
                tl.call(this.generateShapesForSlide, [to, 0]);
                tl.set(this.$refs.bgRenderer.children, {
                    opacity: 0
                });
                tl.set(this.camera.position, {
                    z: 20
                });
                tl.call(this.addMousemove);
                tl.call(function() {
                    _this.lookAt = true;
                    __WEBPACK_IMPORTED_MODULE_3__stores_SliderStore_js__["a" /* default */ ].setIsSliding(false);
                });
                tl.to(this.$refs.bgRenderer.children, 2, {
                    opacity: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                });
                tl.to(this.camera.position, 1, {
                    z: 10,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                }, '-=2');
            }), _defineProperty(_methods, 'remove3dIfCaseStudy', function remove3dIfCaseStudy() {
                if (this.$route.name === 'case-study') {
                    this.remove3dMouse();
                }
            }), _defineProperty(_methods, 'leaveBackward', function leaveBackward(to) {
                var _this2 = this;

                window.removeEventListener('mousemove', this.mousemove);
                var targetedBg = this.findTargetedBg(to);

                var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    onComplete: function onComplete() {
                        _this2.$route.name !== 'case-study' ? _this2.addMousemove() : undefined;
                    }
                });
                tl.to(this.camera.position, 1.5, {
                    z: 50,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                });
                tl.to(this.$refs.bgRenderer.children, .5, {
                    opacity: 0,
                    ease: Power1.easeInOut
                }, '-=1');
                tl.to(this.$el, .5, {
                    backgroundColor: targetedBg,
                    ease: Power1.easeInOut
                }, '-=.5');
                tl.call(this.generateShapesForSlide, [to, this.currentSlideId]);
                tl.call(this.remove3dIfCaseStudy);
                tl.set(this.camera.position, {
                    z: 0,
                    y: 0,
                    x: 0
                });
                tl.to(this.$refs.bgRenderer.children, 2, {
                    opacity: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                });
                tl.to(this.camera.position, 1, {
                    z: this.targetZ,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                }, '-=2');
            }), _defineProperty(_methods, 'goForward', function goForward() {
                var tl = new __WEBPACK_IMPORTED_MODULE_1_gsap__["a" /* TimelineLite */ ]({
                    delay: 3.5
                });
                tl.to(this.camera.position, 1, {
                    z: -10,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeIn
                });
                tl.set(this.camera.position, {
                    z: 20
                });
                tl.set(this.$refs.bgRenderer.children, {
                    opacity: 0
                });
                tl.to(this.$refs.bgRenderer.children, 2, {
                    opacity: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                });
                tl.to(this.camera.position, 2, {
                    z: 10,
                    ease: __WEBPACK_IMPORTED_MODULE_1_gsap__["b" /* Expo */ ].easeOut
                }, '-=2');
            }), _defineProperty(_methods, 'findTargetedBg', function findTargetedBg(to) {
                if (to === 'case-study') {
                    return slides['work'][this.currentSlideId].backgroundColor;
                } else {
                    return slides[to][0].backgroundColor;
                }
            }), _defineProperty(_methods, 'createGradientTexture', function createGradientTexture(firstColor, secondColor) {
                var size = 16;
                var canvas = document.createElement('canvas');
                canvas.width = size;
                canvas.height = size;

                var context = canvas.getContext('2d');

                context.rect(0, 0, size, size);
                var gradient = context.createLinearGradient(0, 0, size, size);
                gradient.addColorStop(0, firstColor);
                gradient.addColorStop(1, secondColor);
                context.fillStyle = gradient;
                context.fill();

                return canvas;
            }), _defineProperty(_methods, 'generateShapesForSlide', function generateShapesForSlide(page, slideId) {

                this.clearScene();
                var slide = slides[page][slideId];

                if (slides[slides[page]] !== undefined) {
                    return this.generateShapesForSlide(slides[page], slideId);
                }

                for (var i = 0; i < slide.shapes.length; i++) {
                    var shape = slide.shapes[i];
                    var geometry = new THREE.CircleGeometry(shape.size, shape.edges);
                    var material = this.materials[shape.materialId];

                    var mesh = new THREE.Mesh(geometry, material);

                    mesh.position.set(shape.x, shape.y, shape.z);
                    shape.rotateZ !== undefined ? mesh.rotateZ(shape.rotateZ) : undefined;
                    this.scene.add(mesh);
                }
            }), _defineProperty(_methods, 'clearScene', function clearScene() {
                this.scene = new THREE.Scene();
            }), _defineProperty(_methods, 'initBg', function initBg(page) {
                if (slides[page] === undefined) {
                    return;
                }
                if (this.$route.name === 'case-study') {
                    var targetedBg = slides['work'][this.currentSlideId].backgroundColor;
                    __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].set(this.$el, {
                        backgroundColor: targetedBg
                    });
                    this.generateShapesForSlide('work', this.currentSlideId);
                } else {
                    var _targetedBg = slides[page][0].backgroundColor;
                    __WEBPACK_IMPORTED_MODULE_1_gsap__["d" /* TweenLite */ ].set(this.$el, {
                        backgroundColor: _targetedBg
                    });
                    this.generateShapesForSlide(page, 0);
                }
            }), _defineProperty(_methods, 'generateMaterials', function generateMaterials() {
                for (var i = 0; i < materials.length; i++) {

                    var colorStart = materials[i].colorStart;
                    var colorStop = materials[i].colorStop;
                    var texture = new THREE.Texture(this.createGradientTexture(colorStart, colorStop));
                    texture.needsUpdate = true;
                    var material = new THREE.MeshBasicMaterial({
                        map: texture,
                        transparent: false
                    });
                    this.materials.push(material);
                }
            }), _methods)
        });

        /***/
    }),
    /* 98 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay__ = __webpack_require__(13);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_delay__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__shared_components_Navigation_Navigation_vue__ = __webpack_require__(35);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__shared_components_Navigation_Navigation_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__shared_components_Navigation_Navigation_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__AboutContent_vue__ = __webpack_require__(71);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__AboutContent_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__AboutContent_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__stores_AnimationStore_js__ = __webpack_require__(10);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__stores_MenuStore_js__ = __webpack_require__(5);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__event_bus_js__ = __webpack_require__(3);

        //
        //
        //
        //
        //
        //
        //










        /* harmony default export */
        __webpack_exports__["default"] = ({
            beforeRouteLeave: function beforeRouteLeave(to, from, next) {
                if (!__WEBPACK_IMPORTED_MODULE_4__stores_MenuStore_js__["a" /* default */ ].state.isAnimated) {
                    var delay = 1500;
                    var targetedPage = to.name;
                    __WEBPACK_IMPORTED_MODULE_3__stores_AnimationStore_js__["a" /* default */ ].setRouterInfo(from.name, targetedPage);
                    __WEBPACK_IMPORTED_MODULE_5__event_bus_js__["a" /* EventBus */ ].$emit('leave-page', {
                        to: to,
                        from: from
                    });
                    __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default()(next, delay);
                }
            },


            components: {
                Navigation: __WEBPACK_IMPORTED_MODULE_1__shared_components_Navigation_Navigation_vue___default.a,
                AboutContent: __WEBPACK_IMPORTED_MODULE_2__AboutContent_vue___default.a
            }
        });

        /***/
    }),
    /* 99 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_gsap__ = __webpack_require__(4);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__stores_MenuStore_js__ = __webpack_require__(5);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__stores_LoaderStore_js__ = __webpack_require__(7);
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //






        var aboutText = __webpack_require__(313).about;

        /* harmony default export */
        __webpack_exports__["default"] = ({

            name: 'about-content',

            props: {

                isMobile: {
                    type: Boolean,
                    default: false
                }

            },

            data: function data() {
                return {
                    title: aboutText.title,
                    content: aboutText.content,
                    socialTitle: aboutText.socialTitle,
                    networks: aboutText.socialNetworks,
                    menuState: __WEBPACK_IMPORTED_MODULE_2__stores_MenuStore_js__["a" /* default */ ].state,
                    loaderState: __WEBPACK_IMPORTED_MODULE_3__stores_LoaderStore_js__["a" /* default */ ].state,
                    isAppeared: false
                };
            },


            computed: {
                pageReady: function pageReady() {
                    return this.loaderState.pageReady;
                },
                menuIsClosed: function menuIsClosed() {
                    return this.menuState.isClosed;
                }
            },

            mounted: function mounted() {
                this.$bigTitle = this.$el.querySelectorAll('.about-content__big-title');
                this.events();
                this.loaderReady();
            },
            beforeDestroy: function beforeDestroy() {
                this.unlistenEvents();
            },


            methods: {
                events: function events() {
                    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$on('leave-page', this.leave);
                    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$on('toggle-menu', this.toggleMenu);
                    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$on('page-ready', this.loaderReady);
                },
                unlistenEvents: function unlistenEvents() {
                    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$off('leave-page', this.leave);
                    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$off('toggle-menu', this.toggleMenu);
                    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$off('page-ready', this.loaderReady);
                },
                loaderReady: function loaderReady() {
                    if ((this.isMobile || this.pageReady) && !this.isAppeared) {
                        this.appear();
                        this.isAppeared = true;
                    }
                },
                appear: function appear() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]({
                        delay: .3
                    });
                    tl.staggerFromTo(this.$refs.aboutContent.children, 1.5, {
                        y: 40,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    }, .1);
                    tl.fromTo(this.$refs.network, 1.5, {
                        y: 30,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    }, '-=1.3');
                },
                leave: function leave() {

                    if (this.isMobile) {
                        return undefined;
                    }

                    var tl = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]();
                    tl.add(TweenMax.staggerTo(this.$refs.aboutContent.children, .3, {
                        y: 40,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeIn,
                        overwrite: 'all'
                    }, -.08));
                },
                toggleMenu: function toggleMenu() {
                    this.menuIsClosed ? this.appear() : this.leave();
                }
            }

        });

        /***/
    }),
    /* 100 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay__ = __webpack_require__(13);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_delay__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_lodash_throttle__ = __webpack_require__(68);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_lodash_throttle___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash_throttle__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2_lodash_findIndex__ = __webpack_require__(62);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2_lodash_findIndex___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash_findIndex__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__shared_components_CaseStudy_CloseButton_vue__ = __webpack_require__(241);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__shared_components_CaseStudy_CloseButton_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__shared_components_CaseStudy_CloseButton_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__shared_components_CaseStudy_NextButton_vue__ = __webpack_require__(245);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__shared_components_CaseStudy_NextButton_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__shared_components_CaseStudy_NextButton_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__shared_components_CaseStudy_Lightswan_vue__ = __webpack_require__(242);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__shared_components_CaseStudy_Lightswan_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__shared_components_CaseStudy_Lightswan_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_6__shared_components_CaseStudy_Maje_vue__ = __webpack_require__(244);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_6__shared_components_CaseStudy_Maje_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__shared_components_CaseStudy_Maje_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_7__shared_components_CaseStudy_Shopsquare_vue__ = __webpack_require__(246);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_7__shared_components_CaseStudy_Shopsquare_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__shared_components_CaseStudy_Shopsquare_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_8__shared_components_CaseStudy_LinkButton_vue__ = __webpack_require__(243);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_8__shared_components_CaseStudy_LinkButton_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__shared_components_CaseStudy_LinkButton_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_9_gsap__ = __webpack_require__(4);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_10__commons_script_Parallax_js__ = __webpack_require__(106);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_11__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_12__stores_SliderStore_js__ = __webpack_require__(11);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_13__stores_MenuStore_js__ = __webpack_require__(5);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_14__stores_AnimationStore_js__ = __webpack_require__(10);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_15__stores_LoaderStore_js__ = __webpack_require__(7);



        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //



















        var slides = __webpack_require__(16).slides;

        /* harmony default export */
        __webpack_exports__["default"] = ({

            name: 'case-study',

            data: function data() {
                return {
                    isOpen: true,
                    stopAf: false,
                    isApear: false,
                    menuState: __WEBPACK_IMPORTED_MODULE_13__stores_MenuStore_js__["a" /* default */ ].state,
                    loaderState: __WEBPACK_IMPORTED_MODULE_15__stores_LoaderStore_js__["a" /* default */ ].state,
                    projectName: ''
                };
            },


            computed: {
                pageReady: function pageReady() {
                    return this.loaderState.pageReady;
                },
                menuIsOpen: function menuIsOpen() {
                    return !this.menuState.isClosed;
                }
            },

            created: function created() {
                var projectId = __WEBPACK_IMPORTED_MODULE_12__stores_SliderStore_js__["a" /* default */ ].state.currentSlideId;
                this.slide = slides[projectId];
                this.blockColorStyle = {
                    backgroundColor: this.slide.backgroundColor
                };
            },
            mounted: function mounted() {
                __WEBPACK_IMPORTED_MODULE_11__event_bus_js__["a" /* EventBus */ ].$on('page-ready', this.loaderReady);
                __WEBPACK_IMPORTED_MODULE_12__stores_SliderStore_js__["a" /* default */ ].openCaseStudy();
                this.closeHeaderAnim = new __WEBPACK_IMPORTED_MODULE_9_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.closeHeaderAnim.to(this.$refs.header, .7, {
                    y: -100,
                    ease: __WEBPACK_IMPORTED_MODULE_9_gsap__["b" /* Expo */ ].easeInOut
                });

                this.loaderReady();

                this.smoothScroll = new __WEBPACK_IMPORTED_MODULE_10__commons_script_Parallax_js__["a" /* default */ ](.1, {
                    el: this.$refs.scrollZone,
                    mouseMultiplier: .4
                });
            },
            beforeDestroy: function beforeDestroy() {
                __WEBPACK_IMPORTED_MODULE_12__stores_SliderStore_js__["a" /* default */ ].closeCaseStudy();
                this.unlistenEvents();
                this.smoothScroll.destroy();
            },
            beforeRouteLeave: function beforeRouteLeave(to, from, next) {
                if (!__WEBPACK_IMPORTED_MODULE_13__stores_MenuStore_js__["a" /* default */ ].state.isAnimated) {
                    this.leave(next);
                }
            },
            beforeRouteEnter: function beforeRouteEnter(to, from, next) {
                var projectToSearch = to.params.id;
                var projectId = __WEBPACK_IMPORTED_MODULE_2_lodash_findIndex___default()(slides, {
                    'title': projectToSearch,
                    'case-study': true
                });
                if (projectId < 0) {
                    return window.location = '/work';
                } else {
                    __WEBPACK_IMPORTED_MODULE_12__stores_SliderStore_js__["a" /* default */ ].setSlideId(projectId);
                    next(function(vm) {
                        vm.projectName = projectToSearch.toLowerCase();
                    });
                }
            },


            methods: {
                events: function events() {
                    window.addEventListener('wheel', this.wheel);
                    window.addEventListener('resize', __WEBPACK_IMPORTED_MODULE_1_lodash_throttle___default()(this.resize, 200));
                    __WEBPACK_IMPORTED_MODULE_11__event_bus_js__["a" /* EventBus */ ].$on('case-study-closed', this.leaveWorkPage);
                    __WEBPACK_IMPORTED_MODULE_11__event_bus_js__["a" /* EventBus */ ].$on('next-case-study', this.nextCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_11__event_bus_js__["a" /* EventBus */ ].$on('hide-case-study', this.hideCaseStudy);
                },
                unlistenEvents: function unlistenEvents() {
                    window.removeEventListener('wheel', this.wheel);
                    window.removeEventListener('resize', __WEBPACK_IMPORTED_MODULE_1_lodash_throttle___default()(this.resize, 200));
                    __WEBPACK_IMPORTED_MODULE_11__event_bus_js__["a" /* EventBus */ ].$off('page-ready', this.loaderReady);
                    __WEBPACK_IMPORTED_MODULE_11__event_bus_js__["a" /* EventBus */ ].$off('case-study-closed', this.leaveWorkPage);
                    __WEBPACK_IMPORTED_MODULE_11__event_bus_js__["a" /* EventBus */ ].$off('next-case-study', this.nextCaseStudy);
                    __WEBPACK_IMPORTED_MODULE_11__event_bus_js__["a" /* EventBus */ ].$off('hide-case-study', this.hideCaseStudy);
                },
                resize: function resize() {
                    this.smoothScroll.onResize();
                },
                loaderReady: function loaderReady() {
                    this.pageReady && this.appearAnim();
                },
                nextCaseStudy: function nextCaseStudy() {
                    this.smoothScroll.destroy();
                    window.removeEventListener('wheel', this.wheel);
                    this.stopAf = true;
                    this.isOpen = false;
                    this.closeHeaderAnim.play();
                },
                hideCaseStudy: function hideCaseStudy() {
                    TweenLite.set(this.$refs.contentBackground, {
                        autoAlpha: 0
                    });
                },
                appearAnim: function appearAnim() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_9_gsap__["a" /* TimelineLite */ ]({
                        onComplete: this.appear
                    });
                    tl.fromTo(this.$refs.scrollZone, .8, {
                        y: window.innerHeight
                    }, {
                        y: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_9_gsap__["b" /* Expo */ ].easeOut
                    });
                    tl.staggerFromTo(this.$refs.infos.children, 1, {
                        y: 20,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_9_gsap__["b" /* Expo */ ].easeOut,
                        force3D: true
                    }, .05, "-=.3");
                    tl.fromTo(this.$refs.header, 1, {
                        y: -100
                    }, {
                        y: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_9_gsap__["b" /* Expo */ ].easeOut
                    }, '-=1.5');
                },
                leaveWorkPage: function leaveWorkPage() {
                    if (this.next !== undefined) {
                        return __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default()(this.next, 100);
                    }
                },
                appear: function appear() {
                    __WEBPACK_IMPORTED_MODULE_12__stores_SliderStore_js__["a" /* default */ ].setActive();
                    this.smoothScroll.init();
                    this.events();
                    this.getScrollValue();
                    this.isOpen = true;
                    this.isApear = true;
                },
                getScrollValue: function getScrollValue() {
                    !this.stopAf ? requestAnimationFrame(this.getScrollValue) : undefined;
                    var newPosY = this.smoothScroll.currentY * .7;
                    __WEBPACK_IMPORTED_MODULE_12__stores_SliderStore_js__["a" /* default */ ].setPosY(newPosY);
                },
                leaveAnim: function leaveAnim() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_9_gsap__["a" /* TimelineLite */ ]();
                    tl.staggerTo(this.$refs.infos.children, .5, {
                        y: 20,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_9_gsap__["b" /* Expo */ ].easeIn
                    }, .05);
                    tl.to(this.$refs.scrollZone, .5, {
                        y: window.innerHeight,
                        ease: __WEBPACK_IMPORTED_MODULE_9_gsap__["b" /* Expo */ ].easeIn
                    }, 0);
                    tl.to(this.$refs.header, .4, {
                        y: -100,
                        ease: __WEBPACK_IMPORTED_MODULE_9_gsap__["b" /* Expo */ ].easeIn
                    }, 0);
                },
                leaveSequence: function leaveSequence() {
                    __WEBPACK_IMPORTED_MODULE_11__event_bus_js__["a" /* EventBus */ ].$emit('close-case-study');
                    this.stopAf = true;
                    this.smoothScroll.destroy();
                    this.leaveAnim();
                },
                leave: function leave(next) {
                    window.removeEventListener('wheel', this.wheel);
                    this.menuIsOpen && __WEBPACK_IMPORTED_MODULE_11__event_bus_js__["a" /* EventBus */ ].$emit('close-menu');
                    __WEBPACK_IMPORTED_MODULE_13__stores_MenuStore_js__["a" /* default */ ].menuIsAnimated();
                    this.smoothScroll.off();
                    this.smoothScroll.scrollTo(0, this.leaveSequence);
                    this.next = next;
                },
                wheel: function wheel() {
                    if (event.deltaY > 0 && this.isOpen) {
                        this.isOpen = false;
                        this.closeHeaderAnim.play();
                    } else if (event.deltaY < 0 && !this.isOpen) {
                        this.isOpen = true;
                        this.closeHeaderAnim.reverse();
                    }
                }
            },

            components: {
                CloseButton: __WEBPACK_IMPORTED_MODULE_3__shared_components_CaseStudy_CloseButton_vue___default.a,
                NextButton: __WEBPACK_IMPORTED_MODULE_4__shared_components_CaseStudy_NextButton_vue___default.a,
                LinkButton: __WEBPACK_IMPORTED_MODULE_8__shared_components_CaseStudy_LinkButton_vue___default.a,
                Lightswan: __WEBPACK_IMPORTED_MODULE_5__shared_components_CaseStudy_Lightswan_vue___default.a,
                Maje: __WEBPACK_IMPORTED_MODULE_6__shared_components_CaseStudy_Maje_vue___default.a,
                Shopsquare: __WEBPACK_IMPORTED_MODULE_7__shared_components_CaseStudy_Shopsquare_vue___default.a
            }

        });

        /***/
    }),
    /* 101 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay__ = __webpack_require__(13);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_delay__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_lodash_once__ = __webpack_require__(227);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_lodash_once___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash_once__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__shared_components_Navigation_Navigation_vue__ = __webpack_require__(35);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__shared_components_Navigation_Navigation_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__shared_components_Navigation_Navigation_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__HomeButton_vue__ = __webpack_require__(257);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__HomeButton_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__HomeButton_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__HomeTitle_vue__ = __webpack_require__(258);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__HomeTitle_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__HomeTitle_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__stores_AnimationStore_js__ = __webpack_require__(10);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_6__stores_MenuStore_js__ = __webpack_require__(5);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_7__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_8_virtual_scroll__ = __webpack_require__(34);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_8_virtual_scroll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_virtual_scroll__);


        //
        //
        //
        //
        //
        //
        //
        //









        var animMap = __webpack_require__(73);



        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'home',

            data: function data() {
                return {};
            },
            mounted: function mounted() {
                this.vs = new __WEBPACK_IMPORTED_MODULE_8_virtual_scroll___default.a({
                    el: this.$el
                });
                this.onceWheel = __WEBPACK_IMPORTED_MODULE_1_lodash_once___default()(this.wheel);
                __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default()(this.events, 1500);
            },
            beforeDestroy: function beforeDestroy() {
                this.unlistenEvents();
            },
            beforeRouteLeave: function beforeRouteLeave(to, from, next) {
                if (!__WEBPACK_IMPORTED_MODULE_6__stores_MenuStore_js__["a" /* default */ ].state.isAnimated) {
                    var delay = 1500;
                    var targetedPage = to.name;
                    __WEBPACK_IMPORTED_MODULE_5__stores_AnimationStore_js__["a" /* default */ ].setRouterInfo(from.name, targetedPage);
                    __WEBPACK_IMPORTED_MODULE_7__event_bus_js__["a" /* EventBus */ ].$emit('leave-page', {
                        to: to,
                        from: from
                    });
                    __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default()(next, delay);
                }
            },


            methods: {
                events: function events() {
                    this.vs.on(this.onceWheel);
                },
                unlistenEvents: function unlistenEvents() {
                    this.vs.destroy();
                },
                wheel: function wheel() {
                    this.$router.push('work');
                }
            },

            components: {
                Navigation: __WEBPACK_IMPORTED_MODULE_2__shared_components_Navigation_Navigation_vue___default.a,
                HomeButton: __WEBPACK_IMPORTED_MODULE_3__HomeButton_vue___default.a,
                HomeTitle: __WEBPACK_IMPORTED_MODULE_4__HomeTitle_vue___default.a
            }
        });

        /***/
    }),
    /* 102 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_gsap__ = __webpack_require__(4);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__commons_script_SplitText_js__ = __webpack_require__(17);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__stores_LoaderStore_js__ = __webpack_require__(7);
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //








        /* harmony default export */
        __webpack_exports__["default"] = ({
            data: function data() {
                return {
                    loaderState: __WEBPACK_IMPORTED_MODULE_3__stores_LoaderStore_js__["a" /* default */ ].state
                };
            },


            computed: {
                pageReady: function pageReady() {
                    return this.loaderState.pageReady;
                }
            },

            mounted: function mounted() {

                var splittedText = new __WEBPACK_IMPORTED_MODULE_2__commons_script_SplitText_js__["a" /* default */ ](this.$refs.buttonText, {
                    classToGive: 'home-btn-st'
                });
                this.$splittedText = this.$el.querySelectorAll('.home-btn-st');

                this.appearAnim = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]({
                    paused: true,
                    delay: .5
                });
                this.appearAnim.staggerFrom(this.$splittedText, 2, {
                    y: -10,
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                }, .03);
                this.appearAnim.from(this.$refs.arrowImg, 1.5, {
                    y: -50,
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                }, .05, 0);
                this.appearAnim.from(this.$refs.line, 1.5, {
                    scaleY: 0,
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                }, .05, 0);
                this.appearAnim.from(this.$refs.square.$el, 1.5, {
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                }, .05, 0);

                this.pageReady && this.appearAnim.play();

                this.homeButtonHoverAnim = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.homeButtonHoverAnim.to(this.$refs.square.$el, .5, {
                    y: 5,
                    rotateY: 90,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeInOut
                });
                this.homeButtonHoverAnim.to(this.$refs.line, .5, {
                    y: 5,
                    scaleY: 1.3,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeInOut
                }, 0);
                this.homeButtonHoverAnim.to(this.$refs.arrowImg, .5, {
                    y: 12,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeInOut
                }, 0);
                this.homeButtonHoverAnim.to(this.$refs.buttonText, .5, {
                    y: 5,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeInOut
                }, 0);

                this.leaveAnim = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.leaveAnim.to(this.$el, .6, {
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeIn
                });

                this.events();
            },

            beforeDestroy: function beforeDestroy() {
                this.unlistenEvents();
            },


            methods: {
                mouseover: function mouseover() {
                    this.homeButtonHoverAnim.play();
                },
                mouseout: function mouseout() {
                    this.homeButtonHoverAnim.reverse();
                },
                leavePage: function leavePage() {
                    this.leaveAnim.play(0);
                },
                loaderReady: function loaderReady() {
                    this.appearAnim.play();
                },
                events: function events() {
                    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$on('leave-page', this.leavePage);
                    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$on('page-ready', this.loaderReady);
                },
                unlistenEvents: function unlistenEvents() {
                    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$off('leave-page', this.leavePage);
                    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__["a" /* EventBus */ ].$off('page-ready', this.loaderReady);
                }
            }
        });

        /***/
    }),
    /* 103 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_gsap__ = __webpack_require__(4);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__commons_script_SplitText_js__ = __webpack_require__(17);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__event_bus_js__ = __webpack_require__(3);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__stores_AnimationStore_js__ = __webpack_require__(10);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__stores_LoaderStore_js__ = __webpack_require__(7);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__ = __webpack_require__(5);
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //









        /* harmony default export */
        __webpack_exports__["default"] = ({
            data: function data() {
                return {
                    name: 'Raoul Gaillard',
                    subtitle: "I’m a Creative Developer. I'm looking for a full time position in 2019.",
                    animationState: __WEBPACK_IMPORTED_MODULE_3__stores_AnimationStore_js__["a" /* default */ ].state,
                    loaderState: __WEBPACK_IMPORTED_MODULE_4__stores_LoaderStore_js__["a" /* default */ ].state,
                    menuState: __WEBPACK_IMPORTED_MODULE_5__stores_MenuStore_js__["a" /* default */ ].state
                };
            },


            computed: {
                getCurrentAnimAppear: function getCurrentAnimAppear() {
                    return this.animationState.appear;
                },
                getCurrentAnimLeave: function getCurrentAnimLeave() {
                    return this.animationState.leave;
                },
                pageReady: function pageReady() {
                    return this.loaderState.pageReady;
                },
                menuIsClosed: function menuIsClosed() {
                    return this.menuState.isClosed;
                }
            },

            mounted: function mounted() {

                var splittedSubtitle = new __WEBPACK_IMPORTED_MODULE_1__commons_script_SplitText_js__["a" /* default */ ](this.$refs.subtitle, {
                    classToGive: 'subtitle-lines',
                    whatToSplit: 'lines'
                });

                this.pageReady && this.appearPage();
                this.events();

                this.openMenuAnim = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.openMenuAnim.to(this.$refs.title, 1.5, {
                    z: -500,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                });
                this.openMenuAnim.staggerTo(this.$refs.subtitle.children, 2, {
                    y: 20,
                    autoAlpha: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                }, .1, 0);
                this.openMenuAnim.to(this.$refs.square, 1.5, {
                    z: -1000,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                }, 0);

                this.closeMenuAnim = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]({
                    paused: true
                });
                this.closeMenuAnim.to(this.$refs.title, 1.5, {
                    z: 0,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                });
                this.closeMenuAnim.staggerTo(this.$refs.subtitle.children, 2, {
                    y: 0,
                    autoAlpha: 1,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                }, .1, .5);
                this.closeMenuAnim.to(this.$refs.square, 1.5, {
                    z: -300,
                    ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                }, 0);
            },
            beforeDestroy: function beforeDestroy() {
                this.unlistenEvents();
            },


            methods: {
                events: function events() {
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('toggle-menu', this.toggleMenu);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('add-mousemove', this.addMousemove);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('leave-page', this.leavePage);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$on('page-ready', this.appearPage);
                },
                unlistenEvents: function unlistenEvents() {
                    window.removeEventListener('mousemove', this.mousemove);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('add-mousemove', this.addMousemove);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('toggle-menu', this.toggleMenu);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('leave-page', this.leavePage);
                    __WEBPACK_IMPORTED_MODULE_2__event_bus_js__["a" /* EventBus */ ].$off('page-ready', this.appearPage);
                },
                addMousemove: function addMousemove() {
                    window.addEventListener('mousemove', this.mousemove);
                },
                mousemove: function mousemove(e) {

                    if (!this.menuIsClosed) {
                        return undefined;
                    }

                    var centroX = e.clientX - window.innerWidth / 2;
                    var centroY = window.innerHeight / 2 - (e.clientY + 100);
                    var degX = centroX * .01;
                    var degY = centroY * .03;
                    __WEBPACK_IMPORTED_MODULE_0_gsap__["d" /* TweenLite */ ].killTweensOf(this.$refs.title, true, {
                        rotationY: true,
                        rotationX: true
                    });
                    __WEBPACK_IMPORTED_MODULE_0_gsap__["d" /* TweenLite */ ].killTweensOf(this.$refs.square, true, {
                        rotationY: true,
                        rotationX: true
                    });
                    __WEBPACK_IMPORTED_MODULE_0_gsap__["d" /* TweenLite */ ].to(this.$refs.title, .8, {
                        rotationY: degX,
                        rotationX: degY
                    });
                    __WEBPACK_IMPORTED_MODULE_0_gsap__["d" /* TweenLite */ ].to(this.$refs.square, .8, {
                        rotationY: degX,
                        rotationX: degY
                    });
                },
                leavePage: function leavePage() {
                    var leaveAnim = this.getCurrentAnimLeave;
                    __WEBPACK_IMPORTED_MODULE_0_gsap__["d" /* TweenLite */ ].to(this.$refs.square, .8, {
                        z: -300,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    });
                    __WEBPACK_IMPORTED_MODULE_0_gsap__["d" /* TweenLite */ ].to(this.$refs.title, .8, {
                        z: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    });
                    this[leaveAnim]();
                },
                appearPage: function appearPage() {
                    var appearAnim = this.getCurrentAnimAppear;
                    this[appearAnim]();
                },
                appearUp: function appearUp() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]();
                    tl.staggerFromTo(this.$refs.subtitle.children, 2, {
                        y: 20,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    }, .1, .5);
                    tl.from(this.$refs.square, 1.5, {
                        y: -window.innerHeight,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    }, 0);
                    tl.from(this.$refs.title, 1.5, {
                        y: -window.innerHeight,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    }, 0);
                },
                leaveUp: function leaveUp() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]();
                    tl.add(TweenMax.staggerTo(this.$refs.subtitle.children, .5, {
                        y: -20,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeIn,
                        overwrite: 'allOnStart'
                    }, .05));
                    tl.to(this.$refs.square, 1, {
                        y: -window.innerHeight,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeIn
                    }, 0);
                    tl.to(this.$refs.title, 1, {
                        y: -window.innerHeight,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeIn
                    }, 0);
                },
                appearBackward: function appearBackward() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]();
                    tl.set(this.$refs.square, {
                        z: 500,
                        opacity: 0
                    });
                    tl.set(this.$refs.title, {
                        z: 500,
                        opacity: 0
                    });
                    tl.to(this.$refs.square, 1.5, {
                        z: -300,
                        opacity: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    }, 0);
                    tl.to(this.$refs.title, 1.5, {
                        z: 0,
                        opacity: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    }, 0);
                    tl.staggerFromTo(this.$refs.subtitle.children, 2, {
                        y: 20,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    }, .1, .5);
                },
                leaveForward: function leaveForward() {
                    var tl = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]();
                    tl.add(TweenMax.staggerTo(this.$refs.subtitle.children, .5, {
                        y: -20,
                        autoAlpha: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeIn,
                        overwrite: 'allOnStart'
                    }, .05));
                    tl.add(__WEBPACK_IMPORTED_MODULE_0_gsap__["d" /* TweenLite */ ].to(this.$refs.square, 1, {
                        z: 1000,
                        opacity: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeIn,
                        overwrite: 'all'
                    }), 0);
                    tl.add(__WEBPACK_IMPORTED_MODULE_0_gsap__["d" /* TweenLite */ ].to(this.$refs.title, 1, {
                        z: 1000,
                        opacity: 0,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeIn,
                        overwrite: 'all'
                    }), 0);
                },
                appearAnim: function appearAnim() {
                    var appearAnim = new __WEBPACK_IMPORTED_MODULE_0_gsap__["a" /* TimelineLite */ ]({
                        onComplete: this.addMousemove
                    });
                    appearAnim.fromTo(this.$refs.title, 3, {
                        z: -500,
                        autoAlpha: 0
                    }, {
                        z: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    });
                    appearAnim.staggerFromTo(this.$refs.subtitle.children, 2, {
                        y: 20,
                        autoAlpha: 0
                    }, {
                        y: 0,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    }, .1, .5);
                    appearAnim.fromTo(this.$refs.square, 3, {
                        z: -1000,
                        autoAlpha: 0
                    }, {
                        z: -300,
                        autoAlpha: 1,
                        ease: __WEBPACK_IMPORTED_MODULE_0_gsap__["b" /* Expo */ ].easeOut
                    }, 0);
                },
                leaveAnim: function leaveAnim() {
                    this.leaveUp();
                },
                toggleMenu: function toggleMenu(isClosed) {
                    this.closeMenuAnim.isActive() ? this.closeMenuAnim.kill() : undefined;
                    this.openMenuAnim.isActive() ? this.openMenuAnim.kill() : undefined;
                    isClosed ? this.closeMenuAnim.play(0) : this.openMenuAnim.play(0);
                }
            }
        });

        /***/
    }),
    /* 104 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        //
        //
        //

        /* harmony default export */
        __webpack_exports__["default"] = ({
            beforeCreate: function beforeCreate() {
                this.$router.replace({
                    name: 'home'
                });
            }
        });

        /***/
    }),
    /* 105 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay__ = __webpack_require__(13);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_delay__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__shared_components_Navigation_Navigation_vue__ = __webpack_require__(35);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__shared_components_Navigation_Navigation_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__shared_components_Navigation_Navigation_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__shared_components_Slider_Slider_vue__ = __webpack_require__(252);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__shared_components_Slider_Slider_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__shared_components_Slider_Slider_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__stores_AnimationStore_js__ = __webpack_require__(10);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__stores_MenuStore_js__ = __webpack_require__(5);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__event_bus_js__ = __webpack_require__(3);

        //
        //
        //
        //
        //
        //
        //
        //










        /* harmony default export */
        __webpack_exports__["default"] = ({
            data: function data() {
                return {};
            },
            beforeRouteLeave: function beforeRouteLeave(to, from, next) {
                if (!__WEBPACK_IMPORTED_MODULE_4__stores_MenuStore_js__["a" /* default */ ].state.isAnimated) {
                    var delay = 1500;
                    var targetedPage = to.name;
                    __WEBPACK_IMPORTED_MODULE_3__stores_AnimationStore_js__["a" /* default */ ].setRouterInfo(from.name, targetedPage);
                    __WEBPACK_IMPORTED_MODULE_5__event_bus_js__["a" /* EventBus */ ].$emit('leave-page', {
                        to: to,
                        from: from
                    });
                    __WEBPACK_IMPORTED_MODULE_0_lodash_delay___default()(next, delay);
                }
            },


            components: {
                Navigation: __WEBPACK_IMPORTED_MODULE_1__shared_components_Navigation_Navigation_vue___default.a,
                Slider: __WEBPACK_IMPORTED_MODULE_2__shared_components_Slider_Slider_vue___default.a
            }
        });

        /***/
    }),
    /* 106 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__SmoothScroll_js__ = __webpack_require__(107);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_in_viewport__ = __webpack_require__(49);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_in_viewport___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_in_viewport__);
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined;
                } else {
                    return get(parent, property, receiver);
                }
            } else if ("value" in desc) {
                return desc.value;
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined;
                }
                return getter.call(receiver);
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }




        var Parallax = function(_SmoothScroll) {
            _inherits(Parallax, _SmoothScroll);

            function Parallax(options) {
                var vsOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                _classCallCheck(this, Parallax);

                var _this = _possibleConstructorReturn(this, (Parallax.__proto__ || Object.getPrototypeOf(Parallax)).call(this, options, vsOptions));

                _this.parallaxElements = options.parallaxElements || [];
                return _this;
            }

            _createClass(Parallax, [{
                key: 'onScroll',
                value: function onScroll(e) {
                    _get(Parallax.prototype.__proto__ || Object.getPrototypeOf(Parallax.prototype), 'onScroll', this).call(this, e);
                    this.testParallaxElements();
                }
            }, {
                key: 'setParallaxElements',
                value: function setParallaxElements(parallaxElements) {
                    this.parallaxElements = parallaxElements;
                }
            }, {
                key: 'testParallaxElements',
                value: function testParallaxElements() {

                    for (var i = 0; i < this.parallaxElements.length; i++) {
                        __WEBPACK_IMPORTED_MODULE_1_in_viewport___default()(this.parallaxElements[i].el) ? this.parallaxElements[i].inViewport = true : this.parallaxElements[i].inViewport = false;
                    }
                }
            }, {
                key: 'getCurrentTransformStyle',
                value: function getCurrentTransformStyle(element) {}
            }, {
                key: 'moveElement',
                value: function moveElement(elementToMove) {
                    var distanceToMove = void 0;

                    if (elementToMove.newPosY !== undefined) {
                        distanceToMove = elementToMove.newPosY + (this.currentY - this.oldY) * elementToMove.ratio;
                    } else {
                        distanceToMove = (this.currentY - this.oldY) * elementToMove.ratio;
                    }

                    this.applyTransform(elementToMove.el, distanceToMove);
                    return distanceToMove;
                }
            }, {
                key: 'moveElements',
                value: function moveElements() {
                    for (var i = 0; i < this.parallaxElements.length; i++) {
                        if (this.parallaxElements[i].inViewport) {
                            this.parallaxElements[i].newPosY = this.moveElement(this.parallaxElements[i]);
                        }
                    }
                }
            }, {
                key: 'animate',
                value: function animate() {
                    _get(Parallax.prototype.__proto__ || Object.getPrototypeOf(Parallax.prototype), 'animate', this).call(this);
                    this.parallaxElements && this.moveElements();
                }
            }, {
                key: 'destroy',
                value: function destroy() {
                    this.parallaxElements = null;
                    _get(Parallax.prototype.__proto__ || Object.getPrototypeOf(Parallax.prototype), 'destroy', this).call(this);
                }
            }]);

            return Parallax;
        }(__WEBPACK_IMPORTED_MODULE_0__SmoothScroll_js__["a" /* default */ ]);

        /* harmony default export */
        __webpack_exports__["a"] = (Parallax);

        /***/
    }),
    /* 107 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_virtual_scroll__ = __webpack_require__(34);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_virtual_scroll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_virtual_scroll__);
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }



        var SmoothScroll = function() {
            function SmoothScroll(options) {
                var vsOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                _classCallCheck(this, SmoothScroll);

                this.el = vsOptions.el;
                this.ease = options.ease || .1;
                this.targetY = 0;
                this.oldtY = 0;
                this.currentY = 0;

                this.destroyed = false;
                this.vs = new __WEBPACK_IMPORTED_MODULE_0_virtual_scroll___default.a(vsOptions);
            }

            _createClass(SmoothScroll, [{
                key: 'init',
                value: function init() {
                    this.height = this.getHeight();
                    this.vs.on(this.onScroll.bind(this));
                    this.animate();
                }
            }, {
                key: 'onScroll',
                value: function onScroll(e) {
                    this.targetY += e.deltaY;
                    this.targetY = Math.max((this.height - window.innerHeight) * -1, this.targetY);
                    this.targetY = Math.min(0, this.targetY);
                }
            }, {
                key: 'getHeight',
                value: function getHeight() {
                    return this.el.getBoundingClientRect().height;
                }
            }, {
                key: 'onResize',
                value: function onResize() {
                    this.height = this.getHeight();
                }
            }, {
                key: 'animate',
                value: function animate() {
                    if (this.destroyed) {
                        return undefined;
                    } else if (this.callbackWhenReachOffset && this.currentY >= this.targetY - 1 && this.currentY <= this.targetY + 1) {
                        return this.reachOffset();
                    } else {
                        requestAnimationFrame(this.animate.bind(this));
                    }
                    this.oldY = this.currentY;
                    this.currentY += this.getRoundedValue((this.targetY - this.currentY) * this.ease);
                    this.applyTransform(this.el, this.currentY);
                }
            }, {
                key: 'applyTransform',
                value: function applyTransform(el, transformY) {
                    var t = 'translate3d(0, ' + transformY + 'px, 0)';
                    var s = el.style;
                    s["transform"] = t;
                    s["webkitTransform"] = t;
                    s["mozTransform"] = t;
                    s["msTransform"] = t;
                }
            }, {
                key: 'scrollTo',
                value: function scrollTo(offset, callback) {
                    this.targetY = offset;

                    if (callback) {
                        if (this.destroyed) {
                            return callback();
                        }
                        this.scroolToCallback = callback;
                        this.callbackWhenReachOffset = true;
                    }
                }
            }, {
                key: 'getRoundedValue',
                value: function getRoundedValue(valueToRound) {
                    var roundedValue = valueToRound * 1000;
                    roundedValue = Math.round(roundedValue);
                    roundedValue = roundedValue / 1000;

                    return roundedValue;
                }
            }, {
                key: 'reachOffset',
                value: function reachOffset() {
                    this.scroolToCallback();
                    this.scroolToCallback = null;
                    this.callbackWhenReachOffset = false;
                }
            }, {
                key: 'reset',
                value: function reset() {
                    this.targetY = 0;
                    this.currentY = 0;
                }
            }, {
                key: 'off',
                value: function off() {
                    this.vs.off();
                }
            }, {
                key: 'destroy',
                value: function destroy() {
                    this.destroyed = true;
                    this.reset();
                    this.vs.destroy();
                }
            }]);

            return SmoothScroll;
        }();

        /* harmony default export */
        __webpack_exports__["a"] = (SmoothScroll);

        /***/
    }),
    /* 108 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(36);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_vue_analytics__ = __webpack_require__(76);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1_vue_analytics___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vue_analytics__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__App_vue__ = __webpack_require__(77);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__App_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__App_vue__);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3_vue_router__ = __webpack_require__(78);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__router_config__ = __webpack_require__(75);







        __WEBPACK_IMPORTED_MODULE_0_vue___default.a.use(__WEBPACK_IMPORTED_MODULE_3_vue_router__["a" /* default */ ]);

        var router = new __WEBPACK_IMPORTED_MODULE_3_vue_router__["a" /* default */ ]({
            routes: __WEBPACK_IMPORTED_MODULE_4__router_config__["a" /* routes */ ],
            mode: 'history'
        });

        __WEBPACK_IMPORTED_MODULE_0_vue___default.a.use(__WEBPACK_IMPORTED_MODULE_1_vue_analytics___default.a, {
            id: 'UA-96857336-1',
            router: router
        });

        var app = new __WEBPACK_IMPORTED_MODULE_0_vue___default.a({
            router: router,
            render: function render(h) {
                return h(__WEBPACK_IMPORTED_MODULE_2__App_vue___default.a);
            }
        }).$mount('#app');

        /***/
    }),
    /* 109 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        var toString = Object.prototype.toString,
            hasOwnProperty = Object.prototype.hasOwnProperty;

        module.exports = function(object) {
            if (!object) return console.warn('bindAll requires at least one argument.');

            var functions = Array.prototype.slice.call(arguments, 1);

            if (functions.length === 0) {

                for (var method in object) {
                    if (hasOwnProperty.call(object, method)) {
                        if (typeof object[method] == 'function' && toString.call(object[method]) == "[object Function]") {
                            functions.push(method);
                        }
                    }
                }
            }

            for (var i = 0; i < functions.length; i++) {
                var f = functions[i];
                object[f] = bind(object[f], object);
            }
        };

        /*
            Faster bind without specific-case checking. (see https://coderwall.com/p/oi3j3w).
            bindAll is only needed for events binding so no need to make slow fixes for constructor
            or partial application.
        */
        function bind(func, context) {
            return function() {
                return func.apply(context, arguments);
            };
        }

        /***/
    }),
    /* 110 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".slider{top:0;left:0;z-index:0;perspective:1000px}.slide-container,.slider{position:absolute;height:100%;width:100%}.slide-container{transform-style:preserve-3d}", ""]);

        // exports


        /***/
    }),
    /* 111 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".case-study__shopsquare{font-size:30px}.case-study__shopsquare .case-study__photo-background{background-color:#e3f0ff}.case-study__shopsquare .case-study__photo{margin-top:100px}", ""]);

        // exports


        /***/
    }),
    /* 112 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".link-button{margin-top:2.5em}", ""]);

        // exports


        /***/
    }),
    /* 113 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, "", ""]);

        // exports


        /***/
    }),
    /* 114 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".three-background{z-index:-5;width:100%;height:100%;position:absolute;top:0;left:0}.background-renderer canvas{position:absolute;top:0;left:0;z-index:-10}", ""]);

        // exports


        /***/
    }),
    /* 115 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".on-mobile{position:absolute;z-index:1000;top:0;height:0;width:100%;height:100%;background-color:#021b39;display:none;overflow:scroll}@media screen and (max-width:960px){.on-mobile{display:block}}", ""]);

        // exports


        /***/
    }),
    /* 116 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, "", ""]);

        // exports


        /***/
    }),
    /* 117 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".home-button{position:absolute;bottom:60px;width:100%;text-decoration:none}.home-button__text{font-family:SorrenMedium;font-size:19px;color:#fff;text-align:center;text-transform:uppercase;letter-spacing:.1em;margin-bottom:15px}.home-button__square{width:38px;margin:auto;display:block;cursor:pointer;height:60px;box-sizing:border-box;border-top:4px solid #99a8e5;border-bottom:4px solid #1e2a77;background-position:0 0,100% 0;background-repeat:no-repeat;background-size:4px 100%;background-image:linear-gradient(180deg,#99a8e5 0,#1e2a77),linear-gradient(180deg,#99a8e5 0,#1e2a77)}.home-button__arrow{text-align:center;position:absolute;margin-left:50%;transform:translate(-50%,-50%);pointer-events:none}.home-button__arrow__line{width:1px;height:50px;margin:auto;background-color:#fff;transform-origin:top}.home-button__arrow__img{transform:translateY(-5px)}.home-btn-st{display:inline-block;white-space:pre}", ""]);

        // exports


        /***/
    }),
    /* 118 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, "a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:\"\";content:none}table{border-collapse:collapse;border-spacing:0}@font-face{font-family:SorrenMedium;src:url(\"/assets/fonts/Sorren/Sorren-Medium.eot?#iefix\") format(\"embedded-opentype\"),url(\"/assets/fonts/Sorren/Sorren-Medium.otf\") format(\"opentype\"),url(\"/assets/fonts/Sorren/Sorren-Medium.woff\") format(\"woff\"),url(\"/assets/fonts/Sorren/Sorren-Medium.ttf\") format(\"truetype\"),url(\"/assets/fonts/Sorren/Sorren-Medium.svg#Sorren-Medium\") format(\"svg\");font-weight:400;font-style:normal}@font-face{font-family:PlayfairDisplay;src:url(\"/assets/fonts/PlayfairDisplayItalic/PlayfairDisplay-Italic.eot?#iefix\") format(\"embedded-opentype\"),url(\"/assets/fonts/PlayfairDisplayItalic/PlayfairDisplay-Italic.otf\") format(\"opentype\"),url(\"/assets/fonts/PlayfairDisplayItalic/PlayfairDisplay-Italic.woff\") format(\"woff\"),url(\"/assets/fonts/PlayfairDisplayItalic/PlayfairDisplay-Italic.ttf\") format(\"truetype\"),url(\"/assets/fonts/PlayfairDisplayItalic/PlayfairDisplay-Italic.svg#PlayfairDisplay-Italic\") format(\"svg\");font-weight:400;font-style:italic}@font-face{font-family:PlayfairDisplay;src:url(\"/assets/fonts/PlayfairDisplay/PlayfairDisplay-Regular.eot?#iefix\") format(\"embedded-opentype\"),url(\"/assets/fonts/PlayfairDisplay/PlayfairDisplay-Regular.otf\") format(\"opentype\"),url(\"/assets/fonts/PlayfairDisplay/PlayfairDisplay-Regular.woff\") format(\"woff\"),url(\"/assets/fonts/PlayfairDisplay/PlayfairDisplay-Regular.ttf\") format(\"truetype\"),url(\"/assets/fonts/PlayfairDisplay/PlayfairDisplay-Regular.svg#PlayfairDisplay-Regular\") format(\"svg\");font-weight:400;font-style:normal}*{-webkit-font-smoothing:antialiased;-webkit-text-stroke:0;-moz-osx-font-smoothing:grayscale}body,html{height:100%;width:100%;overflow:hidden}@media screen and (max-width:960px){body{position:fixed}}.app{height:100%}", ""]);

        // exports


        /***/
    }),
    /* 119 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".case-study__video{width:100%;font-size:30px;display:block;position:relative;background-color:#03162a;z-index:1}.case-study__video-row{width:100%;padding:5em;margin-top:4em;margin-bottom:5em;background-color:#03162a;margin-left:50%;transform:translateX(-50%)}.case-study__video-half-row{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:center;align-items:center}.case-study__video-half{width:40%}", ""]);

        // exports


        /***/
    }),
    /* 120 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".case-study__lightswan .case-study__photo-background{background-color:#f7f3ea}.case-study__lightswan .case-study__photo{margin-top:100px}.case-study__lightswan .case-study__color-block .case-study__mini-title{opacity:1;text-align:center;margin-top:.5em}.case-study__lightswan .case-study__full-screenshot__bg{background-color:#f7f3ea;min-height:2500px;max-height:2500px}.case-study__lightswan .case-study__screen-circle{background-color:#f7f3ea}.case-study__lightswan .case-study__mobile-screen__img{margin-top:100px}.case-study__lightswan .case-study__home{font-size:30px;width:100%;margin-top:10em}.case-study__lightswan .case-study__perspective-mockup{display:block;margin-top:10em}.case-study__lightswan .case-study__article-mobile{margin-top:10em}", ""]);

        // exports


        /***/
    }),
    /* 121 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".page-about{height:100%;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center}", ""]);

        // exports


        /***/
    }),
    /* 122 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".slide-indicator{position:absolute;left:40px;top:50%;transform:translateY(-50%);font-family:SorrenMedium;text-transform:uppercase;font-size:22px;text-align:center;visibility:hidden}.slide-indicator__separator{display:inline-block;width:1px;height:2.4em;margin:0 .3em;transform-origin:center}.slide-indicator__slider-length{display:inline-block;font-size:1.5em}.slide-indicator__current-slide{display:inline-block;vertical-align:bottom;font-size:3em;width:.2em}.slide-indicator__slider-name{margin-top:.4em;letter-spacing:.07em}.slide-indicator__slider-name__splitted{display:inline-block;white-space:pre}", ""]);

        // exports


        /***/
    }),
    /* 123 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".menu{width:100%;height:100%;font-family:SorrenMedium;overflow:hidden}.menu,.menu-hit{position:absolute}.menu-hit{top:0;left:0;width:100px;height:110px;cursor:pointer;z-index:11}.menu-icon__container{position:relative;width:100px;height:100px;z-index:10}.menu-icon{width:50px;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.menu-line{width:100%;height:1px;background-image:linear-gradient(-134deg,#8a86be,#eee0fb 100%,#b397b8 0);margin-bottom:11px;transform-origin:left}.menu-line:last-child{margin-bottom:0}.menu-line--little{width:40%}.menu--light{color:#fff}.menu-circle-hover{width:50px;height:50px;background-color:#fff;opacity:0;border-radius:50%;transform-origin:center;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);z-index:2}.menu-background{height:100%;z-index:9;opacity:0;top:0;left:0;background-color:rgba(1,24,50,.9)}.menu-background,.menu-links{width:100%;position:absolute;visibility:hidden}.menu-links{text-align:center;margin:auto;top:50%;transform:translateY(-50%);z-index:10}", ""]);

        // exports


        /***/
    }),
    /* 124 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".menu-link__link{text-decoration:none}.menu-link{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;visibility:hidden;cursor:pointer;margin-bottom:60px;transform:translateY(200px)}.menu-link:last-child{margin-bottom:0}.menu-link__hover{width:200px;z-index:-1;height:50px;opacity:0;position:absolute;margin-left:50%;top:50%;background-image:linear-gradient(-135deg,#ffc3ca,#7e9df6);transform:translate3d(-50%,-50%,0) scaleX(0);transform-origin:left}.menu-link__title{font-size:112px;letter-spacing:.1em;text-transform:uppercase;color:#fff;display:block;position:relative}.menu-link__subtitle{font-family:PlayfairDisplay;font-style:italic;font-size:14px;letter-spacing:.2em;color:#cce4ff}", ""]);

        // exports


        /***/
    }),
    /* 125 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".loader-container{position:absolute;width:100%;height:100%;background-color:#011832;background-size:contain;top:0;left:0;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;z-index:100;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.loader__text{transform:translate(-20px,15px)}.loader__lines{width:250px;height:50px;position:relative;z-index:-1;transform-origin:left;display:inline-block;vertical-align:middle}.loader__thin-line{width:100%;height:1px;background-color:#fff;transform-origin:left;position:absolute;display:block;top:50%}.loader__big-line{width:100%;height:100%;margin-left:20px;position:relative;z-index:-1;transform-origin:left;background-image:linear-gradient(-135deg,#ffc3ca,#7e9df6)}.loader__state{color:#fff;font-family:PlayfairDisplay;font-style:italic;font-size:25px;min-width:3em;margin-left:.6em;display:inline-block;vertical-align:middle}", ""]);

        // exports


        /***/
    }),
    /* 126 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".slide{position:absolute;opacity:0;visibility:hidden;display:-ms-flexbox;display:flex;width:100%;height:100%;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;transform-style:preserve-3d;transform:translateZ(0)}.slide__info{width:40%;font-family:SorrenMedium}.slide__id__text{font-size:90px;letter-spacing:.05em;opacity:.2;transform:translateY(.1em)}@media screen and (max-width:1500px){.slide__id__text{font-size:80px}}.slide__title{text-transform:uppercase;font-size:112px;letter-spacing:.05em}@media screen and (max-width:1500px){.slide__title{font-size:90px}}.slide__description{font-family:PlayfairDisplay;font-size:14px;line-height:2em;max-width:40em}@media screen and (max-width:1500px){.slide__description{font-size:12px}}.slide__sub-info__info{display:inline-block;max-width:50%;margin-left:30px;margin-top:30px}.slide__sub-info__info:first-child{margin-left:0}.slide-img{width:50%;height:100%;transform-style:preserve-3d;transform:translateZ(0);perspective-origin:150% 50%}.slide-img__shape{display:block;position:absolute;z-index:-100;top:50%;left:50%;transform:translate3d(-50%,-50%,-100px)}@media screen and (max-width:1500px){.slide-img__shape{max-width:300px}}.slide-img__img{display:block;position:absolute;top:50%;left:50%;transform:translate3d(-50%,-50%,0)}@media screen and (max-width:1500px){.slide-img__img{max-width:300px;max-height:350px}}@media screen and (max-width:1500px){.slide__shopsquare .slide-img__img{max-width:300px;max-height:300px}}.slide__sub-info__info__title{margin-bottom:7px;font-size:21px;letter-spacing:.09em;text-transform:uppercase}@media screen and (max-width:1500px){.slide__sub-info__info__title{font-size:18px}}.slide__sub-info__info__description{font-family:PlayfairDisplay;text-transform:capitalize;font-style:italic;font-size:14px}.slide__button{padding:.9em 2em;margin-top:2em;border-style:solid;border-width:1px;border-radius:3px;display:inline-block;position:relative;font-family:SorrenMedium;text-decoration:none;font-size:19px;letter-spacing:.09em;text-transform:uppercase;color:#fff;overflow:hidden;cursor:pointer}@media screen and (max-width:1500px){.slide__button{font-size:15px}}.slide__button__splitted-text{display:inline-block;white-space:pre}.slide__button__loader{width:100%;height:100%;left:0;top:0;position:absolute;z-index:-1;transform:scaleX(0);transform-origin:left}", ""]);

        // exports


        /***/
    }),
    /* 127 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".about-content{max-width:27em;margin:auto;font-size:20px;font-family:PlayfairDisplay;text-align:center;color:#fff}.about-content__title{font-style:italic;text-align:left;letter-spacing:.12em}.about-content__big-title{font-size:80px;font-family:SorrenMedium;text-transform:uppercase;font-style:normal;letter-spacing:.12em;display:inline-block;vertical-align:middle;margin:0 10px;background-image:linear-gradient(#ffc3ca,#a8a9e7);-webkit-background-clip:text;-webkit-text-fill-color:transparent}.about-content__content{line-height:1.8em;font-size:16px;margin:3.5em 0}.about-content__content-container{margin:0 auto;font-size:14px;max-width:35em;text-align:left}.about-content__link{font-style:italic;text-decoration:none;color:#828ed4;transition:color .4s ease}.about-content__link:hover{color:#b0b7e4}.about-content__mobile-message{display:none;font-size:14px;margin-top:3em;font-style:italic;text-transform:uppercase;letter-spacing:.2em;line-height:1.5em;color:#9ab8dc}.about-content__social-title{font-size:15px;margin-bottom:.6em;letter-spacing:.1em;font-style:italic;color:#828ed4}.about-content__network{display:inline-block}.about-content__network:after{content:\"-\";color:#828ed4;margin:0 .5em}.about-content__network:last-child:after{display:none;content:\"\"}.about-content__network__link{text-decoration:none;display:inline-block;vertical-align:middle;color:#828ed4;font-family:SorrenMedium;text-transform:uppercase;letter-spacing:.1em;font-size:32px;line-height:1.5em;transition:all .4s ease}.about-content__network__link:hover{color:#b0b7e4}@media screen and (min-width:760px) and (max-width:960px){.about-content__social-title{font-size:15px}.about-content__mobile-message{display:block}.about-content{font-size:14px;margin:3em;text-align:left;max-width:none;display:block;visibility:visible;opacity:1}.about-content__content-container{font-size:15px}.about-content__big-title{font-size:60px}.about-content__title{font-size:24px;letter-spacing:.08em;line-height:3em}}@media screen and (max-width:760px){.about-content__social-title{font-size:15px}.about-content__mobile-message{display:block}.about-content{font-size:14px;margin:3em 2em;text-align:left;max-width:none;display:block;visibility:visible;opacity:1}.about-content__content-container{font-size:14px}.about-content__big-title{font-size:36px}.about-content__title{font-size:19px;letter-spacing:.02em;line-height:2em}}@media screen and (min-width:961px) and (max-width:1300px){.about-content__social-title{font-size:14px}.about-content{max-width:29em}.about-content__content-container{font-size:16px}.about-content__big-title{font-size:50px}.about-content__title{font-size:20px;line-height:3em}}@media screen and (max-width:340px){.about-content__big-title{font-size:30px}}@media screen and (max-width:960px){.about-content__content-container{max-width:none}}", ""]);

        // exports


        /***/
    }),
    /* 128 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".close-button{font-size:46px;cursor:pointer;margin:auto;width:1.2em;height:1.2em;border-radius:50%;background-image:linear-gradient(-135deg,#ffc3ca,#7e9df6)}.close-button__mini-button-container{width:1.1em;height:1.1em;box-sizing:border-box;border-radius:50%;background-color:#011933}.close-button__mini-button{width:.97em;height:.97em;box-sizing:border-box;border-radius:50%;border:1px solid hsla(0,0%,100%,.3)}.close-button__line{width:1px;height:15px;transform-origin:left}.close-button__line-fill{height:100%;width:100%;background-color:#fff}.close-button__center-content{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.close-button__first-line{transform:rotate(45deg)}.close-button__first-line .close-button__line-fill{transform-origin:top}.close-button__second-line{transform:rotate(135deg)}.close-button__second-line .close-button__line-fill{transform-origin:bottom}", ""]);

        // exports


        /***/
    }),
    /* 129 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".name-title{height:100%;width:100%;font-size:108px;position:absolute;z-index:-1;perspective:1000px}.home-title-st{display:inline-block;white-space:pre-wrap}.name-title__title-container{transform:translateY(-50%);position:relative;top:50%}.name-title__main-container{perspective:1000px}.name-title__title{font-family:SorrenMedium;font-size:1em;letter-spacing:.3em;text-transform:uppercase;color:#fff;text-align:center;position:relative;white-space:nowrap}@media screen and (max-width:1500px){.name-title__title{font-size:90px}}.name-title__subtitle{font-size:14px;padding-top:60px;line-height:2em;font-family:PlayfairDisplay;font-style:italic;color:#cce4ff;position:relative;text-align:center;margin:auto;max-width:250px}.subtitle-lines{display:inline-block}.name-title__square{position:absolute;width:6em;height:1.6em;top:50%;left:50%;transform:translate3d(-50%,-50%,-300px);border:15px solid #001429;z-index:-1}", ""]);

        // exports


        /***/
    }),
    /* 130 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".case-study__maje{font-size:30px}.case-study__maje .case-study__photo-background{background-color:#313596}.case-study__maje .case-study__photo{margin-top:100px}.case-study__maje .case-study__section{margin-top:10em;margin-bottom:6em}", ""]);

        // exports


        /***/
    }),
    /* 131 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".case-study{height:100%;position:relative;z-index:1;font-size:30px}.case-study__header{background-color:#011933;height:90px;width:100%;top:0;left:0;z-index:1;position:absolute;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.case-study__pane{height:95vh;width:100%}.case-study-content-background{width:100%;height:100%;background-color:#011933;padding-bottom:5em}.case-study__content{min-height:100%;color:#fff}.case-study__row{width:760px;margin:auto}.case-study__scroll-zone{position:absolute;width:100%}.case-study__infos{font-size:21px;padding:2.5em 0;width:95%;margin:auto;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;background-color:#011429;transform:translateY(-50%);transform-origin:bottom}.case-study__info{display:inline-block;text-align:center;margin-left:5em}.case-study__info:first-child{margin-left:0}.case-study__info__title{font-family:SorrenMedium;text-transform:uppercase;letter-spacing:.08em;margin-bottom:.2em}.case-study__info__text{font-family:PlayfairDisplay;font-style:italic;text-transform:capitalize;font-size:.7em;opacity:.5}.case-study__intro{font-size:30px;margin-top:1.5em}.case-study__title{font-family:SorrenMedium;letter-spacing:.09em;text-transform:uppercase;margin-bottom:1.3em}.case-study__title:after{content:\"\";margin-top:.2em;display:block;width:1em;height:2px;background-color:#fff}.case-study__intro__text{font-family:PlayfairDisplay;font-size:.8em;line-height:1.5em;color:#cce4ff}.case-study__photo-background-container{margin:250px 0}.case-study__photo-background,.case-study__photo-background-container{height:400px;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center}.case-study__photo-background{position:absolute;left:0;width:100%}.case-study__photo{position:relative;display:block}.case-study__typography{font-size:30px}.case-study__typography-block{margin-top:1em;padding:1.8em;background-color:#011429}.case-study__typo-img{margin-top:.5em}.case-study__mini-title{font-family:SorrenMedium;text-transform:uppercase;letter-spacing:.07em;font-size:.8em;opacity:.3}.case-study__colors{font-size:30px;margin-top:6em}.case-study__color-block{display:inline-block;margin-left:1.3em}.case-study__color-block:first-child{margin-left:0}.case-study__color{height:3em;width:3em;border-radius:50%}.case-study__text-content{font-family:PlayfairDisplay;font-size:14px;line-height:2em;opacity:.6}.case-study__line{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}.case-study__half-block{position:relative;display:inline-block;width:50%}.case-study__mobile-screen{margin:auto;position:relative;width:50%}.case-study__screen-circle{width:350px;border-radius:50%;height:350px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.case-study__full-screenshot{width:100%;margin-top:10em}.case-study__full-screenshot__bg{width:100%;margin-top:160px;position:absolute;left:0}.case-study__full-screenshot__img{display:block;position:relative}.case-study__img{box-shadow:0 0 30px 0 rgba(0,0,0,.4)}", ""]);

        // exports


        /***/
    }),
    /* 132 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, ".next-button{color:#fff;cursor:pointer;position:relative;width:100%;font-size:110px;padding:1.7em 0;display:block;background-color:#03162a;text-align:center;z-index:10}.next-button:before{content:\"\";position:absolute;top:0;display:block;background-color:#011933;width:100%;height:5px;transform:translateY(-5px)}@media screen and (max-width:1300px){.next-button{font-size:80px}}.next-button.is-hiding:before{visibility:hidden}.next-button__title{font-family:SorrenMedium;text-transform:uppercase;letter-spacing:.05em;position:relative;padding:0 .1em;z-index:1}.next-button__subtitle{font-family:PlayfairDisplay;font-style:italic;font-size:.15em;letter-spacing:.05em;margin-bottom:.7em;color:#9ab8dc}.next-button__line{width:100%;height:.4em;opacity:0;position:absolute;left:0;top:50%;background-image:linear-gradient(-135deg,#ffc3ca,#7e9df6);transform:translate3d(0,-50%,0) scaleX(0);transform-origin:left;z-index:-1}.next-button__background{background-color:#031425;width:100%;height:100vh;bottom:0;left:0;transform:scaleY(0);transform-origin:bottom;position:absolute;z-index:9}.next-button__content{position:relative;z-index:11}", ""]);

        // exports


        /***/
    }),
    /* 133 */
    /***/
    (function(module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(0)();
        // imports


        // module
        exports.push([module.i, "", ""]);

        // exports


        /***/
    }),
    /* 134 */
    /***/
    (function(module, exports) {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        function EventEmitter() {
            this._events = this._events || {};
            this._maxListeners = this._maxListeners || undefined;
        }
        module.exports = EventEmitter;

        // Backwards-compat with node 0.10.x
        EventEmitter.EventEmitter = EventEmitter;

        EventEmitter.prototype._events = undefined;
        EventEmitter.prototype._maxListeners = undefined;

        // By default EventEmitters will print a warning if more than 10 listeners are
        // added to it. This is a useful default which helps finding memory leaks.
        EventEmitter.defaultMaxListeners = 10;

        // Obviously not all Emitters should be limited to 10. This function allows
        // that to be increased. Set to zero for unlimited.
        EventEmitter.prototype.setMaxListeners = function(n) {
            if (!isNumber(n) || n < 0 || isNaN(n))
                throw TypeError('n must be a positive number');
            this._maxListeners = n;
            return this;
        };

        EventEmitter.prototype.emit = function(type) {
            var er, handler, len, args, i, listeners;

            if (!this._events)
                this._events = {};

            // If there is no 'error' event listener then throw.
            if (type === 'error') {
                if (!this._events.error ||
                    (isObject(this._events.error) && !this._events.error.length)) {
                    er = arguments[1];
                    if (er instanceof Error) {
                        throw er; // Unhandled 'error' event
                    } else {
                        // At least give some kind of context to the user
                        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                        err.context = er;
                        throw err;
                    }
                }
            }

            handler = this._events[type];

            if (isUndefined(handler))
                return false;

            if (isFunction(handler)) {
                switch (arguments.length) {
                    // fast cases
                    case 1:
                        handler.call(this);
                        break;
                    case 2:
                        handler.call(this, arguments[1]);
                        break;
                    case 3:
                        handler.call(this, arguments[1], arguments[2]);
                        break;
                        // slower
                    default:
                        args = Array.prototype.slice.call(arguments, 1);
                        handler.apply(this, args);
                }
            } else if (isObject(handler)) {
                args = Array.prototype.slice.call(arguments, 1);
                listeners = handler.slice();
                len = listeners.length;
                for (i = 0; i < len; i++)
                    listeners[i].apply(this, args);
            }

            return true;
        };

        EventEmitter.prototype.addListener = function(type, listener) {
            var m;

            if (!isFunction(listener))
                throw TypeError('listener must be a function');

            if (!this._events)
                this._events = {};

            // To avoid recursion in the case that type === "newListener"! Before
            // adding it to the listeners, first emit "newListener".
            if (this._events.newListener)
                this.emit('newListener', type,
                    isFunction(listener.listener) ?
                    listener.listener : listener);

            if (!this._events[type])
                // Optimize the case of one listener. Don't need the extra array object.
                this._events[type] = listener;
            else if (isObject(this._events[type]))
                // If we've already got an array, just append.
                this._events[type].push(listener);
            else
                // Adding the second element, need to change to array.
                this._events[type] = [this._events[type], listener];

            // Check for listener leak
            if (isObject(this._events[type]) && !this._events[type].warned) {
                if (!isUndefined(this._maxListeners)) {
                    m = this._maxListeners;
                } else {
                    m = EventEmitter.defaultMaxListeners;
                }

                if (m && m > 0 && this._events[type].length > m) {
                    this._events[type].warned = true;
                    console.error('(node) warning: possible EventEmitter memory ' +
                        'leak detected. %d listeners added. ' +
                        'Use emitter.setMaxListeners() to increase limit.',
                        this._events[type].length);
                    if (typeof console.trace === 'function') {
                        // not supported in IE 10
                        console.trace();
                    }
                }
            }

            return this;
        };

        EventEmitter.prototype.on = EventEmitter.prototype.addListener;

        EventEmitter.prototype.once = function(type, listener) {
            if (!isFunction(listener))
                throw TypeError('listener must be a function');

            var fired = false;

            function g() {
                this.removeListener(type, g);

                if (!fired) {
                    fired = true;
                    listener.apply(this, arguments);
                }
            }

            g.listener = listener;
            this.on(type, g);

            return this;
        };

        // emits a 'removeListener' event iff the listener was removed
        EventEmitter.prototype.removeListener = function(type, listener) {
            var list, position, length, i;

            if (!isFunction(listener))
                throw TypeError('listener must be a function');

            if (!this._events || !this._events[type])
                return this;

            list = this._events[type];
            length = list.length;
            position = -1;

            if (list === listener ||
                (isFunction(list.listener) && list.listener === listener)) {
                delete this._events[type];
                if (this._events.removeListener)
                    this.emit('removeListener', type, listener);

            } else if (isObject(list)) {
                for (i = length; i-- > 0;) {
                    if (list[i] === listener ||
                        (list[i].listener && list[i].listener === listener)) {
                        position = i;
                        break;
                    }
                }

                if (position < 0)
                    return this;

                if (list.length === 1) {
                    list.length = 0;
                    delete this._events[type];
                } else {
                    list.splice(position, 1);
                }

                if (this._events.removeListener)
                    this.emit('removeListener', type, listener);
            }

            return this;
        };

        EventEmitter.prototype.removeAllListeners = function(type) {
            var key, listeners;

            if (!this._events)
                return this;

            // not listening for removeListener, no need to emit
            if (!this._events.removeListener) {
                if (arguments.length === 0)
                    this._events = {};
                else if (this._events[type])
                    delete this._events[type];
                return this;
            }

            // emit removeListener for all listeners on all events
            if (arguments.length === 0) {
                for (key in this._events) {
                    if (key === 'removeListener') continue;
                    this.removeAllListeners(key);
                }
                this.removeAllListeners('removeListener');
                this._events = {};
                return this;
            }

            listeners = this._events[type];

            if (isFunction(listeners)) {
                this.removeListener(type, listeners);
            } else if (listeners) {
                // LIFO order
                while (listeners.length)
                    this.removeListener(type, listeners[listeners.length - 1]);
            }
            delete this._events[type];

            return this;
        };

        EventEmitter.prototype.listeners = function(type) {
            var ret;
            if (!this._events || !this._events[type])
                ret = [];
            else if (isFunction(this._events[type]))
                ret = [this._events[type]];
            else
                ret = this._events[type].slice();
            return ret;
        };

        EventEmitter.prototype.listenerCount = function(type) {
            if (this._events) {
                var evlistener = this._events[type];

                if (isFunction(evlistener))
                    return 1;
                else if (evlistener)
                    return evlistener.length;
            }
            return 0;
        };

        EventEmitter.listenerCount = function(emitter, type) {
            return emitter.listenerCount(type);
        };

        function isFunction(arg) {
            return typeof arg === 'function';
        }

        function isNumber(arg) {
            return typeof arg === 'number';
        }

        function isObject(arg) {
            return typeof arg === 'object' && arg !== null;
        }

        function isUndefined(arg) {
            return arg === void 0;
        }


        /***/
    }),
    /* 135 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export default */
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__ = __webpack_require__(6);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_1__TweenMaxBase_js__ = __webpack_require__(136);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_2__CSSPlugin_js__ = __webpack_require__(44);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_3__AttrPlugin_js__ = __webpack_require__(42);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_4__RoundPropsPlugin_js__ = __webpack_require__(47);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_5__DirectionalRotationPlugin_js__ = __webpack_require__(45);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_6__TimelineLite_js__ = __webpack_require__(27);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_7__TimelineMax_js__ = __webpack_require__(48);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_8__BezierPlugin_js__ = __webpack_require__(43);
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_9__EasePack_js__ = __webpack_require__(46);
        /* unused harmony reexport TweenLite */
        /* unused harmony reexport TimelineLite */
        /* unused harmony reexport TimelineMax */
        /* unused harmony reexport CSSPlugin */
        /* unused harmony reexport AttrPlugin */
        /* unused harmony reexport BezierPlugin */
        /* unused harmony reexport DirectionalRotationPlugin */
        /* unused harmony reexport RoundPropsPlugin */
        /* unused harmony reexport TweenPlugin */
        /* unused harmony reexport Ease */
        /* unused harmony reexport Power0 */
        /* unused harmony reexport Power1 */
        /* unused harmony reexport Power2 */
        /* unused harmony reexport Power3 */
        /* unused harmony reexport Power4 */
        /* unused harmony reexport Linear */
        /* unused harmony reexport Back */
        /* unused harmony reexport Elastic */
        /* unused harmony reexport Bounce */
        /* unused harmony reexport RoughEase */
        /* unused harmony reexport SlowMo */
        /* unused harmony reexport SteppedEase */
        /* unused harmony reexport Circ */
        /* unused harmony reexport Expo */
        /* unused harmony reexport Sine */
        /* unused harmony reexport ExpoScaleEase */
        /*!
         * VERSION: 2.0.1
         * DATE: 2018-05-30
         * UPDATES AND DOCS AT: http://greensock.com
         *
         * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
         * This work is subject to the terms at http://greensock.com/standard-license or for
         * Club GreenSock members, the software agreement that was issued with your membership.
         * 
         * @author: Jack Doyle, jack@greensock.com
         **/












        //the following two lines are designed to prevent tree shaking of the classes that were historically included with TweenMax (otherwise, folks would have to reference CSSPlugin, for example, to ensure their CSS-related animations worked)
        const TweenMax = __WEBPACK_IMPORTED_MODULE_1__TweenMaxBase_js__["a" /* default */ ];
        /* unused harmony export TweenMax */

        TweenMax._autoActivated = [__WEBPACK_IMPORTED_MODULE_6__TimelineLite_js__["a" /* default */ ], __WEBPACK_IMPORTED_MODULE_7__TimelineMax_js__["a" /* default */ ], __WEBPACK_IMPORTED_MODULE_2__CSSPlugin_js__["a" /* default */ ], __WEBPACK_IMPORTED_MODULE_3__AttrPlugin_js__["a" /* default */ ], __WEBPACK_IMPORTED_MODULE_8__BezierPlugin_js__["a" /* default */ ], __WEBPACK_IMPORTED_MODULE_4__RoundPropsPlugin_js__["a" /* default */ ], __WEBPACK_IMPORTED_MODULE_5__DirectionalRotationPlugin_js__["a" /* default */ ], __WEBPACK_IMPORTED_MODULE_9__EasePack_js__["b" /* Back */ ], __WEBPACK_IMPORTED_MODULE_9__EasePack_js__["c" /* Elastic */ ], __WEBPACK_IMPORTED_MODULE_9__EasePack_js__["d" /* Bounce */ ], __WEBPACK_IMPORTED_MODULE_9__EasePack_js__["e" /* RoughEase */ ], __WEBPACK_IMPORTED_MODULE_9__EasePack_js__["f" /* SlowMo */ ], __WEBPACK_IMPORTED_MODULE_9__EasePack_js__["g" /* SteppedEase */ ], __WEBPACK_IMPORTED_MODULE_9__EasePack_js__["h" /* Circ */ ], __WEBPACK_IMPORTED_MODULE_9__EasePack_js__["a" /* Expo */ ], __WEBPACK_IMPORTED_MODULE_9__EasePack_js__["i" /* Sine */ ], __WEBPACK_IMPORTED_MODULE_9__EasePack_js__["j" /* ExpoScaleEase */ ]];





        /***/
    }),
    /* 136 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return TweenMax;
        });
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__ = __webpack_require__(6);
        /* unused harmony reexport TweenLite */
        /* unused harmony reexport Ease */
        /* unused harmony reexport Power0 */
        /* unused harmony reexport Power1 */
        /* unused harmony reexport Power2 */
        /* unused harmony reexport Power3 */
        /* unused harmony reexport Power4 */
        /* unused harmony reexport Linear */
        /*!
         * VERSION: 2.0.1
         * DATE: 2018-05-30
         * UPDATES AND DOCS AT: http://greensock.com
         *
         * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
         * This work is subject to the terms at http://greensock.com/standard-license or for
         * Club GreenSock members, the software agreement that was issued with your membership.
         * 
         * @author: Jack Doyle, jack@greensock.com
         **/




        __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ]._gsDefine("TweenMax", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function() {

            var _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                    var b = [],
                        l = a.length,
                        i;
                    for (i = 0; i !== l; b.push(a[i++]));
                    return b;
                },
                _applyCycle = function(vars, targets, i) {
                    var alt = vars.cycle,
                        p, val;
                    for (p in alt) {
                        val = alt[p];
                        vars[p] = (typeof(val) === "function") ? val(i, targets[i]) : val[i % val.length];
                    }
                    delete vars.cycle;
                },
                TweenMax = function(target, duration, vars) {
                    __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].call(this, target, duration, vars);
                    this._cycle = 0;
                    this._yoyo = (this.vars.yoyo === true || !!this.vars.yoyoEase);
                    this._repeat = this.vars.repeat || 0;
                    this._repeatDelay = this.vars.repeatDelay || 0;
                    if (this._repeat) {
                        this._uncache(true); //ensures that if there is any repeat, the totalDuration will get recalculated to accurately report it.
                    }
                    this.render = TweenMax.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)
                },
                _tinyNum = 0.0000000001,
                TweenLiteInternals = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ]._internals,
                _isSelector = TweenLiteInternals.isSelector,
                _isArray = TweenLiteInternals.isArray,
                p = TweenMax.prototype = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].to({}, 0.1, {}),
                _blankArray = [];

            TweenMax.version = "2.0.1";
            p.constructor = TweenMax;
            p.kill()._gc = false;
            TweenMax.killTweensOf = TweenMax.killDelayedCallsTo = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].killTweensOf;
            TweenMax.getTweensOf = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].getTweensOf;
            TweenMax.lagSmoothing = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].lagSmoothing;
            TweenMax.ticker = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].ticker;
            TweenMax.render = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].render;

            p.invalidate = function() {
                this._yoyo = (this.vars.yoyo === true || !!this.vars.yoyoEase);
                this._repeat = this.vars.repeat || 0;
                this._repeatDelay = this.vars.repeatDelay || 0;
                this._yoyoEase = null;
                this._uncache(true);
                return __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].prototype.invalidate.call(this);
            };

            p.updateTo = function(vars, resetDuration) {
                var curRatio = this.ratio,
                    immediate = this.vars.immediateRender || vars.immediateRender,
                    p;
                if (resetDuration && this._startTime < this._timeline._time) {
                    this._startTime = this._timeline._time;
                    this._uncache(false);
                    if (this._gc) {
                        this._enabled(true, false);
                    } else {
                        this._timeline.insert(this, this._startTime - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
                    }
                }
                for (p in vars) {
                    this.vars[p] = vars[p];
                }
                if (this._initted || immediate) {
                    if (resetDuration) {
                        this._initted = false;
                        if (immediate) {
                            this.render(0, true, true);
                        }
                    } else {
                        if (this._gc) {
                            this._enabled(true, false);
                        }
                        if (this._notifyPluginsOfEnabled && this._firstPT) {
                            __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ]._onPluginEvent("_onDisable", this); //in case a plugin like MotionBlur must perform some cleanup tasks
                        }
                        if (this._time / this._duration > 0.998) { //if the tween has finished (or come extremely close to finishing), we just need to rewind it to 0 and then render it again at the end which forces it to re-initialize (parsing the new vars). We allow tweens that are close to finishing (but haven't quite finished) to work this way too because otherwise, the values are so small when determining where to project the starting values that binary math issues creep in and can make the tween appear to render incorrectly when run backwards.
                            var prevTime = this._totalTime;
                            this.render(0, true, false);
                            this._initted = false;
                            this.render(prevTime, true, false);
                        } else {
                            this._initted = false;
                            this._init();
                            if (this._time > 0 || immediate) {
                                var inv = 1 / (1 - curRatio),
                                    pt = this._firstPT,
                                    endValue;
                                while (pt) {
                                    endValue = pt.s + pt.c;
                                    pt.c *= inv;
                                    pt.s = endValue - pt.c;
                                    pt = pt._next;
                                }
                            }
                        }
                    }
                }
                return this;
            };

            p.render = function(time, suppressEvents, force) {
                if (!this._initted)
                    if (this._duration === 0 && this.vars.repeat) { //zero duration tweens that render immediately have render() called from TweenLite's constructor, before TweenMax's constructor has finished setting _repeat, _repeatDelay, and _yoyo which are critical in determining totalDuration() so we need to call invalidate() which is a low-kb way to get those set properly.
                        this.invalidate();
                    }
                var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                    prevTime = this._time,
                    prevTotalTime = this._totalTime,
                    prevCycle = this._cycle,
                    duration = this._duration,
                    prevRawPrevTime = this._rawPrevTime,
                    isComplete, callback, pt, cycleDuration, r, type, pow, rawPrevTime, yoyoEase;
                if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                    this._totalTime = totalDur;
                    this._cycle = this._repeat;
                    if (this._yoyo && (this._cycle & 1) !== 0) {
                        this._time = 0;
                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                    } else {
                        this._time = duration;
                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
                    }
                    if (!this._reversed) {
                        isComplete = true;
                        callback = "onComplete";
                        force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                    }
                    if (duration === 0)
                        if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                            if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
                                time = 0;
                            }
                            if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause"))
                                if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
                                    force = true;
                                    if (prevRawPrevTime > _tinyNum) {
                                        callback = "onReverseComplete";
                                    }
                                }
                            this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                        }

                } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                    this._totalTime = this._time = this._cycle = 0;
                    this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                    if (prevTotalTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
                        callback = "onReverseComplete";
                        isComplete = this._reversed;
                    }
                    if (time < 0) {
                        this._active = false;
                        if (duration === 0)
                            if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                                if (prevRawPrevTime >= 0) {
                                    force = true;
                                }
                                this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                            }
                    }
                    if (!this._initted) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
                        force = true;
                    }
                } else {
                    this._totalTime = this._time = time;
                    if (this._repeat !== 0) {
                        cycleDuration = duration + this._repeatDelay;
                        this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
                        if (this._cycle !== 0)
                            if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
                                this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
                            }
                        this._time = this._totalTime - (this._cycle * cycleDuration);
                        if (this._yoyo)
                            if ((this._cycle & 1) !== 0) {
                                this._time = duration - this._time;
                                yoyoEase = this._yoyoEase || this.vars.yoyoEase; //note: we don't set this._yoyoEase in _init() like we do other properties because it's TweenMax-specific and doing it here allows us to optimize performance (most tweens don't have a yoyoEase). Note that we also must skip the this.ratio calculation further down right after we _init() in this function, because we're doing it here.
                                if (yoyoEase) {
                                    if (!this._yoyoEase) {
                                        if (yoyoEase === true && !this._initted) { //if it's not initted and yoyoEase is true, this._ease won't have been populated yet so we must discern it here.
                                            yoyoEase = this.vars.ease;
                                            this._yoyoEase = yoyoEase = !yoyoEase ? __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].defaultEase : (yoyoEase instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ]) ? yoyoEase : (typeof(yoyoEase) === "function") ? new __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ](yoyoEase, this.vars.easeParams) : __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ].map[yoyoEase] || __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].defaultEase;
                                        } else {
                                            this._yoyoEase = yoyoEase = (yoyoEase === true) ? this._ease : (yoyoEase instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ]) ? yoyoEase : __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["b" /* Ease */ ].map[yoyoEase];
                                        }
                                    }
                                    this.ratio = yoyoEase ? 1 - yoyoEase.getRatio((duration - this._time) / duration) : 0;
                                }
                            }
                        if (this._time > duration) {
                            this._time = duration;
                        } else if (this._time < 0) {
                            this._time = 0;
                        }
                    }
                    if (this._easeType && !yoyoEase) {
                        r = this._time / duration;
                        type = this._easeType;
                        pow = this._easePower;
                        if (type === 1 || (type === 3 && r >= 0.5)) {
                            r = 1 - r;
                        }
                        if (type === 3) {
                            r *= 2;
                        }
                        if (pow === 1) {
                            r *= r;
                        } else if (pow === 2) {
                            r *= r * r;
                        } else if (pow === 3) {
                            r *= r * r * r;
                        } else if (pow === 4) {
                            r *= r * r * r * r;
                        }

                        if (type === 1) {
                            this.ratio = 1 - r;
                        } else if (type === 2) {
                            this.ratio = r;
                        } else if (this._time / duration < 0.5) {
                            this.ratio = r / 2;
                        } else {
                            this.ratio = 1 - (r / 2);
                        }

                    } else if (!yoyoEase) {
                        this.ratio = this._ease.getRatio(this._time / duration);
                    }

                }

                if (prevTime === this._time && !force && prevCycle === this._cycle) {
                    if (prevTotalTime !== this._totalTime)
                        if (this._onUpdate)
                            if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
                                this._callback("onUpdate");
                            }
                    return;
                } else if (!this._initted) {
                    this._init();
                    if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
                        return;
                    } else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) { //we stick it in the queue for rendering at the very end of the tick - this is a performance optimization because browsers invalidate styles and force a recalculation if you read, write, and then read style data (so it's better to read/read/read/write/write/write than read/write/read/write/read/write). The down side, of course, is that usually you WANT things to render immediately because you may have code running right after that which depends on the change. Like imagine running TweenLite.set(...) and then immediately after that, creating a nother tween that animates the same property to another value; the starting values of that 2nd tween wouldn't be accurate if lazy is true.
                        this._time = prevTime;
                        this._totalTime = prevTotalTime;
                        this._rawPrevTime = prevRawPrevTime;
                        this._cycle = prevCycle;
                        TweenLiteInternals.lazyTweens.push(this);
                        this._lazy = [time, suppressEvents];
                        return;
                    }
                    //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
                    if (this._time && !isComplete && !yoyoEase) {
                        this.ratio = this._ease.getRatio(this._time / duration);
                    } else if (isComplete && this._ease._calcEnd && !yoyoEase) {
                        this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
                    }
                }
                if (this._lazy !== false) {
                    this._lazy = false;
                }

                if (!this._active)
                    if (!this._paused && this._time !== prevTime && time >= 0) {
                        this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
                    }
                if (prevTotalTime === 0) {
                    if (this._initted === 2 && time > 0) {
                        //this.invalidate();
                        this._init(); //will just apply overwriting since _initted of (2) means it was a from() tween that had immediateRender:true
                    }
                    if (this._startAt) {
                        if (time >= 0) {
                            this._startAt.render(time, true, force);
                        } else if (!callback) {
                            callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
                        }
                    }
                    if (this.vars.onStart)
                        if (this._totalTime !== 0 || duration === 0)
                            if (!suppressEvents) {
                                this._callback("onStart");
                            }
                }

                pt = this._firstPT;
                while (pt) {
                    if (pt.f) {
                        pt.t[pt.p](pt.c * this.ratio + pt.s);
                    } else {
                        pt.t[pt.p] = pt.c * this.ratio + pt.s;
                    }
                    pt = pt._next;
                }

                if (this._onUpdate) {
                    if (time < 0)
                        if (this._startAt && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                            this._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
                        }
                    if (!suppressEvents)
                        if (this._totalTime !== prevTotalTime || callback) {
                            this._callback("onUpdate");
                        }
                }
                if (this._cycle !== prevCycle)
                    if (!suppressEvents)
                        if (!this._gc)
                            if (this.vars.onRepeat) {
                                this._callback("onRepeat");
                            }
                if (callback)
                    if (!this._gc || force) { //check gc because there's a chance that kill() could be called in an onUpdate
                        if (time < 0 && this._startAt && !this._onUpdate && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                            this._startAt.render(time, true, force);
                        }
                        if (isComplete) {
                            if (this._timeline.autoRemoveChildren) {
                                this._enabled(false, false);
                            }
                            this._active = false;
                        }
                        if (!suppressEvents && this.vars[callback]) {
                            this._callback(callback);
                        }
                        if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
                            this._rawPrevTime = 0;
                        }
                    }
            };

            //---- STATIC FUNCTIONS -----------------------------------------------------------------------------------------------------------

            TweenMax.to = function(target, duration, vars) {
                return new TweenMax(target, duration, vars);
            };

            TweenMax.from = function(target, duration, vars) {
                vars.runBackwards = true;
                vars.immediateRender = (vars.immediateRender != false);
                return new TweenMax(target, duration, vars);
            };

            TweenMax.fromTo = function(target, duration, fromVars, toVars) {
                toVars.startAt = fromVars;
                toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                return new TweenMax(target, duration, toVars);
            };

            TweenMax.staggerTo = TweenMax.allTo = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                stagger = stagger || 0;
                var delay = 0,
                    a = [],
                    finalComplete = function() {
                        if (vars.onComplete) {
                            vars.onComplete.apply(vars.onCompleteScope || this, arguments);
                        }
                        onCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray);
                    },
                    cycle = vars.cycle,
                    fromCycle = (vars.startAt && vars.startAt.cycle),
                    l, copy, i, p;
                if (!_isArray(targets)) {
                    if (typeof(targets) === "string") {
                        targets = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].selector(targets) || targets;
                    }
                    if (_isSelector(targets)) {
                        targets = _slice(targets);
                    }
                }
                targets = targets || [];
                if (stagger < 0) {
                    targets = _slice(targets);
                    targets.reverse();
                    stagger *= -1;
                }
                l = targets.length - 1;
                for (i = 0; i <= l; i++) {
                    copy = {};
                    for (p in vars) {
                        copy[p] = vars[p];
                    }
                    if (cycle) {
                        _applyCycle(copy, targets, i);
                        if (copy.duration != null) {
                            duration = copy.duration;
                            delete copy.duration;
                        }
                    }
                    if (fromCycle) {
                        fromCycle = copy.startAt = {};
                        for (p in vars.startAt) {
                            fromCycle[p] = vars.startAt[p];
                        }
                        _applyCycle(copy.startAt, targets, i);
                    }
                    copy.delay = delay + (copy.delay || 0);
                    if (i === l && onCompleteAll) {
                        copy.onComplete = finalComplete;
                    }
                    a[i] = new TweenMax(targets[i], duration, copy);
                    delay += stagger;
                }
                return a;
            };

            TweenMax.staggerFrom = TweenMax.allFrom = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                vars.runBackwards = true;
                vars.immediateRender = (vars.immediateRender != false);
                return TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
            };

            TweenMax.staggerFromTo = TweenMax.allFromTo = function(targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                toVars.startAt = fromVars;
                toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                return TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
            };

            TweenMax.delayedCall = function(delay, callback, params, scope, useFrames) {
                return new TweenMax(callback, 0, {
                    delay: delay,
                    onComplete: callback,
                    onCompleteParams: params,
                    callbackScope: scope,
                    onReverseComplete: callback,
                    onReverseCompleteParams: params,
                    immediateRender: false,
                    useFrames: useFrames,
                    overwrite: 0
                });
            };

            TweenMax.set = function(target, vars) {
                return new TweenMax(target, 0, vars);
            };

            TweenMax.isTweening = function(target) {
                return (__WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].getTweensOf(target, true).length > 0);
            };

            var _getChildrenOf = function(timeline, includeTimelines) {
                    var a = [],
                        cnt = 0,
                        tween = timeline._first;
                    while (tween) {
                        if (tween instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ]) {
                            a[cnt++] = tween;
                        } else {
                            if (includeTimelines) {
                                a[cnt++] = tween;
                            }
                            a = a.concat(_getChildrenOf(tween, includeTimelines));
                            cnt = a.length;
                        }
                        tween = tween._next;
                    }
                    return a;
                },
                getAllTweens = TweenMax.getAllTweens = function(includeTimelines) {
                    return _getChildrenOf(__WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ]._rootTimeline, includeTimelines).concat(_getChildrenOf(__WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ]._rootFramesTimeline, includeTimelines));
                };

            TweenMax.killAll = function(complete, tweens, delayedCalls, timelines) {
                if (tweens == null) {
                    tweens = true;
                }
                if (delayedCalls == null) {
                    delayedCalls = true;
                }
                var a = getAllTweens((timelines != false)),
                    l = a.length,
                    allTrue = (tweens && delayedCalls && timelines),
                    isDC, tween, i;
                for (i = 0; i < l; i++) {
                    tween = a[i];
                    if (allTrue || (tween instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["c" /* SimpleTimeline */ ]) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
                        if (complete) {
                            tween.totalTime(tween._reversed ? 0 : tween.totalDuration());
                        } else {
                            tween._enabled(false, false);
                        }
                    }
                }
            };

            TweenMax.killChildTweensOf = function(parent, complete) {
                if (parent == null) {
                    return;
                }
                var tl = TweenLiteInternals.tweenLookup,
                    a, curParent, p, i, l;
                if (typeof(parent) === "string") {
                    parent = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].selector(parent) || parent;
                }
                if (_isSelector(parent)) {
                    parent = _slice(parent);
                }
                if (_isArray(parent)) {
                    i = parent.length;
                    while (--i > -1) {
                        TweenMax.killChildTweensOf(parent[i], complete);
                    }
                    return;
                }
                a = [];
                for (p in tl) {
                    curParent = tl[p].target.parentNode;
                    while (curParent) {
                        if (curParent === parent) {
                            a = a.concat(tl[p].tweens);
                        }
                        curParent = curParent.parentNode;
                    }
                }
                l = a.length;
                for (i = 0; i < l; i++) {
                    if (complete) {
                        a[i].totalTime(a[i].totalDuration());
                    }
                    a[i]._enabled(false, false);
                }
            };

            var _changePause = function(pause, tweens, delayedCalls, timelines) {
                tweens = (tweens !== false);
                delayedCalls = (delayedCalls !== false);
                timelines = (timelines !== false);
                var a = getAllTweens(timelines),
                    allTrue = (tweens && delayedCalls && timelines),
                    i = a.length,
                    isDC, tween;
                while (--i > -1) {
                    tween = a[i];
                    if (allTrue || (tween instanceof __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["c" /* SimpleTimeline */ ]) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
                        tween.paused(pause);
                    }
                }
            };

            TweenMax.pauseAll = function(tweens, delayedCalls, timelines) {
                _changePause(true, tweens, delayedCalls, timelines);
            };

            TweenMax.resumeAll = function(tweens, delayedCalls, timelines) {
                _changePause(false, tweens, delayedCalls, timelines);
            };

            TweenMax.globalTimeScale = function(value) {
                var tl = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ]._rootTimeline,
                    t = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].ticker.time;
                if (!arguments.length) {
                    return tl._timeScale;
                }
                value = value || _tinyNum; //can't allow zero because it'll throw the math off
                tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
                tl = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ]._rootFramesTimeline;
                t = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["d" /* default */ ].ticker.frame;
                tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
                tl._timeScale = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ]._rootTimeline._timeScale = value;
                return value;
            };


            //---- GETTERS / SETTERS ----------------------------------------------------------------------------------------------------------

            p.progress = function(value, suppressEvents) {
                return (!arguments.length) ? this._time / this.duration() : this.totalTime(this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
            };

            p.totalProgress = function(value, suppressEvents) {
                return (!arguments.length) ? this._totalTime / this.totalDuration() : this.totalTime(this.totalDuration() * value, suppressEvents);
            };

            p.time = function(value, suppressEvents) {
                if (!arguments.length) {
                    return this._time;
                }
                if (this._dirty) {
                    this.totalDuration();
                }
                if (value > this._duration) {
                    value = this._duration;
                }
                if (this._yoyo && (this._cycle & 1) !== 0) {
                    value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
                } else if (this._repeat !== 0) {
                    value += this._cycle * (this._duration + this._repeatDelay);
                }
                return this.totalTime(value, suppressEvents);
            };

            p.duration = function(value) {
                if (!arguments.length) {
                    return this._duration; //don't set _dirty = false because there could be repeats that haven't been factored into the _totalDuration yet. Otherwise, if you create a repeated TweenMax and then immediately check its duration(), it would cache the value and the totalDuration would not be correct, thus repeats wouldn't take effect.
                }
                return __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["e" /* Animation */ ].prototype.duration.call(this, value);
            };

            p.totalDuration = function(value) {
                if (!arguments.length) {
                    if (this._dirty) {
                        //instead of Infinity, we use 999999999999 so that we can accommodate reverses
                        this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
                        this._dirty = false;
                    }
                    return this._totalDuration;
                }
                return (this._repeat === -1) ? this : this.duration((value - (this._repeat * this._repeatDelay)) / (this._repeat + 1));
            };

            p.repeat = function(value) {
                if (!arguments.length) {
                    return this._repeat;
                }
                this._repeat = value;
                return this._uncache(true);
            };

            p.repeatDelay = function(value) {
                if (!arguments.length) {
                    return this._repeatDelay;
                }
                this._repeatDelay = value;
                return this._uncache(true);
            };

            p.yoyo = function(value) {
                if (!arguments.length) {
                    return this._yoyo;
                }
                this._yoyo = value;
                return this;
            };


            return TweenMax;

        }, true);

        const TweenMax = __WEBPACK_IMPORTED_MODULE_0__TweenLite_js__["a" /* _gsScope */ ].TweenMax;
        /* unused harmony export TweenMax */

        const TweenMaxBase = TweenMax;
        /* unused harmony export TweenMaxBase */





        /***/
    }),
    /* 137 */
    /***/
    (function(module, exports) {

        // Generated by CoffeeScript 1.9.2
        (function() {
            var root;

            root = typeof exports !== "undefined" && exports !== null ? exports : this;

            root.Lethargy = (function() {
                function Lethargy(stability, sensitivity, tolerance, delay) {
                    this.stability = stability != null ? Math.abs(stability) : 8;
                    this.sensitivity = sensitivity != null ? 1 + Math.abs(sensitivity) : 100;
                    this.tolerance = tolerance != null ? 1 + Math.abs(tolerance) : 1.1;
                    this.delay = delay != null ? delay : 150;
                    this.lastUpDeltas = (function() {
                        var i, ref, results;
                        results = [];
                        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
                            results.push(null);
                        }
                        return results;
                    }).call(this);
                    this.lastDownDeltas = (function() {
                        var i, ref, results;
                        results = [];
                        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
                            results.push(null);
                        }
                        return results;
                    }).call(this);
                    this.deltasTimestamp = (function() {
                        var i, ref, results;
                        results = [];
                        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
                            results.push(null);
                        }
                        return results;
                    }).call(this);
                }

                Lethargy.prototype.check = function(e) {
                    var lastDelta;
                    e = e.originalEvent || e;
                    if (e.wheelDelta != null) {
                        lastDelta = e.wheelDelta;
                    } else if (e.deltaY != null) {
                        lastDelta = e.deltaY * -40;
                    } else if ((e.detail != null) || e.detail === 0) {
                        lastDelta = e.detail * -40;
                    }
                    this.deltasTimestamp.push(Date.now());
                    this.deltasTimestamp.shift();
                    if (lastDelta > 0) {
                        this.lastUpDeltas.push(lastDelta);
                        this.lastUpDeltas.shift();
                        return this.isInertia(1);
                    } else {
                        this.lastDownDeltas.push(lastDelta);
                        this.lastDownDeltas.shift();
                        return this.isInertia(-1);
                    }
                    return false;
                };

                Lethargy.prototype.isInertia = function(direction) {
                    var lastDeltas, lastDeltasNew, lastDeltasOld, newAverage, newSum, oldAverage, oldSum;
                    lastDeltas = direction === -1 ? this.lastDownDeltas : this.lastUpDeltas;
                    if (lastDeltas[0] === null) {
                        return direction;
                    }
                    if (this.deltasTimestamp[(this.stability * 2) - 2] + this.delay > Date.now() && lastDeltas[0] === lastDeltas[(this.stability * 2) - 1]) {
                        return false;
                    }
                    lastDeltasOld = lastDeltas.slice(0, this.stability);
                    lastDeltasNew = lastDeltas.slice(this.stability, this.stability * 2);
                    oldSum = lastDeltasOld.reduce(function(t, s) {
                        return t + s;
                    });
                    newSum = lastDeltasNew.reduce(function(t, s) {
                        return t + s;
                    });
                    oldAverage = oldSum / lastDeltasOld.length;
                    newAverage = newSum / lastDeltasNew.length;
                    if (Math.abs(oldAverage) < Math.abs(newAverage * this.tolerance) && (this.sensitivity < Math.abs(newAverage))) {
                        return direction;
                    } else {
                        return false;
                    }
                };

                Lethargy.prototype.showLastUpDeltas = function() {
                    return this.lastUpDeltas;
                };

                Lethargy.prototype.showLastDownDeltas = function() {
                    return this.lastDownDeltas;
                };

                return Lethargy;

            })();

        }).call(this);


        /***/
    }),
    /* 138 */
    /***/
    (function(module, exports) {


        module.exports = function load(src, opts, cb) {
            var head = document.head || document.getElementsByTagName('head')[0]
            var script = document.createElement('script')

            if (typeof opts === 'function') {
                cb = opts
                opts = {}
            }

            opts = opts || {}
            cb = cb || function() {}

            script.type = opts.type || 'text/javascript'
            script.charset = opts.charset || 'utf8';
            script.async = 'async' in opts ? !!opts.async : true
            script.src = src

            if (opts.attrs) {
                setAttributes(script, opts.attrs)
            }

            if (opts.text) {
                script.text = '' + opts.text
            }

            var onend = 'onload' in script ? stdOnEnd : ieOnEnd
            onend(script, cb)

            // some good legacy browsers (firefox) fail the 'in' detection above
            // so as a fallback we always set onload
            // old IE will ignore this and new IE will set onload
            if (!script.onload) {
                stdOnEnd(script, cb);
            }

            head.appendChild(script)
        }

        function setAttributes(script, attrs) {
            for (var attr in attrs) {
                script.setAttribute(attr, attrs[attr]);
            }
        }

        function stdOnEnd(script, cb) {
            script.onload = function() {
                this.onerror = this.onload = null
                cb(null, script)
            }
            script.onerror = function() {
                // this.onload = null here is necessary
                // because even IE9 works not like others
                this.onerror = this.onload = null
                cb(new Error('Failed to load ' + this.src), script)
            }
        }

        function ieOnEnd(script, cb) {
            script.onreadystatechange = function() {
                if (this.readyState != 'complete' && this.readyState != 'loaded') return
                this.onreadystatechange = null
                cb(null, script) // there is no way to catch loading errors in IE8
            }
        }


        /***/
    }),
    /* 139 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(12),
            root = __webpack_require__(8);

        /* Built-in method references that are verified to be native. */
        var DataView = getNative(root, 'DataView');

        module.exports = DataView;


        /***/
    }),
    /* 140 */
    /***/
    (function(module, exports, __webpack_require__) {

        var hashClear = __webpack_require__(184),
            hashDelete = __webpack_require__(185),
            hashGet = __webpack_require__(186),
            hashHas = __webpack_require__(187),
            hashSet = __webpack_require__(188);

        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }

        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;

        module.exports = Hash;


        /***/
    }),
    /* 141 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(12),
            root = __webpack_require__(8);

        /* Built-in method references that are verified to be native. */
        var Promise = getNative(root, 'Promise');

        module.exports = Promise;


        /***/
    }),
    /* 142 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(12),
            root = __webpack_require__(8);

        /* Built-in method references that are verified to be native. */
        var Set = getNative(root, 'Set');

        module.exports = Set;


        /***/
    }),
    /* 143 */
    /***/
    (function(module, exports, __webpack_require__) {

        var MapCache = __webpack_require__(29),
            setCacheAdd = __webpack_require__(209),
            setCacheHas = __webpack_require__(210);

        /**
         *
         * Creates an array cache object to store unique values.
         *
         * @private
         * @constructor
         * @param {Array} [values] The values to cache.
         */
        function SetCache(values) {
            var index = -1,
                length = values == null ? 0 : values.length;

            this.__data__ = new MapCache;
            while (++index < length) {
                this.add(values[index]);
            }
        }

        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;

        module.exports = SetCache;


        /***/
    }),
    /* 144 */
    /***/
    (function(module, exports, __webpack_require__) {

        var root = __webpack_require__(8);

        /** Built-in value references. */
        var Uint8Array = root.Uint8Array;

        module.exports = Uint8Array;


        /***/
    }),
    /* 145 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(12),
            root = __webpack_require__(8);

        /* Built-in method references that are verified to be native. */
        var WeakMap = getNative(root, 'WeakMap');

        module.exports = WeakMap;


        /***/
    }),
    /* 146 */
    /***/
    (function(module, exports) {

        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */
        function apply(func, thisArg, args) {
            switch (args.length) {
                case 0:
                    return func.call(thisArg);
                case 1:
                    return func.call(thisArg, args[0]);
                case 2:
                    return func.call(thisArg, args[0], args[1]);
                case 3:
                    return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
        }

        module.exports = apply;


        /***/
    }),
    /* 147 */
    /***/
    (function(module, exports) {

        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                }
            }
            return result;
        }

        module.exports = arrayFilter;


        /***/
    }),
    /* 148 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseTimes = __webpack_require__(169),
            isArguments = __webpack_require__(63),
            isArray = __webpack_require__(9),
            isBuffer = __webpack_require__(64),
            isIndex = __webpack_require__(56),
            isTypedArray = __webpack_require__(66);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value),
                isArg = !isArr && isArguments(value),
                isBuff = !isArr && !isArg && isBuffer(value),
                isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                skipIndexes = isArr || isArg || isBuff || isType,
                result = skipIndexes ? baseTimes(value.length, String) : [],
                length = result.length;

            for (var key in value) {
                if ((inherited || hasOwnProperty.call(value, key)) &&
                    !(skipIndexes && (
                        // Safari 9 has enumerable `arguments.length` in strict mode.
                        key == 'length' ||
                        // Node.js 0.10 has enumerable non-index properties on buffers.
                        (isBuff && (key == 'offset' || key == 'parent')) ||
                        // PhantomJS 2 has enumerable non-index properties on typed arrays.
                        (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                        // Skip index properties.
                        isIndex(key, length)
                    ))) {
                    result.push(key);
                }
            }
            return result;
        }

        module.exports = arrayLikeKeys;


        /***/
    }),
    /* 149 */
    /***/
    (function(module, exports) {

        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
            var index = -1,
                length = array == null ? 0 : array.length,
                result = Array(length);

            while (++index < length) {
                result[index] = iteratee(array[index], index, array);
            }
            return result;
        }

        module.exports = arrayMap;


        /***/
    }),
    /* 150 */
    /***/
    (function(module, exports) {

        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
            var index = -1,
                length = values.length,
                offset = array.length;

            while (++index < length) {
                array[offset + index] = values[index];
            }
            return array;
        }

        module.exports = arrayPush;


        /***/
    }),
    /* 151 */
    /***/
    (function(module, exports) {

        /**
         * A specialized version of `_.some` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function arraySome(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (predicate(array[index], index, array)) {
                    return true;
                }
            }
            return false;
        }

        module.exports = arraySome;


        /***/
    }),
    /* 152 */
    /***/
    (function(module, exports) {

        /** Error message constants. */
        var FUNC_ERROR_TEXT = 'Expected a function';

        /**
         * The base implementation of `_.delay` and `_.defer` which accepts `args`
         * to provide to `func`.
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {Array} args The arguments to provide to `func`.
         * @returns {number|Object} Returns the timer id or timeout object.
         */
        function baseDelay(func, wait, args) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            return setTimeout(function() {
                func.apply(undefined, args);
            }, wait);
        }

        module.exports = baseDelay;


        /***/
    }),
    /* 153 */
    /***/
    (function(module, exports) {

        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length,
                index = fromIndex + (fromRight ? 1 : -1);

            while ((fromRight ? index-- : ++index < length)) {
                if (predicate(array[index], index, array)) {
                    return index;
                }
            }
            return -1;
        }

        module.exports = baseFindIndex;


        /***/
    }),
    /* 154 */
    /***/
    (function(module, exports, __webpack_require__) {

        var arrayPush = __webpack_require__(150),
            isArray = __webpack_require__(9);

        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }

        module.exports = baseGetAllKeys;


        /***/
    }),
    /* 155 */
    /***/
    (function(module, exports) {

        /**
         * The base implementation of `_.hasIn` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHasIn(object, key) {
            return object != null && key in Object(object);
        }

        module.exports = baseHasIn;


        /***/
    }),
    /* 156 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseGetTag = __webpack_require__(18),
            isObjectLike = __webpack_require__(19);

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]';

        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }

        module.exports = baseIsArguments;


        /***/
    }),
    /* 157 */
    /***/
    (function(module, exports, __webpack_require__) {

        var Stack = __webpack_require__(50),
            equalArrays = __webpack_require__(54),
            equalByTag = __webpack_require__(175),
            equalObjects = __webpack_require__(176),
            getTag = __webpack_require__(181),
            isArray = __webpack_require__(9),
            isBuffer = __webpack_require__(64),
            isTypedArray = __webpack_require__(66);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1;

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            objectTag = '[object Object]';

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * A specialized version of `baseIsEqual` for arrays and objects which performs
         * deep comparisons and tracks traversed objects enabling objects with circular
         * references to be compared.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object),
                othIsArr = isArray(other),
                objTag = objIsArr ? arrayTag : getTag(object),
                othTag = othIsArr ? arrayTag : getTag(other);

            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;

            var objIsObj = objTag == objectTag,
                othIsObj = othTag == objectTag,
                isSameTag = objTag == othTag;

            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) {
                    return false;
                }
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack);
                return (objIsArr || isTypedArray(object)) ?
                    equalArrays(object, other, bitmask, customizer, equalFunc, stack) :
                    equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                    othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object,
                        othUnwrapped = othIsWrapped ? other.value() : other;

                    stack || (stack = new Stack);
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) {
                return false;
            }
            stack || (stack = new Stack);
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }

        module.exports = baseIsEqualDeep;


        /***/
    }),
    /* 158 */
    /***/
    (function(module, exports, __webpack_require__) {

        var Stack = __webpack_require__(50),
            baseIsEqual = __webpack_require__(52);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

        /**
         * The base implementation of `_.isMatch` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Array} matchData The property names, values, and compare flags to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         */
        function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length,
                length = index,
                noCustomizer = !customizer;

            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (index--) {
                var data = matchData[index];
                if ((noCustomizer && data[2]) ?
                    data[1] !== object[data[0]] :
                    !(data[0] in object)
                ) {
                    return false;
                }
            }
            while (++index < length) {
                data = matchData[index];
                var key = data[0],
                    objValue = object[key],
                    srcValue = data[1];

                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) {
                        return false;
                    }
                } else {
                    var stack = new Stack;
                    if (customizer) {
                        var result = customizer(objValue, srcValue, key, object, source, stack);
                    }
                    if (!(result === undefined ?
                            baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) :
                            result
                        )) {
                        return false;
                    }
                }
            }
            return true;
        }

        module.exports = baseIsMatch;


        /***/
    }),
    /* 159 */
    /***/
    (function(module, exports, __webpack_require__) {

        var isFunction = __webpack_require__(65),
            isMasked = __webpack_require__(190),
            isObject = __webpack_require__(14),
            toSource = __webpack_require__(59);

        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/;

        /** Used for built-in method references. */
        var funcProto = Function.prototype,
            objectProto = Object.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to detect if a method is native. */
        var reIsNative = RegExp('^' +
            funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
        );

        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
                return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }

        module.exports = baseIsNative;


        /***/
    }),
    /* 160 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseGetTag = __webpack_require__(18),
            isLength = __webpack_require__(32),
            isObjectLike = __webpack_require__(19);

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            errorTag = '[object Error]',
            funcTag = '[object Function]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            objectTag = '[object Object]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            weakMapTag = '[object WeakMap]';

        var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]',
            float32Tag = '[object Float32Array]',
            float64Tag = '[object Float64Array]',
            int8Tag = '[object Int8Array]',
            int16Tag = '[object Int16Array]',
            int32Tag = '[object Int32Array]',
            uint8Tag = '[object Uint8Array]',
            uint8ClampedTag = '[object Uint8ClampedArray]',
            uint16Tag = '[object Uint16Array]',
            uint32Tag = '[object Uint32Array]';

        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
            typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
            typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
            typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
            typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
            typedArrayTags[errorTag] = typedArrayTags[funcTag] =
            typedArrayTags[mapTag] = typedArrayTags[numberTag] =
            typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
            typedArrayTags[setTag] = typedArrayTags[stringTag] =
            typedArrayTags[weakMapTag] = false;

        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
            return isObjectLike(value) &&
                isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }

        module.exports = baseIsTypedArray;


        /***/
    }),
    /* 161 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseMatches = __webpack_require__(163),
            baseMatchesProperty = __webpack_require__(164),
            identity = __webpack_require__(31),
            isArray = __webpack_require__(9),
            property = __webpack_require__(228);

        /**
         * The base implementation of `_.iteratee`.
         *
         * @private
         * @param {*} [value=_.identity] The value to convert to an iteratee.
         * @returns {Function} Returns the iteratee.
         */
        function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == 'function') {
                return value;
            }
            if (value == null) {
                return identity;
            }
            if (typeof value == 'object') {
                return isArray(value) ?
                    baseMatchesProperty(value[0], value[1]) :
                    baseMatches(value);
            }
            return property(value);
        }

        module.exports = baseIteratee;


        /***/
    }),
    /* 162 */
    /***/
    (function(module, exports, __webpack_require__) {

        var isPrototype = __webpack_require__(191),
            nativeKeys = __webpack_require__(204);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
            if (!isPrototype(object)) {
                return nativeKeys(object);
            }
            var result = [];
            for (var key in Object(object)) {
                if (hasOwnProperty.call(object, key) && key != 'constructor') {
                    result.push(key);
                }
            }
            return result;
        }

        module.exports = baseKeys;


        /***/
    }),
    /* 163 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseIsMatch = __webpack_require__(158),
            getMatchData = __webpack_require__(178),
            matchesStrictComparable = __webpack_require__(58);

        /**
         * The base implementation of `_.matches` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }

        module.exports = baseMatches;


        /***/
    }),
    /* 164 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseIsEqual = __webpack_require__(52),
            get = __webpack_require__(222),
            hasIn = __webpack_require__(223),
            isKey = __webpack_require__(30),
            isStrictComparable = __webpack_require__(57),
            matchesStrictComparable = __webpack_require__(58),
            toKey = __webpack_require__(25);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

        /**
         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
         *
         * @private
         * @param {string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
                var objValue = get(object, path);
                return (objValue === undefined && objValue === srcValue) ?
                    hasIn(object, path) :
                    baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }

        module.exports = baseMatchesProperty;


        /***/
    }),
    /* 165 */
    /***/
    (function(module, exports) {

        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function baseProperty(key) {
            return function(object) {
                return object == null ? undefined : object[key];
            };
        }

        module.exports = baseProperty;


        /***/
    }),
    /* 166 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseGet = __webpack_require__(51);

        /**
         * A specialized version of `baseProperty` which supports deep paths.
         *
         * @private
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyDeep(path) {
            return function(object) {
                return baseGet(object, path);
            };
        }

        module.exports = basePropertyDeep;


        /***/
    }),
    /* 167 */
    /***/
    (function(module, exports, __webpack_require__) {

        var identity = __webpack_require__(31),
            overRest = __webpack_require__(208),
            setToString = __webpack_require__(212);

        /**
         * The base implementation of `_.rest` which doesn't validate or coerce arguments.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         */
        function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + '');
        }

        module.exports = baseRest;


        /***/
    }),
    /* 168 */
    /***/
    (function(module, exports, __webpack_require__) {

        var constant = __webpack_require__(221),
            defineProperty = __webpack_require__(174),
            identity = __webpack_require__(31);

        /**
         * The base implementation of `setToString` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, 'toString', {
                'configurable': true,
                'enumerable': false,
                'value': constant(string),
                'writable': true
            });
        };

        module.exports = baseSetToString;


        /***/
    }),
    /* 169 */
    /***/
    (function(module, exports) {

        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
            var index = -1,
                result = Array(n);

            while (++index < n) {
                result[index] = iteratee(index);
            }
            return result;
        }

        module.exports = baseTimes;


        /***/
    }),
    /* 170 */
    /***/
    (function(module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(21),
            arrayMap = __webpack_require__(149),
            isArray = __webpack_require__(9),
            isSymbol = __webpack_require__(26);

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolToString = symbolProto ? symbolProto.toString : undefined;

        /**
         * The base implementation of `_.toString` which doesn't convert nullish
         * values to empty strings.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {string} Returns the string.
         */
        function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == 'string') {
                return value;
            }
            if (isArray(value)) {
                // Recursively convert values (susceptible to call stack limits).
                return arrayMap(value, baseToString) + '';
            }
            if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : '';
            }
            var result = (value + '');
            return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        module.exports = baseToString;


        /***/
    }),
    /* 171 */
    /***/
    (function(module, exports) {

        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
            return function(value) {
                return func(value);
            };
        }

        module.exports = baseUnary;


        /***/
    }),
    /* 172 */
    /***/
    (function(module, exports) {

        /**
         * Checks if a `cache` value for `key` exists.
         *
         * @private
         * @param {Object} cache The cache to query.
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function cacheHas(cache, key) {
            return cache.has(key);
        }

        module.exports = cacheHas;


        /***/
    }),
    /* 173 */
    /***/
    (function(module, exports, __webpack_require__) {

        var root = __webpack_require__(8);

        /** Used to detect overreaching core-js shims. */
        var coreJsData = root['__core-js_shared__'];

        module.exports = coreJsData;


        /***/
    }),
    /* 174 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(12);

        var defineProperty = (function() {
            try {
                var func = getNative(Object, 'defineProperty');
                func({}, '', {});
                return func;
            } catch (e) {}
        }());

        module.exports = defineProperty;


        /***/
    }),
    /* 175 */
    /***/
    (function(module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(21),
            Uint8Array = __webpack_require__(144),
            eq = __webpack_require__(61),
            equalArrays = __webpack_require__(54),
            mapToArray = __webpack_require__(202),
            setToArray = __webpack_require__(211);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

        /** `Object#toString` result references. */
        var boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            errorTag = '[object Error]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            symbolTag = '[object Symbol]';

        var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]';

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

        /**
         * A specialized version of `baseIsEqualDeep` for comparing objects of
         * the same `toStringTag`.
         *
         * **Note:** This function only supports comparing values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {string} tag The `toStringTag` of the objects to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
                case dataViewTag:
                    if ((object.byteLength != other.byteLength) ||
                        (object.byteOffset != other.byteOffset)) {
                        return false;
                    }
                    object = object.buffer;
                    other = other.buffer;

                case arrayBufferTag:
                    if ((object.byteLength != other.byteLength) ||
                        !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                        return false;
                    }
                    return true;

                case boolTag:
                case dateTag:
                case numberTag:
                    // Coerce booleans to `1` or `0` and dates to milliseconds.
                    // Invalid dates are coerced to `NaN`.
                    return eq(+object, +other);

                case errorTag:
                    return object.name == other.name && object.message == other.message;

                case regexpTag:
                case stringTag:
                    // Coerce regexes to strings and treat strings, primitives and objects,
                    // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                    // for more details.
                    return object == (other + '');

                case mapTag:
                    var convert = mapToArray;

                case setTag:
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                    convert || (convert = setToArray);

                    if (object.size != other.size && !isPartial) {
                        return false;
                    }
                    // Assume cyclic values are equal.
                    var stacked = stack.get(object);
                    if (stacked) {
                        return stacked == other;
                    }
                    bitmask |= COMPARE_UNORDERED_FLAG;

                    // Recursively compare objects (susceptible to call stack limits).
                    stack.set(object, other);
                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                    stack['delete'](object);
                    return result;

                case symbolTag:
                    if (symbolValueOf) {
                        return symbolValueOf.call(object) == symbolValueOf.call(other);
                    }
            }
            return false;
        }

        module.exports = equalByTag;


        /***/
    }),
    /* 176 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getAllKeys = __webpack_require__(177);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1;

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * A specialized version of `baseIsEqualDeep` for objects with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                objProps = getAllKeys(object),
                objLength = objProps.length,
                othProps = getAllKeys(other),
                othLength = othProps.length;

            if (objLength != othLength && !isPartial) {
                return false;
            }
            var index = objLength;
            while (index--) {
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                    return false;
                }
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked && stack.get(other)) {
                return stacked == other;
            }
            var result = true;
            stack.set(object, other);
            stack.set(other, object);

            var skipCtor = isPartial;
            while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key],
                    othValue = other[key];

                if (customizer) {
                    var compared = isPartial ?
                        customizer(othValue, objValue, key, other, object, stack) :
                        customizer(objValue, othValue, key, object, other, stack);
                }
                // Recursively compare objects (susceptible to call stack limits).
                if (!(compared === undefined ?
                        (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack)) :
                        compared
                    )) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == 'constructor');
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor,
                    othCtor = other.constructor;

                // Non `Object` object instances with different constructors are not equal.
                if (objCtor != othCtor &&
                    ('constructor' in object && 'constructor' in other) &&
                    !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                        typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                    result = false;
                }
            }
            stack['delete'](object);
            stack['delete'](other);
            return result;
        }

        module.exports = equalObjects;


        /***/
    }),
    /* 177 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseGetAllKeys = __webpack_require__(154),
            getSymbols = __webpack_require__(180),
            keys = __webpack_require__(67);

        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }

        module.exports = getAllKeys;


        /***/
    }),
    /* 178 */
    /***/
    (function(module, exports, __webpack_require__) {

        var isStrictComparable = __webpack_require__(57),
            keys = __webpack_require__(67);

        /**
         * Gets the property names, values, and compare flags of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the match data of `object`.
         */
        function getMatchData(object) {
            var result = keys(object),
                length = result.length;

            while (length--) {
                var key = result[length],
                    value = object[key];

                result[length] = [key, value, isStrictComparable(value)];
            }
            return result;
        }

        module.exports = getMatchData;


        /***/
    }),
    /* 179 */
    /***/
    (function(module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(21);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /** Built-in value references. */
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag),
                tag = value[symToStringTag];

            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {}

            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) {
                    value[symToStringTag] = tag;
                } else {
                    delete value[symToStringTag];
                }
            }
            return result;
        }

        module.exports = getRawTag;


        /***/
    }),
    /* 180 */
    /***/
    (function(module, exports, __webpack_require__) {

        var arrayFilter = __webpack_require__(147),
            stubArray = __webpack_require__(229);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Built-in value references. */
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeGetSymbols = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
                return [];
            }
            object = Object(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        };

        module.exports = getSymbols;


        /***/
    }),
    /* 181 */
    /***/
    (function(module, exports, __webpack_require__) {

        var DataView = __webpack_require__(139),
            Map = __webpack_require__(28),
            Promise = __webpack_require__(141),
            Set = __webpack_require__(142),
            WeakMap = __webpack_require__(145),
            baseGetTag = __webpack_require__(18),
            toSource = __webpack_require__(59);

        /** `Object#toString` result references. */
        var mapTag = '[object Map]',
            objectTag = '[object Object]',
            promiseTag = '[object Promise]',
            setTag = '[object Set]',
            weakMapTag = '[object WeakMap]';

        var dataViewTag = '[object DataView]';

        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap);

        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = baseGetTag;

        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set) != setTag) ||
            (WeakMap && getTag(new WeakMap) != weakMapTag)) {
            getTag = function(value) {
                var result = baseGetTag(value),
                    Ctor = result == objectTag ? value.constructor : undefined,
                    ctorString = Ctor ? toSource(Ctor) : '';

                if (ctorString) {
                    switch (ctorString) {
                        case dataViewCtorString:
                            return dataViewTag;
                        case mapCtorString:
                            return mapTag;
                        case promiseCtorString:
                            return promiseTag;
                        case setCtorString:
                            return setTag;
                        case weakMapCtorString:
                            return weakMapTag;
                    }
                }
                return result;
            };
        }

        module.exports = getTag;


        /***/
    }),
    /* 182 */
    /***/
    (function(module, exports) {

        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
            return object == null ? undefined : object[key];
        }

        module.exports = getValue;


        /***/
    }),
    /* 183 */
    /***/
    (function(module, exports, __webpack_require__) {

        var castPath = __webpack_require__(53),
            isArguments = __webpack_require__(63),
            isArray = __webpack_require__(9),
            isIndex = __webpack_require__(56),
            isLength = __webpack_require__(32),
            toKey = __webpack_require__(25);

        /**
         * Checks if `path` exists on `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @param {Function} hasFunc The function to check properties.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         */
        function hasPath(object, path, hasFunc) {
            path = castPath(path, object);

            var index = -1,
                length = path.length,
                result = false;

            while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                    break;
                }
                object = object[key];
            }
            if (result || ++index != length) {
                return result;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) &&
                (isArray(object) || isArguments(object));
        }

        module.exports = hasPath;


        /***/
    }),
    /* 184 */
    /***/
    (function(module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(24);

        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
        }

        module.exports = hashClear;


        /***/
    }),
    /* 185 */
    /***/
    (function(module, exports) {

        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }

        module.exports = hashDelete;


        /***/
    }),
    /* 186 */
    /***/
    (function(module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(24);

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }

        module.exports = hashGet;


        /***/
    }),
    /* 187 */
    /***/
    (function(module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(24);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
        }

        module.exports = hashHas;


        /***/
    }),
    /* 188 */
    /***/
    (function(module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(24);

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
            return this;
        }

        module.exports = hashSet;


        /***/
    }),
    /* 189 */
    /***/
    (function(module, exports) {

        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
            var type = typeof value;
            return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean') ?
                (value !== '__proto__') :
                (value === null);
        }

        module.exports = isKeyable;


        /***/
    }),
    /* 190 */
    /***/
    (function(module, exports, __webpack_require__) {

        var coreJsData = __webpack_require__(173);

        /** Used to detect methods masquerading as native. */
        var maskSrcKey = (function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
            return uid ? ('Symbol(src)_1.' + uid) : '';
        }());

        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
            return !!maskSrcKey && (maskSrcKey in func);
        }

        module.exports = isMasked;


        /***/
    }),
    /* 191 */
    /***/
    (function(module, exports) {

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
            var Ctor = value && value.constructor,
                proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

            return value === proto;
        }

        module.exports = isPrototype;


        /***/
    }),
    /* 192 */
    /***/
    (function(module, exports) {

        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }

        module.exports = listCacheClear;


        /***/
    }),
    /* 193 */
    /***/
    (function(module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(22);

        /** Used for built-in method references. */
        var arrayProto = Array.prototype;

        /** Built-in value references. */
        var splice = arrayProto.splice;

        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
            var data = this.__data__,
                index = assocIndexOf(data, key);

            if (index < 0) {
                return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
                data.pop();
            } else {
                splice.call(data, index, 1);
            }
            --this.size;
            return true;
        }

        module.exports = listCacheDelete;


        /***/
    }),
    /* 194 */
    /***/
    (function(module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(22);

        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
            var data = this.__data__,
                index = assocIndexOf(data, key);

            return index < 0 ? undefined : data[index][1];
        }

        module.exports = listCacheGet;


        /***/
    }),
    /* 195 */
    /***/
    (function(module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(22);

        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }

        module.exports = listCacheHas;


        /***/
    }),
    /* 196 */
    /***/
    (function(module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(22);

        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
            var data = this.__data__,
                index = assocIndexOf(data, key);

            if (index < 0) {
                ++this.size;
                data.push([key, value]);
            } else {
                data[index][1] = value;
            }
            return this;
        }

        module.exports = listCacheSet;


        /***/
    }),
    /* 197 */
    /***/
    (function(module, exports, __webpack_require__) {

        var Hash = __webpack_require__(140),
            ListCache = __webpack_require__(20),
            Map = __webpack_require__(28);

        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                'hash': new Hash,
                'map': new(Map || ListCache),
                'string': new Hash
            };
        }

        module.exports = mapCacheClear;


        /***/
    }),
    /* 198 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(23);

        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
            var result = getMapData(this, key)['delete'](key);
            this.size -= result ? 1 : 0;
            return result;
        }

        module.exports = mapCacheDelete;


        /***/
    }),
    /* 199 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(23);

        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }

        module.exports = mapCacheGet;


        /***/
    }),
    /* 200 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(23);

        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }

        module.exports = mapCacheHas;


        /***/
    }),
    /* 201 */
    /***/
    (function(module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(23);

        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
            var data = getMapData(this, key),
                size = data.size;

            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }

        module.exports = mapCacheSet;


        /***/
    }),
    /* 202 */
    /***/
    (function(module, exports) {

        /**
         * Converts `map` to its key-value pairs.
         *
         * @private
         * @param {Object} map The map to convert.
         * @returns {Array} Returns the key-value pairs.
         */
        function mapToArray(map) {
            var index = -1,
                result = Array(map.size);

            map.forEach(function(value, key) {
                result[++index] = [key, value];
            });
            return result;
        }

        module.exports = mapToArray;


        /***/
    }),
    /* 203 */
    /***/
    (function(module, exports, __webpack_require__) {

        var memoize = __webpack_require__(225);

        /** Used as the maximum memoize cache size. */
        var MAX_MEMOIZE_SIZE = 500;

        /**
         * A specialized version of `_.memoize` which clears the memoized function's
         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
         *
         * @private
         * @param {Function} func The function to have its output memoized.
         * @returns {Function} Returns the new memoized function.
         */
        function memoizeCapped(func) {
            var result = memoize(func, function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                    cache.clear();
                }
                return key;
            });

            var cache = result.cache;
            return result;
        }

        module.exports = memoizeCapped;


        /***/
    }),
    /* 204 */
    /***/
    (function(module, exports, __webpack_require__) {

        var overArg = __webpack_require__(207);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeKeys = overArg(Object.keys, Object);

        module.exports = nativeKeys;


        /***/
    }),
    /* 205 */
    /***/
    (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(module) {
            var freeGlobal = __webpack_require__(55);

            /** Detect free variable `exports`. */
            var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Detect free variable `process` from Node.js. */
            var freeProcess = moduleExports && freeGlobal.process;

            /** Used to access faster Node.js helpers. */
            var nodeUtil = (function() {
                try {
                    // Use `util.types` for Node.js 10+.
                    var types = freeModule && freeModule.require && freeModule.require('util').types;

                    if (types) {
                        return types;
                    }

                    // Legacy `process.binding('util')` for Node.js < 10.
                    return freeProcess && freeProcess.binding && freeProcess.binding('util');
                } catch (e) {}
            }());

            module.exports = nodeUtil;

            /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(72)(module)))

        /***/
    }),
    /* 206 */
    /***/
    (function(module, exports) {

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
            return nativeObjectToString.call(value);
        }

        module.exports = objectToString;


        /***/
    }),
    /* 207 */
    /***/
    (function(module, exports) {

        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
            return function(arg) {
                return func(transform(arg));
            };
        }

        module.exports = overArg;


        /***/
    }),
    /* 208 */
    /***/
    (function(module, exports, __webpack_require__) {

        var apply = __webpack_require__(146);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */
        function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
            return function() {
                var args = arguments,
                    index = -1,
                    length = nativeMax(args.length - start, 0),
                    array = Array(length);

                while (++index < length) {
                    array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                    otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }

        module.exports = overRest;


        /***/
    }),
    /* 209 */
    /***/
    (function(module, exports) {

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /**
         * Adds `value` to the array cache.
         *
         * @private
         * @name add
         * @memberOf SetCache
         * @alias push
         * @param {*} value The value to cache.
         * @returns {Object} Returns the cache instance.
         */
        function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }

        module.exports = setCacheAdd;


        /***/
    }),
    /* 210 */
    /***/
    (function(module, exports) {

        /**
         * Checks if `value` is in the array cache.
         *
         * @private
         * @name has
         * @memberOf SetCache
         * @param {*} value The value to search for.
         * @returns {number} Returns `true` if `value` is found, else `false`.
         */
        function setCacheHas(value) {
            return this.__data__.has(value);
        }

        module.exports = setCacheHas;


        /***/
    }),
    /* 211 */
    /***/
    (function(module, exports) {

        /**
         * Converts `set` to an array of its values.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the values.
         */
        function setToArray(set) {
            var index = -1,
                result = Array(set.size);

            set.forEach(function(value) {
                result[++index] = value;
            });
            return result;
        }

        module.exports = setToArray;


        /***/
    }),
    /* 212 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseSetToString = __webpack_require__(168),
            shortOut = __webpack_require__(213);

        /**
         * Sets the `toString` method of `func` to return `string`.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var setToString = shortOut(baseSetToString);

        module.exports = setToString;


        /***/
    }),
    /* 213 */
    /***/
    (function(module, exports) {

        /** Used to detect hot functions by number of calls within a span of milliseconds. */
        var HOT_COUNT = 800,
            HOT_SPAN = 16;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeNow = Date.now;

        /**
         * Creates a function that'll short out and invoke `identity` instead
         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
         * milliseconds.
         *
         * @private
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new shortable function.
         */
        function shortOut(func) {
            var count = 0,
                lastCalled = 0;

            return function() {
                var stamp = nativeNow(),
                    remaining = HOT_SPAN - (stamp - lastCalled);

                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) {
                        return arguments[0];
                    }
                } else {
                    count = 0;
                }
                return func.apply(undefined, arguments);
            };
        }

        module.exports = shortOut;


        /***/
    }),
    /* 214 */
    /***/
    (function(module, exports, __webpack_require__) {

        var ListCache = __webpack_require__(20);

        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
            this.__data__ = new ListCache;
            this.size = 0;
        }

        module.exports = stackClear;


        /***/
    }),
    /* 215 */
    /***/
    (function(module, exports) {

        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
            var data = this.__data__,
                result = data['delete'](key);

            this.size = data.size;
            return result;
        }

        module.exports = stackDelete;


        /***/
    }),
    /* 216 */
    /***/
    (function(module, exports) {

        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
            return this.__data__.get(key);
        }

        module.exports = stackGet;


        /***/
    }),
    /* 217 */
    /***/
    (function(module, exports) {

        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
            return this.__data__.has(key);
        }

        module.exports = stackHas;


        /***/
    }),
    /* 218 */
    /***/
    (function(module, exports, __webpack_require__) {

        var ListCache = __webpack_require__(20),
            Map = __webpack_require__(28),
            MapCache = __webpack_require__(29);

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;

        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                    pairs.push([key, value]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }

        module.exports = stackSet;


        /***/
    }),
    /* 219 */
    /***/
    (function(module, exports, __webpack_require__) {

        var memoizeCapped = __webpack_require__(203);

        /** Used to match property names within property paths. */
        var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

        /** Used to match backslashes in property paths. */
        var reEscapeChar = /\\(\\)?/g;

        /**
         * Converts `string` to a property path array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the property path array.
         */
        var stringToPath = memoizeCapped(function(string) {
            var result = [];
            if (string.charCodeAt(0) === 46 /* . */ ) {
                result.push('');
            }
            string.replace(rePropName, function(match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
            });
            return result;
        });

        module.exports = stringToPath;


        /***/
    }),
    /* 220 */
    /***/
    (function(module, exports, __webpack_require__) {

        var toInteger = __webpack_require__(69);

        /** Error message constants. */
        var FUNC_ERROR_TEXT = 'Expected a function';

        /**
         * Creates a function that invokes `func`, with the `this` binding and arguments
         * of the created function, while it's called less than `n` times. Subsequent
         * calls to the created function return the result of the last `func` invocation.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {number} n The number of calls at which `func` is no longer invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * jQuery(element).on('click', _.before(5, addContactToList));
         * // => Allows adding up to 4 contacts to the list.
         */
        function before(n, func) {
            var result;
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
                if (--n > 0) {
                    result = func.apply(this, arguments);
                }
                if (n <= 1) {
                    func = undefined;
                }
                return result;
            };
        }

        module.exports = before;


        /***/
    }),
    /* 221 */
    /***/
    (function(module, exports) {

        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */
        function constant(value) {
            return function() {
                return value;
            };
        }

        module.exports = constant;


        /***/
    }),
    /* 222 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseGet = __webpack_require__(51);

        /**
         * Gets the value at `path` of `object`. If the resolved value is
         * `undefined`, the `defaultValue` is returned in its place.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.get(object, 'a[0].b.c');
         * // => 3
         *
         * _.get(object, ['a', '0', 'b', 'c']);
         * // => 3
         *
         * _.get(object, 'a.b.c', 'default');
         * // => 'default'
         */
        function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }

        module.exports = get;


        /***/
    }),
    /* 223 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseHasIn = __webpack_require__(155),
            hasPath = __webpack_require__(183);

        /**
         * Checks if `path` is a direct or inherited property of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.hasIn(object, 'a');
         * // => true
         *
         * _.hasIn(object, 'a.b');
         * // => true
         *
         * _.hasIn(object, ['a', 'b']);
         * // => true
         *
         * _.hasIn(object, 'b');
         * // => false
         */
        function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }

        module.exports = hasIn;


        /***/
    }),
    /* 224 */
    /***/
    (function(module, exports, __webpack_require__) {

        var isFunction = __webpack_require__(65),
            isLength = __webpack_require__(32);

        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }

        module.exports = isArrayLike;


        /***/
    }),
    /* 225 */
    /***/
    (function(module, exports, __webpack_require__) {

        var MapCache = __webpack_require__(29);

        /** Error message constants. */
        var FUNC_ERROR_TEXT = 'Expected a function';

        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided, it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is used as the map cache key. The `func`
         * is invoked with the `this` binding of the memoized function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the
         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoized function.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         * var other = { 'c': 3, 'd': 4 };
         *
         * var values = _.memoize(_.values);
         * values(object);
         * // => [1, 2]
         *
         * values(other);
         * // => [3, 4]
         *
         * object.a = 2;
         * values(object);
         * // => [1, 2]
         *
         * // Modify the result cache.
         * values.cache.set(object, ['a', 'b']);
         * values(object);
         * // => ['a', 'b']
         *
         * // Replace `_.memoize.Cache`.
         * _.memoize.Cache = WeakMap;
         */
        function memoize(func, resolver) {
            if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
                var args = arguments,
                    key = resolver ? resolver.apply(this, args) : args[0],
                    cache = memoized.cache;

                if (cache.has(key)) {
                    return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new(memoize.Cache || MapCache);
            return memoized;
        }

        // Expose `MapCache`.
        memoize.Cache = MapCache;

        module.exports = memoize;


        /***/
    }),
    /* 226 */
    /***/
    (function(module, exports, __webpack_require__) {

        var root = __webpack_require__(8);

        /**
         * Gets the timestamp of the number of milliseconds that have elapsed since
         * the Unix epoch (1 January 1970 00:00:00 UTC).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Date
         * @returns {number} Returns the timestamp.
         * @example
         *
         * _.defer(function(stamp) {
         *   console.log(_.now() - stamp);
         * }, _.now());
         * // => Logs the number of milliseconds it took for the deferred invocation.
         */
        var now = function() {
            return root.Date.now();
        };

        module.exports = now;


        /***/
    }),
    /* 227 */
    /***/
    (function(module, exports, __webpack_require__) {

        var before = __webpack_require__(220);

        /**
         * Creates a function that is restricted to invoking `func` once. Repeat calls
         * to the function return the value of the first invocation. The `func` is
         * invoked with the `this` binding and arguments of the created function.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var initialize = _.once(createApplication);
         * initialize();
         * initialize();
         * // => `createApplication` is invoked once
         */
        function once(func) {
            return before(2, func);
        }

        module.exports = once;


        /***/
    }),
    /* 228 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseProperty = __webpack_require__(165),
            basePropertyDeep = __webpack_require__(166),
            isKey = __webpack_require__(30),
            toKey = __webpack_require__(25);

        /**
         * Creates a function that returns the value at `path` of a given object.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': 2 } },
         *   { 'a': { 'b': 1 } }
         * ];
         *
         * _.map(objects, _.property('a.b'));
         * // => [2, 1]
         *
         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
         * // => [1, 2]
         */
        function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }

        module.exports = property;


        /***/
    }),
    /* 229 */
    /***/
    (function(module, exports) {

        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
            return [];
        }

        module.exports = stubArray;


        /***/
    }),
    /* 230 */
    /***/
    (function(module, exports) {

        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
            return false;
        }

        module.exports = stubFalse;


        /***/
    }),
    /* 231 */
    /***/
    (function(module, exports, __webpack_require__) {

        var toNumber = __webpack_require__(33);

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0,
            MAX_INTEGER = 1.7976931348623157e+308;

        /**
         * Converts `value` to a finite number.
         *
         * @static
         * @memberOf _
         * @since 4.12.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted number.
         * @example
         *
         * _.toFinite(3.2);
         * // => 3.2
         *
         * _.toFinite(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toFinite(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toFinite('3.2');
         * // => 3.2
         */
        function toFinite(value) {
            if (!value) {
                return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = (value < 0 ? -1 : 1);
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }

        module.exports = toFinite;


        /***/
    }),
    /* 232 */
    /***/
    (function(module, exports, __webpack_require__) {

        var baseToString = __webpack_require__(170);

        /**
         * Converts `value` to a string. An empty string is returned for `null`
         * and `undefined` values. The sign of `-0` is preserved.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.toString(null);
         * // => ''
         *
         * _.toString(-0);
         * // => '-0'
         *
         * _.toString([1, 2, 3]);
         * // => '1,2,3'
         */
        function toString(value) {
            return value == null ? '' : baseToString(value);
        }

        module.exports = toString;


        /***/
    }),
    /* 233 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";
        /*
        object-assign
        (c) Sindre Sorhus
        @license MIT
        */


        /* eslint-disable no-unused-vars */
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;

        function toObject(val) {
            if (val === null || val === undefined) {
                throw new TypeError('Object.assign cannot be called with null or undefined');
            }

            return Object(val);
        }

        function shouldUseNative() {
            try {
                if (!Object.assign) {
                    return false;
                }

                // Detect buggy property enumeration order in older V8 versions.

                // https://bugs.chromium.org/p/v8/issues/detail?id=4118
                var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
                test1[5] = 'de';
                if (Object.getOwnPropertyNames(test1)[0] === '5') {
                    return false;
                }

                // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                var test2 = {};
                for (var i = 0; i < 10; i++) {
                    test2['_' + String.fromCharCode(i)] = i;
                }
                var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
                    return test2[n];
                });
                if (order2.join('') !== '0123456789') {
                    return false;
                }

                // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                var test3 = {};
                'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
                    test3[letter] = letter;
                });
                if (Object.keys(Object.assign({}, test3)).join('') !==
                    'abcdefghijklmnopqrst') {
                    return false;
                }

                return true;
            } catch (err) {
                // We don't expect any of the above to throw, but better to be safe.
                return false;
            }
        }

        module.exports = shouldUseNative() ? Object.assign : function(target, source) {
            var from;
            var to = toObject(target);
            var symbols;

            for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);

                for (var key in from) {
                    if (hasOwnProperty.call(from, key)) {
                        to[key] = from[key];
                    }
                }

                if (getOwnPropertySymbols) {
                    symbols = getOwnPropertySymbols(from);
                    for (var i = 0; i < symbols.length; i++) {
                        if (propIsEnumerable.call(from, symbols[i])) {
                            to[symbols[i]] = from[symbols[i]];
                        }
                    }
                }
            }

            return to;
        };


        /***/
    }),
    /* 234 */
    /***/
    (function(module, exports) {

        // shim for using process in browser
        var process = module.exports = {};

        // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
            throw new Error('setTimeout has not been defined');
        }

        function defaultClearTimeout() {
            throw new Error('clearTimeout has not been defined');
        }
        (function() {
            try {
                if (typeof setTimeout === 'function') {
                    cachedSetTimeout = setTimeout;
                } else {
                    cachedSetTimeout = defaultSetTimout;
                }
            } catch (e) {
                cachedSetTimeout = defaultSetTimout;
            }
            try {
                if (typeof clearTimeout === 'function') {
                    cachedClearTimeout = clearTimeout;
                } else {
                    cachedClearTimeout = defaultClearTimeout;
                }
            } catch (e) {
                cachedClearTimeout = defaultClearTimeout;
            }
        }())

        function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
                //normal enviroments in sane situations
                return setTimeout(fun, 0);
            }
            // if setTimeout wasn't available but was latter defined
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedSetTimeout(fun, 0);
            } catch (e) {
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0);
                } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0);
                }
            }


        }

        function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
                //normal enviroments in sane situations
                return clearTimeout(marker);
            }
            // if clearTimeout wasn't available but was latter defined
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedClearTimeout(marker);
            } catch (e) {
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker);
                } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                    return cachedClearTimeout.call(this, marker);
                }
            }



        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
            if (!draining || !currentQueue) {
                return;
            }
            draining = false;
            if (currentQueue.length) {
                queue = currentQueue.concat(queue);
            } else {
                queueIndex = -1;
            }
            if (queue.length) {
                drainQueue();
            }
        }

        function drainQueue() {
            if (draining) {
                return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;

            var len = queue.length;
            while (len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                    if (currentQueue) {
                        currentQueue[queueIndex].run();
                    }
                }
                queueIndex = -1;
                len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
        }

        process.nextTick = function(fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
            }
        };

        // v8 likes predictible objects
        function Item(fun, array) {
            this.fun = fun;
            this.array = array;
        }
        Item.prototype.run = function() {
            this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function(name) {
            return []
        }

        process.binding = function(name) {
            throw new Error('process.binding is not supported');
        };

        process.cwd = function() {
            return '/'
        };
        process.chdir = function(dir) {
            throw new Error('process.chdir is not supported');
        };
        process.umask = function() {
            return 0;
        };


        /***/
    }),
    /* 235 */
    /***/
    (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global, process) {
            (function(global, undefined) {
                "use strict";

                if (global.setImmediate) {
                    return;
                }

                var nextHandle = 1; // Spec says greater than zero
                var tasksByHandle = {};
                var currentlyRunningATask = false;
                var doc = global.document;
                var registerImmediate;

                function setImmediate(callback) {
                    // Callback can either be a function or a string
                    if (typeof callback !== "function") {
                        callback = new Function("" + callback);
                    }
                    // Copy function arguments
                    var args = new Array(arguments.length - 1);
                    for (var i = 0; i < args.length; i++) {
                        args[i] = arguments[i + 1];
                    }
                    // Store and register the task
                    var task = {
                        callback: callback,
                        args: args
                    };
                    tasksByHandle[nextHandle] = task;
                    registerImmediate(nextHandle);
                    return nextHandle++;
                }

                function clearImmediate(handle) {
                    delete tasksByHandle[handle];
                }

                function run(task) {
                    var callback = task.callback;
                    var args = task.args;
                    switch (args.length) {
                        case 0:
                            callback();
                            break;
                        case 1:
                            callback(args[0]);
                            break;
                        case 2:
                            callback(args[0], args[1]);
                            break;
                        case 3:
                            callback(args[0], args[1], args[2]);
                            break;
                        default:
                            callback.apply(undefined, args);
                            break;
                    }
                }

                function runIfPresent(handle) {
                    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
                    // So if we're currently running a task, we'll need to delay this invocation.
                    if (currentlyRunningATask) {
                        // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
                        // "too much recursion" error.
                        setTimeout(runIfPresent, 0, handle);
                    } else {
                        var task = tasksByHandle[handle];
                        if (task) {
                            currentlyRunningATask = true;
                            try {
                                run(task);
                            } finally {
                                clearImmediate(handle);
                                currentlyRunningATask = false;
                            }
                        }
                    }
                }

                function installNextTickImplementation() {
                    registerImmediate = function(handle) {
                        process.nextTick(function() {
                            runIfPresent(handle);
                        });
                    };
                }

                function canUsePostMessage() {
                    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
                    // where `global.postMessage` means something completely different and can't be used for this purpose.
                    if (global.postMessage && !global.importScripts) {
                        var postMessageIsAsynchronous = true;
                        var oldOnMessage = global.onmessage;
                        global.onmessage = function() {
                            postMessageIsAsynchronous = false;
                        };
                        global.postMessage("", "*");
                        global.onmessage = oldOnMessage;
                        return postMessageIsAsynchronous;
                    }
                }

                function installPostMessageImplementation() {
                    // Installs an event handler on `global` for the `message` event: see
                    // * https://developer.mozilla.org/en/DOM/window.postMessage
                    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

                    var messagePrefix = "setImmediate$" + Math.random() + "$";
                    var onGlobalMessage = function(event) {
                        if (event.source === global &&
                            typeof event.data === "string" &&
                            event.data.indexOf(messagePrefix) === 0) {
                            runIfPresent(+event.data.slice(messagePrefix.length));
                        }
                    };

                    if (global.addEventListener) {
                        global.addEventListener("message", onGlobalMessage, false);
                    } else {
                        global.attachEvent("onmessage", onGlobalMessage);
                    }

                    registerImmediate = function(handle) {
                        global.postMessage(messagePrefix + handle, "*");
                    };
                }

                function installMessageChannelImplementation() {
                    var channel = new MessageChannel();
                    channel.port1.onmessage = function(event) {
                        var handle = event.data;
                        runIfPresent(handle);
                    };

                    registerImmediate = function(handle) {
                        channel.port2.postMessage(handle);
                    };
                }

                function installReadyStateChangeImplementation() {
                    var html = doc.documentElement;
                    registerImmediate = function(handle) {
                        // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                        // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                        var script = doc.createElement("script");
                        script.onreadystatechange = function() {
                            runIfPresent(handle);
                            script.onreadystatechange = null;
                            html.removeChild(script);
                            script = null;
                        };
                        html.appendChild(script);
                    };
                }

                function installSetTimeoutImplementation() {
                    registerImmediate = function(handle) {
                        setTimeout(runIfPresent, 0, handle);
                    };
                }

                // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
                var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
                attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

                // Don't get fooled by e.g. browserify environments.
                if ({}.toString.call(global.process) === "[object process]") {
                    // For Node.js before 0.9
                    installNextTickImplementation();

                } else if (canUsePostMessage()) {
                    // For non-IE10 modern browsers
                    installPostMessageImplementation();

                } else if (global.MessageChannel) {
                    // For web workers, where supported
                    installMessageChannelImplementation();

                } else if (doc && "onreadystatechange" in doc.createElement("script")) {
                    // For IE 6–8
                    installReadyStateChangeImplementation();

                } else {
                    // For older browsers
                    installSetTimeoutImplementation();
                }

                attachTo.setImmediate = setImmediate;
                attachTo.clearImmediate = clearImmediate;
            }(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

            /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(15), __webpack_require__(234)))

        /***/
    }),
    /* 236 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "WebGLRenderTargetCube", function() {
            return WebGLRenderTargetCube;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "WebGLRenderTarget", function() {
            return WebGLRenderTarget;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "WebGLRenderer", function() {
            return WebGLRenderer;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ShaderLib", function() {
            return ShaderLib;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UniformsLib", function() {
            return UniformsLib;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UniformsUtils", function() {
            return UniformsUtils;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ShaderChunk", function() {
            return ShaderChunk;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FogExp2", function() {
            return FogExp2;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Fog", function() {
            return Fog;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Scene", function() {
            return Scene;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LensFlare", function() {
            return LensFlare;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Sprite", function() {
            return Sprite;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LOD", function() {
            return LOD;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SkinnedMesh", function() {
            return SkinnedMesh;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Skeleton", function() {
            return Skeleton;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Bone", function() {
            return Bone;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Mesh", function() {
            return Mesh;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LineSegments", function() {
            return LineSegments;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Line", function() {
            return Line;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Points", function() {
            return Points;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Group", function() {
            return Group;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "VideoTexture", function() {
            return VideoTexture;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DataTexture", function() {
            return DataTexture;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CompressedTexture", function() {
            return CompressedTexture;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CubeTexture", function() {
            return CubeTexture;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CanvasTexture", function() {
            return CanvasTexture;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DepthTexture", function() {
            return DepthTexture;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Texture", function() {
            return Texture;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CompressedTextureLoader", function() {
            return CompressedTextureLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DataTextureLoader", function() {
            return DataTextureLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CubeTextureLoader", function() {
            return CubeTextureLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TextureLoader", function() {
            return TextureLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ObjectLoader", function() {
            return ObjectLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MaterialLoader", function() {
            return MaterialLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BufferGeometryLoader", function() {
            return BufferGeometryLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DefaultLoadingManager", function() {
            return DefaultLoadingManager;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LoadingManager", function() {
            return LoadingManager;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "JSONLoader", function() {
            return JSONLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ImageLoader", function() {
            return ImageLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FontLoader", function() {
            return FontLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FileLoader", function() {
            return FileLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Loader", function() {
            return Loader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Cache", function() {
            return Cache;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AudioLoader", function() {
            return AudioLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SpotLightShadow", function() {
            return SpotLightShadow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SpotLight", function() {
            return SpotLight;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PointLight", function() {
            return PointLight;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RectAreaLight", function() {
            return RectAreaLight;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "HemisphereLight", function() {
            return HemisphereLight;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DirectionalLightShadow", function() {
            return DirectionalLightShadow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DirectionalLight", function() {
            return DirectionalLight;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AmbientLight", function() {
            return AmbientLight;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LightShadow", function() {
            return LightShadow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Light", function() {
            return Light;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "StereoCamera", function() {
            return StereoCamera;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PerspectiveCamera", function() {
            return PerspectiveCamera;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "OrthographicCamera", function() {
            return OrthographicCamera;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CubeCamera", function() {
            return CubeCamera;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Camera", function() {
            return Camera;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AudioListener", function() {
            return AudioListener;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PositionalAudio", function() {
            return PositionalAudio;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AudioContext", function() {
            return AudioContext;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AudioAnalyser", function() {
            return AudioAnalyser;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Audio", function() {
            return Audio;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "VectorKeyframeTrack", function() {
            return VectorKeyframeTrack;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "StringKeyframeTrack", function() {
            return StringKeyframeTrack;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "QuaternionKeyframeTrack", function() {
            return QuaternionKeyframeTrack;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "NumberKeyframeTrack", function() {
            return NumberKeyframeTrack;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ColorKeyframeTrack", function() {
            return ColorKeyframeTrack;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BooleanKeyframeTrack", function() {
            return BooleanKeyframeTrack;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PropertyMixer", function() {
            return PropertyMixer;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PropertyBinding", function() {
            return PropertyBinding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "KeyframeTrack", function() {
            return KeyframeTrack;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AnimationUtils", function() {
            return AnimationUtils;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AnimationObjectGroup", function() {
            return AnimationObjectGroup;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AnimationMixer", function() {
            return AnimationMixer;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AnimationClip", function() {
            return AnimationClip;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Uniform", function() {
            return Uniform;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "InstancedBufferGeometry", function() {
            return InstancedBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BufferGeometry", function() {
            return BufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "GeometryIdCount", function() {
            return GeometryIdCount;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Geometry", function() {
            return Geometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "InterleavedBufferAttribute", function() {
            return InterleavedBufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "InstancedInterleavedBuffer", function() {
            return InstancedInterleavedBuffer;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "InterleavedBuffer", function() {
            return InterleavedBuffer;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "InstancedBufferAttribute", function() {
            return InstancedBufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Face3", function() {
            return Face3;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Object3D", function() {
            return Object3D;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Raycaster", function() {
            return Raycaster;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Layers", function() {
            return Layers;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "EventDispatcher", function() {
            return EventDispatcher;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Clock", function() {
            return Clock;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "QuaternionLinearInterpolant", function() {
            return QuaternionLinearInterpolant;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LinearInterpolant", function() {
            return LinearInterpolant;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DiscreteInterpolant", function() {
            return DiscreteInterpolant;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CubicInterpolant", function() {
            return CubicInterpolant;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Interpolant", function() {
            return Interpolant;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Triangle", function() {
            return Triangle;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Math", function() {
            return _Math;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Spherical", function() {
            return Spherical;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Cylindrical", function() {
            return Cylindrical;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Plane", function() {
            return Plane;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Frustum", function() {
            return Frustum;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Sphere", function() {
            return Sphere;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Ray", function() {
            return Ray;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Matrix4", function() {
            return Matrix4;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Matrix3", function() {
            return Matrix3;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Box3", function() {
            return Box3;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Box2", function() {
            return Box2;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Line3", function() {
            return Line3;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Euler", function() {
            return Euler;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Vector4", function() {
            return Vector4;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Vector3", function() {
            return Vector3;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Vector2", function() {
            return Vector2;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Quaternion", function() {
            return Quaternion;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Color", function() {
            return Color;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MorphBlendMesh", function() {
            return MorphBlendMesh;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ImmediateRenderObject", function() {
            return ImmediateRenderObject;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "VertexNormalsHelper", function() {
            return VertexNormalsHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SpotLightHelper", function() {
            return SpotLightHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SkeletonHelper", function() {
            return SkeletonHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PointLightHelper", function() {
            return PointLightHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RectAreaLightHelper", function() {
            return RectAreaLightHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "HemisphereLightHelper", function() {
            return HemisphereLightHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "GridHelper", function() {
            return GridHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PolarGridHelper", function() {
            return PolarGridHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FaceNormalsHelper", function() {
            return FaceNormalsHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DirectionalLightHelper", function() {
            return DirectionalLightHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CameraHelper", function() {
            return CameraHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BoxHelper", function() {
            return BoxHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ArrowHelper", function() {
            return ArrowHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AxisHelper", function() {
            return AxisHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CatmullRomCurve3", function() {
            return CatmullRomCurve3;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CubicBezierCurve3", function() {
            return CubicBezierCurve3;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "QuadraticBezierCurve3", function() {
            return QuadraticBezierCurve3;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LineCurve3", function() {
            return LineCurve3;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ArcCurve", function() {
            return ArcCurve;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "EllipseCurve", function() {
            return EllipseCurve;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SplineCurve", function() {
            return SplineCurve;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CubicBezierCurve", function() {
            return CubicBezierCurve;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "QuadraticBezierCurve", function() {
            return QuadraticBezierCurve;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LineCurve", function() {
            return LineCurve;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Shape", function() {
            return Shape;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Path", function() {
            return Path;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ShapePath", function() {
            return ShapePath;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Font", function() {
            return Font;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CurvePath", function() {
            return CurvePath;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Curve", function() {
            return Curve;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ShapeUtils", function() {
            return ShapeUtils;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SceneUtils", function() {
            return SceneUtils;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "WireframeGeometry", function() {
            return WireframeGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ParametricGeometry", function() {
            return ParametricGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ParametricBufferGeometry", function() {
            return ParametricBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TetrahedronGeometry", function() {
            return TetrahedronGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TetrahedronBufferGeometry", function() {
            return TetrahedronBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "OctahedronGeometry", function() {
            return OctahedronGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "OctahedronBufferGeometry", function() {
            return OctahedronBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "IcosahedronGeometry", function() {
            return IcosahedronGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "IcosahedronBufferGeometry", function() {
            return IcosahedronBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DodecahedronGeometry", function() {
            return DodecahedronGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DodecahedronBufferGeometry", function() {
            return DodecahedronBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PolyhedronGeometry", function() {
            return PolyhedronGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PolyhedronBufferGeometry", function() {
            return PolyhedronBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TubeGeometry", function() {
            return TubeGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TubeBufferGeometry", function() {
            return TubeBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TorusKnotGeometry", function() {
            return TorusKnotGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TorusKnotBufferGeometry", function() {
            return TorusKnotBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TorusGeometry", function() {
            return TorusGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TorusBufferGeometry", function() {
            return TorusBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TextGeometry", function() {
            return TextGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SphereGeometry", function() {
            return SphereGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SphereBufferGeometry", function() {
            return SphereBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RingGeometry", function() {
            return RingGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RingBufferGeometry", function() {
            return RingBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PlaneGeometry", function() {
            return PlaneGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PlaneBufferGeometry", function() {
            return PlaneBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LatheGeometry", function() {
            return LatheGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LatheBufferGeometry", function() {
            return LatheBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ShapeGeometry", function() {
            return ShapeGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ShapeBufferGeometry", function() {
            return ShapeBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ExtrudeGeometry", function() {
            return ExtrudeGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "EdgesGeometry", function() {
            return EdgesGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ConeGeometry", function() {
            return ConeGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ConeBufferGeometry", function() {
            return ConeBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CylinderGeometry", function() {
            return CylinderGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CylinderBufferGeometry", function() {
            return CylinderBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CircleGeometry", function() {
            return CircleGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CircleBufferGeometry", function() {
            return CircleBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BoxGeometry", function() {
            return BoxGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BoxBufferGeometry", function() {
            return BoxBufferGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ShadowMaterial", function() {
            return ShadowMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SpriteMaterial", function() {
            return SpriteMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RawShaderMaterial", function() {
            return RawShaderMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ShaderMaterial", function() {
            return ShaderMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PointsMaterial", function() {
            return PointsMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MultiMaterial", function() {
            return MultiMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MeshPhysicalMaterial", function() {
            return MeshPhysicalMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MeshStandardMaterial", function() {
            return MeshStandardMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MeshPhongMaterial", function() {
            return MeshPhongMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MeshToonMaterial", function() {
            return MeshToonMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MeshNormalMaterial", function() {
            return MeshNormalMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MeshLambertMaterial", function() {
            return MeshLambertMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MeshDepthMaterial", function() {
            return MeshDepthMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MeshBasicMaterial", function() {
            return MeshBasicMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LineDashedMaterial", function() {
            return LineDashedMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LineBasicMaterial", function() {
            return LineBasicMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Material", function() {
            return Material;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Float64BufferAttribute", function() {
            return Float64BufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Float32BufferAttribute", function() {
            return Float32BufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Uint32BufferAttribute", function() {
            return Uint32BufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Int32BufferAttribute", function() {
            return Int32BufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Uint16BufferAttribute", function() {
            return Uint16BufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Int16BufferAttribute", function() {
            return Int16BufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Uint8ClampedBufferAttribute", function() {
            return Uint8ClampedBufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Uint8BufferAttribute", function() {
            return Uint8BufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Int8BufferAttribute", function() {
            return Int8BufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BufferAttribute", function() {
            return BufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "REVISION", function() {
            return REVISION;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MOUSE", function() {
            return MOUSE;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CullFaceNone", function() {
            return CullFaceNone;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CullFaceBack", function() {
            return CullFaceBack;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CullFaceFront", function() {
            return CullFaceFront;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CullFaceFrontBack", function() {
            return CullFaceFrontBack;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FrontFaceDirectionCW", function() {
            return FrontFaceDirectionCW;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FrontFaceDirectionCCW", function() {
            return FrontFaceDirectionCCW;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BasicShadowMap", function() {
            return BasicShadowMap;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PCFShadowMap", function() {
            return PCFShadowMap;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PCFSoftShadowMap", function() {
            return PCFSoftShadowMap;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FrontSide", function() {
            return FrontSide;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BackSide", function() {
            return BackSide;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DoubleSide", function() {
            return DoubleSide;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FlatShading", function() {
            return FlatShading;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SmoothShading", function() {
            return SmoothShading;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "NoColors", function() {
            return NoColors;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FaceColors", function() {
            return FaceColors;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "VertexColors", function() {
            return VertexColors;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "NoBlending", function() {
            return NoBlending;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "NormalBlending", function() {
            return NormalBlending;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AdditiveBlending", function() {
            return AdditiveBlending;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SubtractiveBlending", function() {
            return SubtractiveBlending;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MultiplyBlending", function() {
            return MultiplyBlending;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CustomBlending", function() {
            return CustomBlending;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AddEquation", function() {
            return AddEquation;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SubtractEquation", function() {
            return SubtractEquation;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ReverseSubtractEquation", function() {
            return ReverseSubtractEquation;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MinEquation", function() {
            return MinEquation;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MaxEquation", function() {
            return MaxEquation;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ZeroFactor", function() {
            return ZeroFactor;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "OneFactor", function() {
            return OneFactor;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SrcColorFactor", function() {
            return SrcColorFactor;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "OneMinusSrcColorFactor", function() {
            return OneMinusSrcColorFactor;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SrcAlphaFactor", function() {
            return SrcAlphaFactor;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "OneMinusSrcAlphaFactor", function() {
            return OneMinusSrcAlphaFactor;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DstAlphaFactor", function() {
            return DstAlphaFactor;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "OneMinusDstAlphaFactor", function() {
            return OneMinusDstAlphaFactor;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DstColorFactor", function() {
            return DstColorFactor;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "OneMinusDstColorFactor", function() {
            return OneMinusDstColorFactor;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SrcAlphaSaturateFactor", function() {
            return SrcAlphaSaturateFactor;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "NeverDepth", function() {
            return NeverDepth;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AlwaysDepth", function() {
            return AlwaysDepth;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LessDepth", function() {
            return LessDepth;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LessEqualDepth", function() {
            return LessEqualDepth;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "EqualDepth", function() {
            return EqualDepth;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "GreaterEqualDepth", function() {
            return GreaterEqualDepth;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "GreaterDepth", function() {
            return GreaterDepth;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "NotEqualDepth", function() {
            return NotEqualDepth;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MultiplyOperation", function() {
            return MultiplyOperation;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MixOperation", function() {
            return MixOperation;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AddOperation", function() {
            return AddOperation;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "NoToneMapping", function() {
            return NoToneMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LinearToneMapping", function() {
            return LinearToneMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ReinhardToneMapping", function() {
            return ReinhardToneMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Uncharted2ToneMapping", function() {
            return Uncharted2ToneMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CineonToneMapping", function() {
            return CineonToneMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UVMapping", function() {
            return UVMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CubeReflectionMapping", function() {
            return CubeReflectionMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CubeRefractionMapping", function() {
            return CubeRefractionMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "EquirectangularReflectionMapping", function() {
            return EquirectangularReflectionMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "EquirectangularRefractionMapping", function() {
            return EquirectangularRefractionMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SphericalReflectionMapping", function() {
            return SphericalReflectionMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CubeUVReflectionMapping", function() {
            return CubeUVReflectionMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CubeUVRefractionMapping", function() {
            return CubeUVRefractionMapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RepeatWrapping", function() {
            return RepeatWrapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ClampToEdgeWrapping", function() {
            return ClampToEdgeWrapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MirroredRepeatWrapping", function() {
            return MirroredRepeatWrapping;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "NearestFilter", function() {
            return NearestFilter;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "NearestMipMapNearestFilter", function() {
            return NearestMipMapNearestFilter;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "NearestMipMapLinearFilter", function() {
            return NearestMipMapLinearFilter;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LinearFilter", function() {
            return LinearFilter;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LinearMipMapNearestFilter", function() {
            return LinearMipMapNearestFilter;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LinearMipMapLinearFilter", function() {
            return LinearMipMapLinearFilter;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UnsignedByteType", function() {
            return UnsignedByteType;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ByteType", function() {
            return ByteType;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ShortType", function() {
            return ShortType;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UnsignedShortType", function() {
            return UnsignedShortType;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "IntType", function() {
            return IntType;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UnsignedIntType", function() {
            return UnsignedIntType;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FloatType", function() {
            return FloatType;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "HalfFloatType", function() {
            return HalfFloatType;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UnsignedShort4444Type", function() {
            return UnsignedShort4444Type;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UnsignedShort5551Type", function() {
            return UnsignedShort5551Type;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UnsignedShort565Type", function() {
            return UnsignedShort565Type;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UnsignedInt248Type", function() {
            return UnsignedInt248Type;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AlphaFormat", function() {
            return AlphaFormat;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBFormat", function() {
            return RGBFormat;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBAFormat", function() {
            return RGBAFormat;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LuminanceFormat", function() {
            return LuminanceFormat;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LuminanceAlphaFormat", function() {
            return LuminanceAlphaFormat;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBEFormat", function() {
            return RGBEFormat;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DepthFormat", function() {
            return DepthFormat;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DepthStencilFormat", function() {
            return DepthStencilFormat;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGB_S3TC_DXT1_Format", function() {
            return RGB_S3TC_DXT1_Format;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT1_Format", function() {
            return RGBA_S3TC_DXT1_Format;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT3_Format", function() {
            return RGBA_S3TC_DXT3_Format;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT5_Format", function() {
            return RGBA_S3TC_DXT5_Format;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGB_PVRTC_4BPPV1_Format", function() {
            return RGB_PVRTC_4BPPV1_Format;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGB_PVRTC_2BPPV1_Format", function() {
            return RGB_PVRTC_2BPPV1_Format;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBA_PVRTC_4BPPV1_Format", function() {
            return RGBA_PVRTC_4BPPV1_Format;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBA_PVRTC_2BPPV1_Format", function() {
            return RGBA_PVRTC_2BPPV1_Format;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGB_ETC1_Format", function() {
            return RGB_ETC1_Format;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LoopOnce", function() {
            return LoopOnce;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LoopRepeat", function() {
            return LoopRepeat;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LoopPingPong", function() {
            return LoopPingPong;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "InterpolateDiscrete", function() {
            return InterpolateDiscrete;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "InterpolateLinear", function() {
            return InterpolateLinear;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "InterpolateSmooth", function() {
            return InterpolateSmooth;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ZeroCurvatureEnding", function() {
            return ZeroCurvatureEnding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ZeroSlopeEnding", function() {
            return ZeroSlopeEnding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "WrapAroundEnding", function() {
            return WrapAroundEnding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TrianglesDrawMode", function() {
            return TrianglesDrawMode;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TriangleStripDrawMode", function() {
            return TriangleStripDrawMode;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TriangleFanDrawMode", function() {
            return TriangleFanDrawMode;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LinearEncoding", function() {
            return LinearEncoding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "sRGBEncoding", function() {
            return sRGBEncoding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "GammaEncoding", function() {
            return GammaEncoding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBEEncoding", function() {
            return RGBEEncoding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LogLuvEncoding", function() {
            return LogLuvEncoding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBM7Encoding", function() {
            return RGBM7Encoding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBM16Encoding", function() {
            return RGBM16Encoding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBDEncoding", function() {
            return RGBDEncoding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BasicDepthPacking", function() {
            return BasicDepthPacking;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RGBADepthPacking", function() {
            return RGBADepthPacking;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CubeGeometry", function() {
            return BoxGeometry;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Face4", function() {
            return Face4;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LineStrip", function() {
            return LineStrip;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LinePieces", function() {
            return LinePieces;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MeshFaceMaterial", function() {
            return MeshFaceMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PointCloud", function() {
            return PointCloud;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Particle", function() {
            return Particle;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ParticleSystem", function() {
            return ParticleSystem;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PointCloudMaterial", function() {
            return PointCloudMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ParticleBasicMaterial", function() {
            return ParticleBasicMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ParticleSystemMaterial", function() {
            return ParticleSystemMaterial;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Vertex", function() {
            return Vertex;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DynamicBufferAttribute", function() {
            return DynamicBufferAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Int8Attribute", function() {
            return Int8Attribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Uint8Attribute", function() {
            return Uint8Attribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Uint8ClampedAttribute", function() {
            return Uint8ClampedAttribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Int16Attribute", function() {
            return Int16Attribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Uint16Attribute", function() {
            return Uint16Attribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Int32Attribute", function() {
            return Int32Attribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Uint32Attribute", function() {
            return Uint32Attribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Float32Attribute", function() {
            return Float32Attribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Float64Attribute", function() {
            return Float64Attribute;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ClosedSplineCurve3", function() {
            return ClosedSplineCurve3;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SplineCurve3", function() {
            return SplineCurve3;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Spline", function() {
            return Spline;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BoundingBoxHelper", function() {
            return BoundingBoxHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "EdgesHelper", function() {
            return EdgesHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "WireframeHelper", function() {
            return WireframeHelper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "XHRLoader", function() {
            return XHRLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BinaryTextureLoader", function() {
            return BinaryTextureLoader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "GeometryUtils", function() {
            return GeometryUtils;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ImageUtils", function() {
            return ImageUtils;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "Projector", function() {
            return Projector;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CanvasRenderer", function() {
            return CanvasRenderer;
        });
        // Polyfills

        if (Number.EPSILON === undefined) {

            Number.EPSILON = Math.pow(2, -52);

        }

        //

        if (Math.sign === undefined) {

            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

            Math.sign = function(x) {

                return (x < 0) ? -1 : (x > 0) ? 1 : +x;

            };

        }

        if (Function.prototype.name === undefined) {

            // Missing in IE9-11.
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

            Object.defineProperty(Function.prototype, 'name', {

                get: function() {

                    return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];

                }

            });

        }

        if (Object.assign === undefined) {

            // Missing in IE.
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

            (function() {

                Object.assign = function(target) {

                    'use strict';

                    if (target === undefined || target === null) {

                        throw new TypeError('Cannot convert undefined or null to object');

                    }

                    var output = Object(target);

                    for (var index = 1; index < arguments.length; index++) {

                        var source = arguments[index];

                        if (source !== undefined && source !== null) {

                            for (var nextKey in source) {

                                if (Object.prototype.hasOwnProperty.call(source, nextKey)) {

                                    output[nextKey] = source[nextKey];

                                }

                            }

                        }

                    }

                    return output;

                };

            })();

        }

        /**
         * https://github.com/mrdoob/eventdispatcher.js/
         */

        function EventDispatcher() {}

        EventDispatcher.prototype = {

            addEventListener: function(type, listener) {

                if (this._listeners === undefined) this._listeners = {};

                var listeners = this._listeners;

                if (listeners[type] === undefined) {

                    listeners[type] = [];

                }

                if (listeners[type].indexOf(listener) === -1) {

                    listeners[type].push(listener);

                }

            },

            hasEventListener: function(type, listener) {

                if (this._listeners === undefined) return false;

                var listeners = this._listeners;

                return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;

            },

            removeEventListener: function(type, listener) {

                if (this._listeners === undefined) return;

                var listeners = this._listeners;
                var listenerArray = listeners[type];

                if (listenerArray !== undefined) {

                    var index = listenerArray.indexOf(listener);

                    if (index !== -1) {

                        listenerArray.splice(index, 1);

                    }

                }

            },

            dispatchEvent: function(event) {

                if (this._listeners === undefined) return;

                var listeners = this._listeners;
                var listenerArray = listeners[event.type];

                if (listenerArray !== undefined) {

                    event.target = this;

                    var array = [],
                        i = 0;
                    var length = listenerArray.length;

                    for (i = 0; i < length; i++) {

                        array[i] = listenerArray[i];

                    }

                    for (i = 0; i < length; i++) {

                        array[i].call(this, event);

                    }

                }

            }

        };

        var REVISION = '84';
        var MOUSE = {
            LEFT: 0,
            MIDDLE: 1,
            RIGHT: 2
        };
        var CullFaceNone = 0;
        var CullFaceBack = 1;
        var CullFaceFront = 2;
        var CullFaceFrontBack = 3;
        var FrontFaceDirectionCW = 0;
        var FrontFaceDirectionCCW = 1;
        var BasicShadowMap = 0;
        var PCFShadowMap = 1;
        var PCFSoftShadowMap = 2;
        var FrontSide = 0;
        var BackSide = 1;
        var DoubleSide = 2;
        var FlatShading = 1;
        var SmoothShading = 2;
        var NoColors = 0;
        var FaceColors = 1;
        var VertexColors = 2;
        var NoBlending = 0;
        var NormalBlending = 1;
        var AdditiveBlending = 2;
        var SubtractiveBlending = 3;
        var MultiplyBlending = 4;
        var CustomBlending = 5;
        var AddEquation = 100;
        var SubtractEquation = 101;
        var ReverseSubtractEquation = 102;
        var MinEquation = 103;
        var MaxEquation = 104;
        var ZeroFactor = 200;
        var OneFactor = 201;
        var SrcColorFactor = 202;
        var OneMinusSrcColorFactor = 203;
        var SrcAlphaFactor = 204;
        var OneMinusSrcAlphaFactor = 205;
        var DstAlphaFactor = 206;
        var OneMinusDstAlphaFactor = 207;
        var DstColorFactor = 208;
        var OneMinusDstColorFactor = 209;
        var SrcAlphaSaturateFactor = 210;
        var NeverDepth = 0;
        var AlwaysDepth = 1;
        var LessDepth = 2;
        var LessEqualDepth = 3;
        var EqualDepth = 4;
        var GreaterEqualDepth = 5;
        var GreaterDepth = 6;
        var NotEqualDepth = 7;
        var MultiplyOperation = 0;
        var MixOperation = 1;
        var AddOperation = 2;
        var NoToneMapping = 0;
        var LinearToneMapping = 1;
        var ReinhardToneMapping = 2;
        var Uncharted2ToneMapping = 3;
        var CineonToneMapping = 4;
        var UVMapping = 300;
        var CubeReflectionMapping = 301;
        var CubeRefractionMapping = 302;
        var EquirectangularReflectionMapping = 303;
        var EquirectangularRefractionMapping = 304;
        var SphericalReflectionMapping = 305;
        var CubeUVReflectionMapping = 306;
        var CubeUVRefractionMapping = 307;
        var RepeatWrapping = 1000;
        var ClampToEdgeWrapping = 1001;
        var MirroredRepeatWrapping = 1002;
        var NearestFilter = 1003;
        var NearestMipMapNearestFilter = 1004;
        var NearestMipMapLinearFilter = 1005;
        var LinearFilter = 1006;
        var LinearMipMapNearestFilter = 1007;
        var LinearMipMapLinearFilter = 1008;
        var UnsignedByteType = 1009;
        var ByteType = 1010;
        var ShortType = 1011;
        var UnsignedShortType = 1012;
        var IntType = 1013;
        var UnsignedIntType = 1014;
        var FloatType = 1015;
        var HalfFloatType = 1016;
        var UnsignedShort4444Type = 1017;
        var UnsignedShort5551Type = 1018;
        var UnsignedShort565Type = 1019;
        var UnsignedInt248Type = 1020;
        var AlphaFormat = 1021;
        var RGBFormat = 1022;
        var RGBAFormat = 1023;
        var LuminanceFormat = 1024;
        var LuminanceAlphaFormat = 1025;
        var RGBEFormat = RGBAFormat;
        var DepthFormat = 1026;
        var DepthStencilFormat = 1027;
        var RGB_S3TC_DXT1_Format = 2001;
        var RGBA_S3TC_DXT1_Format = 2002;
        var RGBA_S3TC_DXT3_Format = 2003;
        var RGBA_S3TC_DXT5_Format = 2004;
        var RGB_PVRTC_4BPPV1_Format = 2100;
        var RGB_PVRTC_2BPPV1_Format = 2101;
        var RGBA_PVRTC_4BPPV1_Format = 2102;
        var RGBA_PVRTC_2BPPV1_Format = 2103;
        var RGB_ETC1_Format = 2151;
        var LoopOnce = 2200;
        var LoopRepeat = 2201;
        var LoopPingPong = 2202;
        var InterpolateDiscrete = 2300;
        var InterpolateLinear = 2301;
        var InterpolateSmooth = 2302;
        var ZeroCurvatureEnding = 2400;
        var ZeroSlopeEnding = 2401;
        var WrapAroundEnding = 2402;
        var TrianglesDrawMode = 0;
        var TriangleStripDrawMode = 1;
        var TriangleFanDrawMode = 2;
        var LinearEncoding = 3000;
        var sRGBEncoding = 3001;
        var GammaEncoding = 3007;
        var RGBEEncoding = 3002;
        var LogLuvEncoding = 3003;
        var RGBM7Encoding = 3004;
        var RGBM16Encoding = 3005;
        var RGBDEncoding = 3006;
        var BasicDepthPacking = 3200;
        var RGBADepthPacking = 3201;

        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         */

        var _Math = {

            DEG2RAD: Math.PI / 180,
            RAD2DEG: 180 / Math.PI,

            generateUUID: function() {

                // http://www.broofa.com/Tools/Math.uuid.htm

                var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
                var uuid = new Array(36);
                var rnd = 0,
                    r;

                return function generateUUID() {

                    for (var i = 0; i < 36; i++) {

                        if (i === 8 || i === 13 || i === 18 || i === 23) {

                            uuid[i] = '-';

                        } else if (i === 14) {

                            uuid[i] = '4';

                        } else {

                            if (rnd <= 0x02) rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;
                            r = rnd & 0xf;
                            rnd = rnd >> 4;
                            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];

                        }

                    }

                    return uuid.join('');

                };

            }(),

            clamp: function(value, min, max) {

                return Math.max(min, Math.min(max, value));

            },

            // compute euclidian modulo of m % n
            // https://en.wikipedia.org/wiki/Modulo_operation

            euclideanModulo: function(n, m) {

                return ((n % m) + m) % m;

            },

            // Linear mapping from range <a1, a2> to range <b1, b2>

            mapLinear: function(x, a1, a2, b1, b2) {

                return b1 + (x - a1) * (b2 - b1) / (a2 - a1);

            },

            // https://en.wikipedia.org/wiki/Linear_interpolation

            lerp: function(x, y, t) {

                return (1 - t) * x + t * y;

            },

            // http://en.wikipedia.org/wiki/Smoothstep

            smoothstep: function(x, min, max) {

                if (x <= min) return 0;
                if (x >= max) return 1;

                x = (x - min) / (max - min);

                return x * x * (3 - 2 * x);

            },

            smootherstep: function(x, min, max) {

                if (x <= min) return 0;
                if (x >= max) return 1;

                x = (x - min) / (max - min);

                return x * x * x * (x * (x * 6 - 15) + 10);

            },

            // Random integer from <low, high> interval

            randInt: function(low, high) {

                return low + Math.floor(Math.random() * (high - low + 1));

            },

            // Random float from <low, high> interval

            randFloat: function(low, high) {

                return low + Math.random() * (high - low);

            },

            // Random float from <-range/2, range/2> interval

            randFloatSpread: function(range) {

                return range * (0.5 - Math.random());

            },

            degToRad: function(degrees) {

                return degrees * _Math.DEG2RAD;

            },

            radToDeg: function(radians) {

                return radians * _Math.RAD2DEG;

            },

            isPowerOfTwo: function(value) {

                return (value & (value - 1)) === 0 && value !== 0;

            },

            nearestPowerOfTwo: function(value) {

                return Math.pow(2, Math.round(Math.log(value) / Math.LN2));

            },

            nextPowerOfTwo: function(value) {

                value--;
                value |= value >> 1;
                value |= value >> 2;
                value |= value >> 4;
                value |= value >> 8;
                value |= value >> 16;
                value++;

                return value;

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author philogb / http://blog.thejit.org/
         * @author egraether / http://egraether.com/
         * @author zz85 / http://www.lab4games.net/zz85/blog
         */

        function Vector2(x, y) {

            this.x = x || 0;
            this.y = y || 0;

        }

        Vector2.prototype = {

            constructor: Vector2,

            isVector2: true,

            get width() {

                return this.x;

            },

            set width(value) {

                this.x = value;

            },

            get height() {

                return this.y;

            },

            set height(value) {

                this.y = value;

            },

            //

            set: function(x, y) {

                this.x = x;
                this.y = y;

                return this;

            },

            setScalar: function(scalar) {

                this.x = scalar;
                this.y = scalar;

                return this;

            },

            setX: function(x) {

                this.x = x;

                return this;

            },

            setY: function(y) {

                this.y = y;

                return this;

            },

            setComponent: function(index, value) {

                switch (index) {

                    case 0:
                        this.x = value;
                        break;
                    case 1:
                        this.y = value;
                        break;
                    default:
                        throw new Error('index is out of range: ' + index);

                }

                return this;

            },

            getComponent: function(index) {

                switch (index) {

                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    default:
                        throw new Error('index is out of range: ' + index);

                }

            },

            clone: function() {

                return new this.constructor(this.x, this.y);

            },

            copy: function(v) {

                this.x = v.x;
                this.y = v.y;

                return this;

            },

            add: function(v, w) {

                if (w !== undefined) {

                    console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
                    return this.addVectors(v, w);

                }

                this.x += v.x;
                this.y += v.y;

                return this;

            },

            addScalar: function(s) {

                this.x += s;
                this.y += s;

                return this;

            },

            addVectors: function(a, b) {

                this.x = a.x + b.x;
                this.y = a.y + b.y;

                return this;

            },

            addScaledVector: function(v, s) {

                this.x += v.x * s;
                this.y += v.y * s;

                return this;

            },

            sub: function(v, w) {

                if (w !== undefined) {

                    console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
                    return this.subVectors(v, w);

                }

                this.x -= v.x;
                this.y -= v.y;

                return this;

            },

            subScalar: function(s) {

                this.x -= s;
                this.y -= s;

                return this;

            },

            subVectors: function(a, b) {

                this.x = a.x - b.x;
                this.y = a.y - b.y;

                return this;

            },

            multiply: function(v) {

                this.x *= v.x;
                this.y *= v.y;

                return this;

            },

            multiplyScalar: function(scalar) {

                if (isFinite(scalar)) {

                    this.x *= scalar;
                    this.y *= scalar;

                } else {

                    this.x = 0;
                    this.y = 0;

                }

                return this;

            },

            divide: function(v) {

                this.x /= v.x;
                this.y /= v.y;

                return this;

            },

            divideScalar: function(scalar) {

                return this.multiplyScalar(1 / scalar);

            },

            min: function(v) {

                this.x = Math.min(this.x, v.x);
                this.y = Math.min(this.y, v.y);

                return this;

            },

            max: function(v) {

                this.x = Math.max(this.x, v.x);
                this.y = Math.max(this.y, v.y);

                return this;

            },

            clamp: function(min, max) {

                // This function assumes min < max, if this assumption isn't true it will not operate correctly

                this.x = Math.max(min.x, Math.min(max.x, this.x));
                this.y = Math.max(min.y, Math.min(max.y, this.y));

                return this;

            },

            clampScalar: function() {

                var min, max;

                return function clampScalar(minVal, maxVal) {

                    if (min === undefined) {

                        min = new Vector2();
                        max = new Vector2();

                    }

                    min.set(minVal, minVal);
                    max.set(maxVal, maxVal);

                    return this.clamp(min, max);

                };

            }(),

            clampLength: function(min, max) {

                var length = this.length();

                return this.multiplyScalar(Math.max(min, Math.min(max, length)) / length);

            },

            floor: function() {

                this.x = Math.floor(this.x);
                this.y = Math.floor(this.y);

                return this;

            },

            ceil: function() {

                this.x = Math.ceil(this.x);
                this.y = Math.ceil(this.y);

                return this;

            },

            round: function() {

                this.x = Math.round(this.x);
                this.y = Math.round(this.y);

                return this;

            },

            roundToZero: function() {

                this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);
                this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);

                return this;

            },

            negate: function() {

                this.x = -this.x;
                this.y = -this.y;

                return this;

            },

            dot: function(v) {

                return this.x * v.x + this.y * v.y;

            },

            lengthSq: function() {

                return this.x * this.x + this.y * this.y;

            },

            length: function() {

                return Math.sqrt(this.x * this.x + this.y * this.y);

            },

            lengthManhattan: function() {

                return Math.abs(this.x) + Math.abs(this.y);

            },

            normalize: function() {

                return this.divideScalar(this.length());

            },

            angle: function() {

                // computes the angle in radians with respect to the positive x-axis

                var angle = Math.atan2(this.y, this.x);

                if (angle < 0) angle += 2 * Math.PI;

                return angle;

            },

            distanceTo: function(v) {

                return Math.sqrt(this.distanceToSquared(v));

            },

            distanceToSquared: function(v) {

                var dx = this.x - v.x,
                    dy = this.y - v.y;
                return dx * dx + dy * dy;

            },

            distanceToManhattan: function(v) {

                return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);

            },

            setLength: function(length) {

                return this.multiplyScalar(length / this.length());

            },

            lerp: function(v, alpha) {

                this.x += (v.x - this.x) * alpha;
                this.y += (v.y - this.y) * alpha;

                return this;

            },

            lerpVectors: function(v1, v2, alpha) {

                return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);

            },

            equals: function(v) {

                return ((v.x === this.x) && (v.y === this.y));

            },

            fromArray: function(array, offset) {

                if (offset === undefined) offset = 0;

                this.x = array[offset];
                this.y = array[offset + 1];

                return this;

            },

            toArray: function(array, offset) {

                if (array === undefined) array = [];
                if (offset === undefined) offset = 0;

                array[offset] = this.x;
                array[offset + 1] = this.y;

                return array;

            },

            fromBufferAttribute: function(attribute, index, offset) {

                if (offset !== undefined) {

                    console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');

                }

                this.x = attribute.getX(index);
                this.y = attribute.getY(index);

                return this;

            },

            rotateAround: function(center, angle) {

                var c = Math.cos(angle),
                    s = Math.sin(angle);

                var x = this.x - center.x;
                var y = this.y - center.y;

                this.x = x * c - y * s + center.x;
                this.y = x * s + y * c + center.y;

                return this;

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         * @author szimek / https://github.com/szimek/
         */

        var textureId = 0;

        function Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {

            Object.defineProperty(this, 'id', {
                value: textureId++
            });

            this.uuid = _Math.generateUUID();

            this.name = '';

            this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
            this.mipmaps = [];

            this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

            this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
            this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

            this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
            this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

            this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

            this.format = format !== undefined ? format : RGBAFormat;
            this.type = type !== undefined ? type : UnsignedByteType;

            this.offset = new Vector2(0, 0);
            this.repeat = new Vector2(1, 1);

            this.generateMipmaps = true;
            this.premultiplyAlpha = false;
            this.flipY = true;
            this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)


            // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
            //
            // Also changing the encoding after already used by a Material will not automatically make the Material
            // update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
            this.encoding = encoding !== undefined ? encoding : LinearEncoding;

            this.version = 0;
            this.onUpdate = null;

        }

        Texture.DEFAULT_IMAGE = undefined;
        Texture.DEFAULT_MAPPING = UVMapping;

        Texture.prototype = {

            constructor: Texture,

            isTexture: true,

            set needsUpdate(value) {

                if (value === true) this.version++;

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(source) {

                this.image = source.image;
                this.mipmaps = source.mipmaps.slice(0);

                this.mapping = source.mapping;

                this.wrapS = source.wrapS;
                this.wrapT = source.wrapT;

                this.magFilter = source.magFilter;
                this.minFilter = source.minFilter;

                this.anisotropy = source.anisotropy;

                this.format = source.format;
                this.type = source.type;

                this.offset.copy(source.offset);
                this.repeat.copy(source.repeat);

                this.generateMipmaps = source.generateMipmaps;
                this.premultiplyAlpha = source.premultiplyAlpha;
                this.flipY = source.flipY;
                this.unpackAlignment = source.unpackAlignment;
                this.encoding = source.encoding;

                return this;

            },

            toJSON: function(meta) {

                if (meta.textures[this.uuid] !== undefined) {

                    return meta.textures[this.uuid];

                }

                function getDataURL(image) {

                    var canvas;

                    if (image.toDataURL !== undefined) {

                        canvas = image;

                    } else {

                        canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
                        canvas.width = image.width;
                        canvas.height = image.height;

                        canvas.getContext('2d').drawImage(image, 0, 0, image.width, image.height);

                    }

                    if (canvas.width > 2048 || canvas.height > 2048) {

                        return canvas.toDataURL('image/jpeg', 0.6);

                    } else {

                        return canvas.toDataURL('image/png');

                    }

                }

                var output = {
                    metadata: {
                        version: 4.4,
                        type: 'Texture',
                        generator: 'Texture.toJSON'
                    },

                    uuid: this.uuid,
                    name: this.name,

                    mapping: this.mapping,

                    repeat: [this.repeat.x, this.repeat.y],
                    offset: [this.offset.x, this.offset.y],
                    wrap: [this.wrapS, this.wrapT],

                    minFilter: this.minFilter,
                    magFilter: this.magFilter,
                    anisotropy: this.anisotropy,

                    flipY: this.flipY
                };

                if (this.image !== undefined) {

                    // TODO: Move to THREE.Image

                    var image = this.image;

                    if (image.uuid === undefined) {

                        image.uuid = _Math.generateUUID(); // UGH

                    }

                    if (meta.images[image.uuid] === undefined) {

                        meta.images[image.uuid] = {
                            uuid: image.uuid,
                            url: getDataURL(image)
                        };

                    }

                    output.image = image.uuid;

                }

                meta.textures[this.uuid] = output;

                return output;

            },

            dispose: function() {

                this.dispatchEvent({
                    type: 'dispose'
                });

            },

            transformUv: function(uv) {

                if (this.mapping !== UVMapping) return;

                uv.multiply(this.repeat);
                uv.add(this.offset);

                if (uv.x < 0 || uv.x > 1) {

                    switch (this.wrapS) {

                        case RepeatWrapping:

                            uv.x = uv.x - Math.floor(uv.x);
                            break;

                        case ClampToEdgeWrapping:

                            uv.x = uv.x < 0 ? 0 : 1;
                            break;

                        case MirroredRepeatWrapping:

                            if (Math.abs(Math.floor(uv.x) % 2) === 1) {

                                uv.x = Math.ceil(uv.x) - uv.x;

                            } else {

                                uv.x = uv.x - Math.floor(uv.x);

                            }
                            break;

                    }

                }

                if (uv.y < 0 || uv.y > 1) {

                    switch (this.wrapT) {

                        case RepeatWrapping:

                            uv.y = uv.y - Math.floor(uv.y);
                            break;

                        case ClampToEdgeWrapping:

                            uv.y = uv.y < 0 ? 0 : 1;
                            break;

                        case MirroredRepeatWrapping:

                            if (Math.abs(Math.floor(uv.y) % 2) === 1) {

                                uv.y = Math.ceil(uv.y) - uv.y;

                            } else {

                                uv.y = uv.y - Math.floor(uv.y);

                            }
                            break;

                    }

                }

                if (this.flipY) {

                    uv.y = 1 - uv.y;

                }

            }

        };

        Object.assign(Texture.prototype, EventDispatcher.prototype);

        /**
         * @author supereggbert / http://www.paulbrunt.co.uk/
         * @author philogb / http://blog.thejit.org/
         * @author mikael emtinger / http://gomo.se/
         * @author egraether / http://egraether.com/
         * @author WestLangley / http://github.com/WestLangley
         */

        function Vector4(x, y, z, w) {

            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
            this.w = (w !== undefined) ? w : 1;

        }

        Vector4.prototype = {

            constructor: Vector4,

            isVector4: true,

            set: function(x, y, z, w) {

                this.x = x;
                this.y = y;
                this.z = z;
                this.w = w;

                return this;

            },

            setScalar: function(scalar) {

                this.x = scalar;
                this.y = scalar;
                this.z = scalar;
                this.w = scalar;

                return this;

            },

            setX: function(x) {

                this.x = x;

                return this;

            },

            setY: function(y) {

                this.y = y;

                return this;

            },

            setZ: function(z) {

                this.z = z;

                return this;

            },

            setW: function(w) {

                this.w = w;

                return this;

            },

            setComponent: function(index, value) {

                switch (index) {

                    case 0:
                        this.x = value;
                        break;
                    case 1:
                        this.y = value;
                        break;
                    case 2:
                        this.z = value;
                        break;
                    case 3:
                        this.w = value;
                        break;
                    default:
                        throw new Error('index is out of range: ' + index);

                }

                return this;

            },

            getComponent: function(index) {

                switch (index) {

                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    case 2:
                        return this.z;
                    case 3:
                        return this.w;
                    default:
                        throw new Error('index is out of range: ' + index);

                }

            },

            clone: function() {

                return new this.constructor(this.x, this.y, this.z, this.w);

            },

            copy: function(v) {

                this.x = v.x;
                this.y = v.y;
                this.z = v.z;
                this.w = (v.w !== undefined) ? v.w : 1;

                return this;

            },

            add: function(v, w) {

                if (w !== undefined) {

                    console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
                    return this.addVectors(v, w);

                }

                this.x += v.x;
                this.y += v.y;
                this.z += v.z;
                this.w += v.w;

                return this;

            },

            addScalar: function(s) {

                this.x += s;
                this.y += s;
                this.z += s;
                this.w += s;

                return this;

            },

            addVectors: function(a, b) {

                this.x = a.x + b.x;
                this.y = a.y + b.y;
                this.z = a.z + b.z;
                this.w = a.w + b.w;

                return this;

            },

            addScaledVector: function(v, s) {

                this.x += v.x * s;
                this.y += v.y * s;
                this.z += v.z * s;
                this.w += v.w * s;

                return this;

            },

            sub: function(v, w) {

                if (w !== undefined) {

                    console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
                    return this.subVectors(v, w);

                }

                this.x -= v.x;
                this.y -= v.y;
                this.z -= v.z;
                this.w -= v.w;

                return this;

            },

            subScalar: function(s) {

                this.x -= s;
                this.y -= s;
                this.z -= s;
                this.w -= s;

                return this;

            },

            subVectors: function(a, b) {

                this.x = a.x - b.x;
                this.y = a.y - b.y;
                this.z = a.z - b.z;
                this.w = a.w - b.w;

                return this;

            },

            multiplyScalar: function(scalar) {

                if (isFinite(scalar)) {

                    this.x *= scalar;
                    this.y *= scalar;
                    this.z *= scalar;
                    this.w *= scalar;

                } else {

                    this.x = 0;
                    this.y = 0;
                    this.z = 0;
                    this.w = 0;

                }

                return this;

            },

            applyMatrix4: function(m) {

                var x = this.x,
                    y = this.y,
                    z = this.z,
                    w = this.w;
                var e = m.elements;

                this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
                this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
                this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
                this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;

                return this;

            },

            divideScalar: function(scalar) {

                return this.multiplyScalar(1 / scalar);

            },

            setAxisAngleFromQuaternion: function(q) {

                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

                // q is assumed to be normalized

                this.w = 2 * Math.acos(q.w);

                var s = Math.sqrt(1 - q.w * q.w);

                if (s < 0.0001) {

                    this.x = 1;
                    this.y = 0;
                    this.z = 0;

                } else {

                    this.x = q.x / s;
                    this.y = q.y / s;
                    this.z = q.z / s;

                }

                return this;

            },

            setAxisAngleFromRotationMatrix: function(m) {

                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

                var angle, x, y, z, // variables for result
                    epsilon = 0.01, // margin to allow for rounding errors
                    epsilon2 = 0.1, // margin to distinguish between 0 and 180 degrees

                    te = m.elements,

                    m11 = te[0],
                    m12 = te[4],
                    m13 = te[8],
                    m21 = te[1],
                    m22 = te[5],
                    m23 = te[9],
                    m31 = te[2],
                    m32 = te[6],
                    m33 = te[10];

                if ((Math.abs(m12 - m21) < epsilon) &&
                    (Math.abs(m13 - m31) < epsilon) &&
                    (Math.abs(m23 - m32) < epsilon)) {

                    // singularity found
                    // first check for identity matrix which must have +1 for all terms
                    // in leading diagonal and zero in other terms

                    if ((Math.abs(m12 + m21) < epsilon2) &&
                        (Math.abs(m13 + m31) < epsilon2) &&
                        (Math.abs(m23 + m32) < epsilon2) &&
                        (Math.abs(m11 + m22 + m33 - 3) < epsilon2)) {

                        // this singularity is identity matrix so angle = 0

                        this.set(1, 0, 0, 0);

                        return this; // zero angle, arbitrary axis

                    }

                    // otherwise this singularity is angle = 180

                    angle = Math.PI;

                    var xx = (m11 + 1) / 2;
                    var yy = (m22 + 1) / 2;
                    var zz = (m33 + 1) / 2;
                    var xy = (m12 + m21) / 4;
                    var xz = (m13 + m31) / 4;
                    var yz = (m23 + m32) / 4;

                    if ((xx > yy) && (xx > zz)) {

                        // m11 is the largest diagonal term

                        if (xx < epsilon) {

                            x = 0;
                            y = 0.707106781;
                            z = 0.707106781;

                        } else {

                            x = Math.sqrt(xx);
                            y = xy / x;
                            z = xz / x;

                        }

                    } else if (yy > zz) {

                        // m22 is the largest diagonal term

                        if (yy < epsilon) {

                            x = 0.707106781;
                            y = 0;
                            z = 0.707106781;

                        } else {

                            y = Math.sqrt(yy);
                            x = xy / y;
                            z = yz / y;

                        }

                    } else {

                        // m33 is the largest diagonal term so base result on this

                        if (zz < epsilon) {

                            x = 0.707106781;
                            y = 0.707106781;
                            z = 0;

                        } else {

                            z = Math.sqrt(zz);
                            x = xz / z;
                            y = yz / z;

                        }

                    }

                    this.set(x, y, z, angle);

                    return this; // return 180 deg rotation

                }

                // as we have reached here there are no singularities so we can handle normally

                var s = Math.sqrt((m32 - m23) * (m32 - m23) +
                    (m13 - m31) * (m13 - m31) +
                    (m21 - m12) * (m21 - m12)); // used to normalize

                if (Math.abs(s) < 0.001) s = 1;

                // prevent divide by zero, should not happen if matrix is orthogonal and should be
                // caught by singularity test above, but I've left it in just in case

                this.x = (m32 - m23) / s;
                this.y = (m13 - m31) / s;
                this.z = (m21 - m12) / s;
                this.w = Math.acos((m11 + m22 + m33 - 1) / 2);

                return this;

            },

            min: function(v) {

                this.x = Math.min(this.x, v.x);
                this.y = Math.min(this.y, v.y);
                this.z = Math.min(this.z, v.z);
                this.w = Math.min(this.w, v.w);

                return this;

            },

            max: function(v) {

                this.x = Math.max(this.x, v.x);
                this.y = Math.max(this.y, v.y);
                this.z = Math.max(this.z, v.z);
                this.w = Math.max(this.w, v.w);

                return this;

            },

            clamp: function(min, max) {

                // This function assumes min < max, if this assumption isn't true it will not operate correctly

                this.x = Math.max(min.x, Math.min(max.x, this.x));
                this.y = Math.max(min.y, Math.min(max.y, this.y));
                this.z = Math.max(min.z, Math.min(max.z, this.z));
                this.w = Math.max(min.w, Math.min(max.w, this.w));

                return this;

            },

            clampScalar: function() {

                var min, max;

                return function clampScalar(minVal, maxVal) {

                    if (min === undefined) {

                        min = new Vector4();
                        max = new Vector4();

                    }

                    min.set(minVal, minVal, minVal, minVal);
                    max.set(maxVal, maxVal, maxVal, maxVal);

                    return this.clamp(min, max);

                };

            }(),

            floor: function() {

                this.x = Math.floor(this.x);
                this.y = Math.floor(this.y);
                this.z = Math.floor(this.z);
                this.w = Math.floor(this.w);

                return this;

            },

            ceil: function() {

                this.x = Math.ceil(this.x);
                this.y = Math.ceil(this.y);
                this.z = Math.ceil(this.z);
                this.w = Math.ceil(this.w);

                return this;

            },

            round: function() {

                this.x = Math.round(this.x);
                this.y = Math.round(this.y);
                this.z = Math.round(this.z);
                this.w = Math.round(this.w);

                return this;

            },

            roundToZero: function() {

                this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);
                this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);
                this.z = (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z);
                this.w = (this.w < 0) ? Math.ceil(this.w) : Math.floor(this.w);

                return this;

            },

            negate: function() {

                this.x = -this.x;
                this.y = -this.y;
                this.z = -this.z;
                this.w = -this.w;

                return this;

            },

            dot: function(v) {

                return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

            },

            lengthSq: function() {

                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

            },

            length: function() {

                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);

            },

            lengthManhattan: function() {

                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);

            },

            normalize: function() {

                return this.divideScalar(this.length());

            },

            setLength: function(length) {

                return this.multiplyScalar(length / this.length());

            },

            lerp: function(v, alpha) {

                this.x += (v.x - this.x) * alpha;
                this.y += (v.y - this.y) * alpha;
                this.z += (v.z - this.z) * alpha;
                this.w += (v.w - this.w) * alpha;

                return this;

            },

            lerpVectors: function(v1, v2, alpha) {

                return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);

            },

            equals: function(v) {

                return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z) && (v.w === this.w));

            },

            fromArray: function(array, offset) {

                if (offset === undefined) offset = 0;

                this.x = array[offset];
                this.y = array[offset + 1];
                this.z = array[offset + 2];
                this.w = array[offset + 3];

                return this;

            },

            toArray: function(array, offset) {

                if (array === undefined) array = [];
                if (offset === undefined) offset = 0;

                array[offset] = this.x;
                array[offset + 1] = this.y;
                array[offset + 2] = this.z;
                array[offset + 3] = this.w;

                return array;

            },

            fromBufferAttribute: function(attribute, index, offset) {

                if (offset !== undefined) {

                    console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');

                }

                this.x = attribute.getX(index);
                this.y = attribute.getY(index);
                this.z = attribute.getZ(index);
                this.w = attribute.getW(index);

                return this;

            }

        };

        /**
         * @author szimek / https://github.com/szimek/
         * @author alteredq / http://alteredqualia.com/
         * @author Marius Kintel / https://github.com/kintel
         */

        /*
         In options, we can specify:
         * Texture parameters for an auto-generated target texture
         * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
        */
        function WebGLRenderTarget(width, height, options) {

            this.uuid = _Math.generateUUID();

            this.width = width;
            this.height = height;

            this.scissor = new Vector4(0, 0, width, height);
            this.scissorTest = false;

            this.viewport = new Vector4(0, 0, width, height);

            options = options || {};

            if (options.minFilter === undefined) options.minFilter = LinearFilter;

            this.texture = new Texture(undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);

            this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
            this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
            this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

        }

        WebGLRenderTarget.prototype = {

            constructor: WebGLRenderTarget,

            isWebGLRenderTarget: true,

            setSize: function(width, height) {

                if (this.width !== width || this.height !== height) {

                    this.width = width;
                    this.height = height;

                    this.dispose();

                }

                this.viewport.set(0, 0, width, height);
                this.scissor.set(0, 0, width, height);

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(source) {

                this.width = source.width;
                this.height = source.height;

                this.viewport.copy(source.viewport);

                this.texture = source.texture.clone();

                this.depthBuffer = source.depthBuffer;
                this.stencilBuffer = source.stencilBuffer;
                this.depthTexture = source.depthTexture;

                return this;

            },

            dispose: function() {

                this.dispatchEvent({
                    type: 'dispose'
                });

            }

        };

        Object.assign(WebGLRenderTarget.prototype, EventDispatcher.prototype);

        /**
         * @author alteredq / http://alteredqualia.com
         */

        function WebGLRenderTargetCube(width, height, options) {

            WebGLRenderTarget.call(this, width, height, options);

            this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
            this.activeMipMapLevel = 0;

        }

        WebGLRenderTargetCube.prototype = Object.create(WebGLRenderTarget.prototype);
        WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

        WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author WestLangley / http://github.com/WestLangley
         * @author bhouston / http://clara.io
         */

        function Quaternion(x, y, z, w) {

            this._x = x || 0;
            this._y = y || 0;
            this._z = z || 0;
            this._w = (w !== undefined) ? w : 1;

        }

        Quaternion.prototype = {

            constructor: Quaternion,

            get x() {

                return this._x;

            },

            set x(value) {

                this._x = value;
                this.onChangeCallback();

            },

            get y() {

                return this._y;

            },

            set y(value) {

                this._y = value;
                this.onChangeCallback();

            },

            get z() {

                return this._z;

            },

            set z(value) {

                this._z = value;
                this.onChangeCallback();

            },

            get w() {

                return this._w;

            },

            set w(value) {

                this._w = value;
                this.onChangeCallback();

            },

            set: function(x, y, z, w) {

                this._x = x;
                this._y = y;
                this._z = z;
                this._w = w;

                this.onChangeCallback();

                return this;

            },

            clone: function() {

                return new this.constructor(this._x, this._y, this._z, this._w);

            },

            copy: function(quaternion) {

                this._x = quaternion.x;
                this._y = quaternion.y;
                this._z = quaternion.z;
                this._w = quaternion.w;

                this.onChangeCallback();

                return this;

            },

            setFromEuler: function(euler, update) {

                if ((euler && euler.isEuler) === false) {

                    throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');

                }

                // http://www.mathworks.com/matlabcentral/fileexchange/
                // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
                //	content/SpinCalc.m

                var c1 = Math.cos(euler._x / 2);
                var c2 = Math.cos(euler._y / 2);
                var c3 = Math.cos(euler._z / 2);
                var s1 = Math.sin(euler._x / 2);
                var s2 = Math.sin(euler._y / 2);
                var s3 = Math.sin(euler._z / 2);

                var order = euler.order;

                if (order === 'XYZ') {

                    this._x = s1 * c2 * c3 + c1 * s2 * s3;
                    this._y = c1 * s2 * c3 - s1 * c2 * s3;
                    this._z = c1 * c2 * s3 + s1 * s2 * c3;
                    this._w = c1 * c2 * c3 - s1 * s2 * s3;

                } else if (order === 'YXZ') {

                    this._x = s1 * c2 * c3 + c1 * s2 * s3;
                    this._y = c1 * s2 * c3 - s1 * c2 * s3;
                    this._z = c1 * c2 * s3 - s1 * s2 * c3;
                    this._w = c1 * c2 * c3 + s1 * s2 * s3;

                } else if (order === 'ZXY') {

                    this._x = s1 * c2 * c3 - c1 * s2 * s3;
                    this._y = c1 * s2 * c3 + s1 * c2 * s3;
                    this._z = c1 * c2 * s3 + s1 * s2 * c3;
                    this._w = c1 * c2 * c3 - s1 * s2 * s3;

                } else if (order === 'ZYX') {

                    this._x = s1 * c2 * c3 - c1 * s2 * s3;
                    this._y = c1 * s2 * c3 + s1 * c2 * s3;
                    this._z = c1 * c2 * s3 - s1 * s2 * c3;
                    this._w = c1 * c2 * c3 + s1 * s2 * s3;

                } else if (order === 'YZX') {

                    this._x = s1 * c2 * c3 + c1 * s2 * s3;
                    this._y = c1 * s2 * c3 + s1 * c2 * s3;
                    this._z = c1 * c2 * s3 - s1 * s2 * c3;
                    this._w = c1 * c2 * c3 - s1 * s2 * s3;

                } else if (order === 'XZY') {

                    this._x = s1 * c2 * c3 - c1 * s2 * s3;
                    this._y = c1 * s2 * c3 - s1 * c2 * s3;
                    this._z = c1 * c2 * s3 + s1 * s2 * c3;
                    this._w = c1 * c2 * c3 + s1 * s2 * s3;

                }

                if (update !== false) this.onChangeCallback();

                return this;

            },

            setFromAxisAngle: function(axis, angle) {

                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

                // assumes axis is normalized

                var halfAngle = angle / 2,
                    s = Math.sin(halfAngle);

                this._x = axis.x * s;
                this._y = axis.y * s;
                this._z = axis.z * s;
                this._w = Math.cos(halfAngle);

                this.onChangeCallback();

                return this;

            },

            setFromRotationMatrix: function(m) {

                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

                var te = m.elements,

                    m11 = te[0],
                    m12 = te[4],
                    m13 = te[8],
                    m21 = te[1],
                    m22 = te[5],
                    m23 = te[9],
                    m31 = te[2],
                    m32 = te[6],
                    m33 = te[10],

                    trace = m11 + m22 + m33,
                    s;

                if (trace > 0) {

                    s = 0.5 / Math.sqrt(trace + 1.0);

                    this._w = 0.25 / s;
                    this._x = (m32 - m23) * s;
                    this._y = (m13 - m31) * s;
                    this._z = (m21 - m12) * s;

                } else if (m11 > m22 && m11 > m33) {

                    s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);

                    this._w = (m32 - m23) / s;
                    this._x = 0.25 * s;
                    this._y = (m12 + m21) / s;
                    this._z = (m13 + m31) / s;

                } else if (m22 > m33) {

                    s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);

                    this._w = (m13 - m31) / s;
                    this._x = (m12 + m21) / s;
                    this._y = 0.25 * s;
                    this._z = (m23 + m32) / s;

                } else {

                    s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);

                    this._w = (m21 - m12) / s;
                    this._x = (m13 + m31) / s;
                    this._y = (m23 + m32) / s;
                    this._z = 0.25 * s;

                }

                this.onChangeCallback();

                return this;

            },

            setFromUnitVectors: function() {

                // http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

                // assumes direction vectors vFrom and vTo are normalized

                var v1, r;

                var EPS = 0.000001;

                return function setFromUnitVectors(vFrom, vTo) {

                    if (v1 === undefined) v1 = new Vector3();

                    r = vFrom.dot(vTo) + 1;

                    if (r < EPS) {

                        r = 0;

                        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {

                            v1.set(-vFrom.y, vFrom.x, 0);

                        } else {

                            v1.set(0, -vFrom.z, vFrom.y);

                        }

                    } else {

                        v1.crossVectors(vFrom, vTo);

                    }

                    this._x = v1.x;
                    this._y = v1.y;
                    this._z = v1.z;
                    this._w = r;

                    return this.normalize();

                };

            }(),

            inverse: function() {

                return this.conjugate().normalize();

            },

            conjugate: function() {

                this._x *= -1;
                this._y *= -1;
                this._z *= -1;

                this.onChangeCallback();

                return this;

            },

            dot: function(v) {

                return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

            },

            lengthSq: function() {

                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

            },

            length: function() {

                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);

            },

            normalize: function() {

                var l = this.length();

                if (l === 0) {

                    this._x = 0;
                    this._y = 0;
                    this._z = 0;
                    this._w = 1;

                } else {

                    l = 1 / l;

                    this._x = this._x * l;
                    this._y = this._y * l;
                    this._z = this._z * l;
                    this._w = this._w * l;

                }

                this.onChangeCallback();

                return this;

            },

            multiply: function(q, p) {

                if (p !== undefined) {

                    console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');
                    return this.multiplyQuaternions(q, p);

                }

                return this.multiplyQuaternions(this, q);

            },

            premultiply: function(q) {

                return this.multiplyQuaternions(q, this);

            },

            multiplyQuaternions: function(a, b) {

                // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

                var qax = a._x,
                    qay = a._y,
                    qaz = a._z,
                    qaw = a._w;
                var qbx = b._x,
                    qby = b._y,
                    qbz = b._z,
                    qbw = b._w;

                this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
                this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
                this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
                this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

                this.onChangeCallback();

                return this;

            },

            slerp: function(qb, t) {

                if (t === 0) return this;
                if (t === 1) return this.copy(qb);

                var x = this._x,
                    y = this._y,
                    z = this._z,
                    w = this._w;

                // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

                var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

                if (cosHalfTheta < 0) {

                    this._w = -qb._w;
                    this._x = -qb._x;
                    this._y = -qb._y;
                    this._z = -qb._z;

                    cosHalfTheta = -cosHalfTheta;

                } else {

                    this.copy(qb);

                }

                if (cosHalfTheta >= 1.0) {

                    this._w = w;
                    this._x = x;
                    this._y = y;
                    this._z = z;

                    return this;

                }

                var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);

                if (Math.abs(sinHalfTheta) < 0.001) {

                    this._w = 0.5 * (w + this._w);
                    this._x = 0.5 * (x + this._x);
                    this._y = 0.5 * (y + this._y);
                    this._z = 0.5 * (z + this._z);

                    return this;

                }

                var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
                var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
                    ratioB = Math.sin(t * halfTheta) / sinHalfTheta;

                this._w = (w * ratioA + this._w * ratioB);
                this._x = (x * ratioA + this._x * ratioB);
                this._y = (y * ratioA + this._y * ratioB);
                this._z = (z * ratioA + this._z * ratioB);

                this.onChangeCallback();

                return this;

            },

            equals: function(quaternion) {

                return (quaternion._x === this._x) && (quaternion._y === this._y) && (quaternion._z === this._z) && (quaternion._w === this._w);

            },

            fromArray: function(array, offset) {

                if (offset === undefined) offset = 0;

                this._x = array[offset];
                this._y = array[offset + 1];
                this._z = array[offset + 2];
                this._w = array[offset + 3];

                this.onChangeCallback();

                return this;

            },

            toArray: function(array, offset) {

                if (array === undefined) array = [];
                if (offset === undefined) offset = 0;

                array[offset] = this._x;
                array[offset + 1] = this._y;
                array[offset + 2] = this._z;
                array[offset + 3] = this._w;

                return array;

            },

            onChange: function(callback) {

                this.onChangeCallback = callback;

                return this;

            },

            onChangeCallback: function() {}

        };

        Object.assign(Quaternion, {

            slerp: function(qa, qb, qm, t) {

                return qm.copy(qa).slerp(qb, t);

            },

            slerpFlat: function(
                dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {

                // fuzz-free, array-based Quaternion SLERP operation

                var x0 = src0[srcOffset0 + 0],
                    y0 = src0[srcOffset0 + 1],
                    z0 = src0[srcOffset0 + 2],
                    w0 = src0[srcOffset0 + 3],

                    x1 = src1[srcOffset1 + 0],
                    y1 = src1[srcOffset1 + 1],
                    z1 = src1[srcOffset1 + 2],
                    w1 = src1[srcOffset1 + 3];

                if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {

                    var s = 1 - t,

                        cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

                        dir = (cos >= 0 ? 1 : -1),
                        sqrSin = 1 - cos * cos;

                    // Skip the Slerp for tiny steps to avoid numeric problems:
                    if (sqrSin > Number.EPSILON) {

                        var sin = Math.sqrt(sqrSin),
                            len = Math.atan2(sin, cos * dir);

                        s = Math.sin(s * len) / sin;
                        t = Math.sin(t * len) / sin;

                    }

                    var tDir = t * dir;

                    x0 = x0 * s + x1 * tDir;
                    y0 = y0 * s + y1 * tDir;
                    z0 = z0 * s + z1 * tDir;
                    w0 = w0 * s + w1 * tDir;

                    // Normalize in case we just did a lerp:
                    if (s === 1 - t) {

                        var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);

                        x0 *= f;
                        y0 *= f;
                        z0 *= f;
                        w0 *= f;

                    }

                }

                dst[dstOffset] = x0;
                dst[dstOffset + 1] = y0;
                dst[dstOffset + 2] = z0;
                dst[dstOffset + 3] = w0;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author *kile / http://kile.stravaganza.org/
         * @author philogb / http://blog.thejit.org/
         * @author mikael emtinger / http://gomo.se/
         * @author egraether / http://egraether.com/
         * @author WestLangley / http://github.com/WestLangley
         */

        function Vector3(x, y, z) {

            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;

        }

        Vector3.prototype = {

            constructor: Vector3,

            isVector3: true,

            set: function(x, y, z) {

                this.x = x;
                this.y = y;
                this.z = z;

                return this;

            },

            setScalar: function(scalar) {

                this.x = scalar;
                this.y = scalar;
                this.z = scalar;

                return this;

            },

            setX: function(x) {

                this.x = x;

                return this;

            },

            setY: function(y) {

                this.y = y;

                return this;

            },

            setZ: function(z) {

                this.z = z;

                return this;

            },

            setComponent: function(index, value) {

                switch (index) {

                    case 0:
                        this.x = value;
                        break;
                    case 1:
                        this.y = value;
                        break;
                    case 2:
                        this.z = value;
                        break;
                    default:
                        throw new Error('index is out of range: ' + index);

                }

                return this;

            },

            getComponent: function(index) {

                switch (index) {

                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    case 2:
                        return this.z;
                    default:
                        throw new Error('index is out of range: ' + index);

                }

            },

            clone: function() {

                return new this.constructor(this.x, this.y, this.z);

            },

            copy: function(v) {

                this.x = v.x;
                this.y = v.y;
                this.z = v.z;

                return this;

            },

            add: function(v, w) {

                if (w !== undefined) {

                    console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
                    return this.addVectors(v, w);

                }

                this.x += v.x;
                this.y += v.y;
                this.z += v.z;

                return this;

            },

            addScalar: function(s) {

                this.x += s;
                this.y += s;
                this.z += s;

                return this;

            },

            addVectors: function(a, b) {

                this.x = a.x + b.x;
                this.y = a.y + b.y;
                this.z = a.z + b.z;

                return this;

            },

            addScaledVector: function(v, s) {

                this.x += v.x * s;
                this.y += v.y * s;
                this.z += v.z * s;

                return this;

            },

            sub: function(v, w) {

                if (w !== undefined) {

                    console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
                    return this.subVectors(v, w);

                }

                this.x -= v.x;
                this.y -= v.y;
                this.z -= v.z;

                return this;

            },

            subScalar: function(s) {

                this.x -= s;
                this.y -= s;
                this.z -= s;

                return this;

            },

            subVectors: function(a, b) {

                this.x = a.x - b.x;
                this.y = a.y - b.y;
                this.z = a.z - b.z;

                return this;

            },

            multiply: function(v, w) {

                if (w !== undefined) {

                    console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');
                    return this.multiplyVectors(v, w);

                }

                this.x *= v.x;
                this.y *= v.y;
                this.z *= v.z;

                return this;

            },

            multiplyScalar: function(scalar) {

                if (isFinite(scalar)) {

                    this.x *= scalar;
                    this.y *= scalar;
                    this.z *= scalar;

                } else {

                    this.x = 0;
                    this.y = 0;
                    this.z = 0;

                }

                return this;

            },

            multiplyVectors: function(a, b) {

                this.x = a.x * b.x;
                this.y = a.y * b.y;
                this.z = a.z * b.z;

                return this;

            },

            applyEuler: function() {

                var quaternion;

                return function applyEuler(euler) {

                    if ((euler && euler.isEuler) === false) {

                        console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');

                    }

                    if (quaternion === undefined) quaternion = new Quaternion();

                    return this.applyQuaternion(quaternion.setFromEuler(euler));

                };

            }(),

            applyAxisAngle: function() {

                var quaternion;

                return function applyAxisAngle(axis, angle) {

                    if (quaternion === undefined) quaternion = new Quaternion();

                    return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));

                };

            }(),

            applyMatrix3: function(m) {

                var x = this.x,
                    y = this.y,
                    z = this.z;
                var e = m.elements;

                this.x = e[0] * x + e[3] * y + e[6] * z;
                this.y = e[1] * x + e[4] * y + e[7] * z;
                this.z = e[2] * x + e[5] * y + e[8] * z;

                return this;

            },

            applyMatrix4: function(m) {

                var x = this.x,
                    y = this.y,
                    z = this.z;
                var e = m.elements;

                this.x = e[0] * x + e[4] * y + e[8] * z + e[12];
                this.y = e[1] * x + e[5] * y + e[9] * z + e[13];
                this.z = e[2] * x + e[6] * y + e[10] * z + e[14];
                var w = e[3] * x + e[7] * y + e[11] * z + e[15];

                return this.divideScalar(w);

            },

            applyQuaternion: function(q) {

                var x = this.x,
                    y = this.y,
                    z = this.z;
                var qx = q.x,
                    qy = q.y,
                    qz = q.z,
                    qw = q.w;

                // calculate quat * vector

                var ix = qw * x + qy * z - qz * y;
                var iy = qw * y + qz * x - qx * z;
                var iz = qw * z + qx * y - qy * x;
                var iw = -qx * x - qy * y - qz * z;

                // calculate result * inverse quat

                this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;

                return this;

            },

            project: function() {

                var matrix;

                return function project(camera) {

                    if (matrix === undefined) matrix = new Matrix4();

                    matrix.multiplyMatrices(camera.projectionMatrix, matrix.getInverse(camera.matrixWorld));
                    return this.applyMatrix4(matrix);

                };

            }(),

            unproject: function() {

                var matrix;

                return function unproject(camera) {

                    if (matrix === undefined) matrix = new Matrix4();

                    matrix.multiplyMatrices(camera.matrixWorld, matrix.getInverse(camera.projectionMatrix));
                    return this.applyMatrix4(matrix);

                };

            }(),

            transformDirection: function(m) {

                // input: THREE.Matrix4 affine matrix
                // vector interpreted as a direction

                var x = this.x,
                    y = this.y,
                    z = this.z;
                var e = m.elements;

                this.x = e[0] * x + e[4] * y + e[8] * z;
                this.y = e[1] * x + e[5] * y + e[9] * z;
                this.z = e[2] * x + e[6] * y + e[10] * z;

                return this.normalize();

            },

            divide: function(v) {

                this.x /= v.x;
                this.y /= v.y;
                this.z /= v.z;

                return this;

            },

            divideScalar: function(scalar) {

                return this.multiplyScalar(1 / scalar);

            },

            min: function(v) {

                this.x = Math.min(this.x, v.x);
                this.y = Math.min(this.y, v.y);
                this.z = Math.min(this.z, v.z);

                return this;

            },

            max: function(v) {

                this.x = Math.max(this.x, v.x);
                this.y = Math.max(this.y, v.y);
                this.z = Math.max(this.z, v.z);

                return this;

            },

            clamp: function(min, max) {

                // This function assumes min < max, if this assumption isn't true it will not operate correctly

                this.x = Math.max(min.x, Math.min(max.x, this.x));
                this.y = Math.max(min.y, Math.min(max.y, this.y));
                this.z = Math.max(min.z, Math.min(max.z, this.z));

                return this;

            },

            clampScalar: function() {

                var min, max;

                return function clampScalar(minVal, maxVal) {

                    if (min === undefined) {

                        min = new Vector3();
                        max = new Vector3();

                    }

                    min.set(minVal, minVal, minVal);
                    max.set(maxVal, maxVal, maxVal);

                    return this.clamp(min, max);

                };

            }(),

            clampLength: function(min, max) {

                var length = this.length();

                return this.multiplyScalar(Math.max(min, Math.min(max, length)) / length);

            },

            floor: function() {

                this.x = Math.floor(this.x);
                this.y = Math.floor(this.y);
                this.z = Math.floor(this.z);

                return this;

            },

            ceil: function() {

                this.x = Math.ceil(this.x);
                this.y = Math.ceil(this.y);
                this.z = Math.ceil(this.z);

                return this;

            },

            round: function() {

                this.x = Math.round(this.x);
                this.y = Math.round(this.y);
                this.z = Math.round(this.z);

                return this;

            },

            roundToZero: function() {

                this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);
                this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);
                this.z = (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z);

                return this;

            },

            negate: function() {

                this.x = -this.x;
                this.y = -this.y;
                this.z = -this.z;

                return this;

            },

            dot: function(v) {

                return this.x * v.x + this.y * v.y + this.z * v.z;

            },

            lengthSq: function() {

                return this.x * this.x + this.y * this.y + this.z * this.z;

            },

            length: function() {

                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);

            },

            lengthManhattan: function() {

                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);

            },

            normalize: function() {

                return this.divideScalar(this.length());

            },

            setLength: function(length) {

                return this.multiplyScalar(length / this.length());

            },

            lerp: function(v, alpha) {

                this.x += (v.x - this.x) * alpha;
                this.y += (v.y - this.y) * alpha;
                this.z += (v.z - this.z) * alpha;

                return this;

            },

            lerpVectors: function(v1, v2, alpha) {

                return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);

            },

            cross: function(v, w) {

                if (w !== undefined) {

                    console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');
                    return this.crossVectors(v, w);

                }

                var x = this.x,
                    y = this.y,
                    z = this.z;

                this.x = y * v.z - z * v.y;
                this.y = z * v.x - x * v.z;
                this.z = x * v.y - y * v.x;

                return this;

            },

            crossVectors: function(a, b) {

                var ax = a.x,
                    ay = a.y,
                    az = a.z;
                var bx = b.x,
                    by = b.y,
                    bz = b.z;

                this.x = ay * bz - az * by;
                this.y = az * bx - ax * bz;
                this.z = ax * by - ay * bx;

                return this;

            },

            projectOnVector: function(vector) {

                var scalar = vector.dot(this) / vector.lengthSq();

                return this.copy(vector).multiplyScalar(scalar);

            },

            projectOnPlane: function() {

                var v1;

                return function projectOnPlane(planeNormal) {

                    if (v1 === undefined) v1 = new Vector3();

                    v1.copy(this).projectOnVector(planeNormal);

                    return this.sub(v1);

                };

            }(),

            reflect: function() {

                // reflect incident vector off plane orthogonal to normal
                // normal is assumed to have unit length

                var v1;

                return function reflect(normal) {

                    if (v1 === undefined) v1 = new Vector3();

                    return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));

                };

            }(),

            angleTo: function(v) {

                var theta = this.dot(v) / (Math.sqrt(this.lengthSq() * v.lengthSq()));

                // clamp, to handle numerical problems

                return Math.acos(_Math.clamp(theta, -1, 1));

            },

            distanceTo: function(v) {

                return Math.sqrt(this.distanceToSquared(v));

            },

            distanceToSquared: function(v) {

                var dx = this.x - v.x,
                    dy = this.y - v.y,
                    dz = this.z - v.z;

                return dx * dx + dy * dy + dz * dz;

            },

            distanceToManhattan: function(v) {

                return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);

            },

            setFromSpherical: function(s) {

                var sinPhiRadius = Math.sin(s.phi) * s.radius;

                this.x = sinPhiRadius * Math.sin(s.theta);
                this.y = Math.cos(s.phi) * s.radius;
                this.z = sinPhiRadius * Math.cos(s.theta);

                return this;

            },

            setFromCylindrical: function(c) {

                this.x = c.radius * Math.sin(c.theta);
                this.y = c.y;
                this.z = c.radius * Math.cos(c.theta);

                return this;

            },

            setFromMatrixPosition: function(m) {

                return this.setFromMatrixColumn(m, 3);

            },

            setFromMatrixScale: function(m) {

                var sx = this.setFromMatrixColumn(m, 0).length();
                var sy = this.setFromMatrixColumn(m, 1).length();
                var sz = this.setFromMatrixColumn(m, 2).length();

                this.x = sx;
                this.y = sy;
                this.z = sz;

                return this;

            },

            setFromMatrixColumn: function(m, index) {

                if (typeof m === 'number') {

                    console.warn('THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).');
                    var temp = m;
                    m = index;
                    index = temp;

                }

                return this.fromArray(m.elements, index * 4);

            },

            equals: function(v) {

                return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z));

            },

            fromArray: function(array, offset) {

                if (offset === undefined) offset = 0;

                this.x = array[offset];
                this.y = array[offset + 1];
                this.z = array[offset + 2];

                return this;

            },

            toArray: function(array, offset) {

                if (array === undefined) array = [];
                if (offset === undefined) offset = 0;

                array[offset] = this.x;
                array[offset + 1] = this.y;
                array[offset + 2] = this.z;

                return array;

            },

            fromBufferAttribute: function(attribute, index, offset) {

                if (offset !== undefined) {

                    console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');

                }

                this.x = attribute.getX(index);
                this.y = attribute.getY(index);
                this.z = attribute.getZ(index);

                return this;

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author supereggbert / http://www.paulbrunt.co.uk/
         * @author philogb / http://blog.thejit.org/
         * @author jordi_ros / http://plattsoft.com
         * @author D1plo1d / http://github.com/D1plo1d
         * @author alteredq / http://alteredqualia.com/
         * @author mikael emtinger / http://gomo.se/
         * @author timknip / http://www.floorplanner.com/
         * @author bhouston / http://clara.io
         * @author WestLangley / http://github.com/WestLangley
         */

        function Matrix4() {

            this.elements = new Float32Array([

                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1

            ]);

            if (arguments.length > 0) {

                console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');

            }

        }

        Matrix4.prototype = {

            constructor: Matrix4,

            isMatrix4: true,

            set: function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {

                var te = this.elements;

                te[0] = n11;
                te[4] = n12;
                te[8] = n13;
                te[12] = n14;
                te[1] = n21;
                te[5] = n22;
                te[9] = n23;
                te[13] = n24;
                te[2] = n31;
                te[6] = n32;
                te[10] = n33;
                te[14] = n34;
                te[3] = n41;
                te[7] = n42;
                te[11] = n43;
                te[15] = n44;

                return this;

            },

            identity: function() {

                this.set(

                    1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1

                );

                return this;

            },

            clone: function() {

                return new Matrix4().fromArray(this.elements);

            },

            copy: function(m) {

                this.elements.set(m.elements);

                return this;

            },

            copyPosition: function(m) {

                var te = this.elements;
                var me = m.elements;

                te[12] = me[12];
                te[13] = me[13];
                te[14] = me[14];

                return this;

            },

            extractBasis: function(xAxis, yAxis, zAxis) {

                xAxis.setFromMatrixColumn(this, 0);
                yAxis.setFromMatrixColumn(this, 1);
                zAxis.setFromMatrixColumn(this, 2);

                return this;

            },

            makeBasis: function(xAxis, yAxis, zAxis) {

                this.set(
                    xAxis.x, yAxis.x, zAxis.x, 0,
                    xAxis.y, yAxis.y, zAxis.y, 0,
                    xAxis.z, yAxis.z, zAxis.z, 0,
                    0, 0, 0, 1
                );

                return this;

            },

            extractRotation: function() {

                var v1;

                return function extractRotation(m) {

                    if (v1 === undefined) v1 = new Vector3();

                    var te = this.elements;
                    var me = m.elements;

                    var scaleX = 1 / v1.setFromMatrixColumn(m, 0).length();
                    var scaleY = 1 / v1.setFromMatrixColumn(m, 1).length();
                    var scaleZ = 1 / v1.setFromMatrixColumn(m, 2).length();

                    te[0] = me[0] * scaleX;
                    te[1] = me[1] * scaleX;
                    te[2] = me[2] * scaleX;

                    te[4] = me[4] * scaleY;
                    te[5] = me[5] * scaleY;
                    te[6] = me[6] * scaleY;

                    te[8] = me[8] * scaleZ;
                    te[9] = me[9] * scaleZ;
                    te[10] = me[10] * scaleZ;

                    return this;

                };

            }(),

            makeRotationFromEuler: function(euler) {

                if ((euler && euler.isEuler) === false) {

                    console.error('THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');

                }

                var te = this.elements;

                var x = euler.x,
                    y = euler.y,
                    z = euler.z;
                var a = Math.cos(x),
                    b = Math.sin(x);
                var c = Math.cos(y),
                    d = Math.sin(y);
                var e = Math.cos(z),
                    f = Math.sin(z);

                if (euler.order === 'XYZ') {

                    var ae = a * e,
                        af = a * f,
                        be = b * e,
                        bf = b * f;

                    te[0] = c * e;
                    te[4] = -c * f;
                    te[8] = d;

                    te[1] = af + be * d;
                    te[5] = ae - bf * d;
                    te[9] = -b * c;

                    te[2] = bf - ae * d;
                    te[6] = be + af * d;
                    te[10] = a * c;

                } else if (euler.order === 'YXZ') {

                    var ce = c * e,
                        cf = c * f,
                        de = d * e,
                        df = d * f;

                    te[0] = ce + df * b;
                    te[4] = de * b - cf;
                    te[8] = a * d;

                    te[1] = a * f;
                    te[5] = a * e;
                    te[9] = -b;

                    te[2] = cf * b - de;
                    te[6] = df + ce * b;
                    te[10] = a * c;

                } else if (euler.order === 'ZXY') {

                    var ce = c * e,
                        cf = c * f,
                        de = d * e,
                        df = d * f;

                    te[0] = ce - df * b;
                    te[4] = -a * f;
                    te[8] = de + cf * b;

                    te[1] = cf + de * b;
                    te[5] = a * e;
                    te[9] = df - ce * b;

                    te[2] = -a * d;
                    te[6] = b;
                    te[10] = a * c;

                } else if (euler.order === 'ZYX') {

                    var ae = a * e,
                        af = a * f,
                        be = b * e,
                        bf = b * f;

                    te[0] = c * e;
                    te[4] = be * d - af;
                    te[8] = ae * d + bf;

                    te[1] = c * f;
                    te[5] = bf * d + ae;
                    te[9] = af * d - be;

                    te[2] = -d;
                    te[6] = b * c;
                    te[10] = a * c;

                } else if (euler.order === 'YZX') {

                    var ac = a * c,
                        ad = a * d,
                        bc = b * c,
                        bd = b * d;

                    te[0] = c * e;
                    te[4] = bd - ac * f;
                    te[8] = bc * f + ad;

                    te[1] = f;
                    te[5] = a * e;
                    te[9] = -b * e;

                    te[2] = -d * e;
                    te[6] = ad * f + bc;
                    te[10] = ac - bd * f;

                } else if (euler.order === 'XZY') {

                    var ac = a * c,
                        ad = a * d,
                        bc = b * c,
                        bd = b * d;

                    te[0] = c * e;
                    te[4] = -f;
                    te[8] = d * e;

                    te[1] = ac * f + bd;
                    te[5] = a * e;
                    te[9] = ad * f - bc;

                    te[2] = bc * f - ad;
                    te[6] = b * e;
                    te[10] = bd * f + ac;

                }

                // last column
                te[3] = 0;
                te[7] = 0;
                te[11] = 0;

                // bottom row
                te[12] = 0;
                te[13] = 0;
                te[14] = 0;
                te[15] = 1;

                return this;

            },

            makeRotationFromQuaternion: function(q) {

                var te = this.elements;

                var x = q.x,
                    y = q.y,
                    z = q.z,
                    w = q.w;
                var x2 = x + x,
                    y2 = y + y,
                    z2 = z + z;
                var xx = x * x2,
                    xy = x * y2,
                    xz = x * z2;
                var yy = y * y2,
                    yz = y * z2,
                    zz = z * z2;
                var wx = w * x2,
                    wy = w * y2,
                    wz = w * z2;

                te[0] = 1 - (yy + zz);
                te[4] = xy - wz;
                te[8] = xz + wy;

                te[1] = xy + wz;
                te[5] = 1 - (xx + zz);
                te[9] = yz - wx;

                te[2] = xz - wy;
                te[6] = yz + wx;
                te[10] = 1 - (xx + yy);

                // last column
                te[3] = 0;
                te[7] = 0;
                te[11] = 0;

                // bottom row
                te[12] = 0;
                te[13] = 0;
                te[14] = 0;
                te[15] = 1;

                return this;

            },

            lookAt: function() {

                var x, y, z;

                return function lookAt(eye, target, up) {

                    if (x === undefined) {

                        x = new Vector3();
                        y = new Vector3();
                        z = new Vector3();

                    }

                    var te = this.elements;

                    z.subVectors(eye, target).normalize();

                    if (z.lengthSq() === 0) {

                        z.z = 1;

                    }

                    x.crossVectors(up, z).normalize();

                    if (x.lengthSq() === 0) {

                        z.z += 0.0001;
                        x.crossVectors(up, z).normalize();

                    }

                    y.crossVectors(z, x);


                    te[0] = x.x;
                    te[4] = y.x;
                    te[8] = z.x;
                    te[1] = x.y;
                    te[5] = y.y;
                    te[9] = z.y;
                    te[2] = x.z;
                    te[6] = y.z;
                    te[10] = z.z;

                    return this;

                };

            }(),

            multiply: function(m, n) {

                if (n !== undefined) {

                    console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');
                    return this.multiplyMatrices(m, n);

                }

                return this.multiplyMatrices(this, m);

            },

            premultiply: function(m) {

                return this.multiplyMatrices(m, this);

            },

            multiplyMatrices: function(a, b) {

                var ae = a.elements;
                var be = b.elements;
                var te = this.elements;

                var a11 = ae[0],
                    a12 = ae[4],
                    a13 = ae[8],
                    a14 = ae[12];
                var a21 = ae[1],
                    a22 = ae[5],
                    a23 = ae[9],
                    a24 = ae[13];
                var a31 = ae[2],
                    a32 = ae[6],
                    a33 = ae[10],
                    a34 = ae[14];
                var a41 = ae[3],
                    a42 = ae[7],
                    a43 = ae[11],
                    a44 = ae[15];

                var b11 = be[0],
                    b12 = be[4],
                    b13 = be[8],
                    b14 = be[12];
                var b21 = be[1],
                    b22 = be[5],
                    b23 = be[9],
                    b24 = be[13];
                var b31 = be[2],
                    b32 = be[6],
                    b33 = be[10],
                    b34 = be[14];
                var b41 = be[3],
                    b42 = be[7],
                    b43 = be[11],
                    b44 = be[15];

                te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
                te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
                te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
                te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

                te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
                te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
                te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
                te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

                te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
                te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
                te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
                te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

                te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
                te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
                te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
                te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

                return this;

            },

            multiplyToArray: function(a, b, r) {

                var te = this.elements;

                this.multiplyMatrices(a, b);

                r[0] = te[0];
                r[1] = te[1];
                r[2] = te[2];
                r[3] = te[3];
                r[4] = te[4];
                r[5] = te[5];
                r[6] = te[6];
                r[7] = te[7];
                r[8] = te[8];
                r[9] = te[9];
                r[10] = te[10];
                r[11] = te[11];
                r[12] = te[12];
                r[13] = te[13];
                r[14] = te[14];
                r[15] = te[15];

                return this;

            },

            multiplyScalar: function(s) {

                var te = this.elements;

                te[0] *= s;
                te[4] *= s;
                te[8] *= s;
                te[12] *= s;
                te[1] *= s;
                te[5] *= s;
                te[9] *= s;
                te[13] *= s;
                te[2] *= s;
                te[6] *= s;
                te[10] *= s;
                te[14] *= s;
                te[3] *= s;
                te[7] *= s;
                te[11] *= s;
                te[15] *= s;

                return this;

            },

            applyToBufferAttribute: function() {

                var v1;

                return function applyToBufferAttribute(attribute) {

                    if (v1 === undefined) v1 = new Vector3();

                    for (var i = 0, l = attribute.count; i < l; i++) {

                        v1.x = attribute.getX(i);
                        v1.y = attribute.getY(i);
                        v1.z = attribute.getZ(i);

                        v1.applyMatrix4(this);

                        attribute.setXYZ(i, v1.x, v1.y, v1.z);

                    }

                    return attribute;

                };

            }(),

            determinant: function() {

                var te = this.elements;

                var n11 = te[0],
                    n12 = te[4],
                    n13 = te[8],
                    n14 = te[12];
                var n21 = te[1],
                    n22 = te[5],
                    n23 = te[9],
                    n24 = te[13];
                var n31 = te[2],
                    n32 = te[6],
                    n33 = te[10],
                    n34 = te[14];
                var n41 = te[3],
                    n42 = te[7],
                    n43 = te[11],
                    n44 = te[15];

                //TODO: make this more efficient
                //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

                return (
                    n41 * (+n14 * n23 * n32 -
                        n13 * n24 * n32 -
                        n14 * n22 * n33 +
                        n12 * n24 * n33 +
                        n13 * n22 * n34 -
                        n12 * n23 * n34
                    ) +
                    n42 * (+n11 * n23 * n34 -
                        n11 * n24 * n33 +
                        n14 * n21 * n33 -
                        n13 * n21 * n34 +
                        n13 * n24 * n31 -
                        n14 * n23 * n31
                    ) +
                    n43 * (+n11 * n24 * n32 -
                        n11 * n22 * n34 -
                        n14 * n21 * n32 +
                        n12 * n21 * n34 +
                        n14 * n22 * n31 -
                        n12 * n24 * n31
                    ) +
                    n44 * (-n13 * n22 * n31 -
                        n11 * n23 * n32 +
                        n11 * n22 * n33 +
                        n13 * n21 * n32 -
                        n12 * n21 * n33 +
                        n12 * n23 * n31
                    )

                );

            },

            transpose: function() {

                var te = this.elements;
                var tmp;

                tmp = te[1];
                te[1] = te[4];
                te[4] = tmp;
                tmp = te[2];
                te[2] = te[8];
                te[8] = tmp;
                tmp = te[6];
                te[6] = te[9];
                te[9] = tmp;

                tmp = te[3];
                te[3] = te[12];
                te[12] = tmp;
                tmp = te[7];
                te[7] = te[13];
                te[13] = tmp;
                tmp = te[11];
                te[11] = te[14];
                te[14] = tmp;

                return this;

            },

            setPosition: function(v) {

                var te = this.elements;

                te[12] = v.x;
                te[13] = v.y;
                te[14] = v.z;

                return this;

            },

            getInverse: function(m, throwOnDegenerate) {

                // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
                var te = this.elements,
                    me = m.elements,

                    n11 = me[0],
                    n21 = me[1],
                    n31 = me[2],
                    n41 = me[3],
                    n12 = me[4],
                    n22 = me[5],
                    n32 = me[6],
                    n42 = me[7],
                    n13 = me[8],
                    n23 = me[9],
                    n33 = me[10],
                    n43 = me[11],
                    n14 = me[12],
                    n24 = me[13],
                    n34 = me[14],
                    n44 = me[15],

                    t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
                    t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
                    t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
                    t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

                var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

                if (det === 0) {

                    var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

                    if (throwOnDegenerate === true) {

                        throw new Error(msg);

                    } else {

                        console.warn(msg);

                    }

                    return this.identity();

                }

                var detInv = 1 / det;

                te[0] = t11 * detInv;
                te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
                te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
                te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;

                te[4] = t12 * detInv;
                te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
                te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
                te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;

                te[8] = t13 * detInv;
                te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
                te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
                te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;

                te[12] = t14 * detInv;
                te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
                te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
                te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;

                return this;

            },

            scale: function(v) {

                var te = this.elements;
                var x = v.x,
                    y = v.y,
                    z = v.z;

                te[0] *= x;
                te[4] *= y;
                te[8] *= z;
                te[1] *= x;
                te[5] *= y;
                te[9] *= z;
                te[2] *= x;
                te[6] *= y;
                te[10] *= z;
                te[3] *= x;
                te[7] *= y;
                te[11] *= z;

                return this;

            },

            getMaxScaleOnAxis: function() {

                var te = this.elements;

                var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
                var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
                var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];

                return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));

            },

            makeTranslation: function(x, y, z) {

                this.set(

                    1, 0, 0, x,
                    0, 1, 0, y,
                    0, 0, 1, z,
                    0, 0, 0, 1

                );

                return this;

            },

            makeRotationX: function(theta) {

                var c = Math.cos(theta),
                    s = Math.sin(theta);

                this.set(

                    1, 0, 0, 0,
                    0, c, -s, 0,
                    0, s, c, 0,
                    0, 0, 0, 1

                );

                return this;

            },

            makeRotationY: function(theta) {

                var c = Math.cos(theta),
                    s = Math.sin(theta);

                this.set(

                    c, 0, s, 0,
                    0, 1, 0, 0, -s, 0, c, 0,
                    0, 0, 0, 1

                );

                return this;

            },

            makeRotationZ: function(theta) {

                var c = Math.cos(theta),
                    s = Math.sin(theta);

                this.set(

                    c, -s, 0, 0,
                    s, c, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1

                );

                return this;

            },

            makeRotationAxis: function(axis, angle) {

                // Based on http://www.gamedev.net/reference/articles/article1199.asp

                var c = Math.cos(angle);
                var s = Math.sin(angle);
                var t = 1 - c;
                var x = axis.x,
                    y = axis.y,
                    z = axis.z;
                var tx = t * x,
                    ty = t * y;

                this.set(

                    tx * x + c, tx * y - s * z, tx * z + s * y, 0,
                    tx * y + s * z, ty * y + c, ty * z - s * x, 0,
                    tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
                    0, 0, 0, 1

                );

                return this;

            },

            makeScale: function(x, y, z) {

                this.set(

                    x, 0, 0, 0,
                    0, y, 0, 0,
                    0, 0, z, 0,
                    0, 0, 0, 1

                );

                return this;

            },

            makeShear: function(x, y, z) {

                this.set(

                    1, y, z, 0,
                    x, 1, z, 0,
                    x, y, 1, 0,
                    0, 0, 0, 1

                );

                return this;

            },

            compose: function(position, quaternion, scale) {

                this.makeRotationFromQuaternion(quaternion);
                this.scale(scale);
                this.setPosition(position);

                return this;

            },

            decompose: function() {

                var vector, matrix;

                return function decompose(position, quaternion, scale) {

                    if (vector === undefined) {

                        vector = new Vector3();
                        matrix = new Matrix4();

                    }

                    var te = this.elements;

                    var sx = vector.set(te[0], te[1], te[2]).length();
                    var sy = vector.set(te[4], te[5], te[6]).length();
                    var sz = vector.set(te[8], te[9], te[10]).length();

                    // if determine is negative, we need to invert one scale
                    var det = this.determinant();
                    if (det < 0) {

                        sx = -sx;

                    }

                    position.x = te[12];
                    position.y = te[13];
                    position.z = te[14];

                    // scale the rotation part

                    matrix.elements.set(this.elements); // at this point matrix is incomplete so we can't use .copy()

                    var invSX = 1 / sx;
                    var invSY = 1 / sy;
                    var invSZ = 1 / sz;

                    matrix.elements[0] *= invSX;
                    matrix.elements[1] *= invSX;
                    matrix.elements[2] *= invSX;

                    matrix.elements[4] *= invSY;
                    matrix.elements[5] *= invSY;
                    matrix.elements[6] *= invSY;

                    matrix.elements[8] *= invSZ;
                    matrix.elements[9] *= invSZ;
                    matrix.elements[10] *= invSZ;

                    quaternion.setFromRotationMatrix(matrix);

                    scale.x = sx;
                    scale.y = sy;
                    scale.z = sz;

                    return this;

                };

            }(),

            makePerspective: function(left, right, top, bottom, near, far) {

                if (far === undefined) {

                    console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');

                }

                var te = this.elements;
                var x = 2 * near / (right - left);
                var y = 2 * near / (top - bottom);

                var a = (right + left) / (right - left);
                var b = (top + bottom) / (top - bottom);
                var c = -(far + near) / (far - near);
                var d = -2 * far * near / (far - near);

                te[0] = x;
                te[4] = 0;
                te[8] = a;
                te[12] = 0;
                te[1] = 0;
                te[5] = y;
                te[9] = b;
                te[13] = 0;
                te[2] = 0;
                te[6] = 0;
                te[10] = c;
                te[14] = d;
                te[3] = 0;
                te[7] = 0;
                te[11] = -1;
                te[15] = 0;

                return this;

            },

            makeOrthographic: function(left, right, top, bottom, near, far) {

                var te = this.elements;
                var w = 1.0 / (right - left);
                var h = 1.0 / (top - bottom);
                var p = 1.0 / (far - near);

                var x = (right + left) * w;
                var y = (top + bottom) * h;
                var z = (far + near) * p;

                te[0] = 2 * w;
                te[4] = 0;
                te[8] = 0;
                te[12] = -x;
                te[1] = 0;
                te[5] = 2 * h;
                te[9] = 0;
                te[13] = -y;
                te[2] = 0;
                te[6] = 0;
                te[10] = -2 * p;
                te[14] = -z;
                te[3] = 0;
                te[7] = 0;
                te[11] = 0;
                te[15] = 1;

                return this;

            },

            equals: function(matrix) {

                var te = this.elements;
                var me = matrix.elements;

                for (var i = 0; i < 16; i++) {

                    if (te[i] !== me[i]) return false;

                }

                return true;

            },

            fromArray: function(array, offset) {

                if (offset === undefined) offset = 0;

                for (var i = 0; i < 16; i++) {

                    this.elements[i] = array[i + offset];

                }

                return this;

            },

            toArray: function(array, offset) {

                if (array === undefined) array = [];
                if (offset === undefined) offset = 0;

                var te = this.elements;

                array[offset] = te[0];
                array[offset + 1] = te[1];
                array[offset + 2] = te[2];
                array[offset + 3] = te[3];

                array[offset + 4] = te[4];
                array[offset + 5] = te[5];
                array[offset + 6] = te[6];
                array[offset + 7] = te[7];

                array[offset + 8] = te[8];
                array[offset + 9] = te[9];
                array[offset + 10] = te[10];
                array[offset + 11] = te[11];

                array[offset + 12] = te[12];
                array[offset + 13] = te[13];
                array[offset + 14] = te[14];
                array[offset + 15] = te[15];

                return array;

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {

            images = images !== undefined ? images : [];
            mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

            Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);

            this.flipY = false;

        }

        CubeTexture.prototype = Object.create(Texture.prototype);
        CubeTexture.prototype.constructor = CubeTexture;

        CubeTexture.prototype.isCubeTexture = true;

        Object.defineProperty(CubeTexture.prototype, 'images', {

            get: function() {

                return this.image;

            },

            set: function(value) {

                this.image = value;

            }

        });

        /**
         * @author tschw
         *
         * Uniforms of a program.
         * Those form a tree structure with a special top-level container for the root,
         * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
         *
         *
         * Properties of inner nodes including the top-level container:
         *
         * .seq - array of nested uniforms
         * .map - nested uniforms by name
         *
         *
         * Methods of all nodes except the top-level container:
         *
         * .setValue( gl, value, [renderer] )
         *
         * 		uploads a uniform value(s)
         *  	the 'renderer' parameter is needed for sampler uniforms
         *
         *
         * Static methods of the top-level container (renderer factorizations):
         *
         * .upload( gl, seq, values, renderer )
         *
         * 		sets uniforms in 'seq' to 'values[id].value'
         *
         * .seqWithValue( seq, values ) : filteredSeq
         *
         * 		filters 'seq' entries with corresponding entry in values
         *
         *
         * Methods of the top-level container (renderer factorizations):
         *
         * .setValue( gl, name, value )
         *
         * 		sets uniform with  name 'name' to 'value'
         *
         * .set( gl, obj, prop )
         *
         * 		sets uniform from object and property with same name than uniform
         *
         * .setOptional( gl, obj, prop )
         *
         * 		like .set for an optional property of the object
         *
         */

        var emptyTexture = new Texture();
        var emptyCubeTexture = new CubeTexture();

        // --- Base for inner nodes (including the root) ---

        function UniformContainer() {

            this.seq = [];
            this.map = {};

        }

        // --- Utilities ---

        // Array Caches (provide typed arrays for temporary by size)

        var arrayCacheF32 = [];
        var arrayCacheI32 = [];

        // Flattening for arrays of vectors and matrices

        function flatten(array, nBlocks, blockSize) {

            var firstElem = array[0];

            if (firstElem <= 0 || firstElem > 0) return array;
            // unoptimized: ! isNaN( firstElem )
            // see http://jacksondunstan.com/articles/983

            var n = nBlocks * blockSize,
                r = arrayCacheF32[n];

            if (r === undefined) {

                r = new Float32Array(n);
                arrayCacheF32[n] = r;

            }

            if (nBlocks !== 0) {

                firstElem.toArray(r, 0);

                for (var i = 1, offset = 0; i !== nBlocks; ++i) {

                    offset += blockSize;
                    array[i].toArray(r, offset);

                }

            }

            return r;

        }

        // Texture unit allocation

        function allocTexUnits(renderer, n) {

            var r = arrayCacheI32[n];

            if (r === undefined) {

                r = new Int32Array(n);
                arrayCacheI32[n] = r;

            }

            for (var i = 0; i !== n; ++i)
                r[i] = renderer.allocTextureUnit();

            return r;

        }

        // --- Setters ---

        // Note: Defining these methods externally, because they come in a bunch
        // and this way their names minify.

        // Single scalar

        function setValue1f(gl, v) {
            gl.uniform1f(this.addr, v);
        }

        function setValue1i(gl, v) {
            gl.uniform1i(this.addr, v);
        }

        // Single float vector (from flat array or THREE.VectorN)

        function setValue2fv(gl, v) {

            if (v.x === undefined) gl.uniform2fv(this.addr, v);
            else gl.uniform2f(this.addr, v.x, v.y);

        }

        function setValue3fv(gl, v) {

            if (v.x !== undefined)
                gl.uniform3f(this.addr, v.x, v.y, v.z);
            else if (v.r !== undefined)
                gl.uniform3f(this.addr, v.r, v.g, v.b);
            else
                gl.uniform3fv(this.addr, v);

        }

        function setValue4fv(gl, v) {

            if (v.x === undefined) gl.uniform4fv(this.addr, v);
            else gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);

        }

        // Single matrix (from flat array or MatrixN)

        function setValue2fm(gl, v) {

            gl.uniformMatrix2fv(this.addr, false, v.elements || v);

        }

        function setValue3fm(gl, v) {

            gl.uniformMatrix3fv(this.addr, false, v.elements || v);

        }

        function setValue4fm(gl, v) {

            gl.uniformMatrix4fv(this.addr, false, v.elements || v);

        }

        // Single texture (2D / Cube)

        function setValueT1(gl, v, renderer) {

            var unit = renderer.allocTextureUnit();
            gl.uniform1i(this.addr, unit);
            renderer.setTexture2D(v || emptyTexture, unit);

        }

        function setValueT6(gl, v, renderer) {

            var unit = renderer.allocTextureUnit();
            gl.uniform1i(this.addr, unit);
            renderer.setTextureCube(v || emptyCubeTexture, unit);

        }

        // Integer / Boolean vectors or arrays thereof (always flat arrays)

        function setValue2iv(gl, v) {
            gl.uniform2iv(this.addr, v);
        }

        function setValue3iv(gl, v) {
            gl.uniform3iv(this.addr, v);
        }

        function setValue4iv(gl, v) {
            gl.uniform4iv(this.addr, v);
        }

        // Helper to pick the right setter for the singular case

        function getSingularSetter(type) {

            switch (type) {

                case 0x1406:
                    return setValue1f; // FLOAT
                case 0x8b50:
                    return setValue2fv; // _VEC2
                case 0x8b51:
                    return setValue3fv; // _VEC3
                case 0x8b52:
                    return setValue4fv; // _VEC4

                case 0x8b5a:
                    return setValue2fm; // _MAT2
                case 0x8b5b:
                    return setValue3fm; // _MAT3
                case 0x8b5c:
                    return setValue4fm; // _MAT4

                case 0x8b5e:
                    return setValueT1; // SAMPLER_2D
                case 0x8b60:
                    return setValueT6; // SAMPLER_CUBE

                case 0x1404:
                case 0x8b56:
                    return setValue1i; // INT, BOOL
                case 0x8b53:
                case 0x8b57:
                    return setValue2iv; // _VEC2
                case 0x8b54:
                case 0x8b58:
                    return setValue3iv; // _VEC3
                case 0x8b55:
                case 0x8b59:
                    return setValue4iv; // _VEC4

            }

        }

        // Array of scalars

        function setValue1fv(gl, v) {
            gl.uniform1fv(this.addr, v);
        }

        function setValue1iv(gl, v) {
            gl.uniform1iv(this.addr, v);
        }

        // Array of vectors (flat or from THREE classes)

        function setValueV2a(gl, v) {

            gl.uniform2fv(this.addr, flatten(v, this.size, 2));

        }

        function setValueV3a(gl, v) {

            gl.uniform3fv(this.addr, flatten(v, this.size, 3));

        }

        function setValueV4a(gl, v) {

            gl.uniform4fv(this.addr, flatten(v, this.size, 4));

        }

        // Array of matrices (flat or from THREE clases)

        function setValueM2a(gl, v) {

            gl.uniformMatrix2fv(this.addr, false, flatten(v, this.size, 4));

        }

        function setValueM3a(gl, v) {

            gl.uniformMatrix3fv(this.addr, false, flatten(v, this.size, 9));

        }

        function setValueM4a(gl, v) {

            gl.uniformMatrix4fv(this.addr, false, flatten(v, this.size, 16));

        }

        // Array of textures (2D / Cube)

        function setValueT1a(gl, v, renderer) {

            var n = v.length,
                units = allocTexUnits(renderer, n);

            gl.uniform1iv(this.addr, units);

            for (var i = 0; i !== n; ++i) {

                renderer.setTexture2D(v[i] || emptyTexture, units[i]);

            }

        }

        function setValueT6a(gl, v, renderer) {

            var n = v.length,
                units = allocTexUnits(renderer, n);

            gl.uniform1iv(this.addr, units);

            for (var i = 0; i !== n; ++i) {

                renderer.setTextureCube(v[i] || emptyCubeTexture, units[i]);

            }

        }

        // Helper to pick the right setter for a pure (bottom-level) array

        function getPureArraySetter(type) {

            switch (type) {

                case 0x1406:
                    return setValue1fv; // FLOAT
                case 0x8b50:
                    return setValueV2a; // _VEC2
                case 0x8b51:
                    return setValueV3a; // _VEC3
                case 0x8b52:
                    return setValueV4a; // _VEC4

                case 0x8b5a:
                    return setValueM2a; // _MAT2
                case 0x8b5b:
                    return setValueM3a; // _MAT3
                case 0x8b5c:
                    return setValueM4a; // _MAT4

                case 0x8b5e:
                    return setValueT1a; // SAMPLER_2D
                case 0x8b60:
                    return setValueT6a; // SAMPLER_CUBE

                case 0x1404:
                case 0x8b56:
                    return setValue1iv; // INT, BOOL
                case 0x8b53:
                case 0x8b57:
                    return setValue2iv; // _VEC2
                case 0x8b54:
                case 0x8b58:
                    return setValue3iv; // _VEC3
                case 0x8b55:
                case 0x8b59:
                    return setValue4iv; // _VEC4

            }

        }

        // --- Uniform Classes ---

        function SingleUniform(id, activeInfo, addr) {

            this.id = id;
            this.addr = addr;
            this.setValue = getSingularSetter(activeInfo.type);

            // this.path = activeInfo.name; // DEBUG

        }

        function PureArrayUniform(id, activeInfo, addr) {

            this.id = id;
            this.addr = addr;
            this.size = activeInfo.size;
            this.setValue = getPureArraySetter(activeInfo.type);

            // this.path = activeInfo.name; // DEBUG

        }

        function StructuredUniform(id) {

            this.id = id;

            UniformContainer.call(this); // mix-in

        }

        StructuredUniform.prototype.setValue = function(gl, value) {

            // Note: Don't need an extra 'renderer' parameter, since samplers
            // are not allowed in structured uniforms.

            var seq = this.seq;

            for (var i = 0, n = seq.length; i !== n; ++i) {

                var u = seq[i];
                u.setValue(gl, value[u.id]);

            }

        };

        // --- Top-level ---

        // Parser - builds up the property tree from the path strings

        var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

        // extracts
        // 	- the identifier (member name or array index)
        //  - followed by an optional right bracket (found when array index)
        //  - followed by an optional left bracket or dot (type of subscript)
        //
        // Note: These portions can be read in a non-overlapping fashion and
        // allow straightforward parsing of the hierarchy that WebGL encodes
        // in the uniform names.

        function addUniform(container, uniformObject) {

            container.seq.push(uniformObject);
            container.map[uniformObject.id] = uniformObject;

        }

        function parseUniform(activeInfo, addr, container) {

            var path = activeInfo.name,
                pathLength = path.length;

            // reset RegExp object, because of the early exit of a previous run
            RePathPart.lastIndex = 0;

            for (;;) {

                var match = RePathPart.exec(path),
                    matchEnd = RePathPart.lastIndex,

                    id = match[1],
                    idIsIndex = match[2] === ']',
                    subscript = match[3];

                if (idIsIndex) id = id | 0; // convert to integer

                if (subscript === undefined ||
                    subscript === '[' && matchEnd + 2 === pathLength) {
                    // bare name or "pure" bottom-level array "[0]" suffix

                    addUniform(container, subscript === undefined ?
                        new SingleUniform(id, activeInfo, addr) :
                        new PureArrayUniform(id, activeInfo, addr));

                    break;

                } else {
                    // step into inner node / create it in case it doesn't exist

                    var map = container.map,
                        next = map[id];

                    if (next === undefined) {

                        next = new StructuredUniform(id);
                        addUniform(container, next);

                    }

                    container = next;

                }

            }

        }

        // Root Container

        function WebGLUniforms(gl, program, renderer) {

            UniformContainer.call(this);

            this.renderer = renderer;

            var n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);

            for (var i = 0; i < n; ++i) {

                var info = gl.getActiveUniform(program, i),
                    path = info.name,
                    addr = gl.getUniformLocation(program, path);

                parseUniform(info, addr, this);

            }

        }

        WebGLUniforms.prototype.setValue = function(gl, name, value) {

            var u = this.map[name];

            if (u !== undefined) u.setValue(gl, value, this.renderer);

        };

        WebGLUniforms.prototype.set = function(gl, object, name) {

            var u = this.map[name];

            if (u !== undefined) u.setValue(gl, object[name], this.renderer);

        };

        WebGLUniforms.prototype.setOptional = function(gl, object, name) {

            var v = object[name];

            if (v !== undefined) this.setValue(gl, name, v);

        };


        // Static interface

        WebGLUniforms.upload = function(gl, seq, values, renderer) {

            for (var i = 0, n = seq.length; i !== n; ++i) {

                var u = seq[i],
                    v = values[u.id];

                if (v.needsUpdate !== false) {
                    // note: always updating when .needsUpdate is undefined

                    u.setValue(gl, v.value, renderer);

                }

            }

        };

        WebGLUniforms.seqWithValue = function(seq, values) {

            var r = [];

            for (var i = 0, n = seq.length; i !== n; ++i) {

                var u = seq[i];
                if (u.id in values) r.push(u);

            }

            return r;

        };

        /**
         * Uniform Utilities
         */

        var UniformsUtils = {

            merge: function(uniforms) {

                var merged = {};

                for (var u = 0; u < uniforms.length; u++) {

                    var tmp = this.clone(uniforms[u]);

                    for (var p in tmp) {

                        merged[p] = tmp[p];

                    }

                }

                return merged;

            },

            clone: function(uniforms_src) {

                var uniforms_dst = {};

                for (var u in uniforms_src) {

                    uniforms_dst[u] = {};

                    for (var p in uniforms_src[u]) {

                        var parameter_src = uniforms_src[u][p];

                        if (parameter_src && (parameter_src.isColor ||
                                parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
                                parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
                                parameter_src.isTexture)) {

                            uniforms_dst[u][p] = parameter_src.clone();

                        } else if (Array.isArray(parameter_src)) {

                            uniforms_dst[u][p] = parameter_src.slice();

                        } else {

                            uniforms_dst[u][p] = parameter_src;

                        }

                    }

                }

                return uniforms_dst;

            }

        };

        var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

        var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

        var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

        var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

        var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

        var begin_vertex = "\nvec3 transformed = vec3( position );\n";

        var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

        var bsdfs = "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 ltcTextureCoords( const in GeometricContext geometry, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = (LUT_SIZE - 1.0)/LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5/LUT_SIZE;\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 P = geometry.position;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nvoid clipQuadToHorizon( inout vec3 L[5], out int n ) {\n\tint config = 0;\n\tif ( L[0].z > 0.0 ) config += 1;\n\tif ( L[1].z > 0.0 ) config += 2;\n\tif ( L[2].z > 0.0 ) config += 4;\n\tif ( L[3].z > 0.0 ) config += 8;\n\tn = 0;\n\tif ( config == 0 ) {\n\t} else if ( config == 1 ) {\n\t\tn = 3;\n\t\tL[1] = -L[1].z * L[0] + L[0].z * L[1];\n\t\tL[2] = -L[3].z * L[0] + L[0].z * L[3];\n\t} else if ( config == 2 ) {\n\t\tn = 3;\n\t\tL[0] = -L[0].z * L[1] + L[1].z * L[0];\n\t\tL[2] = -L[2].z * L[1] + L[1].z * L[2];\n\t} else if ( config == 3 ) {\n\t\tn = 4;\n\t\tL[2] = -L[2].z * L[1] + L[1].z * L[2];\n\t\tL[3] = -L[3].z * L[0] + L[0].z * L[3];\n\t} else if ( config == 4 ) {\n\t\tn = 3;\n\t\tL[0] = -L[3].z * L[2] + L[2].z * L[3];\n\t\tL[1] = -L[1].z * L[2] + L[2].z * L[1];\n\t} else if ( config == 5 ) {\n\t\tn = 0;\n\t} else if ( config == 6 ) {\n\t\tn = 4;\n\t\tL[0] = -L[0].z * L[1] + L[1].z * L[0];\n\t\tL[3] = -L[3].z * L[2] + L[2].z * L[3];\n\t} else if ( config == 7 ) {\n\t\tn = 5;\n\t\tL[4] = -L[3].z * L[0] + L[0].z * L[3];\n\t\tL[3] = -L[3].z * L[2] + L[2].z * L[3];\n\t} else if ( config == 8 ) {\n\t\tn = 3;\n\t\tL[0] = -L[0].z * L[3] + L[3].z * L[0];\n\t\tL[1] = -L[2].z * L[3] + L[3].z * L[2];\n\t\tL[2] =  L[3];\n\t} else if ( config == 9 ) {\n\t\tn = 4;\n\t\tL[1] = -L[1].z * L[0] + L[0].z * L[1];\n\t\tL[2] = -L[2].z * L[3] + L[3].z * L[2];\n\t} else if ( config == 10 ) {\n\t\tn = 0;\n\t} else if ( config == 11 ) {\n\t\tn = 5;\n\t\tL[4] = L[3];\n\t\tL[3] = -L[2].z * L[3] + L[3].z * L[2];\n\t\tL[2] = -L[2].z * L[1] + L[1].z * L[2];\n\t} else if ( config == 12 ) {\n\t\tn = 4;\n\t\tL[1] = -L[1].z * L[2] + L[2].z * L[1];\n\t\tL[0] = -L[0].z * L[3] + L[3].z * L[0];\n\t} else if ( config == 13 ) {\n\t\tn = 5;\n\t\tL[4] = L[3];\n\t\tL[3] = L[2];\n\t\tL[2] = -L[1].z * L[2] + L[2].z * L[1];\n\t\tL[1] = -L[1].z * L[0] + L[0].z * L[1];\n\t} else if ( config == 14 ) {\n\t\tn = 5;\n\t\tL[4] = -L[0].z * L[3] + L[3].z * L[0];\n\t\tL[0] = -L[0].z * L[1] + L[1].z * L[0];\n\t} else if ( config == 15 ) {\n\t\tn = 4;\n\t}\n\tif ( n == 3 )\n\t\tL[3] = L[0];\n\tif ( n == 4 )\n\t\tL[4] = L[0];\n}\nfloat integrateLtcBrdfOverRectEdge( vec3 v1, vec3 v2 ) {\n\tfloat cosTheta = dot( v1, v2 );\n\tfloat theta = acos( cosTheta );\n\tfloat res = cross( v1, v2 ).z * ( ( theta > 0.001 ) ? theta / sin( theta ) : 1.0 );\n\treturn res;\n}\nvoid initRectPoints( const in vec3 pos, const in vec3 halfWidth, const in vec3 halfHeight, out vec3 rectPoints[4] ) {\n\trectPoints[0] = pos - halfWidth - halfHeight;\n\trectPoints[1] = pos + halfWidth - halfHeight;\n\trectPoints[2] = pos + halfWidth + halfHeight;\n\trectPoints[3] = pos - halfWidth + halfHeight;\n}\nvec3 integrateLtcBrdfOverRect( const in GeometricContext geometry, const in mat3 brdfMat, const in vec3 rectPoints[4] ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 P = geometry.position;\n\tvec3 T1, T2;\n\tT1 = normalize(V - N * dot( V, N ));\n\tT2 = - cross( N, T1 );\n\tmat3 brdfWrtSurface = brdfMat * transpose( mat3( T1, T2, N ) );\n\tvec3 clippedRect[5];\n\tclippedRect[0] = brdfWrtSurface * ( rectPoints[0] - P );\n\tclippedRect[1] = brdfWrtSurface * ( rectPoints[1] - P );\n\tclippedRect[2] = brdfWrtSurface * ( rectPoints[2] - P );\n\tclippedRect[3] = brdfWrtSurface * ( rectPoints[3] - P );\n\tint n;\n\tclipQuadToHorizon(clippedRect, n);\n\tif ( n == 0 )\n\t\treturn vec3( 0, 0, 0 );\n\tclippedRect[0] = normalize( clippedRect[0] );\n\tclippedRect[1] = normalize( clippedRect[1] );\n\tclippedRect[2] = normalize( clippedRect[2] );\n\tclippedRect[3] = normalize( clippedRect[3] );\n\tclippedRect[4] = normalize( clippedRect[4] );\n\tfloat sum = 0.0;\n\tsum += integrateLtcBrdfOverRectEdge( clippedRect[0], clippedRect[1] );\n\tsum += integrateLtcBrdfOverRectEdge( clippedRect[1], clippedRect[2] );\n\tsum += integrateLtcBrdfOverRectEdge( clippedRect[2], clippedRect[3] );\n\tif (n >= 4)\n\t\tsum += integrateLtcBrdfOverRectEdge( clippedRect[3], clippedRect[4] );\n\tif (n == 5)\n\t\tsum += integrateLtcBrdfOverRectEdge( clippedRect[4], clippedRect[0] );\n\tsum = max( 0.0, sum );\n\tvec3 Lo_i = vec3( sum, sum, sum );\n\treturn Lo_i;\n}\nvec3 Rect_Area_Light_Specular_Reflectance(\n\t\tconst in GeometricContext geometry,\n\t\tconst in vec3 lightPos, const in vec3 lightHalfWidth, const in vec3 lightHalfHeight,\n\t\tconst in float roughness,\n\t\tconst in sampler2D ltcMat, const in sampler2D ltcMag ) {\n\tvec3 rectPoints[4];\n\tinitRectPoints( lightPos, lightHalfWidth, lightHalfHeight, rectPoints );\n\tvec2 uv = ltcTextureCoords( geometry, roughness );\n\tvec4 brdfLtcApproxParams, t;\n\tbrdfLtcApproxParams = texture2D( ltcMat, uv );\n\tt = texture2D( ltcMat, uv );\n\tfloat brdfLtcScalar = texture2D( ltcMag, uv ).a;\n\tmat3 brdfLtcApproxMat = mat3(\n\t\tvec3(   1,   0, t.y ),\n\t\tvec3(   0, t.z,   0 ),\n\t\tvec3( t.w,   0, t.x )\n\t);\n\tvec3 specularReflectance = integrateLtcBrdfOverRect( geometry, brdfLtcApproxMat, rectPoints );\n\tspecularReflectance *= brdfLtcScalar;\n\treturn specularReflectance;\n}\nvec3 Rect_Area_Light_Diffuse_Reflectance(\n\t\tconst in GeometricContext geometry,\n\t\tconst in vec3 lightPos, const in vec3 lightHalfWidth, const in vec3 lightHalfHeight ) {\n\tvec3 rectPoints[4];\n\tinitRectPoints( lightPos, lightHalfWidth, lightHalfHeight, rectPoints );\n\tmat3 diffuseBrdfMat = mat3(1);\n\tvec3 diffuseReflectance = integrateLtcBrdfOverRect( geometry, diffuseBrdfMat, rectPoints );\n\treturn diffuseReflectance;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

        var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

        var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";

        var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

        var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

        var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

        var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

        var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

        var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

        var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

        var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transpose( const in mat3 v ) {\n\tmat3 tmp;\n\ttmp[0] = vec3(v[0].x, v[1].x, v[2].x);\n\ttmp[1] = vec3(v[0].y, v[1].y, v[2].y);\n\ttmp[2] = vec3(v[0].z, v[1].z, v[2].z);\n\treturn tmp;\n}\n";

        var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

        var defaultnormal_vertex = "#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n";

        var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

        var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

        var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

        var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

        var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

        var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n";

        var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

        var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

        var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

        var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

        var fog_vertex = "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif";

        var fog_pars_vertex = "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n";

        var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

        var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n";

        var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n";

        var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

        var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

        var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

        var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

        var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

        var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_BlinnPhong( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 matDiffColor = material.diffuseColor;\n\t\tvec3 matSpecColor = material.specularColor;\n\t\tvec3 lightColor   = rectAreaLight.color;\n\t\tfloat roughness = BlinnExponentToGGXRoughness( material.specularShininess );\n\t\tvec3 spec = Rect_Area_Light_Specular_Reflectance(\n\t\t\t\tgeometry,\n\t\t\t\trectAreaLight.position, rectAreaLight.halfWidth, rectAreaLight.halfHeight,\n\t\t\t\troughness,\n\t\t\t\tltcMat, ltcMag );\n\t\tvec3 diff = Rect_Area_Light_Diffuse_Reflectance(\n\t\t\t\tgeometry,\n\t\t\t\trectAreaLight.position, rectAreaLight.halfWidth, rectAreaLight.halfHeight );\n\t\treflectedLight.directSpecular += lightColor * matSpecColor * spec / PI2;\n\t\treflectedLight.directDiffuse  += lightColor * matDiffColor * diff / PI2;\n\t}\n#endif\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

        var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

        var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 matDiffColor = material.diffuseColor;\n\t\tvec3 matSpecColor = material.specularColor;\n\t\tvec3 lightColor   = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 spec = Rect_Area_Light_Specular_Reflectance(\n\t\t\t\tgeometry,\n\t\t\t\trectAreaLight.position, rectAreaLight.halfWidth, rectAreaLight.halfHeight,\n\t\t\t\troughness,\n\t\t\t\tltcMat, ltcMag );\n\t\tvec3 diff = Rect_Area_Light_Diffuse_Reflectance(\n\t\t\t\tgeometry,\n\t\t\t\trectAreaLight.position, rectAreaLight.halfWidth, rectAreaLight.halfHeight );\n\t\treflectedLight.directSpecular += lightColor * matSpecColor * spec;\n\t\treflectedLight.directDiffuse  += lightColor * matDiffColor * diff;\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

        var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

        var logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

        var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

        var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

        var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n";

        var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

        var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

        var map_particle_fragment = "#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

        var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n";

        var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n";

        var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

        var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

        var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

        var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

        var normal_flip = "#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n";

        var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

        var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";

        var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

        var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

        var project_vertex = "#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n";

        var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n";

        var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

        var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

        var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

        var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

        var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

        var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

        var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

        var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n";

        var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

        var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

        var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

        var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

        var tonemapping_pars_fragment = "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

        var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

        var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n";

        var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

        var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

        var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

        var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

        var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n";

        var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

        var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

        var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

        var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

        var distanceRGBA_frag = "uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n";

        var distanceRGBA_vert = "varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n";

        var equirect_frag = "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

        var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

        var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

        var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";

        var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

        var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n";

        var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

        var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

        var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

        var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

        var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

        var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

        var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n";

        var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n";

        var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

        var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

        var shadow_frag = "uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0 - getShadowMask() ) );\n}\n";

        var shadow_vert = "#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

        var ShaderChunk = {
            alphamap_fragment: alphamap_fragment,
            alphamap_pars_fragment: alphamap_pars_fragment,
            alphatest_fragment: alphatest_fragment,
            aomap_fragment: aomap_fragment,
            aomap_pars_fragment: aomap_pars_fragment,
            begin_vertex: begin_vertex,
            beginnormal_vertex: beginnormal_vertex,
            bsdfs: bsdfs,
            bumpmap_pars_fragment: bumpmap_pars_fragment,
            clipping_planes_fragment: clipping_planes_fragment,
            clipping_planes_pars_fragment: clipping_planes_pars_fragment,
            clipping_planes_pars_vertex: clipping_planes_pars_vertex,
            clipping_planes_vertex: clipping_planes_vertex,
            color_fragment: color_fragment,
            color_pars_fragment: color_pars_fragment,
            color_pars_vertex: color_pars_vertex,
            color_vertex: color_vertex,
            common: common,
            cube_uv_reflection_fragment: cube_uv_reflection_fragment,
            defaultnormal_vertex: defaultnormal_vertex,
            displacementmap_pars_vertex: displacementmap_pars_vertex,
            displacementmap_vertex: displacementmap_vertex,
            emissivemap_fragment: emissivemap_fragment,
            emissivemap_pars_fragment: emissivemap_pars_fragment,
            encodings_fragment: encodings_fragment,
            encodings_pars_fragment: encodings_pars_fragment,
            envmap_fragment: envmap_fragment,
            envmap_pars_fragment: envmap_pars_fragment,
            envmap_pars_vertex: envmap_pars_vertex,
            envmap_vertex: envmap_vertex,
            fog_vertex: fog_vertex,
            fog_pars_vertex: fog_pars_vertex,
            fog_fragment: fog_fragment,
            fog_pars_fragment: fog_pars_fragment,
            gradientmap_pars_fragment: gradientmap_pars_fragment,
            lightmap_fragment: lightmap_fragment,
            lightmap_pars_fragment: lightmap_pars_fragment,
            lights_lambert_vertex: lights_lambert_vertex,
            lights_pars: lights_pars,
            lights_phong_fragment: lights_phong_fragment,
            lights_phong_pars_fragment: lights_phong_pars_fragment,
            lights_physical_fragment: lights_physical_fragment,
            lights_physical_pars_fragment: lights_physical_pars_fragment,
            lights_template: lights_template,
            logdepthbuf_fragment: logdepthbuf_fragment,
            logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
            logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
            logdepthbuf_vertex: logdepthbuf_vertex,
            map_fragment: map_fragment,
            map_pars_fragment: map_pars_fragment,
            map_particle_fragment: map_particle_fragment,
            map_particle_pars_fragment: map_particle_pars_fragment,
            metalnessmap_fragment: metalnessmap_fragment,
            metalnessmap_pars_fragment: metalnessmap_pars_fragment,
            morphnormal_vertex: morphnormal_vertex,
            morphtarget_pars_vertex: morphtarget_pars_vertex,
            morphtarget_vertex: morphtarget_vertex,
            normal_flip: normal_flip,
            normal_fragment: normal_fragment,
            normalmap_pars_fragment: normalmap_pars_fragment,
            packing: packing,
            premultiplied_alpha_fragment: premultiplied_alpha_fragment,
            project_vertex: project_vertex,
            roughnessmap_fragment: roughnessmap_fragment,
            roughnessmap_pars_fragment: roughnessmap_pars_fragment,
            shadowmap_pars_fragment: shadowmap_pars_fragment,
            shadowmap_pars_vertex: shadowmap_pars_vertex,
            shadowmap_vertex: shadowmap_vertex,
            shadowmask_pars_fragment: shadowmask_pars_fragment,
            skinbase_vertex: skinbase_vertex,
            skinning_pars_vertex: skinning_pars_vertex,
            skinning_vertex: skinning_vertex,
            skinnormal_vertex: skinnormal_vertex,
            specularmap_fragment: specularmap_fragment,
            specularmap_pars_fragment: specularmap_pars_fragment,
            tonemapping_fragment: tonemapping_fragment,
            tonemapping_pars_fragment: tonemapping_pars_fragment,
            uv_pars_fragment: uv_pars_fragment,
            uv_pars_vertex: uv_pars_vertex,
            uv_vertex: uv_vertex,
            uv2_pars_fragment: uv2_pars_fragment,
            uv2_pars_vertex: uv2_pars_vertex,
            uv2_vertex: uv2_vertex,
            worldpos_vertex: worldpos_vertex,

            cube_frag: cube_frag,
            cube_vert: cube_vert,
            depth_frag: depth_frag,
            depth_vert: depth_vert,
            distanceRGBA_frag: distanceRGBA_frag,
            distanceRGBA_vert: distanceRGBA_vert,
            equirect_frag: equirect_frag,
            equirect_vert: equirect_vert,
            linedashed_frag: linedashed_frag,
            linedashed_vert: linedashed_vert,
            meshbasic_frag: meshbasic_frag,
            meshbasic_vert: meshbasic_vert,
            meshlambert_frag: meshlambert_frag,
            meshlambert_vert: meshlambert_vert,
            meshphong_frag: meshphong_frag,
            meshphong_vert: meshphong_vert,
            meshphysical_frag: meshphysical_frag,
            meshphysical_vert: meshphysical_vert,
            normal_frag: normal_frag,
            normal_vert: normal_vert,
            points_frag: points_frag,
            points_vert: points_vert,
            shadow_frag: shadow_frag,
            shadow_vert: shadow_vert
        };

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function Color(r, g, b) {

            if (g === undefined && b === undefined) {

                // r is THREE.Color, hex or string
                return this.set(r);

            }

            return this.setRGB(r, g, b);

        }

        Color.prototype = {

            constructor: Color,

            isColor: true,

            r: 1,
            g: 1,
            b: 1,

            set: function(value) {

                if (value && value.isColor) {

                    this.copy(value);

                } else if (typeof value === 'number') {

                    this.setHex(value);

                } else if (typeof value === 'string') {

                    this.setStyle(value);

                }

                return this;

            },

            setScalar: function(scalar) {

                this.r = scalar;
                this.g = scalar;
                this.b = scalar;

                return this;

            },

            setHex: function(hex) {

                hex = Math.floor(hex);

                this.r = (hex >> 16 & 255) / 255;
                this.g = (hex >> 8 & 255) / 255;
                this.b = (hex & 255) / 255;

                return this;

            },

            setRGB: function(r, g, b) {

                this.r = r;
                this.g = g;
                this.b = b;

                return this;

            },

            setHSL: function() {

                function hue2rgb(p, q, t) {

                    if (t < 0) t += 1;
                    if (t > 1) t -= 1;
                    if (t < 1 / 6) return p + (q - p) * 6 * t;
                    if (t < 1 / 2) return q;
                    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
                    return p;

                }

                return function setHSL(h, s, l) {

                    // h,s,l ranges are in 0.0 - 1.0
                    h = _Math.euclideanModulo(h, 1);
                    s = _Math.clamp(s, 0, 1);
                    l = _Math.clamp(l, 0, 1);

                    if (s === 0) {

                        this.r = this.g = this.b = l;

                    } else {

                        var p = l <= 0.5 ? l * (1 + s) : l + s - (l * s);
                        var q = (2 * l) - p;

                        this.r = hue2rgb(q, p, h + 1 / 3);
                        this.g = hue2rgb(q, p, h);
                        this.b = hue2rgb(q, p, h - 1 / 3);

                    }

                    return this;

                };

            }(),

            setStyle: function(style) {

                function handleAlpha(string) {

                    if (string === undefined) return;

                    if (parseFloat(string) < 1) {

                        console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');

                    }

                }


                var m;

                if (m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)) {

                    // rgb / hsl

                    var color;
                    var name = m[1];
                    var components = m[2];

                    switch (name) {

                        case 'rgb':
                        case 'rgba':

                            if (color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {

                                // rgb(255,0,0) rgba(255,0,0,0.5)
                                this.r = Math.min(255, parseInt(color[1], 10)) / 255;
                                this.g = Math.min(255, parseInt(color[2], 10)) / 255;
                                this.b = Math.min(255, parseInt(color[3], 10)) / 255;

                                handleAlpha(color[5]);

                                return this;

                            }

                            if (color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {

                                // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
                                this.r = Math.min(100, parseInt(color[1], 10)) / 100;
                                this.g = Math.min(100, parseInt(color[2], 10)) / 100;
                                this.b = Math.min(100, parseInt(color[3], 10)) / 100;

                                handleAlpha(color[5]);

                                return this;

                            }

                            break;

                        case 'hsl':
                        case 'hsla':

                            if (color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {

                                // hsl(120,50%,50%) hsla(120,50%,50%,0.5)
                                var h = parseFloat(color[1]) / 360;
                                var s = parseInt(color[2], 10) / 100;
                                var l = parseInt(color[3], 10) / 100;

                                handleAlpha(color[5]);

                                return this.setHSL(h, s, l);

                            }

                            break;

                    }

                } else if (m = /^\#([A-Fa-f0-9]+)$/.exec(style)) {

                    // hex color

                    var hex = m[1];
                    var size = hex.length;

                    if (size === 3) {

                        // #ff0
                        this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
                        this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
                        this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;

                        return this;

                    } else if (size === 6) {

                        // #ff0000
                        this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
                        this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
                        this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;

                        return this;

                    }

                }

                if (style && style.length > 0) {

                    // color keywords
                    var hex = ColorKeywords[style];

                    if (hex !== undefined) {

                        // red
                        this.setHex(hex);

                    } else {

                        // unknown color
                        console.warn('THREE.Color: Unknown color ' + style);

                    }

                }

                return this;

            },

            clone: function() {

                return new this.constructor(this.r, this.g, this.b);

            },

            copy: function(color) {

                this.r = color.r;
                this.g = color.g;
                this.b = color.b;

                return this;

            },

            copyGammaToLinear: function(color, gammaFactor) {

                if (gammaFactor === undefined) gammaFactor = 2.0;

                this.r = Math.pow(color.r, gammaFactor);
                this.g = Math.pow(color.g, gammaFactor);
                this.b = Math.pow(color.b, gammaFactor);

                return this;

            },

            copyLinearToGamma: function(color, gammaFactor) {

                if (gammaFactor === undefined) gammaFactor = 2.0;

                var safeInverse = (gammaFactor > 0) ? (1.0 / gammaFactor) : 1.0;

                this.r = Math.pow(color.r, safeInverse);
                this.g = Math.pow(color.g, safeInverse);
                this.b = Math.pow(color.b, safeInverse);

                return this;

            },

            convertGammaToLinear: function() {

                var r = this.r,
                    g = this.g,
                    b = this.b;

                this.r = r * r;
                this.g = g * g;
                this.b = b * b;

                return this;

            },

            convertLinearToGamma: function() {

                this.r = Math.sqrt(this.r);
                this.g = Math.sqrt(this.g);
                this.b = Math.sqrt(this.b);

                return this;

            },

            getHex: function() {

                return (this.r * 255) << 16 ^ (this.g * 255) << 8 ^ (this.b * 255) << 0;

            },

            getHexString: function() {

                return ('000000' + this.getHex().toString(16)).slice(-6);

            },

            getHSL: function(optionalTarget) {

                // h,s,l ranges are in 0.0 - 1.0

                var hsl = optionalTarget || {
                    h: 0,
                    s: 0,
                    l: 0
                };

                var r = this.r,
                    g = this.g,
                    b = this.b;

                var max = Math.max(r, g, b);
                var min = Math.min(r, g, b);

                var hue, saturation;
                var lightness = (min + max) / 2.0;

                if (min === max) {

                    hue = 0;
                    saturation = 0;

                } else {

                    var delta = max - min;

                    saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);

                    switch (max) {

                        case r:
                            hue = (g - b) / delta + (g < b ? 6 : 0);
                            break;
                        case g:
                            hue = (b - r) / delta + 2;
                            break;
                        case b:
                            hue = (r - g) / delta + 4;
                            break;

                    }

                    hue /= 6;

                }

                hsl.h = hue;
                hsl.s = saturation;
                hsl.l = lightness;

                return hsl;

            },

            getStyle: function() {

                return 'rgb(' + ((this.r * 255) | 0) + ',' + ((this.g * 255) | 0) + ',' + ((this.b * 255) | 0) + ')';

            },

            offsetHSL: function(h, s, l) {

                var hsl = this.getHSL();

                hsl.h += h;
                hsl.s += s;
                hsl.l += l;

                this.setHSL(hsl.h, hsl.s, hsl.l);

                return this;

            },

            add: function(color) {

                this.r += color.r;
                this.g += color.g;
                this.b += color.b;

                return this;

            },

            addColors: function(color1, color2) {

                this.r = color1.r + color2.r;
                this.g = color1.g + color2.g;
                this.b = color1.b + color2.b;

                return this;

            },

            addScalar: function(s) {

                this.r += s;
                this.g += s;
                this.b += s;

                return this;

            },

            sub: function(color) {

                this.r = Math.max(0, this.r - color.r);
                this.g = Math.max(0, this.g - color.g);
                this.b = Math.max(0, this.b - color.b);

                return this;

            },

            multiply: function(color) {

                this.r *= color.r;
                this.g *= color.g;
                this.b *= color.b;

                return this;

            },

            multiplyScalar: function(s) {

                this.r *= s;
                this.g *= s;
                this.b *= s;

                return this;

            },

            lerp: function(color, alpha) {

                this.r += (color.r - this.r) * alpha;
                this.g += (color.g - this.g) * alpha;
                this.b += (color.b - this.b) * alpha;

                return this;

            },

            equals: function(c) {

                return (c.r === this.r) && (c.g === this.g) && (c.b === this.b);

            },

            fromArray: function(array, offset) {

                if (offset === undefined) offset = 0;

                this.r = array[offset];
                this.g = array[offset + 1];
                this.b = array[offset + 2];

                return this;

            },

            toArray: function(array, offset) {

                if (array === undefined) array = [];
                if (offset === undefined) offset = 0;

                array[offset] = this.r;
                array[offset + 1] = this.g;
                array[offset + 2] = this.b;

                return array;

            },

            toJSON: function() {

                return this.getHex();

            }

        };

        var ColorKeywords = {
            'aliceblue': 0xF0F8FF,
            'antiquewhite': 0xFAEBD7,
            'aqua': 0x00FFFF,
            'aquamarine': 0x7FFFD4,
            'azure': 0xF0FFFF,
            'beige': 0xF5F5DC,
            'bisque': 0xFFE4C4,
            'black': 0x000000,
            'blanchedalmond': 0xFFEBCD,
            'blue': 0x0000FF,
            'blueviolet': 0x8A2BE2,
            'brown': 0xA52A2A,
            'burlywood': 0xDEB887,
            'cadetblue': 0x5F9EA0,
            'chartreuse': 0x7FFF00,
            'chocolate': 0xD2691E,
            'coral': 0xFF7F50,
            'cornflowerblue': 0x6495ED,
            'cornsilk': 0xFFF8DC,
            'crimson': 0xDC143C,
            'cyan': 0x00FFFF,
            'darkblue': 0x00008B,
            'darkcyan': 0x008B8B,
            'darkgoldenrod': 0xB8860B,
            'darkgray': 0xA9A9A9,
            'darkgreen': 0x006400,
            'darkgrey': 0xA9A9A9,
            'darkkhaki': 0xBDB76B,
            'darkmagenta': 0x8B008B,
            'darkolivegreen': 0x556B2F,
            'darkorange': 0xFF8C00,
            'darkorchid': 0x9932CC,
            'darkred': 0x8B0000,
            'darksalmon': 0xE9967A,
            'darkseagreen': 0x8FBC8F,
            'darkslateblue': 0x483D8B,
            'darkslategray': 0x2F4F4F,
            'darkslategrey': 0x2F4F4F,
            'darkturquoise': 0x00CED1,
            'darkviolet': 0x9400D3,
            'deeppink': 0xFF1493,
            'deepskyblue': 0x00BFFF,
            'dimgray': 0x696969,
            'dimgrey': 0x696969,
            'dodgerblue': 0x1E90FF,
            'firebrick': 0xB22222,
            'floralwhite': 0xFFFAF0,
            'forestgreen': 0x228B22,
            'fuchsia': 0xFF00FF,
            'gainsboro': 0xDCDCDC,
            'ghostwhite': 0xF8F8FF,
            'gold': 0xFFD700,
            'goldenrod': 0xDAA520,
            'gray': 0x808080,
            'green': 0x008000,
            'greenyellow': 0xADFF2F,
            'grey': 0x808080,
            'honeydew': 0xF0FFF0,
            'hotpink': 0xFF69B4,
            'indianred': 0xCD5C5C,
            'indigo': 0x4B0082,
            'ivory': 0xFFFFF0,
            'khaki': 0xF0E68C,
            'lavender': 0xE6E6FA,
            'lavenderblush': 0xFFF0F5,
            'lawngreen': 0x7CFC00,
            'lemonchiffon': 0xFFFACD,
            'lightblue': 0xADD8E6,
            'lightcoral': 0xF08080,
            'lightcyan': 0xE0FFFF,
            'lightgoldenrodyellow': 0xFAFAD2,
            'lightgray': 0xD3D3D3,
            'lightgreen': 0x90EE90,
            'lightgrey': 0xD3D3D3,
            'lightpink': 0xFFB6C1,
            'lightsalmon': 0xFFA07A,
            'lightseagreen': 0x20B2AA,
            'lightskyblue': 0x87CEFA,
            'lightslategray': 0x778899,
            'lightslategrey': 0x778899,
            'lightsteelblue': 0xB0C4DE,
            'lightyellow': 0xFFFFE0,
            'lime': 0x00FF00,
            'limegreen': 0x32CD32,
            'linen': 0xFAF0E6,
            'magenta': 0xFF00FF,
            'maroon': 0x800000,
            'mediumaquamarine': 0x66CDAA,
            'mediumblue': 0x0000CD,
            'mediumorchid': 0xBA55D3,
            'mediumpurple': 0x9370DB,
            'mediumseagreen': 0x3CB371,
            'mediumslateblue': 0x7B68EE,
            'mediumspringgreen': 0x00FA9A,
            'mediumturquoise': 0x48D1CC,
            'mediumvioletred': 0xC71585,
            'midnightblue': 0x191970,
            'mintcream': 0xF5FFFA,
            'mistyrose': 0xFFE4E1,
            'moccasin': 0xFFE4B5,
            'navajowhite': 0xFFDEAD,
            'navy': 0x000080,
            'oldlace': 0xFDF5E6,
            'olive': 0x808000,
            'olivedrab': 0x6B8E23,
            'orange': 0xFFA500,
            'orangered': 0xFF4500,
            'orchid': 0xDA70D6,
            'palegoldenrod': 0xEEE8AA,
            'palegreen': 0x98FB98,
            'paleturquoise': 0xAFEEEE,
            'palevioletred': 0xDB7093,
            'papayawhip': 0xFFEFD5,
            'peachpuff': 0xFFDAB9,
            'peru': 0xCD853F,
            'pink': 0xFFC0CB,
            'plum': 0xDDA0DD,
            'powderblue': 0xB0E0E6,
            'purple': 0x800080,
            'red': 0xFF0000,
            'rosybrown': 0xBC8F8F,
            'royalblue': 0x4169E1,
            'saddlebrown': 0x8B4513,
            'salmon': 0xFA8072,
            'sandybrown': 0xF4A460,
            'seagreen': 0x2E8B57,
            'seashell': 0xFFF5EE,
            'sienna': 0xA0522D,
            'silver': 0xC0C0C0,
            'skyblue': 0x87CEEB,
            'slateblue': 0x6A5ACD,
            'slategray': 0x708090,
            'slategrey': 0x708090,
            'snow': 0xFFFAFA,
            'springgreen': 0x00FF7F,
            'steelblue': 0x4682B4,
            'tan': 0xD2B48C,
            'teal': 0x008080,
            'thistle': 0xD8BFD8,
            'tomato': 0xFF6347,
            'turquoise': 0x40E0D0,
            'violet': 0xEE82EE,
            'wheat': 0xF5DEB3,
            'white': 0xFFFFFF,
            'whitesmoke': 0xF5F5F5,
            'yellow': 0xFFFF00,
            'yellowgreen': 0x9ACD32
        };

        /**
         * @author alteredq / http://alteredqualia.com/
         */

        function DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {

            Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);

            this.image = {
                data: data,
                width: width,
                height: height
            };

            this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
            this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

            this.generateMipmaps = false;
            this.flipY = false;
            this.unpackAlignment = 1;

        }

        DataTexture.prototype = Object.create(Texture.prototype);
        DataTexture.prototype.constructor = DataTexture;

        DataTexture.prototype.isDataTexture = true;

        /**
         * Uniforms library for shared webgl shaders
         */

        var UniformsLib = {

            common: {

                diffuse: {
                    value: new Color(0xeeeeee)
                },
                opacity: {
                    value: 1.0
                },

                map: {
                    value: null
                },
                offsetRepeat: {
                    value: new Vector4(0, 0, 1, 1)
                },

                specularMap: {
                    value: null
                },
                alphaMap: {
                    value: null
                },

                envMap: {
                    value: null
                },
                flipEnvMap: {
                    value: -1
                },
                reflectivity: {
                    value: 1.0
                },
                refractionRatio: {
                    value: 0.98
                }

            },

            aomap: {

                aoMap: {
                    value: null
                },
                aoMapIntensity: {
                    value: 1
                }

            },

            lightmap: {

                lightMap: {
                    value: null
                },
                lightMapIntensity: {
                    value: 1
                }

            },

            emissivemap: {

                emissiveMap: {
                    value: null
                }

            },

            bumpmap: {

                bumpMap: {
                    value: null
                },
                bumpScale: {
                    value: 1
                }

            },

            normalmap: {

                normalMap: {
                    value: null
                },
                normalScale: {
                    value: new Vector2(1, 1)
                }

            },

            displacementmap: {

                displacementMap: {
                    value: null
                },
                displacementScale: {
                    value: 1
                },
                displacementBias: {
                    value: 0
                }

            },

            roughnessmap: {

                roughnessMap: {
                    value: null
                }

            },

            metalnessmap: {

                metalnessMap: {
                    value: null
                }

            },

            gradientmap: {

                gradientMap: {
                    value: null
                }

            },

            fog: {

                fogDensity: {
                    value: 0.00025
                },
                fogNear: {
                    value: 1
                },
                fogFar: {
                    value: 2000
                },
                fogColor: {
                    value: new Color(0xffffff)
                }

            },

            lights: {

                ambientLightColor: {
                    value: []
                },

                directionalLights: {
                    value: [],
                    properties: {
                        direction: {},
                        color: {},

                        shadow: {},
                        shadowBias: {},
                        shadowRadius: {},
                        shadowMapSize: {}
                    }
                },

                directionalShadowMap: {
                    value: []
                },
                directionalShadowMatrix: {
                    value: []
                },

                spotLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        direction: {},
                        distance: {},
                        coneCos: {},
                        penumbraCos: {},
                        decay: {},

                        shadow: {},
                        shadowBias: {},
                        shadowRadius: {},
                        shadowMapSize: {}
                    }
                },

                spotShadowMap: {
                    value: []
                },
                spotShadowMatrix: {
                    value: []
                },

                pointLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        decay: {},
                        distance: {},

                        shadow: {},
                        shadowBias: {},
                        shadowRadius: {},
                        shadowMapSize: {}
                    }
                },

                pointShadowMap: {
                    value: []
                },
                pointShadowMatrix: {
                    value: []
                },

                hemisphereLights: {
                    value: [],
                    properties: {
                        direction: {},
                        skyColor: {},
                        groundColor: {}
                    }
                },

                // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
                rectAreaLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        width: {},
                        height: {}
                    }
                }

            },

            points: {

                diffuse: {
                    value: new Color(0xeeeeee)
                },
                opacity: {
                    value: 1.0
                },
                size: {
                    value: 1.0
                },
                scale: {
                    value: 1.0
                },
                map: {
                    value: null
                },
                offsetRepeat: {
                    value: new Vector4(0, 0, 1, 1)
                }

            }

        };

        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         * @author mikael emtinger / http://gomo.se/
         */

        var ShaderLib = {

            basic: {

                uniforms: UniformsUtils.merge([
                    UniformsLib.common,
                    UniformsLib.aomap,
                    UniformsLib.lightmap,
                    UniformsLib.fog
                ]),

                vertexShader: ShaderChunk.meshbasic_vert,
                fragmentShader: ShaderChunk.meshbasic_frag

            },

            lambert: {

                uniforms: UniformsUtils.merge([
                    UniformsLib.common,
                    UniformsLib.aomap,
                    UniformsLib.lightmap,
                    UniformsLib.emissivemap,
                    UniformsLib.fog,
                    UniformsLib.lights,
                    {
                        emissive: {
                            value: new Color(0x000000)
                        }
                    }
                ]),

                vertexShader: ShaderChunk.meshlambert_vert,
                fragmentShader: ShaderChunk.meshlambert_frag

            },

            phong: {

                uniforms: UniformsUtils.merge([
                    UniformsLib.common,
                    UniformsLib.aomap,
                    UniformsLib.lightmap,
                    UniformsLib.emissivemap,
                    UniformsLib.bumpmap,
                    UniformsLib.normalmap,
                    UniformsLib.displacementmap,
                    UniformsLib.gradientmap,
                    UniformsLib.fog,
                    UniformsLib.lights,
                    {
                        emissive: {
                            value: new Color(0x000000)
                        },
                        specular: {
                            value: new Color(0x111111)
                        },
                        shininess: {
                            value: 30
                        }
                    }
                ]),

                vertexShader: ShaderChunk.meshphong_vert,
                fragmentShader: ShaderChunk.meshphong_frag

            },

            standard: {

                uniforms: UniformsUtils.merge([
                    UniformsLib.common,
                    UniformsLib.aomap,
                    UniformsLib.lightmap,
                    UniformsLib.emissivemap,
                    UniformsLib.bumpmap,
                    UniformsLib.normalmap,
                    UniformsLib.displacementmap,
                    UniformsLib.roughnessmap,
                    UniformsLib.metalnessmap,
                    UniformsLib.fog,
                    UniformsLib.lights,
                    {
                        emissive: {
                            value: new Color(0x000000)
                        },
                        roughness: {
                            value: 0.5
                        },
                        metalness: {
                            value: 0
                        },
                        envMapIntensity: {
                            value: 1
                        } // temporary
                    }
                ]),

                vertexShader: ShaderChunk.meshphysical_vert,
                fragmentShader: ShaderChunk.meshphysical_frag

            },

            points: {

                uniforms: UniformsUtils.merge([
                    UniformsLib.points,
                    UniformsLib.fog
                ]),

                vertexShader: ShaderChunk.points_vert,
                fragmentShader: ShaderChunk.points_frag

            },

            dashed: {

                uniforms: UniformsUtils.merge([
                    UniformsLib.common,
                    UniformsLib.fog,
                    {
                        scale: {
                            value: 1
                        },
                        dashSize: {
                            value: 1
                        },
                        totalSize: {
                            value: 2
                        }
                    }
                ]),

                vertexShader: ShaderChunk.linedashed_vert,
                fragmentShader: ShaderChunk.linedashed_frag

            },

            depth: {

                uniforms: UniformsUtils.merge([
                    UniformsLib.common,
                    UniformsLib.displacementmap
                ]),

                vertexShader: ShaderChunk.depth_vert,
                fragmentShader: ShaderChunk.depth_frag

            },

            normal: {

                uniforms: UniformsUtils.merge([
                    UniformsLib.common,
                    UniformsLib.bumpmap,
                    UniformsLib.normalmap,
                    UniformsLib.displacementmap,
                    {
                        opacity: {
                            value: 1.0
                        }
                    }
                ]),

                vertexShader: ShaderChunk.normal_vert,
                fragmentShader: ShaderChunk.normal_frag

            },

            /* -------------------------------------------------------------------------
            //	Cube map shader
             ------------------------------------------------------------------------- */

            cube: {

                uniforms: {
                    tCube: {
                        value: null
                    },
                    tFlip: {
                        value: -1
                    },
                    opacity: {
                        value: 1.0
                    }
                },

                vertexShader: ShaderChunk.cube_vert,
                fragmentShader: ShaderChunk.cube_frag

            },

            /* -------------------------------------------------------------------------
            //	Cube map shader
             ------------------------------------------------------------------------- */

            equirect: {

                uniforms: {
                    tEquirect: {
                        value: null
                    },
                    tFlip: {
                        value: -1
                    }
                },

                vertexShader: ShaderChunk.equirect_vert,
                fragmentShader: ShaderChunk.equirect_frag

            },

            distanceRGBA: {

                uniforms: {
                    lightPos: {
                        value: new Vector3()
                    }
                },

                vertexShader: ShaderChunk.distanceRGBA_vert,
                fragmentShader: ShaderChunk.distanceRGBA_frag

            }

        };

        ShaderLib.physical = {

            uniforms: UniformsUtils.merge([
                ShaderLib.standard.uniforms,
                {
                    clearCoat: {
                        value: 0
                    },
                    clearCoatRoughness: {
                        value: 0
                    }
                }
            ]),

            vertexShader: ShaderChunk.meshphysical_vert,
            fragmentShader: ShaderChunk.meshphysical_frag

        };

        /**
         * @author bhouston / http://clara.io
         */

        function Box2(min, max) {

            this.min = (min !== undefined) ? min : new Vector2(+Infinity, +Infinity);
            this.max = (max !== undefined) ? max : new Vector2(-Infinity, -Infinity);

        }

        Box2.prototype = {

            constructor: Box2,

            set: function(min, max) {

                this.min.copy(min);
                this.max.copy(max);

                return this;

            },

            setFromPoints: function(points) {

                this.makeEmpty();

                for (var i = 0, il = points.length; i < il; i++) {

                    this.expandByPoint(points[i]);

                }

                return this;

            },

            setFromCenterAndSize: function() {

                var v1 = new Vector2();

                return function setFromCenterAndSize(center, size) {

                    var halfSize = v1.copy(size).multiplyScalar(0.5);
                    this.min.copy(center).sub(halfSize);
                    this.max.copy(center).add(halfSize);

                    return this;

                };

            }(),

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(box) {

                this.min.copy(box.min);
                this.max.copy(box.max);

                return this;

            },

            makeEmpty: function() {

                this.min.x = this.min.y = +Infinity;
                this.max.x = this.max.y = -Infinity;

                return this;

            },

            isEmpty: function() {

                // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

                return (this.max.x < this.min.x) || (this.max.y < this.min.y);

            },

            getCenter: function(optionalTarget) {

                var result = optionalTarget || new Vector2();
                return this.isEmpty() ? result.set(0, 0) : result.addVectors(this.min, this.max).multiplyScalar(0.5);

            },

            getSize: function(optionalTarget) {

                var result = optionalTarget || new Vector2();
                return this.isEmpty() ? result.set(0, 0) : result.subVectors(this.max, this.min);

            },

            expandByPoint: function(point) {

                this.min.min(point);
                this.max.max(point);

                return this;

            },

            expandByVector: function(vector) {

                this.min.sub(vector);
                this.max.add(vector);

                return this;

            },

            expandByScalar: function(scalar) {

                this.min.addScalar(-scalar);
                this.max.addScalar(scalar);

                return this;

            },

            containsPoint: function(point) {

                return point.x < this.min.x || point.x > this.max.x ||
                    point.y < this.min.y || point.y > this.max.y ? false : true;

            },

            containsBox: function(box) {

                return this.min.x <= box.min.x && box.max.x <= this.max.x &&
                    this.min.y <= box.min.y && box.max.y <= this.max.y;

            },

            getParameter: function(point, optionalTarget) {

                // This can potentially have a divide by zero if the box
                // has a size dimension of 0.

                var result = optionalTarget || new Vector2();

                return result.set(
                    (point.x - this.min.x) / (this.max.x - this.min.x),
                    (point.y - this.min.y) / (this.max.y - this.min.y)
                );

            },

            intersectsBox: function(box) {

                // using 6 splitting planes to rule out intersections.
                return box.max.x < this.min.x || box.min.x > this.max.x ||
                    box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

            },

            clampPoint: function(point, optionalTarget) {

                var result = optionalTarget || new Vector2();
                return result.copy(point).clamp(this.min, this.max);

            },

            distanceToPoint: function() {

                var v1 = new Vector2();

                return function distanceToPoint(point) {

                    var clampedPoint = v1.copy(point).clamp(this.min, this.max);
                    return clampedPoint.sub(point).length();

                };

            }(),

            intersect: function(box) {

                this.min.max(box.min);
                this.max.min(box.max);

                return this;

            },

            union: function(box) {

                this.min.min(box.min);
                this.max.max(box.max);

                return this;

            },

            translate: function(offset) {

                this.min.add(offset);
                this.max.add(offset);

                return this;

            },

            equals: function(box) {

                return box.min.equals(this.min) && box.max.equals(this.max);

            }

        };

        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         */

        function LensFlarePlugin(renderer, flares) {

            var gl = renderer.context;
            var state = renderer.state;

            var vertexBuffer, elementBuffer;
            var shader, program, attributes, uniforms;

            var tempTexture, occlusionTexture;

            function init() {

                var vertices = new Float32Array([-1, -1, 0, 0,
                    1, -1, 1, 0,
                    1, 1, 1, 1, -1, 1, 0, 1
                ]);

                var faces = new Uint16Array([
                    0, 1, 2,
                    0, 2, 3
                ]);

                // buffers

                vertexBuffer = gl.createBuffer();
                elementBuffer = gl.createBuffer();

                gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
                gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW);

                // textures

                tempTexture = gl.createTexture();
                occlusionTexture = gl.createTexture();

                state.bindTexture(gl.TEXTURE_2D, tempTexture);
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);

                state.bindTexture(gl.TEXTURE_2D, occlusionTexture);
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);

                shader = {

                    vertexShader: [

                        "uniform lowp int renderType;",

                        "uniform vec3 screenPosition;",
                        "uniform vec2 scale;",
                        "uniform float rotation;",

                        "uniform sampler2D occlusionMap;",

                        "attribute vec2 position;",
                        "attribute vec2 uv;",

                        "varying vec2 vUV;",
                        "varying float vVisibility;",

                        "void main() {",

                        "vUV = uv;",

                        "vec2 pos = position;",

                        "if ( renderType == 2 ) {",

                        "vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
                        "visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
                        "visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
                        "visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
                        "visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
                        "visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
                        "visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
                        "visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
                        "visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

                        "vVisibility =        visibility.r / 9.0;",
                        "vVisibility *= 1.0 - visibility.g / 9.0;",
                        "vVisibility *=       visibility.b / 9.0;",
                        "vVisibility *= 1.0 - visibility.a / 9.0;",

                        "pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
                        "pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

                        "}",

                        "gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

                        "}"

                    ].join("\n"),

                    fragmentShader: [

                        "uniform lowp int renderType;",

                        "uniform sampler2D map;",
                        "uniform float opacity;",
                        "uniform vec3 color;",

                        "varying vec2 vUV;",
                        "varying float vVisibility;",

                        "void main() {",

                        // pink square

                        "if ( renderType == 0 ) {",

                        "gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

                        // restore

                        "} else if ( renderType == 1 ) {",

                        "gl_FragColor = texture2D( map, vUV );",

                        // flare

                        "} else {",

                        "vec4 texture = texture2D( map, vUV );",
                        "texture.a *= opacity * vVisibility;",
                        "gl_FragColor = texture;",
                        "gl_FragColor.rgb *= color;",

                        "}",

                        "}"

                    ].join("\n")

                };

                program = createProgram(shader);

                attributes = {
                    vertex: gl.getAttribLocation(program, "position"),
                    uv: gl.getAttribLocation(program, "uv")
                };

                uniforms = {
                    renderType: gl.getUniformLocation(program, "renderType"),
                    map: gl.getUniformLocation(program, "map"),
                    occlusionMap: gl.getUniformLocation(program, "occlusionMap"),
                    opacity: gl.getUniformLocation(program, "opacity"),
                    color: gl.getUniformLocation(program, "color"),
                    scale: gl.getUniformLocation(program, "scale"),
                    rotation: gl.getUniformLocation(program, "rotation"),
                    screenPosition: gl.getUniformLocation(program, "screenPosition")
                };

            }

            /*
             * Render lens flares
             * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
             *         reads these back and calculates occlusion.
             */

            this.render = function(scene, camera, viewport) {

                if (flares.length === 0) return;

                var tempPosition = new Vector3();

                var invAspect = viewport.w / viewport.z,
                    halfViewportWidth = viewport.z * 0.5,
                    halfViewportHeight = viewport.w * 0.5;

                var size = 16 / viewport.w,
                    scale = new Vector2(size * invAspect, size);

                var screenPosition = new Vector3(1, 1, 0),
                    screenPositionPixels = new Vector2(1, 1);

                var validArea = new Box2();

                validArea.min.set(viewport.x, viewport.y);
                validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));

                if (program === undefined) {

                    init();

                }

                gl.useProgram(program);

                state.initAttributes();
                state.enableAttribute(attributes.vertex);
                state.enableAttribute(attributes.uv);
                state.disableUnusedAttributes();

                // loop through all lens flares to update their occlusion and positions
                // setup gl and common used attribs/uniforms

                gl.uniform1i(uniforms.occlusionMap, 0);
                gl.uniform1i(uniforms.map, 1);

                gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
                gl.vertexAttribPointer(attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0);
                gl.vertexAttribPointer(attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8);

                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);

                state.disable(gl.CULL_FACE);
                state.setDepthWrite(false);

                for (var i = 0, l = flares.length; i < l; i++) {

                    size = 16 / viewport.w;
                    scale.set(size * invAspect, size);

                    // calc object screen position

                    var flare = flares[i];

                    tempPosition.set(flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14]);

                    tempPosition.applyMatrix4(camera.matrixWorldInverse);
                    tempPosition.applyMatrix4(camera.projectionMatrix);

                    // setup arrays for gl programs

                    screenPosition.copy(tempPosition);

                    // horizontal and vertical coordinate of the lower left corner of the pixels to copy

                    screenPositionPixels.x = viewport.x + (screenPosition.x * halfViewportWidth) + halfViewportWidth - 8;
                    screenPositionPixels.y = viewport.y + (screenPosition.y * halfViewportHeight) + halfViewportHeight - 8;

                    // screen cull

                    if (validArea.containsPoint(screenPositionPixels) === true) {

                        // save current RGB to temp texture

                        state.activeTexture(gl.TEXTURE0);
                        state.bindTexture(gl.TEXTURE_2D, null);
                        state.activeTexture(gl.TEXTURE1);
                        state.bindTexture(gl.TEXTURE_2D, tempTexture);
                        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0);


                        // render pink quad

                        gl.uniform1i(uniforms.renderType, 0);
                        gl.uniform2f(uniforms.scale, scale.x, scale.y);
                        gl.uniform3f(uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z);

                        state.disable(gl.BLEND);
                        state.enable(gl.DEPTH_TEST);

                        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);


                        // copy result to occlusionMap

                        state.activeTexture(gl.TEXTURE0);
                        state.bindTexture(gl.TEXTURE_2D, occlusionTexture);
                        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0);


                        // restore graphics

                        gl.uniform1i(uniforms.renderType, 1);
                        state.disable(gl.DEPTH_TEST);

                        state.activeTexture(gl.TEXTURE1);
                        state.bindTexture(gl.TEXTURE_2D, tempTexture);
                        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);


                        // update object positions

                        flare.positionScreen.copy(screenPosition);

                        if (flare.customUpdateCallback) {

                            flare.customUpdateCallback(flare);

                        } else {

                            flare.updateLensFlares();

                        }

                        // render flares

                        gl.uniform1i(uniforms.renderType, 2);
                        state.enable(gl.BLEND);

                        for (var j = 0, jl = flare.lensFlares.length; j < jl; j++) {

                            var sprite = flare.lensFlares[j];

                            if (sprite.opacity > 0.001 && sprite.scale > 0.001) {

                                screenPosition.x = sprite.x;
                                screenPosition.y = sprite.y;
                                screenPosition.z = sprite.z;

                                size = sprite.size * sprite.scale / viewport.w;

                                scale.x = size * invAspect;
                                scale.y = size;

                                gl.uniform3f(uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z);
                                gl.uniform2f(uniforms.scale, scale.x, scale.y);
                                gl.uniform1f(uniforms.rotation, sprite.rotation);

                                gl.uniform1f(uniforms.opacity, sprite.opacity);
                                gl.uniform3f(uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b);

                                state.setBlending(sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst);
                                renderer.setTexture2D(sprite.texture, 1);

                                gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);

                            }

                        }

                    }

                }

                // restore gl

                state.enable(gl.CULL_FACE);
                state.enable(gl.DEPTH_TEST);
                state.setDepthWrite(true);

                renderer.resetGLState();

            };

            function createProgram(shader) {

                var program = gl.createProgram();

                var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
                var vertexShader = gl.createShader(gl.VERTEX_SHADER);

                var prefix = "precision " + renderer.getPrecision() + " float;\n";

                gl.shaderSource(fragmentShader, prefix + shader.fragmentShader);
                gl.shaderSource(vertexShader, prefix + shader.vertexShader);

                gl.compileShader(fragmentShader);
                gl.compileShader(vertexShader);

                gl.attachShader(program, fragmentShader);
                gl.attachShader(program, vertexShader);

                gl.linkProgram(program);

                return program;

            }

        }

        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         */

        function SpritePlugin(renderer, sprites) {

            var gl = renderer.context;
            var state = renderer.state;

            var vertexBuffer, elementBuffer;
            var program, attributes, uniforms;

            var texture;

            // decompose matrixWorld

            var spritePosition = new Vector3();
            var spriteRotation = new Quaternion();
            var spriteScale = new Vector3();

            function init() {

                var vertices = new Float32Array([-0.5, -0.5, 0, 0,
                    0.5, -0.5, 1, 0,
                    0.5, 0.5, 1, 1, -0.5, 0.5, 0, 1
                ]);

                var faces = new Uint16Array([
                    0, 1, 2,
                    0, 2, 3
                ]);

                vertexBuffer = gl.createBuffer();
                elementBuffer = gl.createBuffer();

                gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
                gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW);

                program = createProgram();

                attributes = {
                    position: gl.getAttribLocation(program, 'position'),
                    uv: gl.getAttribLocation(program, 'uv')
                };

                uniforms = {
                    uvOffset: gl.getUniformLocation(program, 'uvOffset'),
                    uvScale: gl.getUniformLocation(program, 'uvScale'),

                    rotation: gl.getUniformLocation(program, 'rotation'),
                    scale: gl.getUniformLocation(program, 'scale'),

                    color: gl.getUniformLocation(program, 'color'),
                    map: gl.getUniformLocation(program, 'map'),
                    opacity: gl.getUniformLocation(program, 'opacity'),

                    modelViewMatrix: gl.getUniformLocation(program, 'modelViewMatrix'),
                    projectionMatrix: gl.getUniformLocation(program, 'projectionMatrix'),

                    fogType: gl.getUniformLocation(program, 'fogType'),
                    fogDensity: gl.getUniformLocation(program, 'fogDensity'),
                    fogNear: gl.getUniformLocation(program, 'fogNear'),
                    fogFar: gl.getUniformLocation(program, 'fogFar'),
                    fogColor: gl.getUniformLocation(program, 'fogColor'),

                    alphaTest: gl.getUniformLocation(program, 'alphaTest')
                };

                var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
                canvas.width = 8;
                canvas.height = 8;

                var context = canvas.getContext('2d');
                context.fillStyle = 'white';
                context.fillRect(0, 0, 8, 8);

                texture = new Texture(canvas);
                texture.needsUpdate = true;

            }

            this.render = function(scene, camera) {

                if (sprites.length === 0) return;

                // setup gl

                if (program === undefined) {

                    init();

                }

                gl.useProgram(program);

                state.initAttributes();
                state.enableAttribute(attributes.position);
                state.enableAttribute(attributes.uv);
                state.disableUnusedAttributes();

                state.disable(gl.CULL_FACE);
                state.enable(gl.BLEND);

                gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
                gl.vertexAttribPointer(attributes.position, 2, gl.FLOAT, false, 2 * 8, 0);
                gl.vertexAttribPointer(attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8);

                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);

                gl.uniformMatrix4fv(uniforms.projectionMatrix, false, camera.projectionMatrix.elements);

                state.activeTexture(gl.TEXTURE0);
                gl.uniform1i(uniforms.map, 0);

                var oldFogType = 0;
                var sceneFogType = 0;
                var fog = scene.fog;

                if (fog) {

                    gl.uniform3f(uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b);

                    if (fog.isFog) {

                        gl.uniform1f(uniforms.fogNear, fog.near);
                        gl.uniform1f(uniforms.fogFar, fog.far);

                        gl.uniform1i(uniforms.fogType, 1);
                        oldFogType = 1;
                        sceneFogType = 1;

                    } else if (fog.isFogExp2) {

                        gl.uniform1f(uniforms.fogDensity, fog.density);

                        gl.uniform1i(uniforms.fogType, 2);
                        oldFogType = 2;
                        sceneFogType = 2;

                    }

                } else {

                    gl.uniform1i(uniforms.fogType, 0);
                    oldFogType = 0;
                    sceneFogType = 0;

                }


                // update positions and sort

                for (var i = 0, l = sprites.length; i < l; i++) {

                    var sprite = sprites[i];

                    sprite.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, sprite.matrixWorld);
                    sprite.z = -sprite.modelViewMatrix.elements[14];

                }

                sprites.sort(painterSortStable);

                // render all sprites

                var scale = [];

                for (var i = 0, l = sprites.length; i < l; i++) {

                    var sprite = sprites[i];
                    var material = sprite.material;

                    if (material.visible === false) continue;

                    gl.uniform1f(uniforms.alphaTest, material.alphaTest);
                    gl.uniformMatrix4fv(uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements);

                    sprite.matrixWorld.decompose(spritePosition, spriteRotation, spriteScale);

                    scale[0] = spriteScale.x;
                    scale[1] = spriteScale.y;

                    var fogType = 0;

                    if (scene.fog && material.fog) {

                        fogType = sceneFogType;

                    }

                    if (oldFogType !== fogType) {

                        gl.uniform1i(uniforms.fogType, fogType);
                        oldFogType = fogType;

                    }

                    if (material.map !== null) {

                        gl.uniform2f(uniforms.uvOffset, material.map.offset.x, material.map.offset.y);
                        gl.uniform2f(uniforms.uvScale, material.map.repeat.x, material.map.repeat.y);

                    } else {

                        gl.uniform2f(uniforms.uvOffset, 0, 0);
                        gl.uniform2f(uniforms.uvScale, 1, 1);

                    }

                    gl.uniform1f(uniforms.opacity, material.opacity);
                    gl.uniform3f(uniforms.color, material.color.r, material.color.g, material.color.b);

                    gl.uniform1f(uniforms.rotation, material.rotation);
                    gl.uniform2fv(uniforms.scale, scale);

                    state.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst);
                    state.setDepthTest(material.depthTest);
                    state.setDepthWrite(material.depthWrite);

                    if (material.map) {

                        renderer.setTexture2D(material.map, 0);

                    } else {

                        renderer.setTexture2D(texture, 0);

                    }

                    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);

                }

                // restore gl

                state.enable(gl.CULL_FACE);

                renderer.resetGLState();

            };

            function createProgram() {

                var program = gl.createProgram();

                var vertexShader = gl.createShader(gl.VERTEX_SHADER);
                var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);

                gl.shaderSource(vertexShader, [

                    'precision ' + renderer.getPrecision() + ' float;',

                    'uniform mat4 modelViewMatrix;',
                    'uniform mat4 projectionMatrix;',
                    'uniform float rotation;',
                    'uniform vec2 scale;',
                    'uniform vec2 uvOffset;',
                    'uniform vec2 uvScale;',

                    'attribute vec2 position;',
                    'attribute vec2 uv;',

                    'varying vec2 vUV;',

                    'void main() {',

                    'vUV = uvOffset + uv * uvScale;',

                    'vec2 alignedPosition = position * scale;',

                    'vec2 rotatedPosition;',
                    'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
                    'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

                    'vec4 finalPosition;',

                    'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
                    'finalPosition.xy += rotatedPosition;',
                    'finalPosition = projectionMatrix * finalPosition;',

                    'gl_Position = finalPosition;',

                    '}'

                ].join('\n'));

                gl.shaderSource(fragmentShader, [

                    'precision ' + renderer.getPrecision() + ' float;',

                    'uniform vec3 color;',
                    'uniform sampler2D map;',
                    'uniform float opacity;',

                    'uniform int fogType;',
                    'uniform vec3 fogColor;',
                    'uniform float fogDensity;',
                    'uniform float fogNear;',
                    'uniform float fogFar;',
                    'uniform float alphaTest;',

                    'varying vec2 vUV;',

                    'void main() {',

                    'vec4 texture = texture2D( map, vUV );',

                    'if ( texture.a < alphaTest ) discard;',

                    'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

                    'if ( fogType > 0 ) {',

                    'float depth = gl_FragCoord.z / gl_FragCoord.w;',
                    'float fogFactor = 0.0;',

                    'if ( fogType == 1 ) {',

                    'fogFactor = smoothstep( fogNear, fogFar, depth );',

                    '} else {',

                    'const float LOG2 = 1.442695;',
                    'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
                    'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

                    '}',

                    'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

                    '}',

                    '}'

                ].join('\n'));

                gl.compileShader(vertexShader);
                gl.compileShader(fragmentShader);

                gl.attachShader(program, vertexShader);
                gl.attachShader(program, fragmentShader);

                gl.linkProgram(program);

                return program;

            }

            function painterSortStable(a, b) {

                if (a.renderOrder !== b.renderOrder) {

                    return a.renderOrder - b.renderOrder;

                } else if (a.z !== b.z) {

                    return b.z - a.z;

                } else {

                    return b.id - a.id;

                }

            }

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */

        var materialId = 0;

        function Material() {

            Object.defineProperty(this, 'id', {
                value: materialId++
            });

            this.uuid = _Math.generateUUID();

            this.name = '';
            this.type = 'Material';

            this.fog = true;
            this.lights = true;

            this.blending = NormalBlending;
            this.side = FrontSide;
            this.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading
            this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

            this.opacity = 1;
            this.transparent = false;

            this.blendSrc = SrcAlphaFactor;
            this.blendDst = OneMinusSrcAlphaFactor;
            this.blendEquation = AddEquation;
            this.blendSrcAlpha = null;
            this.blendDstAlpha = null;
            this.blendEquationAlpha = null;

            this.depthFunc = LessEqualDepth;
            this.depthTest = true;
            this.depthWrite = true;

            this.clippingPlanes = null;
            this.clipIntersection = false;
            this.clipShadows = false;

            this.colorWrite = true;

            this.precision = null; // override the renderer's default precision for this material

            this.polygonOffset = false;
            this.polygonOffsetFactor = 0;
            this.polygonOffsetUnits = 0;

            this.alphaTest = 0;
            this.premultipliedAlpha = false;

            this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

            this.visible = true;

            this._needsUpdate = true;

        }

        Material.prototype = {

            constructor: Material,

            isMaterial: true,

            get needsUpdate() {

                return this._needsUpdate;

            },

            set needsUpdate(value) {

                if (value === true) this.update();
                this._needsUpdate = value;

            },

            setValues: function(values) {

                if (values === undefined) return;

                for (var key in values) {

                    var newValue = values[key];

                    if (newValue === undefined) {

                        console.warn("THREE.Material: '" + key + "' parameter is undefined.");
                        continue;

                    }

                    var currentValue = this[key];

                    if (currentValue === undefined) {

                        console.warn("THREE." + this.type + ": '" + key + "' is not a property of this material.");
                        continue;

                    }

                    if (currentValue && currentValue.isColor) {

                        currentValue.set(newValue);

                    } else if ((currentValue && currentValue.isVector3) && (newValue && newValue.isVector3)) {

                        currentValue.copy(newValue);

                    } else if (key === 'overdraw') {

                        // ensure overdraw is backwards-compatible with legacy boolean type
                        this[key] = Number(newValue);

                    } else {

                        this[key] = newValue;

                    }

                }

            },

            toJSON: function(meta) {

                var isRoot = meta === undefined;

                if (isRoot) {

                    meta = {
                        textures: {},
                        images: {}
                    };

                }

                var data = {
                    metadata: {
                        version: 4.4,
                        type: 'Material',
                        generator: 'Material.toJSON'
                    }
                };

                // standard Material serialization
                data.uuid = this.uuid;
                data.type = this.type;

                if (this.name !== '') data.name = this.name;

                if (this.color && this.color.isColor) data.color = this.color.getHex();

                if (this.roughness !== undefined) data.roughness = this.roughness;
                if (this.metalness !== undefined) data.metalness = this.metalness;

                if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
                if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
                if (this.shininess !== undefined) data.shininess = this.shininess;
                if (this.clearCoat !== undefined) data.clearCoat = this.clearCoat;
                if (this.clearCoatRoughness !== undefined) data.clearCoatRoughness = this.clearCoatRoughness;

                if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
                if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
                if (this.lightMap && this.lightMap.isTexture) data.lightMap = this.lightMap.toJSON(meta).uuid;
                if (this.bumpMap && this.bumpMap.isTexture) {

                    data.bumpMap = this.bumpMap.toJSON(meta).uuid;
                    data.bumpScale = this.bumpScale;

                }
                if (this.normalMap && this.normalMap.isTexture) {

                    data.normalMap = this.normalMap.toJSON(meta).uuid;
                    data.normalScale = this.normalScale.toArray();

                }
                if (this.displacementMap && this.displacementMap.isTexture) {

                    data.displacementMap = this.displacementMap.toJSON(meta).uuid;
                    data.displacementScale = this.displacementScale;
                    data.displacementBias = this.displacementBias;

                }
                if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
                if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;

                if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
                if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;

                if (this.envMap && this.envMap.isTexture) {

                    data.envMap = this.envMap.toJSON(meta).uuid;
                    data.reflectivity = this.reflectivity; // Scale behind envMap

                }

                if (this.gradientMap && this.gradientMap.isTexture) {

                    data.gradientMap = this.gradientMap.toJSON(meta).uuid;

                }

                if (this.size !== undefined) data.size = this.size;
                if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;

                if (this.blending !== NormalBlending) data.blending = this.blending;
                if (this.shading !== SmoothShading) data.shading = this.shading;
                if (this.side !== FrontSide) data.side = this.side;
                if (this.vertexColors !== NoColors) data.vertexColors = this.vertexColors;

                if (this.opacity < 1) data.opacity = this.opacity;
                if (this.transparent === true) data.transparent = this.transparent;

                data.depthFunc = this.depthFunc;
                data.depthTest = this.depthTest;
                data.depthWrite = this.depthWrite;

                if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
                if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;
                if (this.wireframe === true) data.wireframe = this.wireframe;
                if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
                if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;
                if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;

                data.skinning = this.skinning;
                data.morphTargets = this.morphTargets;

                // TODO: Copied from Object3D.toJSON

                function extractFromCache(cache) {

                    var values = [];

                    for (var key in cache) {

                        var data = cache[key];
                        delete data.metadata;
                        values.push(data);

                    }

                    return values;

                }

                if (isRoot) {

                    var textures = extractFromCache(meta.textures);
                    var images = extractFromCache(meta.images);

                    if (textures.length > 0) data.textures = textures;
                    if (images.length > 0) data.images = images;

                }

                return data;

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(source) {

                this.name = source.name;

                this.fog = source.fog;
                this.lights = source.lights;

                this.blending = source.blending;
                this.side = source.side;
                this.shading = source.shading;
                this.vertexColors = source.vertexColors;

                this.opacity = source.opacity;
                this.transparent = source.transparent;

                this.blendSrc = source.blendSrc;
                this.blendDst = source.blendDst;
                this.blendEquation = source.blendEquation;
                this.blendSrcAlpha = source.blendSrcAlpha;
                this.blendDstAlpha = source.blendDstAlpha;
                this.blendEquationAlpha = source.blendEquationAlpha;

                this.depthFunc = source.depthFunc;
                this.depthTest = source.depthTest;
                this.depthWrite = source.depthWrite;

                this.colorWrite = source.colorWrite;

                this.precision = source.precision;

                this.polygonOffset = source.polygonOffset;
                this.polygonOffsetFactor = source.polygonOffsetFactor;
                this.polygonOffsetUnits = source.polygonOffsetUnits;

                this.alphaTest = source.alphaTest;

                this.premultipliedAlpha = source.premultipliedAlpha;

                this.overdraw = source.overdraw;

                this.visible = source.visible;
                this.clipShadows = source.clipShadows;
                this.clipIntersection = source.clipIntersection;

                var srcPlanes = source.clippingPlanes,
                    dstPlanes = null;

                if (srcPlanes !== null) {

                    var n = srcPlanes.length;
                    dstPlanes = new Array(n);

                    for (var i = 0; i !== n; ++i)
                        dstPlanes[i] = srcPlanes[i].clone();

                }

                this.clippingPlanes = dstPlanes;

                return this;

            },

            update: function() {

                this.dispatchEvent({
                    type: 'update'
                });

            },

            dispose: function() {

                this.dispatchEvent({
                    type: 'dispose'
                });

            }

        };

        Object.assign(Material.prototype, EventDispatcher.prototype);

        /**
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  defines: { "label" : "value" },
         *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
         *
         *  fragmentShader: <string>,
         *  vertexShader: <string>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>,
         *
         *  lights: <bool>,
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *  morphNormals: <bool>
         * }
         */

        function ShaderMaterial(parameters) {

            Material.call(this);

            this.type = 'ShaderMaterial';

            this.defines = {};
            this.uniforms = {};

            this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
            this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

            this.linewidth = 1;

            this.wireframe = false;
            this.wireframeLinewidth = 1;

            this.fog = false; // set to use scene fog
            this.lights = false; // set to use scene lights
            this.clipping = false; // set to use user-defined clipping planes

            this.skinning = false; // set to use skinning attribute streams
            this.morphTargets = false; // set to use morph targets
            this.morphNormals = false; // set to use morph normals

            this.extensions = {
                derivatives: false, // set to use derivatives
                fragDepth: false, // set to use fragment depth values
                drawBuffers: false, // set to use draw buffers
                shaderTextureLOD: false // set to use shader texture LOD
            };

            // When rendered geometry doesn't include these attributes but the material does,
            // use these default values in WebGL. This avoids errors when buffer data is missing.
            this.defaultAttributeValues = {
                'color': [1, 1, 1],
                'uv': [0, 0],
                'uv2': [0, 0]
            };

            this.index0AttributeName = undefined;

            if (parameters !== undefined) {

                if (parameters.attributes !== undefined) {

                    console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');

                }

                this.setValues(parameters);

            }

        }

        ShaderMaterial.prototype = Object.create(Material.prototype);
        ShaderMaterial.prototype.constructor = ShaderMaterial;

        ShaderMaterial.prototype.isShaderMaterial = true;

        ShaderMaterial.prototype.copy = function(source) {

            Material.prototype.copy.call(this, source);

            this.fragmentShader = source.fragmentShader;
            this.vertexShader = source.vertexShader;

            this.uniforms = UniformsUtils.clone(source.uniforms);

            this.defines = source.defines;

            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;

            this.lights = source.lights;
            this.clipping = source.clipping;

            this.skinning = source.skinning;

            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;

            this.extensions = source.extensions;

            return this;

        };

        ShaderMaterial.prototype.toJSON = function(meta) {

            var data = Material.prototype.toJSON.call(this, meta);

            data.uniforms = this.uniforms;
            data.vertexShader = this.vertexShader;
            data.fragmentShader = this.fragmentShader;

            return data;

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         * @author bhouston / https://clara.io
         * @author WestLangley / http://github.com/WestLangley
         *
         * parameters = {
         *
         *  opacity: <float>,
         *
         *  map: new THREE.Texture( <Image> ),
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  displacementMap: new THREE.Texture( <Image> ),
         *  displacementScale: <float>,
         *  displacementBias: <float>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>
         * }
         */

        function MeshDepthMaterial(parameters) {

            Material.call(this);

            this.type = 'MeshDepthMaterial';

            this.depthPacking = BasicDepthPacking;

            this.skinning = false;
            this.morphTargets = false;

            this.map = null;

            this.alphaMap = null;

            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;

            this.wireframe = false;
            this.wireframeLinewidth = 1;

            this.fog = false;
            this.lights = false;

            this.setValues(parameters);

        }

        MeshDepthMaterial.prototype = Object.create(Material.prototype);
        MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

        MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

        MeshDepthMaterial.prototype.copy = function(source) {

            Material.prototype.copy.call(this, source);

            this.depthPacking = source.depthPacking;

            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;

            this.map = source.map;

            this.alphaMap = source.alphaMap;

            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;

            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;

            return this;

        };

        /**
         * @author bhouston / http://clara.io
         * @author WestLangley / http://github.com/WestLangley
         */

        function Box3(min, max) {

            this.min = (min !== undefined) ? min : new Vector3(+Infinity, +Infinity, +Infinity);
            this.max = (max !== undefined) ? max : new Vector3(-Infinity, -Infinity, -Infinity);

        }

        Box3.prototype = {

            constructor: Box3,

            isBox3: true,

            set: function(min, max) {

                this.min.copy(min);
                this.max.copy(max);

                return this;

            },

            setFromArray: function(array) {

                var minX = +Infinity;
                var minY = +Infinity;
                var minZ = +Infinity;

                var maxX = -Infinity;
                var maxY = -Infinity;
                var maxZ = -Infinity;

                for (var i = 0, l = array.length; i < l; i += 3) {

                    var x = array[i];
                    var y = array[i + 1];
                    var z = array[i + 2];

                    if (x < minX) minX = x;
                    if (y < minY) minY = y;
                    if (z < minZ) minZ = z;

                    if (x > maxX) maxX = x;
                    if (y > maxY) maxY = y;
                    if (z > maxZ) maxZ = z;

                }

                this.min.set(minX, minY, minZ);
                this.max.set(maxX, maxY, maxZ);

                return this;

            },

            setFromBufferAttribute: function(attribute) {

                var minX = +Infinity;
                var minY = +Infinity;
                var minZ = +Infinity;

                var maxX = -Infinity;
                var maxY = -Infinity;
                var maxZ = -Infinity;

                for (var i = 0, l = attribute.count; i < l; i++) {

                    var x = attribute.getX(i);
                    var y = attribute.getY(i);
                    var z = attribute.getZ(i);

                    if (x < minX) minX = x;
                    if (y < minY) minY = y;
                    if (z < minZ) minZ = z;

                    if (x > maxX) maxX = x;
                    if (y > maxY) maxY = y;
                    if (z > maxZ) maxZ = z;

                }

                this.min.set(minX, minY, minZ);
                this.max.set(maxX, maxY, maxZ);

                return this;

            },

            setFromPoints: function(points) {

                this.makeEmpty();

                for (var i = 0, il = points.length; i < il; i++) {

                    this.expandByPoint(points[i]);

                }

                return this;

            },

            setFromCenterAndSize: function() {

                var v1 = new Vector3();

                return function setFromCenterAndSize(center, size) {

                    var halfSize = v1.copy(size).multiplyScalar(0.5);

                    this.min.copy(center).sub(halfSize);
                    this.max.copy(center).add(halfSize);

                    return this;

                };

            }(),

            setFromObject: function(object) {

                this.makeEmpty();

                return this.expandByObject(object);

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(box) {

                this.min.copy(box.min);
                this.max.copy(box.max);

                return this;

            },

            makeEmpty: function() {

                this.min.x = this.min.y = this.min.z = +Infinity;
                this.max.x = this.max.y = this.max.z = -Infinity;

                return this;

            },

            isEmpty: function() {

                // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

                return (this.max.x < this.min.x) || (this.max.y < this.min.y) || (this.max.z < this.min.z);

            },

            getCenter: function(optionalTarget) {

                var result = optionalTarget || new Vector3();
                return this.isEmpty() ? result.set(0, 0, 0) : result.addVectors(this.min, this.max).multiplyScalar(0.5);

            },

            getSize: function(optionalTarget) {

                var result = optionalTarget || new Vector3();
                return this.isEmpty() ? result.set(0, 0, 0) : result.subVectors(this.max, this.min);

            },

            expandByPoint: function(point) {

                this.min.min(point);
                this.max.max(point);

                return this;

            },

            expandByVector: function(vector) {

                this.min.sub(vector);
                this.max.add(vector);

                return this;

            },

            expandByScalar: function(scalar) {

                this.min.addScalar(-scalar);
                this.max.addScalar(scalar);

                return this;

            },

            expandByObject: function() {

                // Computes the world-axis-aligned bounding box of an object (including its children),
                // accounting for both the object's, and children's, world transforms

                var v1 = new Vector3();

                return function expandByObject(object) {

                    var scope = this;

                    object.updateMatrixWorld(true);

                    object.traverse(function(node) {

                        var i, l;

                        var geometry = node.geometry;

                        if (geometry !== undefined) {

                            if (geometry.isGeometry) {

                                var vertices = geometry.vertices;

                                for (i = 0, l = vertices.length; i < l; i++) {

                                    v1.copy(vertices[i]);
                                    v1.applyMatrix4(node.matrixWorld);

                                    scope.expandByPoint(v1);

                                }

                            } else if (geometry.isBufferGeometry) {

                                var attribute = geometry.attributes.position;

                                if (attribute !== undefined) {

                                    for (i = 0, l = attribute.count; i < l; i++) {

                                        v1.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);

                                        scope.expandByPoint(v1);

                                    }

                                }

                            }

                        }

                    });

                    return this;

                };

            }(),

            containsPoint: function(point) {

                return point.x < this.min.x || point.x > this.max.x ||
                    point.y < this.min.y || point.y > this.max.y ||
                    point.z < this.min.z || point.z > this.max.z ? false : true;

            },

            containsBox: function(box) {

                return this.min.x <= box.min.x && box.max.x <= this.max.x &&
                    this.min.y <= box.min.y && box.max.y <= this.max.y &&
                    this.min.z <= box.min.z && box.max.z <= this.max.z;

            },

            getParameter: function(point, optionalTarget) {

                // This can potentially have a divide by zero if the box
                // has a size dimension of 0.

                var result = optionalTarget || new Vector3();

                return result.set(
                    (point.x - this.min.x) / (this.max.x - this.min.x),
                    (point.y - this.min.y) / (this.max.y - this.min.y),
                    (point.z - this.min.z) / (this.max.z - this.min.z)
                );

            },

            intersectsBox: function(box) {

                // using 6 splitting planes to rule out intersections.
                return box.max.x < this.min.x || box.min.x > this.max.x ||
                    box.max.y < this.min.y || box.min.y > this.max.y ||
                    box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

            },

            intersectsSphere: (function() {

                var closestPoint;

                return function intersectsSphere(sphere) {

                    if (closestPoint === undefined) closestPoint = new Vector3();

                    // Find the point on the AABB closest to the sphere center.
                    this.clampPoint(sphere.center, closestPoint);

                    // If that point is inside the sphere, the AABB and sphere intersect.
                    return closestPoint.distanceToSquared(sphere.center) <= (sphere.radius * sphere.radius);

                };

            })(),

            intersectsPlane: function(plane) {

                // We compute the minimum and maximum dot product values. If those values
                // are on the same side (back or front) of the plane, then there is no intersection.

                var min, max;

                if (plane.normal.x > 0) {

                    min = plane.normal.x * this.min.x;
                    max = plane.normal.x * this.max.x;

                } else {

                    min = plane.normal.x * this.max.x;
                    max = plane.normal.x * this.min.x;

                }

                if (plane.normal.y > 0) {

                    min += plane.normal.y * this.min.y;
                    max += plane.normal.y * this.max.y;

                } else {

                    min += plane.normal.y * this.max.y;
                    max += plane.normal.y * this.min.y;

                }

                if (plane.normal.z > 0) {

                    min += plane.normal.z * this.min.z;
                    max += plane.normal.z * this.max.z;

                } else {

                    min += plane.normal.z * this.max.z;
                    max += plane.normal.z * this.min.z;

                }

                return (min <= plane.constant && max >= plane.constant);

            },

            clampPoint: function(point, optionalTarget) {

                var result = optionalTarget || new Vector3();
                return result.copy(point).clamp(this.min, this.max);

            },

            distanceToPoint: function() {

                var v1 = new Vector3();

                return function distanceToPoint(point) {

                    var clampedPoint = v1.copy(point).clamp(this.min, this.max);
                    return clampedPoint.sub(point).length();

                };

            }(),

            getBoundingSphere: function() {

                var v1 = new Vector3();

                return function getBoundingSphere(optionalTarget) {

                    var result = optionalTarget || new Sphere();

                    this.getCenter(result.center);

                    result.radius = this.getSize(v1).length() * 0.5;

                    return result;

                };

            }(),

            intersect: function(box) {

                this.min.max(box.min);
                this.max.min(box.max);

                // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
                if (this.isEmpty()) this.makeEmpty();

                return this;

            },

            union: function(box) {

                this.min.min(box.min);
                this.max.max(box.max);

                return this;

            },

            applyMatrix4: function() {

                var points = [
                    new Vector3(),
                    new Vector3(),
                    new Vector3(),
                    new Vector3(),
                    new Vector3(),
                    new Vector3(),
                    new Vector3(),
                    new Vector3()
                ];

                return function applyMatrix4(matrix) {

                    // transform of empty box is an empty box.
                    if (this.isEmpty()) return this;

                    // NOTE: I am using a binary pattern to specify all 2^3 combinations below
                    points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000
                    points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001
                    points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010
                    points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011
                    points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100
                    points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101
                    points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110
                    points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111

                    this.setFromPoints(points);

                    return this;

                };

            }(),

            translate: function(offset) {

                this.min.add(offset);
                this.max.add(offset);

                return this;

            },

            equals: function(box) {

                return box.min.equals(this.min) && box.max.equals(this.max);

            }

        };

        /**
         * @author bhouston / http://clara.io
         * @author mrdoob / http://mrdoob.com/
         */

        function Sphere(center, radius) {

            this.center = (center !== undefined) ? center : new Vector3();
            this.radius = (radius !== undefined) ? radius : 0;

        }

        Sphere.prototype = {

            constructor: Sphere,

            set: function(center, radius) {

                this.center.copy(center);
                this.radius = radius;

                return this;

            },

            setFromPoints: function() {

                var box;

                return function setFromPoints(points, optionalCenter) {

                    if (box === undefined) box = new Box3(); // see #10547

                    var center = this.center;

                    if (optionalCenter !== undefined) {

                        center.copy(optionalCenter);

                    } else {

                        box.setFromPoints(points).getCenter(center);

                    }

                    var maxRadiusSq = 0;

                    for (var i = 0, il = points.length; i < il; i++) {

                        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));

                    }

                    this.radius = Math.sqrt(maxRadiusSq);

                    return this;

                };

            }(),

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(sphere) {

                this.center.copy(sphere.center);
                this.radius = sphere.radius;

                return this;

            },

            empty: function() {

                return (this.radius <= 0);

            },

            containsPoint: function(point) {

                return (point.distanceToSquared(this.center) <= (this.radius * this.radius));

            },

            distanceToPoint: function(point) {

                return (point.distanceTo(this.center) - this.radius);

            },

            intersectsSphere: function(sphere) {

                var radiusSum = this.radius + sphere.radius;

                return sphere.center.distanceToSquared(this.center) <= (radiusSum * radiusSum);

            },

            intersectsBox: function(box) {

                return box.intersectsSphere(this);

            },

            intersectsPlane: function(plane) {

                // We use the following equation to compute the signed distance from
                // the center of the sphere to the plane.
                //
                // distance = q * n - d
                //
                // If this distance is greater than the radius of the sphere,
                // then there is no intersection.

                return Math.abs(this.center.dot(plane.normal) - plane.constant) <= this.radius;

            },

            clampPoint: function(point, optionalTarget) {

                var deltaLengthSq = this.center.distanceToSquared(point);

                var result = optionalTarget || new Vector3();

                result.copy(point);

                if (deltaLengthSq > (this.radius * this.radius)) {

                    result.sub(this.center).normalize();
                    result.multiplyScalar(this.radius).add(this.center);

                }

                return result;

            },

            getBoundingBox: function(optionalTarget) {

                var box = optionalTarget || new Box3();

                box.set(this.center, this.center);
                box.expandByScalar(this.radius);

                return box;

            },

            applyMatrix4: function(matrix) {

                this.center.applyMatrix4(matrix);
                this.radius = this.radius * matrix.getMaxScaleOnAxis();

                return this;

            },

            translate: function(offset) {

                this.center.add(offset);

                return this;

            },

            equals: function(sphere) {

                return sphere.center.equals(this.center) && (sphere.radius === this.radius);

            }

        };

        /**
         * @author alteredq / http://alteredqualia.com/
         * @author WestLangley / http://github.com/WestLangley
         * @author bhouston / http://clara.io
         * @author tschw
         */

        function Matrix3() {

            this.elements = new Float32Array([

                1, 0, 0,
                0, 1, 0,
                0, 0, 1

            ]);

            if (arguments.length > 0) {

                console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');

            }

        }

        Matrix3.prototype = {

            constructor: Matrix3,

            isMatrix3: true,

            set: function(n11, n12, n13, n21, n22, n23, n31, n32, n33) {

                var te = this.elements;

                te[0] = n11;
                te[1] = n21;
                te[2] = n31;
                te[3] = n12;
                te[4] = n22;
                te[5] = n32;
                te[6] = n13;
                te[7] = n23;
                te[8] = n33;

                return this;

            },

            identity: function() {

                this.set(

                    1, 0, 0,
                    0, 1, 0,
                    0, 0, 1

                );

                return this;

            },

            clone: function() {

                return new this.constructor().fromArray(this.elements);

            },

            copy: function(m) {

                var me = m.elements;

                this.set(

                    me[0], me[3], me[6],
                    me[1], me[4], me[7],
                    me[2], me[5], me[8]

                );

                return this;

            },

            setFromMatrix4: function(m) {

                var me = m.elements;

                this.set(

                    me[0], me[4], me[8],
                    me[1], me[5], me[9],
                    me[2], me[6], me[10]

                );

                return this;

            },

            applyToBufferAttribute: function() {

                var v1;

                return function applyToBufferAttribute(attribute) {

                    if (v1 === undefined) v1 = new Vector3();

                    for (var i = 0, l = attribute.count; i < l; i++) {

                        v1.x = attribute.getX(i);
                        v1.y = attribute.getY(i);
                        v1.z = attribute.getZ(i);

                        v1.applyMatrix3(this);

                        attribute.setXYZ(i, v1.x, v1.y, v1.z);

                    }

                    return attribute;

                };

            }(),

            multiplyScalar: function(s) {

                var te = this.elements;

                te[0] *= s;
                te[3] *= s;
                te[6] *= s;
                te[1] *= s;
                te[4] *= s;
                te[7] *= s;
                te[2] *= s;
                te[5] *= s;
                te[8] *= s;

                return this;

            },

            determinant: function() {

                var te = this.elements;

                var a = te[0],
                    b = te[1],
                    c = te[2],
                    d = te[3],
                    e = te[4],
                    f = te[5],
                    g = te[6],
                    h = te[7],
                    i = te[8];

                return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

            },

            getInverse: function(matrix, throwOnDegenerate) {

                if (matrix && matrix.isMatrix4) {

                    console.error("THREE.Matrix3.getInverse no longer takes a Matrix4 argument.");

                }

                var me = matrix.elements,
                    te = this.elements,

                    n11 = me[0],
                    n21 = me[1],
                    n31 = me[2],
                    n12 = me[3],
                    n22 = me[4],
                    n32 = me[5],
                    n13 = me[6],
                    n23 = me[7],
                    n33 = me[8],

                    t11 = n33 * n22 - n32 * n23,
                    t12 = n32 * n13 - n33 * n12,
                    t13 = n23 * n12 - n22 * n13,

                    det = n11 * t11 + n21 * t12 + n31 * t13;

                if (det === 0) {

                    var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";

                    if (throwOnDegenerate === true) {

                        throw new Error(msg);

                    } else {

                        console.warn(msg);

                    }

                    return this.identity();
                }

                var detInv = 1 / det;

                te[0] = t11 * detInv;
                te[1] = (n31 * n23 - n33 * n21) * detInv;
                te[2] = (n32 * n21 - n31 * n22) * detInv;

                te[3] = t12 * detInv;
                te[4] = (n33 * n11 - n31 * n13) * detInv;
                te[5] = (n31 * n12 - n32 * n11) * detInv;

                te[6] = t13 * detInv;
                te[7] = (n21 * n13 - n23 * n11) * detInv;
                te[8] = (n22 * n11 - n21 * n12) * detInv;

                return this;

            },

            transpose: function() {

                var tmp, m = this.elements;

                tmp = m[1];
                m[1] = m[3];
                m[3] = tmp;
                tmp = m[2];
                m[2] = m[6];
                m[6] = tmp;
                tmp = m[5];
                m[5] = m[7];
                m[7] = tmp;

                return this;

            },

            getNormalMatrix: function(matrix4) {

                return this.setFromMatrix4(matrix4).getInverse(this).transpose();

            },

            transposeIntoArray: function(r) {

                var m = this.elements;

                r[0] = m[0];
                r[1] = m[3];
                r[2] = m[6];
                r[3] = m[1];
                r[4] = m[4];
                r[5] = m[7];
                r[6] = m[2];
                r[7] = m[5];
                r[8] = m[8];

                return this;

            },

            fromArray: function(array, offset) {

                if (offset === undefined) offset = 0;

                for (var i = 0; i < 9; i++) {

                    this.elements[i] = array[i + offset];

                }

                return this;

            },

            toArray: function(array, offset) {

                if (array === undefined) array = [];
                if (offset === undefined) offset = 0;

                var te = this.elements;

                array[offset] = te[0];
                array[offset + 1] = te[1];
                array[offset + 2] = te[2];

                array[offset + 3] = te[3];
                array[offset + 4] = te[4];
                array[offset + 5] = te[5];

                array[offset + 6] = te[6];
                array[offset + 7] = te[7];
                array[offset + 8] = te[8];

                return array;

            }

        };

        /**
         * @author bhouston / http://clara.io
         */

        function Plane(normal, constant) {

            this.normal = (normal !== undefined) ? normal : new Vector3(1, 0, 0);
            this.constant = (constant !== undefined) ? constant : 0;

        }

        Plane.prototype = {

            constructor: Plane,

            set: function(normal, constant) {

                this.normal.copy(normal);
                this.constant = constant;

                return this;

            },

            setComponents: function(x, y, z, w) {

                this.normal.set(x, y, z);
                this.constant = w;

                return this;

            },

            setFromNormalAndCoplanarPoint: function(normal, point) {

                this.normal.copy(normal);
                this.constant = -point.dot(this.normal); // must be this.normal, not normal, as this.normal is normalized

                return this;

            },

            setFromCoplanarPoints: function() {

                var v1 = new Vector3();
                var v2 = new Vector3();

                return function setFromCoplanarPoints(a, b, c) {

                    var normal = v1.subVectors(c, b).cross(v2.subVectors(a, b)).normalize();

                    // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

                    this.setFromNormalAndCoplanarPoint(normal, a);

                    return this;

                };

            }(),

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(plane) {

                this.normal.copy(plane.normal);
                this.constant = plane.constant;

                return this;

            },

            normalize: function() {

                // Note: will lead to a divide by zero if the plane is invalid.

                var inverseNormalLength = 1.0 / this.normal.length();
                this.normal.multiplyScalar(inverseNormalLength);
                this.constant *= inverseNormalLength;

                return this;

            },

            negate: function() {

                this.constant *= -1;
                this.normal.negate();

                return this;

            },

            distanceToPoint: function(point) {

                return this.normal.dot(point) + this.constant;

            },

            distanceToSphere: function(sphere) {

                return this.distanceToPoint(sphere.center) - sphere.radius;

            },

            projectPoint: function(point, optionalTarget) {

                return this.orthoPoint(point, optionalTarget).sub(point).negate();

            },

            orthoPoint: function(point, optionalTarget) {

                var perpendicularMagnitude = this.distanceToPoint(point);

                var result = optionalTarget || new Vector3();
                return result.copy(this.normal).multiplyScalar(perpendicularMagnitude);

            },

            intersectLine: function() {

                var v1 = new Vector3();

                return function intersectLine(line, optionalTarget) {

                    var result = optionalTarget || new Vector3();

                    var direction = line.delta(v1);

                    var denominator = this.normal.dot(direction);

                    if (denominator === 0) {

                        // line is coplanar, return origin
                        if (this.distanceToPoint(line.start) === 0) {

                            return result.copy(line.start);

                        }

                        // Unsure if this is the correct method to handle this case.
                        return undefined;

                    }

                    var t = -(line.start.dot(this.normal) + this.constant) / denominator;

                    if (t < 0 || t > 1) {

                        return undefined;

                    }

                    return result.copy(direction).multiplyScalar(t).add(line.start);

                };

            }(),

            intersectsLine: function(line) {

                // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

                var startSign = this.distanceToPoint(line.start);
                var endSign = this.distanceToPoint(line.end);

                return (startSign < 0 && endSign > 0) || (endSign < 0 && startSign > 0);

            },

            intersectsBox: function(box) {

                return box.intersectsPlane(this);

            },

            intersectsSphere: function(sphere) {

                return sphere.intersectsPlane(this);

            },

            coplanarPoint: function(optionalTarget) {

                var result = optionalTarget || new Vector3();
                return result.copy(this.normal).multiplyScalar(-this.constant);

            },

            applyMatrix4: function() {

                var v1 = new Vector3();
                var m1 = new Matrix3();

                return function applyMatrix4(matrix, optionalNormalMatrix) {

                    var referencePoint = this.coplanarPoint(v1).applyMatrix4(matrix);

                    // transform normal based on theory here:
                    // http://www.songho.ca/opengl/gl_normaltransform.html
                    var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix(matrix);
                    var normal = this.normal.applyMatrix3(normalMatrix).normalize();

                    // recalculate constant (like in setFromNormalAndCoplanarPoint)
                    this.constant = -referencePoint.dot(normal);

                    return this;

                };

            }(),

            translate: function(offset) {

                this.constant = this.constant - offset.dot(this.normal);

                return this;

            },

            equals: function(plane) {

                return plane.normal.equals(this.normal) && (plane.constant === this.constant);

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         * @author bhouston / http://clara.io
         */

        function Frustum(p0, p1, p2, p3, p4, p5) {

            this.planes = [

                (p0 !== undefined) ? p0 : new Plane(),
                (p1 !== undefined) ? p1 : new Plane(),
                (p2 !== undefined) ? p2 : new Plane(),
                (p3 !== undefined) ? p3 : new Plane(),
                (p4 !== undefined) ? p4 : new Plane(),
                (p5 !== undefined) ? p5 : new Plane()

            ];

        }

        Frustum.prototype = {

            constructor: Frustum,

            set: function(p0, p1, p2, p3, p4, p5) {

                var planes = this.planes;

                planes[0].copy(p0);
                planes[1].copy(p1);
                planes[2].copy(p2);
                planes[3].copy(p3);
                planes[4].copy(p4);
                planes[5].copy(p5);

                return this;

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(frustum) {

                var planes = this.planes;

                for (var i = 0; i < 6; i++) {

                    planes[i].copy(frustum.planes[i]);

                }

                return this;

            },

            setFromMatrix: function(m) {

                var planes = this.planes;
                var me = m.elements;
                var me0 = me[0],
                    me1 = me[1],
                    me2 = me[2],
                    me3 = me[3];
                var me4 = me[4],
                    me5 = me[5],
                    me6 = me[6],
                    me7 = me[7];
                var me8 = me[8],
                    me9 = me[9],
                    me10 = me[10],
                    me11 = me[11];
                var me12 = me[12],
                    me13 = me[13],
                    me14 = me[14],
                    me15 = me[15];

                planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
                planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
                planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
                planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
                planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
                planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();

                return this;

            },

            intersectsObject: function() {

                var sphere = new Sphere();

                return function intersectsObject(object) {

                    var geometry = object.geometry;

                    if (geometry.boundingSphere === null)
                        geometry.computeBoundingSphere();

                    sphere.copy(geometry.boundingSphere)
                        .applyMatrix4(object.matrixWorld);

                    return this.intersectsSphere(sphere);

                };

            }(),

            intersectsSprite: function() {

                var sphere = new Sphere();

                return function intersectsSprite(sprite) {

                    sphere.center.set(0, 0, 0);
                    sphere.radius = 0.7071067811865476;
                    sphere.applyMatrix4(sprite.matrixWorld);

                    return this.intersectsSphere(sphere);

                };

            }(),

            intersectsSphere: function(sphere) {

                var planes = this.planes;
                var center = sphere.center;
                var negRadius = -sphere.radius;

                for (var i = 0; i < 6; i++) {

                    var distance = planes[i].distanceToPoint(center);

                    if (distance < negRadius) {

                        return false;

                    }

                }

                return true;

            },

            intersectsBox: function() {

                var p1 = new Vector3(),
                    p2 = new Vector3();

                return function intersectsBox(box) {

                    var planes = this.planes;

                    for (var i = 0; i < 6; i++) {

                        var plane = planes[i];

                        p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
                        p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
                        p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
                        p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
                        p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
                        p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

                        var d1 = plane.distanceToPoint(p1);
                        var d2 = plane.distanceToPoint(p2);

                        // if both outside plane, no intersection

                        if (d1 < 0 && d2 < 0) {

                            return false;

                        }

                    }

                    return true;

                };

            }(),


            containsPoint: function(point) {

                var planes = this.planes;

                for (var i = 0; i < 6; i++) {

                    if (planes[i].distanceToPoint(point) < 0) {

                        return false;

                    }

                }

                return true;

            }

        };

        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         */

        function WebGLShadowMap(_renderer, _lights, _objects, capabilities) {

            var _gl = _renderer.context,
                _state = _renderer.state,
                _frustum = new Frustum(),
                _projScreenMatrix = new Matrix4(),

                _lightShadows = _lights.shadows,

                _shadowMapSize = new Vector2(),
                _maxShadowMapSize = new Vector2(capabilities.maxTextureSize, capabilities.maxTextureSize),

                _lookTarget = new Vector3(),
                _lightPositionWorld = new Vector3(),

                _renderList = [],

                _MorphingFlag = 1,
                _SkinningFlag = 2,

                _NumberOfMaterialVariants = (_MorphingFlag | _SkinningFlag) + 1,

                _depthMaterials = new Array(_NumberOfMaterialVariants),
                _distanceMaterials = new Array(_NumberOfMaterialVariants),

                _materialCache = {};

            var cubeDirections = [
                new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1),
                new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)
            ];

            var cubeUps = [
                new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0),
                new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)
            ];

            var cube2DViewPorts = [
                new Vector4(), new Vector4(), new Vector4(),
                new Vector4(), new Vector4(), new Vector4()
            ];

            // init

            var depthMaterialTemplate = new MeshDepthMaterial();
            depthMaterialTemplate.depthPacking = RGBADepthPacking;
            depthMaterialTemplate.clipping = true;

            var distanceShader = ShaderLib["distanceRGBA"];
            var distanceUniforms = UniformsUtils.clone(distanceShader.uniforms);

            for (var i = 0; i !== _NumberOfMaterialVariants; ++i) {

                var useMorphing = (i & _MorphingFlag) !== 0;
                var useSkinning = (i & _SkinningFlag) !== 0;

                var depthMaterial = depthMaterialTemplate.clone();
                depthMaterial.morphTargets = useMorphing;
                depthMaterial.skinning = useSkinning;

                _depthMaterials[i] = depthMaterial;

                var distanceMaterial = new ShaderMaterial({
                    defines: {
                        'USE_SHADOWMAP': ''
                    },
                    uniforms: distanceUniforms,
                    vertexShader: distanceShader.vertexShader,
                    fragmentShader: distanceShader.fragmentShader,
                    morphTargets: useMorphing,
                    skinning: useSkinning,
                    clipping: true
                });

                _distanceMaterials[i] = distanceMaterial;

            }

            //

            var scope = this;

            this.enabled = false;

            this.autoUpdate = true;
            this.needsUpdate = false;

            this.type = PCFShadowMap;

            this.renderReverseSided = true;
            this.renderSingleSided = true;

            this.render = function(scene, camera) {

                if (scope.enabled === false) return;
                if (scope.autoUpdate === false && scope.needsUpdate === false) return;

                if (_lightShadows.length === 0) return;

                // Set GL state for depth map.
                _state.buffers.color.setClear(1, 1, 1, 1);
                _state.disable(_gl.BLEND);
                _state.setDepthTest(true);
                _state.setScissorTest(false);

                // render depth map

                var faceCount, isPointLight;

                for (var i = 0, il = _lightShadows.length; i < il; i++) {

                    var light = _lightShadows[i];
                    var shadow = light.shadow;

                    if (shadow === undefined) {

                        console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');
                        continue;

                    }

                    var shadowCamera = shadow.camera;

                    _shadowMapSize.copy(shadow.mapSize);
                    _shadowMapSize.min(_maxShadowMapSize);

                    if (light && light.isPointLight) {

                        faceCount = 6;
                        isPointLight = true;

                        var vpWidth = _shadowMapSize.x;
                        var vpHeight = _shadowMapSize.y;

                        // These viewports map a cube-map onto a 2D texture with the
                        // following orientation:
                        //
                        //  xzXZ
                        //   y Y
                        //
                        // X - Positive x direction
                        // x - Negative x direction
                        // Y - Positive y direction
                        // y - Negative y direction
                        // Z - Positive z direction
                        // z - Negative z direction

                        // positive X
                        cube2DViewPorts[0].set(vpWidth * 2, vpHeight, vpWidth, vpHeight);
                        // negative X
                        cube2DViewPorts[1].set(0, vpHeight, vpWidth, vpHeight);
                        // positive Z
                        cube2DViewPorts[2].set(vpWidth * 3, vpHeight, vpWidth, vpHeight);
                        // negative Z
                        cube2DViewPorts[3].set(vpWidth, vpHeight, vpWidth, vpHeight);
                        // positive Y
                        cube2DViewPorts[4].set(vpWidth * 3, 0, vpWidth, vpHeight);
                        // negative Y
                        cube2DViewPorts[5].set(vpWidth, 0, vpWidth, vpHeight);

                        _shadowMapSize.x *= 4.0;
                        _shadowMapSize.y *= 2.0;

                    } else {

                        faceCount = 1;
                        isPointLight = false;

                    }

                    if (shadow.map === null) {

                        var pars = {
                            minFilter: NearestFilter,
                            magFilter: NearestFilter,
                            format: RGBAFormat
                        };

                        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);

                        shadowCamera.updateProjectionMatrix();

                    }

                    if (shadow.isSpotLightShadow) {

                        shadow.update(light);

                    }

                    // TODO (abelnation / sam-g-steel): is this needed?
                    if (shadow && shadow.isRectAreaLightShadow) {

                        shadow.update(light);

                    }

                    var shadowMap = shadow.map;
                    var shadowMatrix = shadow.matrix;

                    _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
                    shadowCamera.position.copy(_lightPositionWorld);

                    _renderer.setRenderTarget(shadowMap);
                    _renderer.clear();

                    // render shadow map for each cube face (if omni-directional) or
                    // run a single pass if not

                    for (var face = 0; face < faceCount; face++) {

                        if (isPointLight) {

                            _lookTarget.copy(shadowCamera.position);
                            _lookTarget.add(cubeDirections[face]);
                            shadowCamera.up.copy(cubeUps[face]);
                            shadowCamera.lookAt(_lookTarget);

                            var vpDimensions = cube2DViewPorts[face];
                            _state.viewport(vpDimensions);

                        } else {

                            _lookTarget.setFromMatrixPosition(light.target.matrixWorld);
                            shadowCamera.lookAt(_lookTarget);

                        }

                        shadowCamera.updateMatrixWorld();
                        shadowCamera.matrixWorldInverse.getInverse(shadowCamera.matrixWorld);

                        // compute shadow matrix

                        shadowMatrix.set(
                            0.5, 0.0, 0.0, 0.5,
                            0.0, 0.5, 0.0, 0.5,
                            0.0, 0.0, 0.5, 0.5,
                            0.0, 0.0, 0.0, 1.0
                        );

                        shadowMatrix.multiply(shadowCamera.projectionMatrix);
                        shadowMatrix.multiply(shadowCamera.matrixWorldInverse);

                        // update camera matrices and frustum

                        _projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
                        _frustum.setFromMatrix(_projScreenMatrix);

                        // set object matrices & frustum culling

                        _renderList.length = 0;

                        projectObject(scene, camera, shadowCamera);

                        // render shadow map
                        // render regular objects

                        for (var j = 0, jl = _renderList.length; j < jl; j++) {

                            var object = _renderList[j];
                            var geometry = _objects.update(object);
                            var material = object.material;

                            if (material && material.isMultiMaterial) {

                                var groups = geometry.groups;
                                var materials = material.materials;

                                for (var k = 0, kl = groups.length; k < kl; k++) {

                                    var group = groups[k];
                                    var groupMaterial = materials[group.materialIndex];

                                    if (groupMaterial.visible === true) {

                                        var depthMaterial = getDepthMaterial(object, groupMaterial, isPointLight, _lightPositionWorld);
                                        _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);

                                    }

                                }

                            } else {

                                var depthMaterial = getDepthMaterial(object, material, isPointLight, _lightPositionWorld);
                                _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);

                            }

                        }

                    }

                }

                // Restore GL state.
                var clearColor = _renderer.getClearColor(),
                    clearAlpha = _renderer.getClearAlpha();
                _renderer.setClearColor(clearColor, clearAlpha);

                scope.needsUpdate = false;

            };

            function getDepthMaterial(object, material, isPointLight, lightPositionWorld) {

                var geometry = object.geometry;

                var result = null;

                var materialVariants = _depthMaterials;
                var customMaterial = object.customDepthMaterial;

                if (isPointLight) {

                    materialVariants = _distanceMaterials;
                    customMaterial = object.customDistanceMaterial;

                }

                if (!customMaterial) {

                    var useMorphing = false;

                    if (material.morphTargets) {

                        if (geometry && geometry.isBufferGeometry) {

                            useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

                        } else if (geometry && geometry.isGeometry) {

                            useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

                        }

                    }

                    var useSkinning = object.isSkinnedMesh && material.skinning;

                    var variantIndex = 0;

                    if (useMorphing) variantIndex |= _MorphingFlag;
                    if (useSkinning) variantIndex |= _SkinningFlag;

                    result = materialVariants[variantIndex];

                } else {

                    result = customMaterial;

                }

                if (_renderer.localClippingEnabled &&
                    material.clipShadows === true &&
                    material.clippingPlanes.length !== 0) {

                    // in this case we need a unique material instance reflecting the
                    // appropriate state

                    var keyA = result.uuid,
                        keyB = material.uuid;

                    var materialsForVariant = _materialCache[keyA];

                    if (materialsForVariant === undefined) {

                        materialsForVariant = {};
                        _materialCache[keyA] = materialsForVariant;

                    }

                    var cachedMaterial = materialsForVariant[keyB];

                    if (cachedMaterial === undefined) {

                        cachedMaterial = result.clone();
                        materialsForVariant[keyB] = cachedMaterial;

                    }

                    result = cachedMaterial;

                }

                result.visible = material.visible;
                result.wireframe = material.wireframe;

                var side = material.side;

                if (scope.renderSingleSided && side == DoubleSide) {

                    side = FrontSide;

                }

                if (scope.renderReverseSided) {

                    if (side === FrontSide) side = BackSide;
                    else if (side === BackSide) side = FrontSide;

                }

                result.side = side;

                result.clipShadows = material.clipShadows;
                result.clippingPlanes = material.clippingPlanes;

                result.wireframeLinewidth = material.wireframeLinewidth;
                result.linewidth = material.linewidth;

                if (isPointLight && result.uniforms.lightPos !== undefined) {

                    result.uniforms.lightPos.value.copy(lightPositionWorld);

                }

                return result;

            }

            function projectObject(object, camera, shadowCamera) {

                if (object.visible === false) return;

                var visible = (object.layers.mask & camera.layers.mask) !== 0;

                if (visible && (object.isMesh || object.isLine || object.isPoints)) {

                    if (object.castShadow && (object.frustumCulled === false || _frustum.intersectsObject(object) === true)) {

                        var material = object.material;

                        if (material.visible === true) {

                            object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
                            _renderList.push(object);

                        }

                    }

                }

                var children = object.children;

                for (var i = 0, l = children.length; i < l; i++) {

                    projectObject(children[i], camera, shadowCamera);

                }

            }

        }

        /**
         * @author bhouston / http://clara.io
         */

        function Ray(origin, direction) {

            this.origin = (origin !== undefined) ? origin : new Vector3();
            this.direction = (direction !== undefined) ? direction : new Vector3();

        }

        Ray.prototype = {

            constructor: Ray,

            set: function(origin, direction) {

                this.origin.copy(origin);
                this.direction.copy(direction);

                return this;

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(ray) {

                this.origin.copy(ray.origin);
                this.direction.copy(ray.direction);

                return this;

            },

            at: function(t, optionalTarget) {

                var result = optionalTarget || new Vector3();

                return result.copy(this.direction).multiplyScalar(t).add(this.origin);

            },

            lookAt: function(v) {

                this.direction.copy(v).sub(this.origin).normalize();

                return this;

            },

            recast: function() {

                var v1 = new Vector3();

                return function recast(t) {

                    this.origin.copy(this.at(t, v1));

                    return this;

                };

            }(),

            closestPointToPoint: function(point, optionalTarget) {

                var result = optionalTarget || new Vector3();
                result.subVectors(point, this.origin);
                var directionDistance = result.dot(this.direction);

                if (directionDistance < 0) {

                    return result.copy(this.origin);

                }

                return result.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);

            },

            distanceToPoint: function(point) {

                return Math.sqrt(this.distanceSqToPoint(point));

            },

            distanceSqToPoint: function() {

                var v1 = new Vector3();

                return function distanceSqToPoint(point) {

                    var directionDistance = v1.subVectors(point, this.origin).dot(this.direction);

                    // point behind the ray

                    if (directionDistance < 0) {

                        return this.origin.distanceToSquared(point);

                    }

                    v1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);

                    return v1.distanceToSquared(point);

                };

            }(),

            distanceSqToSegment: function() {

                var segCenter = new Vector3();
                var segDir = new Vector3();
                var diff = new Vector3();

                return function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {

                    // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
                    // It returns the min distance between the ray and the segment
                    // defined by v0 and v1
                    // It can also set two optional targets :
                    // - The closest point on the ray
                    // - The closest point on the segment

                    segCenter.copy(v0).add(v1).multiplyScalar(0.5);
                    segDir.copy(v1).sub(v0).normalize();
                    diff.copy(this.origin).sub(segCenter);

                    var segExtent = v0.distanceTo(v1) * 0.5;
                    var a01 = -this.direction.dot(segDir);
                    var b0 = diff.dot(this.direction);
                    var b1 = -diff.dot(segDir);
                    var c = diff.lengthSq();
                    var det = Math.abs(1 - a01 * a01);
                    var s0, s1, sqrDist, extDet;

                    if (det > 0) {

                        // The ray and segment are not parallel.

                        s0 = a01 * b1 - b0;
                        s1 = a01 * b0 - b1;
                        extDet = segExtent * det;

                        if (s0 >= 0) {

                            if (s1 >= -extDet) {

                                if (s1 <= extDet) {

                                    // region 0
                                    // Minimum at interior points of ray and segment.

                                    var invDet = 1 / det;
                                    s0 *= invDet;
                                    s1 *= invDet;
                                    sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;

                                } else {

                                    // region 1

                                    s1 = segExtent;
                                    s0 = Math.max(0, -(a01 * s1 + b0));
                                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;

                                }

                            } else {

                                // region 5

                                s1 = -segExtent;
                                s0 = Math.max(0, -(a01 * s1 + b0));
                                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;

                            }

                        } else {

                            if (s1 <= -extDet) {

                                // region 4

                                s0 = Math.max(0, -(-a01 * segExtent + b0));
                                s1 = (s0 > 0) ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;

                            } else if (s1 <= extDet) {

                                // region 3

                                s0 = 0;
                                s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
                                sqrDist = s1 * (s1 + 2 * b1) + c;

                            } else {

                                // region 2

                                s0 = Math.max(0, -(a01 * segExtent + b0));
                                s1 = (s0 > 0) ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;

                            }

                        }

                    } else {

                        // Ray and segment are parallel.

                        s1 = (a01 > 0) ? -segExtent : segExtent;
                        s0 = Math.max(0, -(a01 * s1 + b0));
                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;

                    }

                    if (optionalPointOnRay) {

                        optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);

                    }

                    if (optionalPointOnSegment) {

                        optionalPointOnSegment.copy(segDir).multiplyScalar(s1).add(segCenter);

                    }

                    return sqrDist;

                };

            }(),

            intersectSphere: function() {

                var v1 = new Vector3();

                return function intersectSphere(sphere, optionalTarget) {

                    v1.subVectors(sphere.center, this.origin);
                    var tca = v1.dot(this.direction);
                    var d2 = v1.dot(v1) - tca * tca;
                    var radius2 = sphere.radius * sphere.radius;

                    if (d2 > radius2) return null;

                    var thc = Math.sqrt(radius2 - d2);

                    // t0 = first intersect point - entrance on front of sphere
                    var t0 = tca - thc;

                    // t1 = second intersect point - exit point on back of sphere
                    var t1 = tca + thc;

                    // test to see if both t0 and t1 are behind the ray - if so, return null
                    if (t0 < 0 && t1 < 0) return null;

                    // test to see if t0 is behind the ray:
                    // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
                    // in order to always return an intersect point that is in front of the ray.
                    if (t0 < 0) return this.at(t1, optionalTarget);

                    // else t0 is in front of the ray, so return the first collision point scaled by t0
                    return this.at(t0, optionalTarget);

                };

            }(),

            intersectsSphere: function(sphere) {

                return this.distanceToPoint(sphere.center) <= sphere.radius;

            },

            distanceToPlane: function(plane) {

                var denominator = plane.normal.dot(this.direction);

                if (denominator === 0) {

                    // line is coplanar, return origin
                    if (plane.distanceToPoint(this.origin) === 0) {

                        return 0;

                    }

                    // Null is preferable to undefined since undefined means.... it is undefined

                    return null;

                }

                var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;

                // Return if the ray never intersects the plane

                return t >= 0 ? t : null;

            },

            intersectPlane: function(plane, optionalTarget) {

                var t = this.distanceToPlane(plane);

                if (t === null) {

                    return null;

                }

                return this.at(t, optionalTarget);

            },



            intersectsPlane: function(plane) {

                // check if the ray lies on the plane first

                var distToPoint = plane.distanceToPoint(this.origin);

                if (distToPoint === 0) {

                    return true;

                }

                var denominator = plane.normal.dot(this.direction);

                if (denominator * distToPoint < 0) {

                    return true;

                }

                // ray origin is behind the plane (and is pointing behind it)

                return false;

            },

            intersectBox: function(box, optionalTarget) {

                var tmin, tmax, tymin, tymax, tzmin, tzmax;

                var invdirx = 1 / this.direction.x,
                    invdiry = 1 / this.direction.y,
                    invdirz = 1 / this.direction.z;

                var origin = this.origin;

                if (invdirx >= 0) {

                    tmin = (box.min.x - origin.x) * invdirx;
                    tmax = (box.max.x - origin.x) * invdirx;

                } else {

                    tmin = (box.max.x - origin.x) * invdirx;
                    tmax = (box.min.x - origin.x) * invdirx;

                }

                if (invdiry >= 0) {

                    tymin = (box.min.y - origin.y) * invdiry;
                    tymax = (box.max.y - origin.y) * invdiry;

                } else {

                    tymin = (box.max.y - origin.y) * invdiry;
                    tymax = (box.min.y - origin.y) * invdiry;

                }

                if ((tmin > tymax) || (tymin > tmax)) return null;

                // These lines also handle the case where tmin or tmax is NaN
                // (result of 0 * Infinity). x !== x returns true if x is NaN

                if (tymin > tmin || tmin !== tmin) tmin = tymin;

                if (tymax < tmax || tmax !== tmax) tmax = tymax;

                if (invdirz >= 0) {

                    tzmin = (box.min.z - origin.z) * invdirz;
                    tzmax = (box.max.z - origin.z) * invdirz;

                } else {

                    tzmin = (box.max.z - origin.z) * invdirz;
                    tzmax = (box.min.z - origin.z) * invdirz;

                }

                if ((tmin > tzmax) || (tzmin > tmax)) return null;

                if (tzmin > tmin || tmin !== tmin) tmin = tzmin;

                if (tzmax < tmax || tmax !== tmax) tmax = tzmax;

                //return point closest to the ray (positive side)

                if (tmax < 0) return null;

                return this.at(tmin >= 0 ? tmin : tmax, optionalTarget);

            },

            intersectsBox: (function() {

                var v = new Vector3();

                return function intersectsBox(box) {

                    return this.intersectBox(box, v) !== null;

                };

            })(),

            intersectTriangle: function() {

                // Compute the offset origin, edges, and normal.
                var diff = new Vector3();
                var edge1 = new Vector3();
                var edge2 = new Vector3();
                var normal = new Vector3();

                return function intersectTriangle(a, b, c, backfaceCulling, optionalTarget) {

                    // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

                    edge1.subVectors(b, a);
                    edge2.subVectors(c, a);
                    normal.crossVectors(edge1, edge2);

                    // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
                    // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
                    //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
                    //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
                    //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
                    var DdN = this.direction.dot(normal);
                    var sign;

                    if (DdN > 0) {

                        if (backfaceCulling) return null;
                        sign = 1;

                    } else if (DdN < 0) {

                        sign = -1;
                        DdN = -DdN;

                    } else {

                        return null;

                    }

                    diff.subVectors(this.origin, a);
                    var DdQxE2 = sign * this.direction.dot(edge2.crossVectors(diff, edge2));

                    // b1 < 0, no intersection
                    if (DdQxE2 < 0) {

                        return null;

                    }

                    var DdE1xQ = sign * this.direction.dot(edge1.cross(diff));

                    // b2 < 0, no intersection
                    if (DdE1xQ < 0) {

                        return null;

                    }

                    // b1+b2 > 1, no intersection
                    if (DdQxE2 + DdE1xQ > DdN) {

                        return null;

                    }

                    // Line intersects triangle, check if ray does.
                    var QdN = -sign * diff.dot(normal);

                    // t < 0, no intersection
                    if (QdN < 0) {

                        return null;

                    }

                    // Ray intersects triangle.
                    return this.at(QdN / DdN, optionalTarget);

                };

            }(),

            applyMatrix4: function(matrix4) {

                this.direction.add(this.origin).applyMatrix4(matrix4);
                this.origin.applyMatrix4(matrix4);
                this.direction.sub(this.origin);
                this.direction.normalize();

                return this;

            },

            equals: function(ray) {

                return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         * @author bhouston / http://clara.io
         */

        function Euler(x, y, z, order) {

            this._x = x || 0;
            this._y = y || 0;
            this._z = z || 0;
            this._order = order || Euler.DefaultOrder;

        }

        Euler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];

        Euler.DefaultOrder = 'XYZ';

        Euler.prototype = {

            constructor: Euler,

            isEuler: true,

            get x() {

                return this._x;

            },

            set x(value) {

                this._x = value;
                this.onChangeCallback();

            },

            get y() {

                return this._y;

            },

            set y(value) {

                this._y = value;
                this.onChangeCallback();

            },

            get z() {

                return this._z;

            },

            set z(value) {

                this._z = value;
                this.onChangeCallback();

            },

            get order() {

                return this._order;

            },

            set order(value) {

                this._order = value;
                this.onChangeCallback();

            },

            set: function(x, y, z, order) {

                this._x = x;
                this._y = y;
                this._z = z;
                this._order = order || this._order;

                this.onChangeCallback();

                return this;

            },

            clone: function() {

                return new this.constructor(this._x, this._y, this._z, this._order);

            },

            copy: function(euler) {

                this._x = euler._x;
                this._y = euler._y;
                this._z = euler._z;
                this._order = euler._order;

                this.onChangeCallback();

                return this;

            },

            setFromRotationMatrix: function(m, order, update) {

                var clamp = _Math.clamp;

                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

                var te = m.elements;
                var m11 = te[0],
                    m12 = te[4],
                    m13 = te[8];
                var m21 = te[1],
                    m22 = te[5],
                    m23 = te[9];
                var m31 = te[2],
                    m32 = te[6],
                    m33 = te[10];

                order = order || this._order;

                if (order === 'XYZ') {

                    this._y = Math.asin(clamp(m13, -1, 1));

                    if (Math.abs(m13) < 0.99999) {

                        this._x = Math.atan2(-m23, m33);
                        this._z = Math.atan2(-m12, m11);

                    } else {

                        this._x = Math.atan2(m32, m22);
                        this._z = 0;

                    }

                } else if (order === 'YXZ') {

                    this._x = Math.asin(-clamp(m23, -1, 1));

                    if (Math.abs(m23) < 0.99999) {

                        this._y = Math.atan2(m13, m33);
                        this._z = Math.atan2(m21, m22);

                    } else {

                        this._y = Math.atan2(-m31, m11);
                        this._z = 0;

                    }

                } else if (order === 'ZXY') {

                    this._x = Math.asin(clamp(m32, -1, 1));

                    if (Math.abs(m32) < 0.99999) {

                        this._y = Math.atan2(-m31, m33);
                        this._z = Math.atan2(-m12, m22);

                    } else {

                        this._y = 0;
                        this._z = Math.atan2(m21, m11);

                    }

                } else if (order === 'ZYX') {

                    this._y = Math.asin(-clamp(m31, -1, 1));

                    if (Math.abs(m31) < 0.99999) {

                        this._x = Math.atan2(m32, m33);
                        this._z = Math.atan2(m21, m11);

                    } else {

                        this._x = 0;
                        this._z = Math.atan2(-m12, m22);

                    }

                } else if (order === 'YZX') {

                    this._z = Math.asin(clamp(m21, -1, 1));

                    if (Math.abs(m21) < 0.99999) {

                        this._x = Math.atan2(-m23, m22);
                        this._y = Math.atan2(-m31, m11);

                    } else {

                        this._x = 0;
                        this._y = Math.atan2(m13, m33);

                    }

                } else if (order === 'XZY') {

                    this._z = Math.asin(-clamp(m12, -1, 1));

                    if (Math.abs(m12) < 0.99999) {

                        this._x = Math.atan2(m32, m22);
                        this._y = Math.atan2(m13, m11);

                    } else {

                        this._x = Math.atan2(-m23, m33);
                        this._y = 0;

                    }

                } else {

                    console.warn('THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order);

                }

                this._order = order;

                if (update !== false) this.onChangeCallback();

                return this;

            },

            setFromQuaternion: function() {

                var matrix;

                return function setFromQuaternion(q, order, update) {

                    if (matrix === undefined) matrix = new Matrix4();

                    matrix.makeRotationFromQuaternion(q);

                    return this.setFromRotationMatrix(matrix, order, update);

                };

            }(),

            setFromVector3: function(v, order) {

                return this.set(v.x, v.y, v.z, order || this._order);

            },

            reorder: function() {

                // WARNING: this discards revolution information -bhouston

                var q = new Quaternion();

                return function reorder(newOrder) {

                    q.setFromEuler(this);

                    return this.setFromQuaternion(q, newOrder);

                };

            }(),

            equals: function(euler) {

                return (euler._x === this._x) && (euler._y === this._y) && (euler._z === this._z) && (euler._order === this._order);

            },

            fromArray: function(array) {

                this._x = array[0];
                this._y = array[1];
                this._z = array[2];
                if (array[3] !== undefined) this._order = array[3];

                this.onChangeCallback();

                return this;

            },

            toArray: function(array, offset) {

                if (array === undefined) array = [];
                if (offset === undefined) offset = 0;

                array[offset] = this._x;
                array[offset + 1] = this._y;
                array[offset + 2] = this._z;
                array[offset + 3] = this._order;

                return array;

            },

            toVector3: function(optionalResult) {

                if (optionalResult) {

                    return optionalResult.set(this._x, this._y, this._z);

                } else {

                    return new Vector3(this._x, this._y, this._z);

                }

            },

            onChange: function(callback) {

                this.onChangeCallback = callback;

                return this;

            },

            onChangeCallback: function() {}

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function Layers() {

            this.mask = 1;

        }

        Layers.prototype = {

            constructor: Layers,

            set: function(channel) {

                this.mask = 1 << channel;

            },

            enable: function(channel) {

                this.mask |= 1 << channel;

            },

            toggle: function(channel) {

                this.mask ^= 1 << channel;

            },

            disable: function(channel) {

                this.mask &= ~(1 << channel);

            },

            test: function(layers) {

                return (this.mask & layers.mask) !== 0;

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author WestLangley / http://github.com/WestLangley
         * @author elephantatwork / www.elephantatwork.ch
         */

        var object3DId = 0;

        function Object3D() {

            Object.defineProperty(this, 'id', {
                value: object3DId++
            });

            this.uuid = _Math.generateUUID();

            this.name = '';
            this.type = 'Object3D';

            this.parent = null;
            this.children = [];

            this.up = Object3D.DefaultUp.clone();

            var position = new Vector3();
            var rotation = new Euler();
            var quaternion = new Quaternion();
            var scale = new Vector3(1, 1, 1);

            function onRotationChange() {

                quaternion.setFromEuler(rotation, false);

            }

            function onQuaternionChange() {

                rotation.setFromQuaternion(quaternion, undefined, false);

            }

            rotation.onChange(onRotationChange);
            quaternion.onChange(onQuaternionChange);

            Object.defineProperties(this, {
                position: {
                    enumerable: true,
                    value: position
                },
                rotation: {
                    enumerable: true,
                    value: rotation
                },
                quaternion: {
                    enumerable: true,
                    value: quaternion
                },
                scale: {
                    enumerable: true,
                    value: scale
                },
                modelViewMatrix: {
                    value: new Matrix4()
                },
                normalMatrix: {
                    value: new Matrix3()
                }
            });

            this.matrix = new Matrix4();
            this.matrixWorld = new Matrix4();

            this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
            this.matrixWorldNeedsUpdate = false;

            this.layers = new Layers();
            this.visible = true;

            this.castShadow = false;
            this.receiveShadow = false;

            this.frustumCulled = true;
            this.renderOrder = 0;

            this.userData = {};

            this.onBeforeRender = function() {};
            this.onAfterRender = function() {};

        }

        Object3D.DefaultUp = new Vector3(0, 1, 0);
        Object3D.DefaultMatrixAutoUpdate = true;

        Object3D.prototype = {

            constructor: Object3D,

            isObject3D: true,

            applyMatrix: function(matrix) {

                this.matrix.multiplyMatrices(matrix, this.matrix);

                this.matrix.decompose(this.position, this.quaternion, this.scale);

            },

            setRotationFromAxisAngle: function(axis, angle) {

                // assumes axis is normalized

                this.quaternion.setFromAxisAngle(axis, angle);

            },

            setRotationFromEuler: function(euler) {

                this.quaternion.setFromEuler(euler, true);

            },

            setRotationFromMatrix: function(m) {

                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

                this.quaternion.setFromRotationMatrix(m);

            },

            setRotationFromQuaternion: function(q) {

                // assumes q is normalized

                this.quaternion.copy(q);

            },

            rotateOnAxis: function() {

                // rotate object on axis in object space
                // axis is assumed to be normalized

                var q1 = new Quaternion();

                return function rotateOnAxis(axis, angle) {

                    q1.setFromAxisAngle(axis, angle);

                    this.quaternion.multiply(q1);

                    return this;

                };

            }(),

            rotateX: function() {

                var v1 = new Vector3(1, 0, 0);

                return function rotateX(angle) {

                    return this.rotateOnAxis(v1, angle);

                };

            }(),

            rotateY: function() {

                var v1 = new Vector3(0, 1, 0);

                return function rotateY(angle) {

                    return this.rotateOnAxis(v1, angle);

                };

            }(),

            rotateZ: function() {

                var v1 = new Vector3(0, 0, 1);

                return function rotateZ(angle) {

                    return this.rotateOnAxis(v1, angle);

                };

            }(),

            translateOnAxis: function() {

                // translate object by distance along axis in object space
                // axis is assumed to be normalized

                var v1 = new Vector3();

                return function translateOnAxis(axis, distance) {

                    v1.copy(axis).applyQuaternion(this.quaternion);

                    this.position.add(v1.multiplyScalar(distance));

                    return this;

                };

            }(),

            translateX: function() {

                var v1 = new Vector3(1, 0, 0);

                return function translateX(distance) {

                    return this.translateOnAxis(v1, distance);

                };

            }(),

            translateY: function() {

                var v1 = new Vector3(0, 1, 0);

                return function translateY(distance) {

                    return this.translateOnAxis(v1, distance);

                };

            }(),

            translateZ: function() {

                var v1 = new Vector3(0, 0, 1);

                return function translateZ(distance) {

                    return this.translateOnAxis(v1, distance);

                };

            }(),

            localToWorld: function(vector) {

                return vector.applyMatrix4(this.matrixWorld);

            },

            worldToLocal: function() {

                var m1 = new Matrix4();

                return function worldToLocal(vector) {

                    return vector.applyMatrix4(m1.getInverse(this.matrixWorld));

                };

            }(),

            lookAt: function() {

                // This routine does not support objects with rotated and/or translated parent(s)

                var m1 = new Matrix4();

                return function lookAt(vector) {

                    m1.lookAt(vector, this.position, this.up);

                    this.quaternion.setFromRotationMatrix(m1);

                };

            }(),

            add: function(object) {

                if (arguments.length > 1) {

                    for (var i = 0; i < arguments.length; i++) {

                        this.add(arguments[i]);

                    }

                    return this;

                }

                if (object === this) {

                    console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
                    return this;

                }

                if ((object && object.isObject3D)) {

                    if (object.parent !== null) {

                        object.parent.remove(object);

                    }

                    object.parent = this;
                    object.dispatchEvent({
                        type: 'added'
                    });

                    this.children.push(object);

                } else {

                    console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);

                }

                return this;

            },

            remove: function(object) {

                if (arguments.length > 1) {

                    for (var i = 0; i < arguments.length; i++) {

                        this.remove(arguments[i]);

                    }

                }

                var index = this.children.indexOf(object);

                if (index !== -1) {

                    object.parent = null;

                    object.dispatchEvent({
                        type: 'removed'
                    });

                    this.children.splice(index, 1);

                }

            },

            getObjectById: function(id) {

                return this.getObjectByProperty('id', id);

            },

            getObjectByName: function(name) {

                return this.getObjectByProperty('name', name);

            },

            getObjectByProperty: function(name, value) {

                if (this[name] === value) return this;

                for (var i = 0, l = this.children.length; i < l; i++) {

                    var child = this.children[i];
                    var object = child.getObjectByProperty(name, value);

                    if (object !== undefined) {

                        return object;

                    }

                }

                return undefined;

            },

            getWorldPosition: function(optionalTarget) {

                var result = optionalTarget || new Vector3();

                this.updateMatrixWorld(true);

                return result.setFromMatrixPosition(this.matrixWorld);

            },

            getWorldQuaternion: function() {

                var position = new Vector3();
                var scale = new Vector3();

                return function getWorldQuaternion(optionalTarget) {

                    var result = optionalTarget || new Quaternion();

                    this.updateMatrixWorld(true);

                    this.matrixWorld.decompose(position, result, scale);

                    return result;

                };

            }(),

            getWorldRotation: function() {

                var quaternion = new Quaternion();

                return function getWorldRotation(optionalTarget) {

                    var result = optionalTarget || new Euler();

                    this.getWorldQuaternion(quaternion);

                    return result.setFromQuaternion(quaternion, this.rotation.order, false);

                };

            }(),

            getWorldScale: function() {

                var position = new Vector3();
                var quaternion = new Quaternion();

                return function getWorldScale(optionalTarget) {

                    var result = optionalTarget || new Vector3();

                    this.updateMatrixWorld(true);

                    this.matrixWorld.decompose(position, quaternion, result);

                    return result;

                };

            }(),

            getWorldDirection: function() {

                var quaternion = new Quaternion();

                return function getWorldDirection(optionalTarget) {

                    var result = optionalTarget || new Vector3();

                    this.getWorldQuaternion(quaternion);

                    return result.set(0, 0, 1).applyQuaternion(quaternion);

                };

            }(),

            raycast: function() {},

            traverse: function(callback) {

                callback(this);

                var children = this.children;

                for (var i = 0, l = children.length; i < l; i++) {

                    children[i].traverse(callback);

                }

            },

            traverseVisible: function(callback) {

                if (this.visible === false) return;

                callback(this);

                var children = this.children;

                for (var i = 0, l = children.length; i < l; i++) {

                    children[i].traverseVisible(callback);

                }

            },

            traverseAncestors: function(callback) {

                var parent = this.parent;

                if (parent !== null) {

                    callback(parent);

                    parent.traverseAncestors(callback);

                }

            },

            updateMatrix: function() {

                this.matrix.compose(this.position, this.quaternion, this.scale);

                this.matrixWorldNeedsUpdate = true;

            },

            updateMatrixWorld: function(force) {

                if (this.matrixAutoUpdate === true) this.updateMatrix();

                if (this.matrixWorldNeedsUpdate === true || force === true) {

                    if (this.parent === null) {

                        this.matrixWorld.copy(this.matrix);

                    } else {

                        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);

                    }

                    this.matrixWorldNeedsUpdate = false;

                    force = true;

                }

                // update children

                var children = this.children;

                for (var i = 0, l = children.length; i < l; i++) {

                    children[i].updateMatrixWorld(force);

                }

            },

            toJSON: function(meta) {

                // meta is '' when called from JSON.stringify
                var isRootObject = (meta === undefined || meta === '');

                var output = {};

                // meta is a hash used to collect geometries, materials.
                // not providing it implies that this is the root object
                // being serialized.
                if (isRootObject) {

                    // initialize meta obj
                    meta = {
                        geometries: {},
                        materials: {},
                        textures: {},
                        images: {}
                    };

                    output.metadata = {
                        version: 4.4,
                        type: 'Object',
                        generator: 'Object3D.toJSON'
                    };

                }

                // standard Object3D serialization

                var object = {};

                object.uuid = this.uuid;
                object.type = this.type;

                if (this.name !== '') object.name = this.name;
                if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;
                if (this.castShadow === true) object.castShadow = true;
                if (this.receiveShadow === true) object.receiveShadow = true;
                if (this.visible === false) object.visible = false;

                object.matrix = this.matrix.toArray();

                //

                if (this.geometry !== undefined) {

                    if (meta.geometries[this.geometry.uuid] === undefined) {

                        meta.geometries[this.geometry.uuid] = this.geometry.toJSON(meta);

                    }

                    object.geometry = this.geometry.uuid;

                }

                if (this.material !== undefined) {

                    if (meta.materials[this.material.uuid] === undefined) {

                        meta.materials[this.material.uuid] = this.material.toJSON(meta);

                    }

                    object.material = this.material.uuid;

                }

                //

                if (this.children.length > 0) {

                    object.children = [];

                    for (var i = 0; i < this.children.length; i++) {

                        object.children.push(this.children[i].toJSON(meta).object);

                    }

                }

                if (isRootObject) {

                    var geometries = extractFromCache(meta.geometries);
                    var materials = extractFromCache(meta.materials);
                    var textures = extractFromCache(meta.textures);
                    var images = extractFromCache(meta.images);

                    if (geometries.length > 0) output.geometries = geometries;
                    if (materials.length > 0) output.materials = materials;
                    if (textures.length > 0) output.textures = textures;
                    if (images.length > 0) output.images = images;

                }

                output.object = object;

                return output;

                // extract data from the cache hash
                // remove metadata on each item
                // and return as array
                function extractFromCache(cache) {

                    var values = [];
                    for (var key in cache) {

                        var data = cache[key];
                        delete data.metadata;
                        values.push(data);

                    }
                    return values;

                }

            },

            clone: function(recursive) {

                return new this.constructor().copy(this, recursive);

            },

            copy: function(source, recursive) {

                if (recursive === undefined) recursive = true;

                this.name = source.name;

                this.up.copy(source.up);

                this.position.copy(source.position);
                this.quaternion.copy(source.quaternion);
                this.scale.copy(source.scale);

                this.matrix.copy(source.matrix);
                this.matrixWorld.copy(source.matrixWorld);

                this.matrixAutoUpdate = source.matrixAutoUpdate;
                this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

                this.layers.mask = source.layers.mask;
                this.visible = source.visible;

                this.castShadow = source.castShadow;
                this.receiveShadow = source.receiveShadow;

                this.frustumCulled = source.frustumCulled;
                this.renderOrder = source.renderOrder;

                this.userData = JSON.parse(JSON.stringify(source.userData));

                if (recursive === true) {

                    for (var i = 0; i < source.children.length; i++) {

                        var child = source.children[i];
                        this.add(child.clone());

                    }

                }

                return this;

            }

        };

        Object.assign(Object3D.prototype, EventDispatcher.prototype);

        /**
         * @author bhouston / http://clara.io
         */

        function Line3(start, end) {

            this.start = (start !== undefined) ? start : new Vector3();
            this.end = (end !== undefined) ? end : new Vector3();

        }

        Line3.prototype = {

            constructor: Line3,

            set: function(start, end) {

                this.start.copy(start);
                this.end.copy(end);

                return this;

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(line) {

                this.start.copy(line.start);
                this.end.copy(line.end);

                return this;

            },

            getCenter: function(optionalTarget) {

                var result = optionalTarget || new Vector3();
                return result.addVectors(this.start, this.end).multiplyScalar(0.5);

            },

            delta: function(optionalTarget) {

                var result = optionalTarget || new Vector3();
                return result.subVectors(this.end, this.start);

            },

            distanceSq: function() {

                return this.start.distanceToSquared(this.end);

            },

            distance: function() {

                return this.start.distanceTo(this.end);

            },

            at: function(t, optionalTarget) {

                var result = optionalTarget || new Vector3();

                return this.delta(result).multiplyScalar(t).add(this.start);

            },

            closestPointToPointParameter: function() {

                var startP = new Vector3();
                var startEnd = new Vector3();

                return function closestPointToPointParameter(point, clampToLine) {

                    startP.subVectors(point, this.start);
                    startEnd.subVectors(this.end, this.start);

                    var startEnd2 = startEnd.dot(startEnd);
                    var startEnd_startP = startEnd.dot(startP);

                    var t = startEnd_startP / startEnd2;

                    if (clampToLine) {

                        t = _Math.clamp(t, 0, 1);

                    }

                    return t;

                };

            }(),

            closestPointToPoint: function(point, clampToLine, optionalTarget) {

                var t = this.closestPointToPointParameter(point, clampToLine);

                var result = optionalTarget || new Vector3();

                return this.delta(result).multiplyScalar(t).add(this.start);

            },

            applyMatrix4: function(matrix) {

                this.start.applyMatrix4(matrix);
                this.end.applyMatrix4(matrix);

                return this;

            },

            equals: function(line) {

                return line.start.equals(this.start) && line.end.equals(this.end);

            }

        };

        /**
         * @author bhouston / http://clara.io
         * @author mrdoob / http://mrdoob.com/
         */

        function Triangle(a, b, c) {

            this.a = (a !== undefined) ? a : new Vector3();
            this.b = (b !== undefined) ? b : new Vector3();
            this.c = (c !== undefined) ? c : new Vector3();

        }

        Triangle.normal = function() {

            var v0 = new Vector3();

            return function normal(a, b, c, optionalTarget) {

                var result = optionalTarget || new Vector3();

                result.subVectors(c, b);
                v0.subVectors(a, b);
                result.cross(v0);

                var resultLengthSq = result.lengthSq();
                if (resultLengthSq > 0) {

                    return result.multiplyScalar(1 / Math.sqrt(resultLengthSq));

                }

                return result.set(0, 0, 0);

            };

        }();

        // static/instance method to calculate barycentric coordinates
        // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
        Triangle.barycoordFromPoint = function() {

            var v0 = new Vector3();
            var v1 = new Vector3();
            var v2 = new Vector3();

            return function barycoordFromPoint(point, a, b, c, optionalTarget) {

                v0.subVectors(c, a);
                v1.subVectors(b, a);
                v2.subVectors(point, a);

                var dot00 = v0.dot(v0);
                var dot01 = v0.dot(v1);
                var dot02 = v0.dot(v2);
                var dot11 = v1.dot(v1);
                var dot12 = v1.dot(v2);

                var denom = (dot00 * dot11 - dot01 * dot01);

                var result = optionalTarget || new Vector3();

                // collinear or singular triangle
                if (denom === 0) {

                    // arbitrary location outside of triangle?
                    // not sure if this is the best idea, maybe should be returning undefined
                    return result.set(-2, -1, -1);

                }

                var invDenom = 1 / denom;
                var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
                var v = (dot00 * dot12 - dot01 * dot02) * invDenom;

                // barycentric coordinates must always sum to 1
                return result.set(1 - u - v, v, u);

            };

        }();

        Triangle.containsPoint = function() {

            var v1 = new Vector3();

            return function containsPoint(point, a, b, c) {

                var result = Triangle.barycoordFromPoint(point, a, b, c, v1);

                return (result.x >= 0) && (result.y >= 0) && ((result.x + result.y) <= 1);

            };

        }();

        Triangle.prototype = {

            constructor: Triangle,

            set: function(a, b, c) {

                this.a.copy(a);
                this.b.copy(b);
                this.c.copy(c);

                return this;

            },

            setFromPointsAndIndices: function(points, i0, i1, i2) {

                this.a.copy(points[i0]);
                this.b.copy(points[i1]);
                this.c.copy(points[i2]);

                return this;

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(triangle) {

                this.a.copy(triangle.a);
                this.b.copy(triangle.b);
                this.c.copy(triangle.c);

                return this;

            },

            area: function() {

                var v0 = new Vector3();
                var v1 = new Vector3();

                return function area() {

                    v0.subVectors(this.c, this.b);
                    v1.subVectors(this.a, this.b);

                    return v0.cross(v1).length() * 0.5;

                };

            }(),

            midpoint: function(optionalTarget) {

                var result = optionalTarget || new Vector3();
                return result.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);

            },

            normal: function(optionalTarget) {

                return Triangle.normal(this.a, this.b, this.c, optionalTarget);

            },

            plane: function(optionalTarget) {

                var result = optionalTarget || new Plane();

                return result.setFromCoplanarPoints(this.a, this.b, this.c);

            },

            barycoordFromPoint: function(point, optionalTarget) {

                return Triangle.barycoordFromPoint(point, this.a, this.b, this.c, optionalTarget);

            },

            containsPoint: function(point) {

                return Triangle.containsPoint(point, this.a, this.b, this.c);

            },

            closestPointToPoint: function() {

                var plane, edgeList, projectedPoint, closestPoint;

                return function closestPointToPoint(point, optionalTarget) {

                    if (plane === undefined) {

                        plane = new Plane();
                        edgeList = [new Line3(), new Line3(), new Line3()];
                        projectedPoint = new Vector3();
                        closestPoint = new Vector3();

                    }

                    var result = optionalTarget || new Vector3();
                    var minDistance = Infinity;

                    // project the point onto the plane of the triangle

                    plane.setFromCoplanarPoints(this.a, this.b, this.c);
                    plane.projectPoint(point, projectedPoint);

                    // check if the projection lies within the triangle

                    if (this.containsPoint(projectedPoint) === true) {

                        // if so, this is the closest point

                        result.copy(projectedPoint);

                    } else {

                        // if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

                        edgeList[0].set(this.a, this.b);
                        edgeList[1].set(this.b, this.c);
                        edgeList[2].set(this.c, this.a);

                        for (var i = 0; i < edgeList.length; i++) {

                            edgeList[i].closestPointToPoint(projectedPoint, true, closestPoint);

                            var distance = projectedPoint.distanceToSquared(closestPoint);

                            if (distance < minDistance) {

                                minDistance = distance;

                                result.copy(closestPoint);

                            }

                        }

                    }

                    return result;

                };

            }(),

            equals: function(triangle) {

                return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */

        function Face3(a, b, c, normal, color, materialIndex) {

            this.a = a;
            this.b = b;
            this.c = c;

            this.normal = (normal && normal.isVector3) ? normal : new Vector3();
            this.vertexNormals = Array.isArray(normal) ? normal : [];

            this.color = (color && color.isColor) ? color : new Color();
            this.vertexColors = Array.isArray(color) ? color : [];

            this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

        }

        Face3.prototype = {

            constructor: Face3,

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(source) {

                this.a = source.a;
                this.b = source.b;
                this.c = source.c;

                this.normal.copy(source.normal);
                this.color.copy(source.color);

                this.materialIndex = source.materialIndex;

                for (var i = 0, il = source.vertexNormals.length; i < il; i++) {

                    this.vertexNormals[i] = source.vertexNormals[i].clone();

                }

                for (var i = 0, il = source.vertexColors.length; i < il; i++) {

                    this.vertexColors[i] = source.vertexColors[i].clone();

                }

                return this;

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *  map: new THREE.Texture( <Image> ),
         *
         *  lightMap: new THREE.Texture( <Image> ),
         *  lightMapIntensity: <float>
         *
         *  aoMap: new THREE.Texture( <Image> ),
         *  aoMapIntensity: <float>
         *
         *  specularMap: new THREE.Texture( <Image> ),
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
         *  combine: THREE.Multiply,
         *  reflectivity: <float>,
         *  refractionRatio: <float>,
         *
         *  shading: THREE.SmoothShading,
         *  depthTest: <bool>,
         *  depthWrite: <bool>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>,
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>
         * }
         */

        function MeshBasicMaterial(parameters) {

            Material.call(this);

            this.type = 'MeshBasicMaterial';

            this.color = new Color(0xffffff); // emissive

            this.map = null;

            this.lightMap = null;
            this.lightMapIntensity = 1.0;

            this.aoMap = null;
            this.aoMapIntensity = 1.0;

            this.specularMap = null;

            this.alphaMap = null;

            this.envMap = null;
            this.combine = MultiplyOperation;
            this.reflectivity = 1;
            this.refractionRatio = 0.98;

            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = 'round';
            this.wireframeLinejoin = 'round';

            this.skinning = false;
            this.morphTargets = false;

            this.lights = false;

            this.setValues(parameters);

        }

        MeshBasicMaterial.prototype = Object.create(Material.prototype);
        MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

        MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

        MeshBasicMaterial.prototype.copy = function(source) {

            Material.prototype.copy.call(this, source);

            this.color.copy(source.color);

            this.map = source.map;

            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;

            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;

            this.specularMap = source.specularMap;

            this.alphaMap = source.alphaMap;

            this.envMap = source.envMap;
            this.combine = source.combine;
            this.reflectivity = source.reflectivity;
            this.refractionRatio = source.refractionRatio;

            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;

            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;

            return this;

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function BufferAttribute(array, itemSize, normalized) {

            if (Array.isArray(array)) {

                throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');

            }

            this.uuid = _Math.generateUUID();

            this.array = array;
            this.itemSize = itemSize;
            this.count = array !== undefined ? array.length / itemSize : 0;
            this.normalized = normalized === true;

            this.dynamic = false;
            this.updateRange = {
                offset: 0,
                count: -1
            };

            this.onUploadCallback = function() {};

            this.version = 0;

        }

        BufferAttribute.prototype = {

            constructor: BufferAttribute,

            isBufferAttribute: true,

            set needsUpdate(value) {

                if (value === true) this.version++;

            },

            setArray: function(array) {

                if (Array.isArray(array)) {

                    throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');

                }

                this.count = array !== undefined ? array.length / this.itemSize : 0;
                this.array = array;

            },

            setDynamic: function(value) {

                this.dynamic = value;

                return this;

            },

            copy: function(source) {

                this.array = new source.array.constructor(source.array);
                this.itemSize = source.itemSize;
                this.count = source.count;
                this.normalized = source.normalized;

                this.dynamic = source.dynamic;

                return this;

            },

            copyAt: function(index1, attribute, index2) {

                index1 *= this.itemSize;
                index2 *= attribute.itemSize;

                for (var i = 0, l = this.itemSize; i < l; i++) {

                    this.array[index1 + i] = attribute.array[index2 + i];

                }

                return this;

            },

            copyArray: function(array) {

                this.array.set(array);

                return this;

            },

            copyColorsArray: function(colors) {

                var array = this.array,
                    offset = 0;

                for (var i = 0, l = colors.length; i < l; i++) {

                    var color = colors[i];

                    if (color === undefined) {

                        console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);
                        color = new Color();

                    }

                    array[offset++] = color.r;
                    array[offset++] = color.g;
                    array[offset++] = color.b;

                }

                return this;

            },

            copyIndicesArray: function(indices) {

                var array = this.array,
                    offset = 0;

                for (var i = 0, l = indices.length; i < l; i++) {

                    var index = indices[i];

                    array[offset++] = index.a;
                    array[offset++] = index.b;
                    array[offset++] = index.c;

                }

                return this;

            },

            copyVector2sArray: function(vectors) {

                var array = this.array,
                    offset = 0;

                for (var i = 0, l = vectors.length; i < l; i++) {

                    var vector = vectors[i];

                    if (vector === undefined) {

                        console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);
                        vector = new Vector2();

                    }

                    array[offset++] = vector.x;
                    array[offset++] = vector.y;

                }

                return this;

            },

            copyVector3sArray: function(vectors) {

                var array = this.array,
                    offset = 0;

                for (var i = 0, l = vectors.length; i < l; i++) {

                    var vector = vectors[i];

                    if (vector === undefined) {

                        console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);
                        vector = new Vector3();

                    }

                    array[offset++] = vector.x;
                    array[offset++] = vector.y;
                    array[offset++] = vector.z;

                }

                return this;

            },

            copyVector4sArray: function(vectors) {

                var array = this.array,
                    offset = 0;

                for (var i = 0, l = vectors.length; i < l; i++) {

                    var vector = vectors[i];

                    if (vector === undefined) {

                        console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);
                        vector = new Vector4();

                    }

                    array[offset++] = vector.x;
                    array[offset++] = vector.y;
                    array[offset++] = vector.z;
                    array[offset++] = vector.w;

                }

                return this;

            },

            set: function(value, offset) {

                if (offset === undefined) offset = 0;

                this.array.set(value, offset);

                return this;

            },

            getX: function(index) {

                return this.array[index * this.itemSize];

            },

            setX: function(index, x) {

                this.array[index * this.itemSize] = x;

                return this;

            },

            getY: function(index) {

                return this.array[index * this.itemSize + 1];

            },

            setY: function(index, y) {

                this.array[index * this.itemSize + 1] = y;

                return this;

            },

            getZ: function(index) {

                return this.array[index * this.itemSize + 2];

            },

            setZ: function(index, z) {

                this.array[index * this.itemSize + 2] = z;

                return this;

            },

            getW: function(index) {

                return this.array[index * this.itemSize + 3];

            },

            setW: function(index, w) {

                this.array[index * this.itemSize + 3] = w;

                return this;

            },

            setXY: function(index, x, y) {

                index *= this.itemSize;

                this.array[index + 0] = x;
                this.array[index + 1] = y;

                return this;

            },

            setXYZ: function(index, x, y, z) {

                index *= this.itemSize;

                this.array[index + 0] = x;
                this.array[index + 1] = y;
                this.array[index + 2] = z;

                return this;

            },

            setXYZW: function(index, x, y, z, w) {

                index *= this.itemSize;

                this.array[index + 0] = x;
                this.array[index + 1] = y;
                this.array[index + 2] = z;
                this.array[index + 3] = w;

                return this;

            },

            onUpload: function(callback) {

                this.onUploadCallback = callback;

                return this;

            },

            clone: function() {

                return new this.constructor(this.array, this.itemSize).copy(this);

            }

        };

        //

        function Int8BufferAttribute(array, itemSize) {

            BufferAttribute.call(this, new Int8Array(array), itemSize);

        }

        Int8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


        function Uint8BufferAttribute(array, itemSize) {

            BufferAttribute.call(this, new Uint8Array(array), itemSize);

        }

        Uint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


        function Uint8ClampedBufferAttribute(array, itemSize) {

            BufferAttribute.call(this, new Uint8ClampedArray(array), itemSize);

        }

        Uint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


        function Int16BufferAttribute(array, itemSize) {

            BufferAttribute.call(this, new Int16Array(array), itemSize);

        }

        Int16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


        function Uint16BufferAttribute(array, itemSize) {

            BufferAttribute.call(this, new Uint16Array(array), itemSize);

        }

        Uint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


        function Int32BufferAttribute(array, itemSize) {

            BufferAttribute.call(this, new Int32Array(array), itemSize);

        }

        Int32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


        function Uint32BufferAttribute(array, itemSize) {

            BufferAttribute.call(this, new Uint32Array(array), itemSize);

        }

        Uint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


        function Float32BufferAttribute(array, itemSize) {

            BufferAttribute.call(this, new Float32Array(array), itemSize);

        }

        Float32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


        function Float64BufferAttribute(array, itemSize) {

            BufferAttribute.call(this, new Float64Array(array), itemSize);

        }

        Float64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function DirectGeometry() {

            this.indices = [];
            this.vertices = [];
            this.normals = [];
            this.colors = [];
            this.uvs = [];
            this.uvs2 = [];

            this.groups = [];

            this.morphTargets = {};

            this.skinWeights = [];
            this.skinIndices = [];

            // this.lineDistances = [];

            this.boundingBox = null;
            this.boundingSphere = null;

            // update flags

            this.verticesNeedUpdate = false;
            this.normalsNeedUpdate = false;
            this.colorsNeedUpdate = false;
            this.uvsNeedUpdate = false;
            this.groupsNeedUpdate = false;

        }

        Object.assign(DirectGeometry.prototype, {

            computeGroups: function(geometry) {

                var group;
                var groups = [];
                var materialIndex = undefined;

                var faces = geometry.faces;

                for (var i = 0; i < faces.length; i++) {

                    var face = faces[i];

                    // materials

                    if (face.materialIndex !== materialIndex) {

                        materialIndex = face.materialIndex;

                        if (group !== undefined) {

                            group.count = (i * 3) - group.start;
                            groups.push(group);

                        }

                        group = {
                            start: i * 3,
                            materialIndex: materialIndex
                        };

                    }

                }

                if (group !== undefined) {

                    group.count = (i * 3) - group.start;
                    groups.push(group);

                }

                this.groups = groups;

            },

            fromGeometry: function(geometry) {

                var faces = geometry.faces;
                var vertices = geometry.vertices;
                var faceVertexUvs = geometry.faceVertexUvs;

                var hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;
                var hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0;

                // morphs

                var morphTargets = geometry.morphTargets;
                var morphTargetsLength = morphTargets.length;

                var morphTargetsPosition;

                if (morphTargetsLength > 0) {

                    morphTargetsPosition = [];

                    for (var i = 0; i < morphTargetsLength; i++) {

                        morphTargetsPosition[i] = [];

                    }

                    this.morphTargets.position = morphTargetsPosition;

                }

                var morphNormals = geometry.morphNormals;
                var morphNormalsLength = morphNormals.length;

                var morphTargetsNormal;

                if (morphNormalsLength > 0) {

                    morphTargetsNormal = [];

                    for (var i = 0; i < morphNormalsLength; i++) {

                        morphTargetsNormal[i] = [];

                    }

                    this.morphTargets.normal = morphTargetsNormal;

                }

                // skins

                var skinIndices = geometry.skinIndices;
                var skinWeights = geometry.skinWeights;

                var hasSkinIndices = skinIndices.length === vertices.length;
                var hasSkinWeights = skinWeights.length === vertices.length;

                //

                for (var i = 0; i < faces.length; i++) {

                    var face = faces[i];

                    this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);

                    var vertexNormals = face.vertexNormals;

                    if (vertexNormals.length === 3) {

                        this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);

                    } else {

                        var normal = face.normal;

                        this.normals.push(normal, normal, normal);

                    }

                    var vertexColors = face.vertexColors;

                    if (vertexColors.length === 3) {

                        this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);

                    } else {

                        var color = face.color;

                        this.colors.push(color, color, color);

                    }

                    if (hasFaceVertexUv === true) {

                        var vertexUvs = faceVertexUvs[0][i];

                        if (vertexUvs !== undefined) {

                            this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);

                        } else {

                            console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i);

                            this.uvs.push(new Vector2(), new Vector2(), new Vector2());

                        }

                    }

                    if (hasFaceVertexUv2 === true) {

                        var vertexUvs = faceVertexUvs[1][i];

                        if (vertexUvs !== undefined) {

                            this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);

                        } else {

                            console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i);

                            this.uvs2.push(new Vector2(), new Vector2(), new Vector2());

                        }

                    }

                    // morphs

                    for (var j = 0; j < morphTargetsLength; j++) {

                        var morphTarget = morphTargets[j].vertices;

                        morphTargetsPosition[j].push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);

                    }

                    for (var j = 0; j < morphNormalsLength; j++) {

                        var morphNormal = morphNormals[j].vertexNormals[i];

                        morphTargetsNormal[j].push(morphNormal.a, morphNormal.b, morphNormal.c);

                    }

                    // skins

                    if (hasSkinIndices) {

                        this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);

                    }

                    if (hasSkinWeights) {

                        this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);

                    }

                }

                this.computeGroups(geometry);

                this.verticesNeedUpdate = geometry.verticesNeedUpdate;
                this.normalsNeedUpdate = geometry.normalsNeedUpdate;
                this.colorsNeedUpdate = geometry.colorsNeedUpdate;
                this.uvsNeedUpdate = geometry.uvsNeedUpdate;
                this.groupsNeedUpdate = geometry.groupsNeedUpdate;

                return this;

            }

        });

        // http://stackoverflow.com/questions/1669190/javascript-min-max-array-values/13440842#13440842

        function arrayMax(array) {

            var length = array.length,
                max = -Infinity;

            while (length--) {

                if (array[length] > max) {

                    max = array[length];

                }

            }

            return max;

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author kile / http://kile.stravaganza.org/
         * @author alteredq / http://alteredqualia.com/
         * @author mikael emtinger / http://gomo.se/
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * @author bhouston / http://clara.io
         */

        var count = 0;

        function GeometryIdCount() {
            return count++;
        }

        function Geometry() {

            Object.defineProperty(this, 'id', {
                value: GeometryIdCount()
            });

            this.uuid = _Math.generateUUID();

            this.name = '';
            this.type = 'Geometry';

            this.vertices = [];
            this.colors = [];
            this.faces = [];
            this.faceVertexUvs = [
                []
            ];

            this.morphTargets = [];
            this.morphNormals = [];

            this.skinWeights = [];
            this.skinIndices = [];

            this.lineDistances = [];

            this.boundingBox = null;
            this.boundingSphere = null;

            // update flags

            this.elementsNeedUpdate = false;
            this.verticesNeedUpdate = false;
            this.uvsNeedUpdate = false;
            this.normalsNeedUpdate = false;
            this.colorsNeedUpdate = false;
            this.lineDistancesNeedUpdate = false;
            this.groupsNeedUpdate = false;

        }

        Geometry.prototype = {

            constructor: Geometry,

            isGeometry: true,

            applyMatrix: function(matrix) {

                var normalMatrix = new Matrix3().getNormalMatrix(matrix);

                for (var i = 0, il = this.vertices.length; i < il; i++) {

                    var vertex = this.vertices[i];
                    vertex.applyMatrix4(matrix);

                }

                for (var i = 0, il = this.faces.length; i < il; i++) {

                    var face = this.faces[i];
                    face.normal.applyMatrix3(normalMatrix).normalize();

                    for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {

                        face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();

                    }

                }

                if (this.boundingBox !== null) {

                    this.computeBoundingBox();

                }

                if (this.boundingSphere !== null) {

                    this.computeBoundingSphere();

                }

                this.verticesNeedUpdate = true;
                this.normalsNeedUpdate = true;

                return this;

            },

            rotateX: function() {

                // rotate geometry around world x-axis

                var m1;

                return function rotateX(angle) {

                    if (m1 === undefined) m1 = new Matrix4();

                    m1.makeRotationX(angle);

                    this.applyMatrix(m1);

                    return this;

                };

            }(),

            rotateY: function() {

                // rotate geometry around world y-axis

                var m1;

                return function rotateY(angle) {

                    if (m1 === undefined) m1 = new Matrix4();

                    m1.makeRotationY(angle);

                    this.applyMatrix(m1);

                    return this;

                };

            }(),

            rotateZ: function() {

                // rotate geometry around world z-axis

                var m1;

                return function rotateZ(angle) {

                    if (m1 === undefined) m1 = new Matrix4();

                    m1.makeRotationZ(angle);

                    this.applyMatrix(m1);

                    return this;

                };

            }(),

            translate: function() {

                // translate geometry

                var m1;

                return function translate(x, y, z) {

                    if (m1 === undefined) m1 = new Matrix4();

                    m1.makeTranslation(x, y, z);

                    this.applyMatrix(m1);

                    return this;

                };

            }(),

            scale: function() {

                // scale geometry

                var m1;

                return function scale(x, y, z) {

                    if (m1 === undefined) m1 = new Matrix4();

                    m1.makeScale(x, y, z);

                    this.applyMatrix(m1);

                    return this;

                };

            }(),

            lookAt: function() {

                var obj;

                return function lookAt(vector) {

                    if (obj === undefined) obj = new Object3D();

                    obj.lookAt(vector);

                    obj.updateMatrix();

                    this.applyMatrix(obj.matrix);

                };

            }(),

            fromBufferGeometry: function(geometry) {

                var scope = this;

                var indices = geometry.index !== null ? geometry.index.array : undefined;
                var attributes = geometry.attributes;

                var positions = attributes.position.array;
                var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
                var colors = attributes.color !== undefined ? attributes.color.array : undefined;
                var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
                var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

                if (uvs2 !== undefined) this.faceVertexUvs[1] = [];

                var tempNormals = [];
                var tempUVs = [];
                var tempUVs2 = [];

                for (var i = 0, j = 0; i < positions.length; i += 3, j += 2) {

                    scope.vertices.push(new Vector3(positions[i], positions[i + 1], positions[i + 2]));

                    if (normals !== undefined) {

                        tempNormals.push(new Vector3(normals[i], normals[i + 1], normals[i + 2]));

                    }

                    if (colors !== undefined) {

                        scope.colors.push(new Color(colors[i], colors[i + 1], colors[i + 2]));

                    }

                    if (uvs !== undefined) {

                        tempUVs.push(new Vector2(uvs[j], uvs[j + 1]));

                    }

                    if (uvs2 !== undefined) {

                        tempUVs2.push(new Vector2(uvs2[j], uvs2[j + 1]));

                    }

                }

                function addFace(a, b, c, materialIndex) {

                    var vertexNormals = normals !== undefined ? [tempNormals[a].clone(), tempNormals[b].clone(), tempNormals[c].clone()] : [];
                    var vertexColors = colors !== undefined ? [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()] : [];

                    var face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);

                    scope.faces.push(face);

                    if (uvs !== undefined) {

                        scope.faceVertexUvs[0].push([tempUVs[a].clone(), tempUVs[b].clone(), tempUVs[c].clone()]);

                    }

                    if (uvs2 !== undefined) {

                        scope.faceVertexUvs[1].push([tempUVs2[a].clone(), tempUVs2[b].clone(), tempUVs2[c].clone()]);

                    }

                }

                if (indices !== undefined) {

                    var groups = geometry.groups;

                    if (groups.length > 0) {

                        for (var i = 0; i < groups.length; i++) {

                            var group = groups[i];

                            var start = group.start;
                            var count = group.count;

                            for (var j = start, jl = start + count; j < jl; j += 3) {

                                addFace(indices[j], indices[j + 1], indices[j + 2], group.materialIndex);

                            }

                        }

                    } else {

                        for (var i = 0; i < indices.length; i += 3) {

                            addFace(indices[i], indices[i + 1], indices[i + 2]);

                        }

                    }

                } else {

                    for (var i = 0; i < positions.length / 3; i += 3) {

                        addFace(i, i + 1, i + 2);

                    }

                }

                this.computeFaceNormals();

                if (geometry.boundingBox !== null) {

                    this.boundingBox = geometry.boundingBox.clone();

                }

                if (geometry.boundingSphere !== null) {

                    this.boundingSphere = geometry.boundingSphere.clone();

                }

                return this;

            },

            center: function() {

                this.computeBoundingBox();

                var offset = this.boundingBox.getCenter().negate();

                this.translate(offset.x, offset.y, offset.z);

                return offset;

            },

            normalize: function() {

                this.computeBoundingSphere();

                var center = this.boundingSphere.center;
                var radius = this.boundingSphere.radius;

                var s = radius === 0 ? 1 : 1.0 / radius;

                var matrix = new Matrix4();
                matrix.set(
                    s, 0, 0, -s * center.x,
                    0, s, 0, -s * center.y,
                    0, 0, s, -s * center.z,
                    0, 0, 0, 1
                );

                this.applyMatrix(matrix);

                return this;

            },

            computeFaceNormals: function() {

                var cb = new Vector3(),
                    ab = new Vector3();

                for (var f = 0, fl = this.faces.length; f < fl; f++) {

                    var face = this.faces[f];

                    var vA = this.vertices[face.a];
                    var vB = this.vertices[face.b];
                    var vC = this.vertices[face.c];

                    cb.subVectors(vC, vB);
                    ab.subVectors(vA, vB);
                    cb.cross(ab);

                    cb.normalize();

                    face.normal.copy(cb);

                }

            },

            computeVertexNormals: function(areaWeighted) {

                if (areaWeighted === undefined) areaWeighted = true;

                var v, vl, f, fl, face, vertices;

                vertices = new Array(this.vertices.length);

                for (v = 0, vl = this.vertices.length; v < vl; v++) {

                    vertices[v] = new Vector3();

                }

                if (areaWeighted) {

                    // vertex normals weighted by triangle areas
                    // http://www.iquilezles.org/www/articles/normals/normals.htm

                    var vA, vB, vC;
                    var cb = new Vector3(),
                        ab = new Vector3();

                    for (f = 0, fl = this.faces.length; f < fl; f++) {

                        face = this.faces[f];

                        vA = this.vertices[face.a];
                        vB = this.vertices[face.b];
                        vC = this.vertices[face.c];

                        cb.subVectors(vC, vB);
                        ab.subVectors(vA, vB);
                        cb.cross(ab);

                        vertices[face.a].add(cb);
                        vertices[face.b].add(cb);
                        vertices[face.c].add(cb);

                    }

                } else {

                    this.computeFaceNormals();

                    for (f = 0, fl = this.faces.length; f < fl; f++) {

                        face = this.faces[f];

                        vertices[face.a].add(face.normal);
                        vertices[face.b].add(face.normal);
                        vertices[face.c].add(face.normal);

                    }

                }

                for (v = 0, vl = this.vertices.length; v < vl; v++) {

                    vertices[v].normalize();

                }

                for (f = 0, fl = this.faces.length; f < fl; f++) {

                    face = this.faces[f];

                    var vertexNormals = face.vertexNormals;

                    if (vertexNormals.length === 3) {

                        vertexNormals[0].copy(vertices[face.a]);
                        vertexNormals[1].copy(vertices[face.b]);
                        vertexNormals[2].copy(vertices[face.c]);

                    } else {

                        vertexNormals[0] = vertices[face.a].clone();
                        vertexNormals[1] = vertices[face.b].clone();
                        vertexNormals[2] = vertices[face.c].clone();

                    }

                }

                if (this.faces.length > 0) {

                    this.normalsNeedUpdate = true;

                }

            },

            computeFlatVertexNormals: function() {

                var f, fl, face;

                this.computeFaceNormals();

                for (f = 0, fl = this.faces.length; f < fl; f++) {

                    face = this.faces[f];

                    var vertexNormals = face.vertexNormals;

                    if (vertexNormals.length === 3) {

                        vertexNormals[0].copy(face.normal);
                        vertexNormals[1].copy(face.normal);
                        vertexNormals[2].copy(face.normal);

                    } else {

                        vertexNormals[0] = face.normal.clone();
                        vertexNormals[1] = face.normal.clone();
                        vertexNormals[2] = face.normal.clone();

                    }

                }

                if (this.faces.length > 0) {

                    this.normalsNeedUpdate = true;

                }

            },

            computeMorphNormals: function() {

                var i, il, f, fl, face;

                // save original normals
                // - create temp variables on first access
                //   otherwise just copy (for faster repeated calls)

                for (f = 0, fl = this.faces.length; f < fl; f++) {

                    face = this.faces[f];

                    if (!face.__originalFaceNormal) {

                        face.__originalFaceNormal = face.normal.clone();

                    } else {

                        face.__originalFaceNormal.copy(face.normal);

                    }

                    if (!face.__originalVertexNormals) face.__originalVertexNormals = [];

                    for (i = 0, il = face.vertexNormals.length; i < il; i++) {

                        if (!face.__originalVertexNormals[i]) {

                            face.__originalVertexNormals[i] = face.vertexNormals[i].clone();

                        } else {

                            face.__originalVertexNormals[i].copy(face.vertexNormals[i]);

                        }

                    }

                }

                // use temp geometry to compute face and vertex normals for each morph

                var tmpGeo = new Geometry();
                tmpGeo.faces = this.faces;

                for (i = 0, il = this.morphTargets.length; i < il; i++) {

                    // create on first access

                    if (!this.morphNormals[i]) {

                        this.morphNormals[i] = {};
                        this.morphNormals[i].faceNormals = [];
                        this.morphNormals[i].vertexNormals = [];

                        var dstNormalsFace = this.morphNormals[i].faceNormals;
                        var dstNormalsVertex = this.morphNormals[i].vertexNormals;

                        var faceNormal, vertexNormals;

                        for (f = 0, fl = this.faces.length; f < fl; f++) {

                            faceNormal = new Vector3();
                            vertexNormals = {
                                a: new Vector3(),
                                b: new Vector3(),
                                c: new Vector3()
                            };

                            dstNormalsFace.push(faceNormal);
                            dstNormalsVertex.push(vertexNormals);

                        }

                    }

                    var morphNormals = this.morphNormals[i];

                    // set vertices to morph target

                    tmpGeo.vertices = this.morphTargets[i].vertices;

                    // compute morph normals

                    tmpGeo.computeFaceNormals();
                    tmpGeo.computeVertexNormals();

                    // store morph normals

                    var faceNormal, vertexNormals;

                    for (f = 0, fl = this.faces.length; f < fl; f++) {

                        face = this.faces[f];

                        faceNormal = morphNormals.faceNormals[f];
                        vertexNormals = morphNormals.vertexNormals[f];

                        faceNormal.copy(face.normal);

                        vertexNormals.a.copy(face.vertexNormals[0]);
                        vertexNormals.b.copy(face.vertexNormals[1]);
                        vertexNormals.c.copy(face.vertexNormals[2]);

                    }

                }

                // restore original normals

                for (f = 0, fl = this.faces.length; f < fl; f++) {

                    face = this.faces[f];

                    face.normal = face.__originalFaceNormal;
                    face.vertexNormals = face.__originalVertexNormals;

                }

            },

            computeLineDistances: function() {

                var d = 0;
                var vertices = this.vertices;

                for (var i = 0, il = vertices.length; i < il; i++) {

                    if (i > 0) {

                        d += vertices[i].distanceTo(vertices[i - 1]);

                    }

                    this.lineDistances[i] = d;

                }

            },

            computeBoundingBox: function() {

                if (this.boundingBox === null) {

                    this.boundingBox = new Box3();

                }

                this.boundingBox.setFromPoints(this.vertices);

            },

            computeBoundingSphere: function() {

                if (this.boundingSphere === null) {

                    this.boundingSphere = new Sphere();

                }

                this.boundingSphere.setFromPoints(this.vertices);

            },

            merge: function(geometry, matrix, materialIndexOffset) {

                if ((geometry && geometry.isGeometry) === false) {

                    console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry);
                    return;

                }

                var normalMatrix,
                    vertexOffset = this.vertices.length,
                    vertices1 = this.vertices,
                    vertices2 = geometry.vertices,
                    faces1 = this.faces,
                    faces2 = geometry.faces,
                    uvs1 = this.faceVertexUvs[0],
                    uvs2 = geometry.faceVertexUvs[0],
                    colors1 = this.colors,
                    colors2 = geometry.colors;

                if (materialIndexOffset === undefined) materialIndexOffset = 0;

                if (matrix !== undefined) {

                    normalMatrix = new Matrix3().getNormalMatrix(matrix);

                }

                // vertices

                for (var i = 0, il = vertices2.length; i < il; i++) {

                    var vertex = vertices2[i];

                    var vertexCopy = vertex.clone();

                    if (matrix !== undefined) vertexCopy.applyMatrix4(matrix);

                    vertices1.push(vertexCopy);

                }

                // colors

                for (var i = 0, il = colors2.length; i < il; i++) {

                    colors1.push(colors2[i].clone());

                }

                // faces

                for (i = 0, il = faces2.length; i < il; i++) {

                    var face = faces2[i],
                        faceCopy, normal, color,
                        faceVertexNormals = face.vertexNormals,
                        faceVertexColors = face.vertexColors;

                    faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);
                    faceCopy.normal.copy(face.normal);

                    if (normalMatrix !== undefined) {

                        faceCopy.normal.applyMatrix3(normalMatrix).normalize();

                    }

                    for (var j = 0, jl = faceVertexNormals.length; j < jl; j++) {

                        normal = faceVertexNormals[j].clone();

                        if (normalMatrix !== undefined) {

                            normal.applyMatrix3(normalMatrix).normalize();

                        }

                        faceCopy.vertexNormals.push(normal);

                    }

                    faceCopy.color.copy(face.color);

                    for (var j = 0, jl = faceVertexColors.length; j < jl; j++) {

                        color = faceVertexColors[j];
                        faceCopy.vertexColors.push(color.clone());

                    }

                    faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

                    faces1.push(faceCopy);

                }

                // uvs

                for (i = 0, il = uvs2.length; i < il; i++) {

                    var uv = uvs2[i],
                        uvCopy = [];

                    if (uv === undefined) {

                        continue;

                    }

                    for (var j = 0, jl = uv.length; j < jl; j++) {

                        uvCopy.push(uv[j].clone());

                    }

                    uvs1.push(uvCopy);

                }

            },

            mergeMesh: function(mesh) {

                if ((mesh && mesh.isMesh) === false) {

                    console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh);
                    return;

                }

                mesh.matrixAutoUpdate && mesh.updateMatrix();

                this.merge(mesh.geometry, mesh.matrix);

            },

            /*
             * Checks for duplicate vertices with hashmap.
             * Duplicated vertices are removed
             * and faces' vertices are updated.
             */

            mergeVertices: function() {

                var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
                var unique = [],
                    changes = [];

                var v, key;
                var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
                var precision = Math.pow(10, precisionPoints);
                var i, il, face;
                var indices, j, jl;

                for (i = 0, il = this.vertices.length; i < il; i++) {

                    v = this.vertices[i];
                    key = Math.round(v.x * precision) + '_' + Math.round(v.y * precision) + '_' + Math.round(v.z * precision);

                    if (verticesMap[key] === undefined) {

                        verticesMap[key] = i;
                        unique.push(this.vertices[i]);
                        changes[i] = unique.length - 1;

                    } else {

                        //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
                        changes[i] = changes[verticesMap[key]];

                    }

                }


                // if faces are completely degenerate after merging vertices, we
                // have to remove them from the geometry.
                var faceIndicesToRemove = [];

                for (i = 0, il = this.faces.length; i < il; i++) {

                    face = this.faces[i];

                    face.a = changes[face.a];
                    face.b = changes[face.b];
                    face.c = changes[face.c];

                    indices = [face.a, face.b, face.c];

                    // if any duplicate vertices are found in a Face3
                    // we have to remove the face as nothing can be saved
                    for (var n = 0; n < 3; n++) {

                        if (indices[n] === indices[(n + 1) % 3]) {

                            faceIndicesToRemove.push(i);
                            break;

                        }

                    }

                }

                for (i = faceIndicesToRemove.length - 1; i >= 0; i--) {

                    var idx = faceIndicesToRemove[i];

                    this.faces.splice(idx, 1);

                    for (j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {

                        this.faceVertexUvs[j].splice(idx, 1);

                    }

                }

                // Use unique set of vertices

                var diff = this.vertices.length - unique.length;
                this.vertices = unique;
                return diff;

            },

            sortFacesByMaterialIndex: function() {

                var faces = this.faces;
                var length = faces.length;

                // tag faces

                for (var i = 0; i < length; i++) {

                    faces[i]._id = i;

                }

                // sort faces

                function materialIndexSort(a, b) {

                    return a.materialIndex - b.materialIndex;

                }

                faces.sort(materialIndexSort);

                // sort uvs

                var uvs1 = this.faceVertexUvs[0];
                var uvs2 = this.faceVertexUvs[1];

                var newUvs1, newUvs2;

                if (uvs1 && uvs1.length === length) newUvs1 = [];
                if (uvs2 && uvs2.length === length) newUvs2 = [];

                for (var i = 0; i < length; i++) {

                    var id = faces[i]._id;

                    if (newUvs1) newUvs1.push(uvs1[id]);
                    if (newUvs2) newUvs2.push(uvs2[id]);

                }

                if (newUvs1) this.faceVertexUvs[0] = newUvs1;
                if (newUvs2) this.faceVertexUvs[1] = newUvs2;

            },

            toJSON: function() {

                var data = {
                    metadata: {
                        version: 4.4,
                        type: 'Geometry',
                        generator: 'Geometry.toJSON'
                    }
                };

                // standard Geometry serialization

                data.uuid = this.uuid;
                data.type = this.type;
                if (this.name !== '') data.name = this.name;

                if (this.parameters !== undefined) {

                    var parameters = this.parameters;

                    for (var key in parameters) {

                        if (parameters[key] !== undefined) data[key] = parameters[key];

                    }

                    return data;

                }

                var vertices = [];

                for (var i = 0; i < this.vertices.length; i++) {

                    var vertex = this.vertices[i];
                    vertices.push(vertex.x, vertex.y, vertex.z);

                }

                var faces = [];
                var normals = [];
                var normalsHash = {};
                var colors = [];
                var colorsHash = {};
                var uvs = [];
                var uvsHash = {};

                for (var i = 0; i < this.faces.length; i++) {

                    var face = this.faces[i];

                    var hasMaterial = true;
                    var hasFaceUv = false; // deprecated
                    var hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;
                    var hasFaceNormal = face.normal.length() > 0;
                    var hasFaceVertexNormal = face.vertexNormals.length > 0;
                    var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
                    var hasFaceVertexColor = face.vertexColors.length > 0;

                    var faceType = 0;

                    faceType = setBit(faceType, 0, 0); // isQuad
                    faceType = setBit(faceType, 1, hasMaterial);
                    faceType = setBit(faceType, 2, hasFaceUv);
                    faceType = setBit(faceType, 3, hasFaceVertexUv);
                    faceType = setBit(faceType, 4, hasFaceNormal);
                    faceType = setBit(faceType, 5, hasFaceVertexNormal);
                    faceType = setBit(faceType, 6, hasFaceColor);
                    faceType = setBit(faceType, 7, hasFaceVertexColor);

                    faces.push(faceType);
                    faces.push(face.a, face.b, face.c);
                    faces.push(face.materialIndex);

                    if (hasFaceVertexUv) {

                        var faceVertexUvs = this.faceVertexUvs[0][i];

                        faces.push(
                            getUvIndex(faceVertexUvs[0]),
                            getUvIndex(faceVertexUvs[1]),
                            getUvIndex(faceVertexUvs[2])
                        );

                    }

                    if (hasFaceNormal) {

                        faces.push(getNormalIndex(face.normal));

                    }

                    if (hasFaceVertexNormal) {

                        var vertexNormals = face.vertexNormals;

                        faces.push(
                            getNormalIndex(vertexNormals[0]),
                            getNormalIndex(vertexNormals[1]),
                            getNormalIndex(vertexNormals[2])
                        );

                    }

                    if (hasFaceColor) {

                        faces.push(getColorIndex(face.color));

                    }

                    if (hasFaceVertexColor) {

                        var vertexColors = face.vertexColors;

                        faces.push(
                            getColorIndex(vertexColors[0]),
                            getColorIndex(vertexColors[1]),
                            getColorIndex(vertexColors[2])
                        );

                    }

                }

                function setBit(value, position, enabled) {

                    return enabled ? value | (1 << position) : value & (~(1 << position));

                }

                function getNormalIndex(normal) {

                    var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

                    if (normalsHash[hash] !== undefined) {

                        return normalsHash[hash];

                    }

                    normalsHash[hash] = normals.length / 3;
                    normals.push(normal.x, normal.y, normal.z);

                    return normalsHash[hash];

                }

                function getColorIndex(color) {

                    var hash = color.r.toString() + color.g.toString() + color.b.toString();

                    if (colorsHash[hash] !== undefined) {

                        return colorsHash[hash];

                    }

                    colorsHash[hash] = colors.length;
                    colors.push(color.getHex());

                    return colorsHash[hash];

                }

                function getUvIndex(uv) {

                    var hash = uv.x.toString() + uv.y.toString();

                    if (uvsHash[hash] !== undefined) {

                        return uvsHash[hash];

                    }

                    uvsHash[hash] = uvs.length / 2;
                    uvs.push(uv.x, uv.y);

                    return uvsHash[hash];

                }

                data.data = {};

                data.data.vertices = vertices;
                data.data.normals = normals;
                if (colors.length > 0) data.data.colors = colors;
                if (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility
                data.data.faces = faces;

                return data;

            },

            clone: function() {

                /*
                // Handle primitives

                var parameters = this.parameters;

                if ( parameters !== undefined ) {

                	var values = [];

                	for ( var key in parameters ) {

                		values.push( parameters[ key ] );

                	}

                	var geometry = Object.create( this.constructor.prototype );
                	this.constructor.apply( geometry, values );
                	return geometry;

                }

                return new this.constructor().copy( this );
                */

                return new Geometry().copy(this);

            },

            copy: function(source) {

                var i, il, j, jl, k, kl;

                // reset

                this.vertices = [];
                this.colors = [];
                this.faces = [];
                this.faceVertexUvs = [
                    []
                ];
                this.morphTargets = [];
                this.morphNormals = [];
                this.skinWeights = [];
                this.skinIndices = [];
                this.lineDistances = [];
                this.boundingBox = null;
                this.boundingSphere = null;

                // name

                this.name = source.name;

                // vertices

                var vertices = source.vertices;

                for (i = 0, il = vertices.length; i < il; i++) {

                    this.vertices.push(vertices[i].clone());

                }

                // colors

                var colors = source.colors;

                for (i = 0, il = colors.length; i < il; i++) {

                    this.colors.push(colors[i].clone());

                }

                // faces

                var faces = source.faces;

                for (i = 0, il = faces.length; i < il; i++) {

                    this.faces.push(faces[i].clone());

                }

                // face vertex uvs

                for (i = 0, il = source.faceVertexUvs.length; i < il; i++) {

                    var faceVertexUvs = source.faceVertexUvs[i];

                    if (this.faceVertexUvs[i] === undefined) {

                        this.faceVertexUvs[i] = [];

                    }

                    for (j = 0, jl = faceVertexUvs.length; j < jl; j++) {

                        var uvs = faceVertexUvs[j],
                            uvsCopy = [];

                        for (k = 0, kl = uvs.length; k < kl; k++) {

                            var uv = uvs[k];

                            uvsCopy.push(uv.clone());

                        }

                        this.faceVertexUvs[i].push(uvsCopy);

                    }

                }

                // morph targets

                var morphTargets = source.morphTargets;

                for (i = 0, il = morphTargets.length; i < il; i++) {

                    var morphTarget = {};
                    morphTarget.name = morphTargets[i].name;

                    // vertices

                    if (morphTargets[i].vertices !== undefined) {

                        morphTarget.vertices = [];

                        for (j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {

                            morphTarget.vertices.push(morphTargets[i].vertices[j].clone());

                        }

                    }

                    // normals

                    if (morphTargets[i].normals !== undefined) {

                        morphTarget.normals = [];

                        for (j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {

                            morphTarget.normals.push(morphTargets[i].normals[j].clone());

                        }

                    }

                    this.morphTargets.push(morphTarget);

                }

                // morph normals

                var morphNormals = source.morphNormals;

                for (i = 0, il = morphNormals.length; i < il; i++) {

                    var morphNormal = {};

                    // vertex normals

                    if (morphNormals[i].vertexNormals !== undefined) {

                        morphNormal.vertexNormals = [];

                        for (j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {

                            var srcVertexNormal = morphNormals[i].vertexNormals[j];
                            var destVertexNormal = {};

                            destVertexNormal.a = srcVertexNormal.a.clone();
                            destVertexNormal.b = srcVertexNormal.b.clone();
                            destVertexNormal.c = srcVertexNormal.c.clone();

                            morphNormal.vertexNormals.push(destVertexNormal);

                        }

                    }

                    // face normals

                    if (morphNormals[i].faceNormals !== undefined) {

                        morphNormal.faceNormals = [];

                        for (j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {

                            morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());

                        }

                    }

                    this.morphNormals.push(morphNormal);

                }

                // skin weights

                var skinWeights = source.skinWeights;

                for (i = 0, il = skinWeights.length; i < il; i++) {

                    this.skinWeights.push(skinWeights[i].clone());

                }

                // skin indices

                var skinIndices = source.skinIndices;

                for (i = 0, il = skinIndices.length; i < il; i++) {

                    this.skinIndices.push(skinIndices[i].clone());

                }

                // line distances

                var lineDistances = source.lineDistances;

                for (i = 0, il = lineDistances.length; i < il; i++) {

                    this.lineDistances.push(lineDistances[i]);

                }

                // bounding box

                var boundingBox = source.boundingBox;

                if (boundingBox !== null) {

                    this.boundingBox = boundingBox.clone();

                }

                // bounding sphere

                var boundingSphere = source.boundingSphere;

                if (boundingSphere !== null) {

                    this.boundingSphere = boundingSphere.clone();

                }

                // update flags

                this.elementsNeedUpdate = source.elementsNeedUpdate;
                this.verticesNeedUpdate = source.verticesNeedUpdate;
                this.uvsNeedUpdate = source.uvsNeedUpdate;
                this.normalsNeedUpdate = source.normalsNeedUpdate;
                this.colorsNeedUpdate = source.colorsNeedUpdate;
                this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
                this.groupsNeedUpdate = source.groupsNeedUpdate;

                return this;

            },

            dispose: function() {

                this.dispatchEvent({
                    type: 'dispose'
                });

            }

        };

        Object.assign(Geometry.prototype, EventDispatcher.prototype);

        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         */

        function BufferGeometry() {

            Object.defineProperty(this, 'id', {
                value: GeometryIdCount()
            });

            this.uuid = _Math.generateUUID();

            this.name = '';
            this.type = 'BufferGeometry';

            this.index = null;
            this.attributes = {};

            this.morphAttributes = {};

            this.groups = [];

            this.boundingBox = null;
            this.boundingSphere = null;

            this.drawRange = {
                start: 0,
                count: Infinity
            };

        }

        BufferGeometry.prototype = {

            constructor: BufferGeometry,

            isBufferGeometry: true,

            getIndex: function() {

                return this.index;

            },

            setIndex: function(index) {

                if (Array.isArray(index)) {

                    this.index = new(arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);

                } else {

                    this.index = index;

                }

            },

            addAttribute: function(name, attribute) {

                if ((attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false) {

                    console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');

                    this.addAttribute(name, new BufferAttribute(arguments[1], arguments[2]));

                    return;

                }

                if (name === 'index') {

                    console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');
                    this.setIndex(attribute);

                    return;

                }

                this.attributes[name] = attribute;

                return this;

            },

            getAttribute: function(name) {

                return this.attributes[name];

            },

            removeAttribute: function(name) {

                delete this.attributes[name];

                return this;

            },

            addGroup: function(start, count, materialIndex) {

                this.groups.push({

                    start: start,
                    count: count,
                    materialIndex: materialIndex !== undefined ? materialIndex : 0

                });

            },

            clearGroups: function() {

                this.groups = [];

            },

            setDrawRange: function(start, count) {

                this.drawRange.start = start;
                this.drawRange.count = count;

            },

            applyMatrix: function(matrix) {

                var position = this.attributes.position;

                if (position !== undefined) {

                    matrix.applyToBufferAttribute(position);
                    position.needsUpdate = true;

                }

                var normal = this.attributes.normal;

                if (normal !== undefined) {

                    var normalMatrix = new Matrix3().getNormalMatrix(matrix);

                    normalMatrix.applyToBufferAttribute(normal);
                    normal.needsUpdate = true;

                }

                if (this.boundingBox !== null) {

                    this.computeBoundingBox();

                }

                if (this.boundingSphere !== null) {

                    this.computeBoundingSphere();

                }

                return this;

            },

            rotateX: function() {

                // rotate geometry around world x-axis

                var m1;

                return function rotateX(angle) {

                    if (m1 === undefined) m1 = new Matrix4();

                    m1.makeRotationX(angle);

                    this.applyMatrix(m1);

                    return this;

                };

            }(),

            rotateY: function() {

                // rotate geometry around world y-axis

                var m1;

                return function rotateY(angle) {

                    if (m1 === undefined) m1 = new Matrix4();

                    m1.makeRotationY(angle);

                    this.applyMatrix(m1);

                    return this;

                };

            }(),

            rotateZ: function() {

                // rotate geometry around world z-axis

                var m1;

                return function rotateZ(angle) {

                    if (m1 === undefined) m1 = new Matrix4();

                    m1.makeRotationZ(angle);

                    this.applyMatrix(m1);

                    return this;

                };

            }(),

            translate: function() {

                // translate geometry

                var m1;

                return function translate(x, y, z) {

                    if (m1 === undefined) m1 = new Matrix4();

                    m1.makeTranslation(x, y, z);

                    this.applyMatrix(m1);

                    return this;

                };

            }(),

            scale: function() {

                // scale geometry

                var m1;

                return function scale(x, y, z) {

                    if (m1 === undefined) m1 = new Matrix4();

                    m1.makeScale(x, y, z);

                    this.applyMatrix(m1);

                    return this;

                };

            }(),

            lookAt: function() {

                var obj;

                return function lookAt(vector) {

                    if (obj === undefined) obj = new Object3D();

                    obj.lookAt(vector);

                    obj.updateMatrix();

                    this.applyMatrix(obj.matrix);

                };

            }(),

            center: function() {

                this.computeBoundingBox();

                var offset = this.boundingBox.getCenter().negate();

                this.translate(offset.x, offset.y, offset.z);

                return offset;

            },

            setFromObject: function(object) {

                // console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

                var geometry = object.geometry;

                if (object.isPoints || object.isLine) {

                    var positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);
                    var colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);

                    this.addAttribute('position', positions.copyVector3sArray(geometry.vertices));
                    this.addAttribute('color', colors.copyColorsArray(geometry.colors));

                    if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {

                        var lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);

                        this.addAttribute('lineDistance', lineDistances.copyArray(geometry.lineDistances));

                    }

                    if (geometry.boundingSphere !== null) {

                        this.boundingSphere = geometry.boundingSphere.clone();

                    }

                    if (geometry.boundingBox !== null) {

                        this.boundingBox = geometry.boundingBox.clone();

                    }

                } else if (object.isMesh) {

                    if (geometry && geometry.isGeometry) {

                        this.fromGeometry(geometry);

                    }

                }

                return this;

            },

            updateFromObject: function(object) {

                var geometry = object.geometry;

                if (object.isMesh) {

                    var direct = geometry.__directGeometry;

                    if (geometry.elementsNeedUpdate === true) {

                        direct = undefined;
                        geometry.elementsNeedUpdate = false;

                    }

                    if (direct === undefined) {

                        return this.fromGeometry(geometry);

                    }

                    direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
                    direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
                    direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
                    direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
                    direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

                    geometry.verticesNeedUpdate = false;
                    geometry.normalsNeedUpdate = false;
                    geometry.colorsNeedUpdate = false;
                    geometry.uvsNeedUpdate = false;
                    geometry.groupsNeedUpdate = false;

                    geometry = direct;

                }

                var attribute;

                if (geometry.verticesNeedUpdate === true) {

                    attribute = this.attributes.position;

                    if (attribute !== undefined) {

                        attribute.copyVector3sArray(geometry.vertices);
                        attribute.needsUpdate = true;

                    }

                    geometry.verticesNeedUpdate = false;

                }

                if (geometry.normalsNeedUpdate === true) {

                    attribute = this.attributes.normal;

                    if (attribute !== undefined) {

                        attribute.copyVector3sArray(geometry.normals);
                        attribute.needsUpdate = true;

                    }

                    geometry.normalsNeedUpdate = false;

                }

                if (geometry.colorsNeedUpdate === true) {

                    attribute = this.attributes.color;

                    if (attribute !== undefined) {

                        attribute.copyColorsArray(geometry.colors);
                        attribute.needsUpdate = true;

                    }

                    geometry.colorsNeedUpdate = false;

                }

                if (geometry.uvsNeedUpdate) {

                    attribute = this.attributes.uv;

                    if (attribute !== undefined) {

                        attribute.copyVector2sArray(geometry.uvs);
                        attribute.needsUpdate = true;

                    }

                    geometry.uvsNeedUpdate = false;

                }

                if (geometry.lineDistancesNeedUpdate) {

                    attribute = this.attributes.lineDistance;

                    if (attribute !== undefined) {

                        attribute.copyArray(geometry.lineDistances);
                        attribute.needsUpdate = true;

                    }

                    geometry.lineDistancesNeedUpdate = false;

                }

                if (geometry.groupsNeedUpdate) {

                    geometry.computeGroups(object.geometry);
                    this.groups = geometry.groups;

                    geometry.groupsNeedUpdate = false;

                }

                return this;

            },

            fromGeometry: function(geometry) {

                geometry.__directGeometry = new DirectGeometry().fromGeometry(geometry);

                return this.fromDirectGeometry(geometry.__directGeometry);

            },

            fromDirectGeometry: function(geometry) {

                var positions = new Float32Array(geometry.vertices.length * 3);
                this.addAttribute('position', new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));

                if (geometry.normals.length > 0) {

                    var normals = new Float32Array(geometry.normals.length * 3);
                    this.addAttribute('normal', new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));

                }

                if (geometry.colors.length > 0) {

                    var colors = new Float32Array(geometry.colors.length * 3);
                    this.addAttribute('color', new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));

                }

                if (geometry.uvs.length > 0) {

                    var uvs = new Float32Array(geometry.uvs.length * 2);
                    this.addAttribute('uv', new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));

                }

                if (geometry.uvs2.length > 0) {

                    var uvs2 = new Float32Array(geometry.uvs2.length * 2);
                    this.addAttribute('uv2', new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));

                }

                if (geometry.indices.length > 0) {

                    var TypeArray = arrayMax(geometry.indices) > 65535 ? Uint32Array : Uint16Array;
                    var indices = new TypeArray(geometry.indices.length * 3);
                    this.setIndex(new BufferAttribute(indices, 1).copyIndicesArray(geometry.indices));

                }

                // groups

                this.groups = geometry.groups;

                // morphs

                for (var name in geometry.morphTargets) {

                    var array = [];
                    var morphTargets = geometry.morphTargets[name];

                    for (var i = 0, l = morphTargets.length; i < l; i++) {

                        var morphTarget = morphTargets[i];

                        var attribute = new Float32BufferAttribute(morphTarget.length * 3, 3);

                        array.push(attribute.copyVector3sArray(morphTarget));

                    }

                    this.morphAttributes[name] = array;

                }

                // skinning

                if (geometry.skinIndices.length > 0) {

                    var skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);
                    this.addAttribute('skinIndex', skinIndices.copyVector4sArray(geometry.skinIndices));

                }

                if (geometry.skinWeights.length > 0) {

                    var skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);
                    this.addAttribute('skinWeight', skinWeights.copyVector4sArray(geometry.skinWeights));

                }

                //

                if (geometry.boundingSphere !== null) {

                    this.boundingSphere = geometry.boundingSphere.clone();

                }

                if (geometry.boundingBox !== null) {

                    this.boundingBox = geometry.boundingBox.clone();

                }

                return this;

            },

            computeBoundingBox: function() {

                if (this.boundingBox === null) {

                    this.boundingBox = new Box3();

                }

                var position = this.attributes.position;

                if (position !== undefined) {

                    this.boundingBox.setFromBufferAttribute(position);

                } else {

                    this.boundingBox.makeEmpty();

                }

                if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {

                    console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);

                }

            },

            computeBoundingSphere: function() {

                var box = new Box3();
                var vector = new Vector3();

                return function computeBoundingSphere() {

                    if (this.boundingSphere === null) {

                        this.boundingSphere = new Sphere();

                    }

                    var position = this.attributes.position;

                    if (position) {

                        var center = this.boundingSphere.center;

                        box.setFromBufferAttribute(position);
                        box.getCenter(center);

                        // hoping to find a boundingSphere with a radius smaller than the
                        // boundingSphere of the boundingBox: sqrt(3) smaller in the best case

                        var maxRadiusSq = 0;

                        for (var i = 0, il = position.count; i < il; i++) {

                            vector.x = position.getX(i);
                            vector.y = position.getY(i);
                            vector.z = position.getZ(i);
                            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));

                        }

                        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);

                        if (isNaN(this.boundingSphere.radius)) {

                            console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);

                        }

                    }

                };

            }(),

            computeFaceNormals: function() {

                // backwards compatibility

            },

            computeVertexNormals: function() {

                var index = this.index;
                var attributes = this.attributes;
                var groups = this.groups;

                if (attributes.position) {

                    var positions = attributes.position.array;

                    if (attributes.normal === undefined) {

                        this.addAttribute('normal', new BufferAttribute(new Float32Array(positions.length), 3));

                    } else {

                        // reset existing normals to zero

                        var array = attributes.normal.array;

                        for (var i = 0, il = array.length; i < il; i++) {

                            array[i] = 0;

                        }

                    }

                    var normals = attributes.normal.array;

                    var vA, vB, vC;
                    var pA = new Vector3(),
                        pB = new Vector3(),
                        pC = new Vector3();
                    var cb = new Vector3(),
                        ab = new Vector3();

                    // indexed elements

                    if (index) {

                        var indices = index.array;

                        if (groups.length === 0) {

                            this.addGroup(0, indices.length);

                        }

                        for (var j = 0, jl = groups.length; j < jl; ++j) {

                            var group = groups[j];

                            var start = group.start;
                            var count = group.count;

                            for (var i = start, il = start + count; i < il; i += 3) {

                                vA = indices[i + 0] * 3;
                                vB = indices[i + 1] * 3;
                                vC = indices[i + 2] * 3;

                                pA.fromArray(positions, vA);
                                pB.fromArray(positions, vB);
                                pC.fromArray(positions, vC);

                                cb.subVectors(pC, pB);
                                ab.subVectors(pA, pB);
                                cb.cross(ab);

                                normals[vA] += cb.x;
                                normals[vA + 1] += cb.y;
                                normals[vA + 2] += cb.z;

                                normals[vB] += cb.x;
                                normals[vB + 1] += cb.y;
                                normals[vB + 2] += cb.z;

                                normals[vC] += cb.x;
                                normals[vC + 1] += cb.y;
                                normals[vC + 2] += cb.z;

                            }

                        }

                    } else {

                        // non-indexed elements (unconnected triangle soup)

                        for (var i = 0, il = positions.length; i < il; i += 9) {

                            pA.fromArray(positions, i);
                            pB.fromArray(positions, i + 3);
                            pC.fromArray(positions, i + 6);

                            cb.subVectors(pC, pB);
                            ab.subVectors(pA, pB);
                            cb.cross(ab);

                            normals[i] = cb.x;
                            normals[i + 1] = cb.y;
                            normals[i + 2] = cb.z;

                            normals[i + 3] = cb.x;
                            normals[i + 4] = cb.y;
                            normals[i + 5] = cb.z;

                            normals[i + 6] = cb.x;
                            normals[i + 7] = cb.y;
                            normals[i + 8] = cb.z;

                        }

                    }

                    this.normalizeNormals();

                    attributes.normal.needsUpdate = true;

                }

            },

            merge: function(geometry, offset) {

                if ((geometry && geometry.isBufferGeometry) === false) {

                    console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);
                    return;

                }

                if (offset === undefined) offset = 0;

                var attributes = this.attributes;

                for (var key in attributes) {

                    if (geometry.attributes[key] === undefined) continue;

                    var attribute1 = attributes[key];
                    var attributeArray1 = attribute1.array;

                    var attribute2 = geometry.attributes[key];
                    var attributeArray2 = attribute2.array;

                    var attributeSize = attribute2.itemSize;

                    for (var i = 0, j = attributeSize * offset; i < attributeArray2.length; i++, j++) {

                        attributeArray1[j] = attributeArray2[i];

                    }

                }

                return this;

            },

            normalizeNormals: function() {

                var normals = this.attributes.normal.array;

                var x, y, z, n;

                for (var i = 0, il = normals.length; i < il; i += 3) {

                    x = normals[i];
                    y = normals[i + 1];
                    z = normals[i + 2];

                    n = 1.0 / Math.sqrt(x * x + y * y + z * z);

                    normals[i] *= n;
                    normals[i + 1] *= n;
                    normals[i + 2] *= n;

                }

            },

            toNonIndexed: function() {

                if (this.index === null) {

                    console.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.');
                    return this;

                }

                var geometry2 = new BufferGeometry();

                var indices = this.index.array;
                var attributes = this.attributes;

                for (var name in attributes) {

                    var attribute = attributes[name];

                    var array = attribute.array;
                    var itemSize = attribute.itemSize;

                    var array2 = new array.constructor(indices.length * itemSize);

                    var index = 0,
                        index2 = 0;

                    for (var i = 0, l = indices.length; i < l; i++) {

                        index = indices[i] * itemSize;

                        for (var j = 0; j < itemSize; j++) {

                            array2[index2++] = array[index++];

                        }

                    }

                    geometry2.addAttribute(name, new BufferAttribute(array2, itemSize));

                }

                return geometry2;

            },

            toJSON: function() {

                var data = {
                    metadata: {
                        version: 4.4,
                        type: 'BufferGeometry',
                        generator: 'BufferGeometry.toJSON'
                    }
                };

                // standard BufferGeometry serialization

                data.uuid = this.uuid;
                data.type = this.type;
                if (this.name !== '') data.name = this.name;

                if (this.parameters !== undefined) {

                    var parameters = this.parameters;

                    for (var key in parameters) {

                        if (parameters[key] !== undefined) data[key] = parameters[key];

                    }

                    return data;

                }

                data.data = {
                    attributes: {}
                };

                var index = this.index;

                if (index !== null) {

                    var array = Array.prototype.slice.call(index.array);

                    data.data.index = {
                        type: index.array.constructor.name,
                        array: array
                    };

                }

                var attributes = this.attributes;

                for (var key in attributes) {

                    var attribute = attributes[key];

                    var array = Array.prototype.slice.call(attribute.array);

                    data.data.attributes[key] = {
                        itemSize: attribute.itemSize,
                        type: attribute.array.constructor.name,
                        array: array,
                        normalized: attribute.normalized
                    };

                }

                var groups = this.groups;

                if (groups.length > 0) {

                    data.data.groups = JSON.parse(JSON.stringify(groups));

                }

                var boundingSphere = this.boundingSphere;

                if (boundingSphere !== null) {

                    data.data.boundingSphere = {
                        center: boundingSphere.center.toArray(),
                        radius: boundingSphere.radius
                    };

                }

                return data;

            },

            clone: function() {

                /*
                // Handle primitives

                var parameters = this.parameters;

                if ( parameters !== undefined ) {

                	var values = [];

                	for ( var key in parameters ) {

                		values.push( parameters[ key ] );

                	}

                	var geometry = Object.create( this.constructor.prototype );
                	this.constructor.apply( geometry, values );
                	return geometry;

                }

                return new this.constructor().copy( this );
                */

                return new BufferGeometry().copy(this);

            },

            copy: function(source) {

                var name, i, l;

                // reset

                this.index = null;
                this.attributes = {};
                this.morphAttributes = {};
                this.groups = [];
                this.boundingBox = null;
                this.boundingSphere = null;

                // name

                this.name = source.name;

                // index

                var index = source.index;

                if (index !== null) {

                    this.setIndex(index.clone());

                }

                // attributes

                var attributes = source.attributes;

                for (name in attributes) {

                    var attribute = attributes[name];
                    this.addAttribute(name, attribute.clone());

                }

                // morph attributes

                var morphAttributes = source.morphAttributes;

                for (name in morphAttributes) {

                    var array = [];
                    var morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes

                    for (i = 0, l = morphAttribute.length; i < l; i++) {

                        array.push(morphAttribute[i].clone());

                    }

                    this.morphAttributes[name] = array;

                }

                // groups

                var groups = source.groups;

                for (i = 0, l = groups.length; i < l; i++) {

                    var group = groups[i];
                    this.addGroup(group.start, group.count, group.materialIndex);

                }

                // bounding box

                var boundingBox = source.boundingBox;

                if (boundingBox !== null) {

                    this.boundingBox = boundingBox.clone();

                }

                // bounding sphere

                var boundingSphere = source.boundingSphere;

                if (boundingSphere !== null) {

                    this.boundingSphere = boundingSphere.clone();

                }

                // draw range

                this.drawRange.start = source.drawRange.start;
                this.drawRange.count = source.drawRange.count;

                return this;

            },

            dispose: function() {

                this.dispatchEvent({
                    type: 'dispose'
                });

            }

        };

        BufferGeometry.MaxIndex = 65535;

        Object.assign(BufferGeometry.prototype, EventDispatcher.prototype);

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         * @author mikael emtinger / http://gomo.se/
         * @author jonobr1 / http://jonobr1.com/
         */

        function Mesh(geometry, material) {

            Object3D.call(this);

            this.type = 'Mesh';

            this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
            this.material = material !== undefined ? material : new MeshBasicMaterial({
                color: Math.random() * 0xffffff
            });

            this.drawMode = TrianglesDrawMode;

            this.updateMorphTargets();

        }

        Mesh.prototype = Object.assign(Object.create(Object3D.prototype), {

            constructor: Mesh,

            isMesh: true,

            setDrawMode: function(value) {

                this.drawMode = value;

            },

            copy: function(source) {

                Object3D.prototype.copy.call(this, source);

                this.drawMode = source.drawMode;

                return this;

            },

            updateMorphTargets: function() {

                var morphTargets = this.geometry.morphTargets;

                if (morphTargets !== undefined && morphTargets.length > 0) {

                    this.morphTargetInfluences = [];
                    this.morphTargetDictionary = {};

                    for (var m = 0, ml = morphTargets.length; m < ml; m++) {

                        this.morphTargetInfluences.push(0);
                        this.morphTargetDictionary[morphTargets[m].name] = m;

                    }

                }

            },

            raycast: (function() {

                var inverseMatrix = new Matrix4();
                var ray = new Ray();
                var sphere = new Sphere();

                var vA = new Vector3();
                var vB = new Vector3();
                var vC = new Vector3();

                var tempA = new Vector3();
                var tempB = new Vector3();
                var tempC = new Vector3();

                var uvA = new Vector2();
                var uvB = new Vector2();
                var uvC = new Vector2();

                var barycoord = new Vector3();

                var intersectionPoint = new Vector3();
                var intersectionPointWorld = new Vector3();

                function uvIntersection(point, p1, p2, p3, uv1, uv2, uv3) {

                    Triangle.barycoordFromPoint(point, p1, p2, p3, barycoord);

                    uv1.multiplyScalar(barycoord.x);
                    uv2.multiplyScalar(barycoord.y);
                    uv3.multiplyScalar(barycoord.z);

                    uv1.add(uv2).add(uv3);

                    return uv1.clone();

                }

                function checkIntersection(object, raycaster, ray, pA, pB, pC, point) {

                    var intersect;
                    var material = object.material;

                    if (material.side === BackSide) {

                        intersect = ray.intersectTriangle(pC, pB, pA, true, point);

                    } else {

                        intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);

                    }

                    if (intersect === null) return null;

                    intersectionPointWorld.copy(point);
                    intersectionPointWorld.applyMatrix4(object.matrixWorld);

                    var distance = raycaster.ray.origin.distanceTo(intersectionPointWorld);

                    if (distance < raycaster.near || distance > raycaster.far) return null;

                    return {
                        distance: distance,
                        point: intersectionPointWorld.clone(),
                        object: object
                    };

                }

                function checkBufferGeometryIntersection(object, raycaster, ray, position, uv, a, b, c) {

                    vA.fromBufferAttribute(position, a);
                    vB.fromBufferAttribute(position, b);
                    vC.fromBufferAttribute(position, c);

                    var intersection = checkIntersection(object, raycaster, ray, vA, vB, vC, intersectionPoint);

                    if (intersection) {

                        if (uv) {

                            uvA.fromBufferAttribute(uv, a);
                            uvB.fromBufferAttribute(uv, b);
                            uvC.fromBufferAttribute(uv, c);

                            intersection.uv = uvIntersection(intersectionPoint, vA, vB, vC, uvA, uvB, uvC);

                        }

                        intersection.face = new Face3(a, b, c, Triangle.normal(vA, vB, vC));
                        intersection.faceIndex = a;

                    }

                    return intersection;

                }

                return function raycast(raycaster, intersects) {

                    var geometry = this.geometry;
                    var material = this.material;
                    var matrixWorld = this.matrixWorld;

                    if (material === undefined) return;

                    // Checking boundingSphere distance to ray

                    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

                    sphere.copy(geometry.boundingSphere);
                    sphere.applyMatrix4(matrixWorld);

                    if (raycaster.ray.intersectsSphere(sphere) === false) return;

                    //

                    inverseMatrix.getInverse(matrixWorld);
                    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);

                    // Check boundingBox before continuing

                    if (geometry.boundingBox !== null) {

                        if (ray.intersectsBox(geometry.boundingBox) === false) return;

                    }

                    var intersection;

                    if (geometry.isBufferGeometry) {

                        var a, b, c;
                        var index = geometry.index;
                        var position = geometry.attributes.position;
                        var uv = geometry.attributes.uv;
                        var i, l;

                        if (index !== null) {

                            // indexed buffer geometry

                            for (i = 0, l = index.count; i < l; i += 3) {

                                a = index.getX(i);
                                b = index.getX(i + 1);
                                c = index.getX(i + 2);

                                intersection = checkBufferGeometryIntersection(this, raycaster, ray, position, uv, a, b, c);

                                if (intersection) {

                                    intersection.faceIndex = Math.floor(i / 3); // triangle number in indices buffer semantics
                                    intersects.push(intersection);

                                }

                            }

                        } else {

                            // non-indexed buffer geometry

                            for (i = 0, l = position.count; i < l; i += 3) {

                                a = i;
                                b = i + 1;
                                c = i + 2;

                                intersection = checkBufferGeometryIntersection(this, raycaster, ray, position, uv, a, b, c);

                                if (intersection) {

                                    intersection.index = a; // triangle number in positions buffer semantics
                                    intersects.push(intersection);

                                }

                            }

                        }

                    } else if (geometry.isGeometry) {

                        var fvA, fvB, fvC;
                        var isFaceMaterial = (material && material.isMultiMaterial);
                        var materials = isFaceMaterial === true ? material.materials : null;

                        var vertices = geometry.vertices;
                        var faces = geometry.faces;
                        var uvs;

                        var faceVertexUvs = geometry.faceVertexUvs[0];
                        if (faceVertexUvs.length > 0) uvs = faceVertexUvs;

                        for (var f = 0, fl = faces.length; f < fl; f++) {

                            var face = faces[f];
                            var faceMaterial = isFaceMaterial === true ? materials[face.materialIndex] : material;

                            if (faceMaterial === undefined) continue;

                            fvA = vertices[face.a];
                            fvB = vertices[face.b];
                            fvC = vertices[face.c];

                            if (faceMaterial.morphTargets === true) {

                                var morphTargets = geometry.morphTargets;
                                var morphInfluences = this.morphTargetInfluences;

                                vA.set(0, 0, 0);
                                vB.set(0, 0, 0);
                                vC.set(0, 0, 0);

                                for (var t = 0, tl = morphTargets.length; t < tl; t++) {

                                    var influence = morphInfluences[t];

                                    if (influence === 0) continue;

                                    var targets = morphTargets[t].vertices;

                                    vA.addScaledVector(tempA.subVectors(targets[face.a], fvA), influence);
                                    vB.addScaledVector(tempB.subVectors(targets[face.b], fvB), influence);
                                    vC.addScaledVector(tempC.subVectors(targets[face.c], fvC), influence);

                                }

                                vA.add(fvA);
                                vB.add(fvB);
                                vC.add(fvC);

                                fvA = vA;
                                fvB = vB;
                                fvC = vC;

                            }

                            intersection = checkIntersection(this, raycaster, ray, fvA, fvB, fvC, intersectionPoint);

                            if (intersection) {

                                if (uvs) {

                                    var uvs_f = uvs[f];
                                    uvA.copy(uvs_f[0]);
                                    uvB.copy(uvs_f[1]);
                                    uvC.copy(uvs_f[2]);

                                    intersection.uv = uvIntersection(intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC);

                                }

                                intersection.face = face;
                                intersection.faceIndex = f;
                                intersects.push(intersection);

                            }

                        }

                    }

                };

            }()),

            clone: function() {

                return new this.constructor(this.geometry, this.material).copy(this);

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
         */

        function BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {

            Geometry.call(this);

            this.type = 'BoxGeometry';

            this.parameters = {
                width: width,
                height: height,
                depth: depth,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                depthSegments: depthSegments
            };

            this.fromBufferGeometry(new BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments));
            this.mergeVertices();

        }

        BoxGeometry.prototype = Object.create(Geometry.prototype);
        BoxGeometry.prototype.constructor = BoxGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {

            BufferGeometry.call(this);

            this.type = 'BoxBufferGeometry';

            this.parameters = {
                width: width,
                height: height,
                depth: depth,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                depthSegments: depthSegments
            };

            var scope = this;

            // segments

            widthSegments = Math.floor(widthSegments) || 1;
            heightSegments = Math.floor(heightSegments) || 1;
            depthSegments = Math.floor(depthSegments) || 1;

            // buffers

            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];

            // helper variables

            var numberOfVertices = 0;
            var groupStart = 0;

            // build each side of the box geometry

            buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px
            buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx
            buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py
            buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny
            buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz
            buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

            function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {

                var segmentWidth = width / gridX;
                var segmentHeight = height / gridY;

                var widthHalf = width / 2;
                var heightHalf = height / 2;
                var depthHalf = depth / 2;

                var gridX1 = gridX + 1;
                var gridY1 = gridY + 1;

                var vertexCounter = 0;
                var groupCount = 0;

                var ix, iy;

                var vector = new Vector3();

                // generate vertices, normals and uvs

                for (iy = 0; iy < gridY1; iy++) {

                    var y = iy * segmentHeight - heightHalf;

                    for (ix = 0; ix < gridX1; ix++) {

                        var x = ix * segmentWidth - widthHalf;

                        // set values to correct vector component

                        vector[u] = x * udir;
                        vector[v] = y * vdir;
                        vector[w] = depthHalf;

                        // now apply vector to vertex buffer

                        vertices.push(vector.x, vector.y, vector.z);

                        // set values to correct vector component

                        vector[u] = 0;
                        vector[v] = 0;
                        vector[w] = depth > 0 ? 1 : -1;

                        // now apply vector to normal buffer

                        normals.push(vector.x, vector.y, vector.z);

                        // uvs

                        uvs.push(ix / gridX);
                        uvs.push(1 - (iy / gridY));

                        // counters

                        vertexCounter += 1;

                    }

                }

                // indices

                // 1. you need three indices to draw a single face
                // 2. a single segment consists of two faces
                // 3. so we need to generate six (2*3) indices per segment

                for (iy = 0; iy < gridY; iy++) {

                    for (ix = 0; ix < gridX; ix++) {

                        var a = numberOfVertices + ix + gridX1 * iy;
                        var b = numberOfVertices + ix + gridX1 * (iy + 1);
                        var c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
                        var d = numberOfVertices + (ix + 1) + gridX1 * iy;

                        // faces

                        indices.push(a, b, d);
                        indices.push(b, c, d);

                        // increase counter

                        groupCount += 6;

                    }

                }

                // add a group to the geometry. this will ensure multi material support

                scope.addGroup(groupStart, groupCount, materialIndex);

                // calculate new start value for groups

                groupStart += groupCount;

                // update total number of vertices

                numberOfVertices += vertexCounter;

            }

        }

        BoxBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

        /**
         * @author mrdoob / http://mrdoob.com/
         * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
         */

        function PlaneGeometry(width, height, widthSegments, heightSegments) {

            Geometry.call(this);

            this.type = 'PlaneGeometry';

            this.parameters = {
                width: width,
                height: height,
                widthSegments: widthSegments,
                heightSegments: heightSegments
            };

            this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments));

        }

        PlaneGeometry.prototype = Object.create(Geometry.prototype);
        PlaneGeometry.prototype.constructor = PlaneGeometry;

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / https://github.com/Mugen87
         *
         * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
         */

        function PlaneBufferGeometry(width, height, widthSegments, heightSegments) {

            BufferGeometry.call(this);

            this.type = 'PlaneBufferGeometry';

            this.parameters = {
                width: width,
                height: height,
                widthSegments: widthSegments,
                heightSegments: heightSegments
            };

            var width_half = width / 2;
            var height_half = height / 2;

            var gridX = Math.floor(widthSegments) || 1;
            var gridY = Math.floor(heightSegments) || 1;

            var gridX1 = gridX + 1;
            var gridY1 = gridY + 1;

            var segment_width = width / gridX;
            var segment_height = height / gridY;

            var ix, iy;

            // buffers

            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];

            // generate vertices, normals and uvs

            for (iy = 0; iy < gridY1; iy++) {

                var y = iy * segment_height - height_half;

                for (ix = 0; ix < gridX1; ix++) {

                    var x = ix * segment_width - width_half;

                    vertices.push(x, -y, 0);

                    normals.push(0, 0, 1);

                    uvs.push(ix / gridX);
                    uvs.push(1 - (iy / gridY));

                }

            }

            // indices

            for (iy = 0; iy < gridY; iy++) {

                for (ix = 0; ix < gridX; ix++) {

                    var a = ix + gridX1 * iy;
                    var b = ix + gridX1 * (iy + 1);
                    var c = (ix + 1) + gridX1 * (iy + 1);
                    var d = (ix + 1) + gridX1 * iy;

                    // faces

                    indices.push(a, b, d);
                    indices.push(b, c, d);

                }

            }

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

        }

        PlaneBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author mikael emtinger / http://gomo.se/
         * @author WestLangley / http://github.com/WestLangley
         */

        function Camera() {

            Object3D.call(this);

            this.type = 'Camera';

            this.matrixWorldInverse = new Matrix4();
            this.projectionMatrix = new Matrix4();

        }

        Camera.prototype = Object.create(Object3D.prototype);
        Camera.prototype.constructor = Camera;

        Camera.prototype.isCamera = true;

        Camera.prototype.getWorldDirection = function() {

            var quaternion = new Quaternion();

            return function getWorldDirection(optionalTarget) {

                var result = optionalTarget || new Vector3();

                this.getWorldQuaternion(quaternion);

                return result.set(0, 0, -1).applyQuaternion(quaternion);

            };

        }();

        Camera.prototype.lookAt = function() {

            // This routine does not support cameras with rotated and/or translated parent(s)

            var m1 = new Matrix4();

            return function lookAt(vector) {

                m1.lookAt(this.position, vector, this.up);

                this.quaternion.setFromRotationMatrix(m1);

            };

        }();

        Camera.prototype.clone = function() {

            return new this.constructor().copy(this);

        };

        Camera.prototype.copy = function(source) {

            Object3D.prototype.copy.call(this, source);

            this.matrixWorldInverse.copy(source.matrixWorldInverse);
            this.projectionMatrix.copy(source.projectionMatrix);

            return this;

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author greggman / http://games.greggman.com/
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * @author tschw
         */

        function PerspectiveCamera(fov, aspect, near, far) {

            Camera.call(this);

            this.type = 'PerspectiveCamera';

            this.fov = fov !== undefined ? fov : 50;
            this.zoom = 1;

            this.near = near !== undefined ? near : 0.1;
            this.far = far !== undefined ? far : 2000;
            this.focus = 10;

            this.aspect = aspect !== undefined ? aspect : 1;
            this.view = null;

            this.filmGauge = 35; // width of the film (default in millimeters)
            this.filmOffset = 0; // horizontal film offset (same unit as gauge)

            this.updateProjectionMatrix();

        }

        PerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {

            constructor: PerspectiveCamera,

            isPerspectiveCamera: true,

            copy: function(source) {

                Camera.prototype.copy.call(this, source);

                this.fov = source.fov;
                this.zoom = source.zoom;

                this.near = source.near;
                this.far = source.far;
                this.focus = source.focus;

                this.aspect = source.aspect;
                this.view = source.view === null ? null : Object.assign({}, source.view);

                this.filmGauge = source.filmGauge;
                this.filmOffset = source.filmOffset;

                return this;

            },

            /**
             * Sets the FOV by focal length in respect to the current .filmGauge.
             *
             * The default film gauge is 35, so that the focal length can be specified for
             * a 35mm (full frame) camera.
             *
             * Values for focal length and film gauge must have the same unit.
             */
            setFocalLength: function(focalLength) {

                // see http://www.bobatkins.com/photography/technical/field_of_view.html
                var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

                this.fov = _Math.RAD2DEG * 2 * Math.atan(vExtentSlope);
                this.updateProjectionMatrix();

            },

            /**
             * Calculates the focal length from the current .fov and .filmGauge.
             */
            getFocalLength: function() {

                var vExtentSlope = Math.tan(_Math.DEG2RAD * 0.5 * this.fov);

                return 0.5 * this.getFilmHeight() / vExtentSlope;

            },

            getEffectiveFOV: function() {

                return _Math.RAD2DEG * 2 * Math.atan(
                    Math.tan(_Math.DEG2RAD * 0.5 * this.fov) / this.zoom);

            },

            getFilmWidth: function() {

                // film not completely covered in portrait format (aspect < 1)
                return this.filmGauge * Math.min(this.aspect, 1);

            },

            getFilmHeight: function() {

                // film not completely covered in landscape format (aspect > 1)
                return this.filmGauge / Math.max(this.aspect, 1);

            },

            /**
             * Sets an offset in a larger frustum. This is useful for multi-window or
             * multi-monitor/multi-machine setups.
             *
             * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
             * the monitors are in grid like this
             *
             *   +---+---+---+
             *   | A | B | C |
             *   +---+---+---+
             *   | D | E | F |
             *   +---+---+---+
             *
             * then for each monitor you would call it like this
             *
             *   var w = 1920;
             *   var h = 1080;
             *   var fullWidth = w * 3;
             *   var fullHeight = h * 2;
             *
             *   --A--
             *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
             *   --B--
             *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
             *   --C--
             *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
             *   --D--
             *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
             *   --E--
             *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
             *   --F--
             *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
             *
             *   Note there is no reason monitors have to be the same size or in a grid.
             */
            setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {

                this.aspect = fullWidth / fullHeight;

                this.view = {
                    fullWidth: fullWidth,
                    fullHeight: fullHeight,
                    offsetX: x,
                    offsetY: y,
                    width: width,
                    height: height
                };

                this.updateProjectionMatrix();

            },

            clearViewOffset: function() {

                this.view = null;
                this.updateProjectionMatrix();

            },

            updateProjectionMatrix: function() {

                var near = this.near,
                    top = near * Math.tan(
                        _Math.DEG2RAD * 0.5 * this.fov) / this.zoom,
                    height = 2 * top,
                    width = this.aspect * height,
                    left = -0.5 * width,
                    view = this.view;

                if (view !== null) {

                    var fullWidth = view.fullWidth,
                        fullHeight = view.fullHeight;

                    left += view.offsetX * width / fullWidth;
                    top -= view.offsetY * height / fullHeight;
                    width *= view.width / fullWidth;
                    height *= view.height / fullHeight;

                }

                var skew = this.filmOffset;
                if (skew !== 0) left += near * skew / this.getFilmWidth();

                this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);

            },

            toJSON: function(meta) {

                var data = Object3D.prototype.toJSON.call(this, meta);

                data.object.fov = this.fov;
                data.object.zoom = this.zoom;

                data.object.near = this.near;
                data.object.far = this.far;
                data.object.focus = this.focus;

                data.object.aspect = this.aspect;

                if (this.view !== null) data.object.view = Object.assign({}, this.view);

                data.object.filmGauge = this.filmGauge;
                data.object.filmOffset = this.filmOffset;

                return data;

            }

        });

        /**
         * @author alteredq / http://alteredqualia.com/
         * @author arose / http://github.com/arose
         */

        function OrthographicCamera(left, right, top, bottom, near, far) {

            Camera.call(this);

            this.type = 'OrthographicCamera';

            this.zoom = 1;
            this.view = null;

            this.left = left;
            this.right = right;
            this.top = top;
            this.bottom = bottom;

            this.near = (near !== undefined) ? near : 0.1;
            this.far = (far !== undefined) ? far : 2000;

            this.updateProjectionMatrix();

        }

        OrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {

            constructor: OrthographicCamera,

            isOrthographicCamera: true,

            copy: function(source) {

                Camera.prototype.copy.call(this, source);

                this.left = source.left;
                this.right = source.right;
                this.top = source.top;
                this.bottom = source.bottom;
                this.near = source.near;
                this.far = source.far;

                this.zoom = source.zoom;
                this.view = source.view === null ? null : Object.assign({}, source.view);

                return this;

            },

            setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {

                this.view = {
                    fullWidth: fullWidth,
                    fullHeight: fullHeight,
                    offsetX: x,
                    offsetY: y,
                    width: width,
                    height: height
                };

                this.updateProjectionMatrix();

            },

            clearViewOffset: function() {

                this.view = null;
                this.updateProjectionMatrix();

            },

            updateProjectionMatrix: function() {

                var dx = (this.right - this.left) / (2 * this.zoom);
                var dy = (this.top - this.bottom) / (2 * this.zoom);
                var cx = (this.right + this.left) / 2;
                var cy = (this.top + this.bottom) / 2;

                var left = cx - dx;
                var right = cx + dx;
                var top = cy + dy;
                var bottom = cy - dy;

                if (this.view !== null) {

                    var zoomW = this.zoom / (this.view.width / this.view.fullWidth);
                    var zoomH = this.zoom / (this.view.height / this.view.fullHeight);
                    var scaleW = (this.right - this.left) / this.view.width;
                    var scaleH = (this.top - this.bottom) / this.view.height;

                    left += scaleW * (this.view.offsetX / zoomW);
                    right = left + scaleW * (this.view.width / zoomW);
                    top -= scaleH * (this.view.offsetY / zoomH);
                    bottom = top - scaleH * (this.view.height / zoomH);

                }

                this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);

            },

            toJSON: function(meta) {

                var data = Object3D.prototype.toJSON.call(this, meta);

                data.object.zoom = this.zoom;
                data.object.left = this.left;
                data.object.right = this.right;
                data.object.top = this.top;
                data.object.bottom = this.bottom;
                data.object.near = this.near;
                data.object.far = this.far;

                if (this.view !== null) data.object.view = Object.assign({}, this.view);

                return data;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function WebGLIndexedBufferRenderer(gl, extensions, infoRender) {

            var mode;

            function setMode(value) {

                mode = value;

            }

            var type, size;

            function setIndex(index) {

                if (index.array instanceof Uint32Array && extensions.get('OES_element_index_uint')) {

                    type = gl.UNSIGNED_INT;
                    size = 4;

                } else if (index.array instanceof Uint16Array) {

                    type = gl.UNSIGNED_SHORT;
                    size = 2;

                } else {

                    type = gl.UNSIGNED_BYTE;
                    size = 1;

                }

            }

            function render(start, count) {

                gl.drawElements(mode, count, type, start * size);

                infoRender.calls++;
                infoRender.vertices += count;

                if (mode === gl.TRIANGLES) infoRender.faces += count / 3;

            }

            function renderInstances(geometry, start, count) {

                var extension = extensions.get('ANGLE_instanced_arrays');

                if (extension === null) {

                    console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
                    return;

                }

                extension.drawElementsInstancedANGLE(mode, count, type, start * size, geometry.maxInstancedCount);

                infoRender.calls++;
                infoRender.vertices += count * geometry.maxInstancedCount;

                if (mode === gl.TRIANGLES) infoRender.faces += geometry.maxInstancedCount * count / 3;

            }

            return {

                setMode: setMode,
                setIndex: setIndex,
                render: render,
                renderInstances: renderInstances

            };

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function WebGLBufferRenderer(gl, extensions, infoRender) {

            var mode;

            function setMode(value) {

                mode = value;

            }

            function render(start, count) {

                gl.drawArrays(mode, start, count);

                infoRender.calls++;
                infoRender.vertices += count;

                if (mode === gl.TRIANGLES) infoRender.faces += count / 3;

            }

            function renderInstances(geometry) {

                var extension = extensions.get('ANGLE_instanced_arrays');

                if (extension === null) {

                    console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
                    return;

                }

                var position = geometry.attributes.position;

                var count = 0;

                if (position.isInterleavedBufferAttribute) {

                    count = position.data.count;

                    extension.drawArraysInstancedANGLE(mode, 0, count, geometry.maxInstancedCount);

                } else {

                    count = position.count;

                    extension.drawArraysInstancedANGLE(mode, 0, count, geometry.maxInstancedCount);

                }

                infoRender.calls++;
                infoRender.vertices += count * geometry.maxInstancedCount;

                if (mode === gl.TRIANGLES) infoRender.faces += geometry.maxInstancedCount * count / 3;

            }

            return {
                setMode: setMode,
                render: render,
                renderInstances: renderInstances
            };

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function WebGLLights() {

            var lights = {};

            return {

                get: function(light) {

                    if (lights[light.id] !== undefined) {

                        return lights[light.id];

                    }

                    var uniforms;

                    switch (light.type) {

                        case 'DirectionalLight':
                            uniforms = {
                                direction: new Vector3(),
                                color: new Color(),

                                shadow: false,
                                shadowBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new Vector2()
                            };
                            break;

                        case 'SpotLight':
                            uniforms = {
                                position: new Vector3(),
                                direction: new Vector3(),
                                color: new Color(),
                                distance: 0,
                                coneCos: 0,
                                penumbraCos: 0,
                                decay: 0,

                                shadow: false,
                                shadowBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new Vector2()
                            };
                            break;

                        case 'PointLight':
                            uniforms = {
                                position: new Vector3(),
                                color: new Color(),
                                distance: 0,
                                decay: 0,

                                shadow: false,
                                shadowBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new Vector2()
                            };
                            break;

                        case 'HemisphereLight':
                            uniforms = {
                                direction: new Vector3(),
                                skyColor: new Color(),
                                groundColor: new Color()
                            };
                            break;

                        case 'RectAreaLight':
                            uniforms = {
                                color: new Color(),
                                position: new Vector3(),
                                halfWidth: new Vector3(),
                                halfHeight: new Vector3()
                                // TODO (abelnation): set RectAreaLight shadow uniforms
                            };
                            break;

                    }

                    lights[light.id] = uniforms;

                    return uniforms;

                }

            };

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function addLineNumbers(string) {

            var lines = string.split('\n');

            for (var i = 0; i < lines.length; i++) {

                lines[i] = (i + 1) + ': ' + lines[i];

            }

            return lines.join('\n');

        }

        function WebGLShader(gl, type, string) {

            var shader = gl.createShader(type);

            gl.shaderSource(shader, string);
            gl.compileShader(shader);

            if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {

                console.error('THREE.WebGLShader: Shader couldn\'t compile.');

            }

            if (gl.getShaderInfoLog(shader) !== '') {

                console.warn('THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog(shader), addLineNumbers(string));

            }

            // --enable-privileged-webgl-extension
            // console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

            return shader;

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        var programIdCount = 0;

        function getEncodingComponents(encoding) {

            switch (encoding) {

                case LinearEncoding:
                    return ['Linear', '( value )'];
                case sRGBEncoding:
                    return ['sRGB', '( value )'];
                case RGBEEncoding:
                    return ['RGBE', '( value )'];
                case RGBM7Encoding:
                    return ['RGBM', '( value, 7.0 )'];
                case RGBM16Encoding:
                    return ['RGBM', '( value, 16.0 )'];
                case RGBDEncoding:
                    return ['RGBD', '( value, 256.0 )'];
                case GammaEncoding:
                    return ['Gamma', '( value, float( GAMMA_FACTOR ) )'];
                default:
                    throw new Error('unsupported encoding: ' + encoding);

            }

        }

        function getTexelDecodingFunction(functionName, encoding) {

            var components = getEncodingComponents(encoding);
            return "vec4 " + functionName + "( vec4 value ) { return " + components[0] + "ToLinear" + components[1] + "; }";

        }

        function getTexelEncodingFunction(functionName, encoding) {

            var components = getEncodingComponents(encoding);
            return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";

        }

        function getToneMappingFunction(functionName, toneMapping) {

            var toneMappingName;

            switch (toneMapping) {

                case LinearToneMapping:
                    toneMappingName = "Linear";
                    break;

                case ReinhardToneMapping:
                    toneMappingName = "Reinhard";
                    break;

                case Uncharted2ToneMapping:
                    toneMappingName = "Uncharted2";
                    break;

                case CineonToneMapping:
                    toneMappingName = "OptimizedCineon";
                    break;

                default:
                    throw new Error('unsupported toneMapping: ' + toneMapping);

            }

            return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";

        }

        function generateExtensions(extensions, parameters, rendererExtensions) {

            extensions = extensions || {};

            var chunks = [
                (extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading) ? '#extension GL_OES_standard_derivatives : enable' : '',
                (extensions.fragDepth || parameters.logarithmicDepthBuffer) && rendererExtensions.get('EXT_frag_depth') ? '#extension GL_EXT_frag_depth : enable' : '',
                (extensions.drawBuffers) && rendererExtensions.get('WEBGL_draw_buffers') ? '#extension GL_EXT_draw_buffers : require' : '',
                (extensions.shaderTextureLOD || parameters.envMap) && rendererExtensions.get('EXT_shader_texture_lod') ? '#extension GL_EXT_shader_texture_lod : enable' : ''
            ];

            return chunks.filter(filterEmptyLine).join('\n');

        }

        function generateDefines(defines) {

            var chunks = [];

            for (var name in defines) {

                var value = defines[name];

                if (value === false) continue;

                chunks.push('#define ' + name + ' ' + value);

            }

            return chunks.join('\n');

        }

        function fetchAttributeLocations(gl, program, identifiers) {

            var attributes = {};

            var n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);

            for (var i = 0; i < n; i++) {

                var info = gl.getActiveAttrib(program, i);
                var name = info.name;

                // console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

                attributes[name] = gl.getAttribLocation(program, name);

            }

            return attributes;

        }

        function filterEmptyLine(string) {

            return string !== '';

        }

        function replaceLightNums(string, parameters) {

            return string
                .replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights)
                .replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights)
                .replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights)
                .replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights)
                .replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights);

        }

        function parseIncludes(string) {

            var pattern = /#include +<([\w\d.]+)>/g;

            function replace(match, include) {

                var replace = ShaderChunk[include];

                if (replace === undefined) {

                    throw new Error('Can not resolve #include <' + include + '>');

                }

                return parseIncludes(replace);

            }

            return string.replace(pattern, replace);

        }

        function unrollLoops(string) {

            var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

            function replace(match, start, end, snippet) {

                var unroll = '';

                for (var i = parseInt(start); i < parseInt(end); i++) {

                    unroll += snippet.replace(/\[ i \]/g, '[ ' + i + ' ]');

                }

                return unroll;

            }

            return string.replace(pattern, replace);

        }

        function WebGLProgram(renderer, code, material, parameters) {

            var gl = renderer.context;

            var extensions = material.extensions;
            var defines = material.defines;

            var vertexShader = material.__webglShader.vertexShader;
            var fragmentShader = material.__webglShader.fragmentShader;

            var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

            if (parameters.shadowMapType === PCFShadowMap) {

                shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

            } else if (parameters.shadowMapType === PCFSoftShadowMap) {

                shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

            }

            var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
            var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
            var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

            if (parameters.envMap) {

                switch (material.envMap.mapping) {

                    case CubeReflectionMapping:
                    case CubeRefractionMapping:
                        envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
                        break;

                    case CubeUVReflectionMapping:
                    case CubeUVRefractionMapping:
                        envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
                        break;

                    case EquirectangularReflectionMapping:
                    case EquirectangularRefractionMapping:
                        envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
                        break;

                    case SphericalReflectionMapping:
                        envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
                        break;

                }

                switch (material.envMap.mapping) {

                    case CubeRefractionMapping:
                    case EquirectangularRefractionMapping:
                        envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
                        break;

                }

                switch (material.combine) {

                    case MultiplyOperation:
                        envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
                        break;

                    case MixOperation:
                        envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
                        break;

                    case AddOperation:
                        envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
                        break;

                }

            }

            var gammaFactorDefine = (renderer.gammaFactor > 0) ? renderer.gammaFactor : 1.0;

            // console.log( 'building new program ' );

            //

            var customExtensions = generateExtensions(extensions, parameters, renderer.extensions);

            var customDefines = generateDefines(defines);

            //

            var program = gl.createProgram();

            var prefixVertex, prefixFragment;

            if (material.isRawShaderMaterial) {

                prefixVertex = [

                    customDefines,

                    '\n'

                ].filter(filterEmptyLine).join('\n');

                prefixFragment = [

                    customExtensions,
                    customDefines,

                    '\n'

                ].filter(filterEmptyLine).join('\n');

            } else {

                prefixVertex = [


                    'precision ' + parameters.precision + ' float;',
                    'precision ' + parameters.precision + ' int;',

                    '#define SHADER_NAME ' + material.__webglShader.name,

                    customDefines,

                    parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

                    '#define GAMMA_FACTOR ' + gammaFactorDefine,

                    '#define MAX_BONES ' + parameters.maxBones,
                    (parameters.useFog && parameters.fog) ? '#define USE_FOG' : '',
                    (parameters.useFog && parameters.fogExp) ? '#define FOG_EXP2' : '',


                    parameters.map ? '#define USE_MAP' : '',
                    parameters.envMap ? '#define USE_ENVMAP' : '',
                    parameters.envMap ? '#define ' + envMapModeDefine : '',
                    parameters.lightMap ? '#define USE_LIGHTMAP' : '',
                    parameters.aoMap ? '#define USE_AOMAP' : '',
                    parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
                    parameters.bumpMap ? '#define USE_BUMPMAP' : '',
                    parameters.normalMap ? '#define USE_NORMALMAP' : '',
                    parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
                    parameters.specularMap ? '#define USE_SPECULARMAP' : '',
                    parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
                    parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
                    parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
                    parameters.vertexColors ? '#define USE_COLOR' : '',

                    parameters.flatShading ? '#define FLAT_SHADED' : '',

                    parameters.skinning ? '#define USE_SKINNING' : '',
                    parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

                    parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
                    parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
                    parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
                    parameters.flipSided ? '#define FLIP_SIDED' : '',

                    '#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

                    parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
                    parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

                    parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

                    parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
                    parameters.logarithmicDepthBuffer && renderer.extensions.get('EXT_frag_depth') ? '#define USE_LOGDEPTHBUF_EXT' : '',

                    'uniform mat4 modelMatrix;',
                    'uniform mat4 modelViewMatrix;',
                    'uniform mat4 projectionMatrix;',
                    'uniform mat4 viewMatrix;',
                    'uniform mat3 normalMatrix;',
                    'uniform vec3 cameraPosition;',

                    'attribute vec3 position;',
                    'attribute vec3 normal;',
                    'attribute vec2 uv;',

                    '#ifdef USE_COLOR',

                    '	attribute vec3 color;',

                    '#endif',

                    '#ifdef USE_MORPHTARGETS',

                    '	attribute vec3 morphTarget0;',
                    '	attribute vec3 morphTarget1;',
                    '	attribute vec3 morphTarget2;',
                    '	attribute vec3 morphTarget3;',

                    '	#ifdef USE_MORPHNORMALS',

                    '		attribute vec3 morphNormal0;',
                    '		attribute vec3 morphNormal1;',
                    '		attribute vec3 morphNormal2;',
                    '		attribute vec3 morphNormal3;',

                    '	#else',

                    '		attribute vec3 morphTarget4;',
                    '		attribute vec3 morphTarget5;',
                    '		attribute vec3 morphTarget6;',
                    '		attribute vec3 morphTarget7;',

                    '	#endif',

                    '#endif',

                    '#ifdef USE_SKINNING',

                    '	attribute vec4 skinIndex;',
                    '	attribute vec4 skinWeight;',

                    '#endif',

                    '\n'

                ].filter(filterEmptyLine).join('\n');

                prefixFragment = [

                    customExtensions,

                    'precision ' + parameters.precision + ' float;',
                    'precision ' + parameters.precision + ' int;',

                    '#define SHADER_NAME ' + material.__webglShader.name,

                    customDefines,

                    parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

                    '#define GAMMA_FACTOR ' + gammaFactorDefine,

                    (parameters.useFog && parameters.fog) ? '#define USE_FOG' : '',
                    (parameters.useFog && parameters.fogExp) ? '#define FOG_EXP2' : '',

                    parameters.map ? '#define USE_MAP' : '',
                    parameters.envMap ? '#define USE_ENVMAP' : '',
                    parameters.envMap ? '#define ' + envMapTypeDefine : '',
                    parameters.envMap ? '#define ' + envMapModeDefine : '',
                    parameters.envMap ? '#define ' + envMapBlendingDefine : '',
                    parameters.lightMap ? '#define USE_LIGHTMAP' : '',
                    parameters.aoMap ? '#define USE_AOMAP' : '',
                    parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
                    parameters.bumpMap ? '#define USE_BUMPMAP' : '',
                    parameters.normalMap ? '#define USE_NORMALMAP' : '',
                    parameters.specularMap ? '#define USE_SPECULARMAP' : '',
                    parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
                    parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
                    parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
                    parameters.vertexColors ? '#define USE_COLOR' : '',

                    parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

                    parameters.flatShading ? '#define FLAT_SHADED' : '',

                    parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
                    parameters.flipSided ? '#define FLIP_SIDED' : '',

                    '#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
                    '#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),

                    parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
                    parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

                    parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',

                    parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',

                    parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
                    parameters.logarithmicDepthBuffer && renderer.extensions.get('EXT_frag_depth') ? '#define USE_LOGDEPTHBUF_EXT' : '',

                    parameters.envMap && renderer.extensions.get('EXT_shader_texture_lod') ? '#define TEXTURE_LOD_EXT' : '',

                    'uniform mat4 viewMatrix;',
                    'uniform vec3 cameraPosition;',

                    (parameters.toneMapping !== NoToneMapping) ? "#define TONE_MAPPING" : '',
                    (parameters.toneMapping !== NoToneMapping) ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below
                    (parameters.toneMapping !== NoToneMapping) ? getToneMappingFunction("toneMapping", parameters.toneMapping) : '',

                    (parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding) ? ShaderChunk['encodings_pars_fragment'] : '', // this code is required here because it is used by the various encoding/decoding function defined below
                    parameters.mapEncoding ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '',
                    parameters.envMapEncoding ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '',
                    parameters.emissiveMapEncoding ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '',
                    parameters.outputEncoding ? getTexelEncodingFunction("linearToOutputTexel", parameters.outputEncoding) : '',

                    parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',

                    '\n'

                ].filter(filterEmptyLine).join('\n');

            }

            vertexShader = parseIncludes(vertexShader, parameters);
            vertexShader = replaceLightNums(vertexShader, parameters);

            fragmentShader = parseIncludes(fragmentShader, parameters);
            fragmentShader = replaceLightNums(fragmentShader, parameters);

            if (!material.isShaderMaterial) {

                vertexShader = unrollLoops(vertexShader);
                fragmentShader = unrollLoops(fragmentShader);

            }

            var vertexGlsl = prefixVertex + vertexShader;
            var fragmentGlsl = prefixFragment + fragmentShader;

            // console.log( '*VERTEX*', vertexGlsl );
            // console.log( '*FRAGMENT*', fragmentGlsl );

            var glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
            var glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);

            gl.attachShader(program, glVertexShader);
            gl.attachShader(program, glFragmentShader);

            // Force a particular attribute to index 0.

            if (material.index0AttributeName !== undefined) {

                gl.bindAttribLocation(program, 0, material.index0AttributeName);

            } else if (parameters.morphTargets === true) {

                // programs with morphTargets displace position out of attribute 0
                gl.bindAttribLocation(program, 0, 'position');

            }

            gl.linkProgram(program);

            var programLog = gl.getProgramInfoLog(program);
            var vertexLog = gl.getShaderInfoLog(glVertexShader);
            var fragmentLog = gl.getShaderInfoLog(glFragmentShader);

            var runnable = true;
            var haveDiagnostics = true;

            // console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
            // console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

            if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {

                runnable = false;

                console.error('THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog);

            } else if (programLog !== '') {

                console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);

            } else if (vertexLog === '' || fragmentLog === '') {

                haveDiagnostics = false;

            }

            if (haveDiagnostics) {

                this.diagnostics = {

                    runnable: runnable,
                    material: material,

                    programLog: programLog,

                    vertexShader: {

                        log: vertexLog,
                        prefix: prefixVertex

                    },

                    fragmentShader: {

                        log: fragmentLog,
                        prefix: prefixFragment

                    }

                };

            }

            // clean up

            gl.deleteShader(glVertexShader);
            gl.deleteShader(glFragmentShader);

            // set up caching for uniform locations

            var cachedUniforms;

            this.getUniforms = function() {

                if (cachedUniforms === undefined) {

                    cachedUniforms =
                        new WebGLUniforms(gl, program, renderer);

                }

                return cachedUniforms;

            };

            // set up caching for attribute locations

            var cachedAttributes;

            this.getAttributes = function() {

                if (cachedAttributes === undefined) {

                    cachedAttributes = fetchAttributeLocations(gl, program);

                }

                return cachedAttributes;

            };

            // free resource

            this.destroy = function() {

                gl.deleteProgram(program);
                this.program = undefined;

            };

            // DEPRECATED

            Object.defineProperties(this, {

                uniforms: {
                    get: function() {

                        console.warn('THREE.WebGLProgram: .uniforms is now .getUniforms().');
                        return this.getUniforms();

                    }
                },

                attributes: {
                    get: function() {

                        console.warn('THREE.WebGLProgram: .attributes is now .getAttributes().');
                        return this.getAttributes();

                    }
                }

            });


            //

            this.id = programIdCount++;
            this.code = code;
            this.usedTimes = 1;
            this.program = program;
            this.vertexShader = glVertexShader;
            this.fragmentShader = glFragmentShader;

            return this;

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function WebGLPrograms(renderer, capabilities) {

            var programs = [];

            var shaderIDs = {
                MeshDepthMaterial: 'depth',
                MeshNormalMaterial: 'normal',
                MeshBasicMaterial: 'basic',
                MeshLambertMaterial: 'lambert',
                MeshPhongMaterial: 'phong',
                MeshToonMaterial: 'phong',
                MeshStandardMaterial: 'physical',
                MeshPhysicalMaterial: 'physical',
                LineBasicMaterial: 'basic',
                LineDashedMaterial: 'dashed',
                PointsMaterial: 'points'
            };

            var parameterNames = [
                "precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
                "lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
                "roughnessMap", "metalnessMap", "gradientMap",
                "alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
                "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
                "maxBones", "useVertexTexture", "morphTargets", "morphNormals",
                "maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
                "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
                "shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
                "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking"
            ];


            function allocateBones(object) {

                if (capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture) {

                    return 1024;

                } else {

                    // default for when object is not specified
                    // ( for example when prebuilding shader to be used with multiple objects )
                    //
                    //  - leave some extra space for other uniforms
                    //  - limit here is ANGLE's 254 max uniform vectors
                    //    (up to 54 should be safe)

                    var nVertexUniforms = capabilities.maxVertexUniforms;
                    var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);

                    var maxBones = nVertexMatrices;

                    if (object !== undefined && (object && object.isSkinnedMesh)) {

                        maxBones = Math.min(object.skeleton.bones.length, maxBones);

                        if (maxBones < object.skeleton.bones.length) {

                            console.warn('WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)');

                        }

                    }

                    return maxBones;

                }

            }

            function getTextureEncodingFromMap(map, gammaOverrideLinear) {

                var encoding;

                if (!map) {

                    encoding = LinearEncoding;

                } else if (map.isTexture) {

                    encoding = map.encoding;

                } else if (map.isWebGLRenderTarget) {

                    console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");
                    encoding = map.texture.encoding;

                }

                // add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
                if (encoding === LinearEncoding && gammaOverrideLinear) {

                    encoding = GammaEncoding;

                }

                return encoding;

            }

            this.getParameters = function(material, lights, fog, nClipPlanes, nClipIntersection, object) {

                var shaderID = shaderIDs[material.type];

                // heuristics to create shader parameters according to lights in the scene
                // (not to blow over maxLights budget)

                var maxBones = allocateBones(object);
                var precision = renderer.getPrecision();

                if (material.precision !== null) {

                    precision = capabilities.getMaxPrecision(material.precision);

                    if (precision !== material.precision) {

                        console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');

                    }

                }

                var currentRenderTarget = renderer.getCurrentRenderTarget();

                var parameters = {

                    shaderID: shaderID,

                    precision: precision,
                    supportsVertexTextures: capabilities.vertexTextures,
                    outputEncoding: getTextureEncodingFromMap((!currentRenderTarget) ? null : currentRenderTarget.texture, renderer.gammaOutput),
                    map: !!material.map,
                    mapEncoding: getTextureEncodingFromMap(material.map, renderer.gammaInput),
                    envMap: !!material.envMap,
                    envMapMode: material.envMap && material.envMap.mapping,
                    envMapEncoding: getTextureEncodingFromMap(material.envMap, renderer.gammaInput),
                    envMapCubeUV: (!!material.envMap) && ((material.envMap.mapping === CubeUVReflectionMapping) || (material.envMap.mapping === CubeUVRefractionMapping)),
                    lightMap: !!material.lightMap,
                    aoMap: !!material.aoMap,
                    emissiveMap: !!material.emissiveMap,
                    emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap, renderer.gammaInput),
                    bumpMap: !!material.bumpMap,
                    normalMap: !!material.normalMap,
                    displacementMap: !!material.displacementMap,
                    roughnessMap: !!material.roughnessMap,
                    metalnessMap: !!material.metalnessMap,
                    specularMap: !!material.specularMap,
                    alphaMap: !!material.alphaMap,

                    gradientMap: !!material.gradientMap,

                    combine: material.combine,

                    vertexColors: material.vertexColors,

                    fog: !!fog,
                    useFog: material.fog,
                    fogExp: (fog && fog.isFogExp2),

                    flatShading: material.shading === FlatShading,

                    sizeAttenuation: material.sizeAttenuation,
                    logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

                    skinning: material.skinning,
                    maxBones: maxBones,
                    useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,

                    morphTargets: material.morphTargets,
                    morphNormals: material.morphNormals,
                    maxMorphTargets: renderer.maxMorphTargets,
                    maxMorphNormals: renderer.maxMorphNormals,

                    numDirLights: lights.directional.length,
                    numPointLights: lights.point.length,
                    numSpotLights: lights.spot.length,
                    numRectAreaLights: lights.rectArea.length,
                    numHemiLights: lights.hemi.length,

                    numClippingPlanes: nClipPlanes,
                    numClipIntersection: nClipIntersection,

                    shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
                    shadowMapType: renderer.shadowMap.type,

                    toneMapping: renderer.toneMapping,
                    physicallyCorrectLights: renderer.physicallyCorrectLights,

                    premultipliedAlpha: material.premultipliedAlpha,

                    alphaTest: material.alphaTest,
                    doubleSided: material.side === DoubleSide,
                    flipSided: material.side === BackSide,

                    depthPacking: (material.depthPacking !== undefined) ? material.depthPacking : false

                };

                return parameters;

            };

            this.getProgramCode = function(material, parameters) {

                var array = [];

                if (parameters.shaderID) {

                    array.push(parameters.shaderID);

                } else {

                    array.push(material.fragmentShader);
                    array.push(material.vertexShader);

                }

                if (material.defines !== undefined) {

                    for (var name in material.defines) {

                        array.push(name);
                        array.push(material.defines[name]);

                    }

                }

                for (var i = 0; i < parameterNames.length; i++) {

                    array.push(parameters[parameterNames[i]]);

                }

                return array.join();

            };

            this.acquireProgram = function(material, parameters, code) {

                var program;

                // Check if code has been already compiled
                for (var p = 0, pl = programs.length; p < pl; p++) {

                    var programInfo = programs[p];

                    if (programInfo.code === code) {

                        program = programInfo;
                        ++program.usedTimes;

                        break;

                    }

                }

                if (program === undefined) {

                    program = new WebGLProgram(renderer, code, material, parameters);
                    programs.push(program);

                }

                return program;

            };

            this.releaseProgram = function(program) {

                if (--program.usedTimes === 0) {

                    // Remove from unordered set
                    var i = programs.indexOf(program);
                    programs[i] = programs[programs.length - 1];
                    programs.pop();

                    // Free WebGL resources
                    program.destroy();

                }

            };

            // Exposed for resource monitoring & error feedback via renderer.info:
            this.programs = programs;

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function WebGLGeometries(gl, properties, info) {

            var geometries = {};

            function onGeometryDispose(event) {

                var geometry = event.target;
                var buffergeometry = geometries[geometry.id];

                if (buffergeometry.index !== null) {

                    deleteAttribute(buffergeometry.index);

                }

                deleteAttributes(buffergeometry.attributes);

                geometry.removeEventListener('dispose', onGeometryDispose);

                delete geometries[geometry.id];

                // TODO

                var property = properties.get(geometry);

                if (property.wireframe) {

                    deleteAttribute(property.wireframe);

                }

                properties.delete(geometry);

                var bufferproperty = properties.get(buffergeometry);

                if (bufferproperty.wireframe) {

                    deleteAttribute(bufferproperty.wireframe);

                }

                properties.delete(buffergeometry);

                //

                info.memory.geometries--;

            }

            function getAttributeBuffer(attribute) {

                if (attribute.isInterleavedBufferAttribute) {

                    return properties.get(attribute.data).__webglBuffer;

                }

                return properties.get(attribute).__webglBuffer;

            }

            function deleteAttribute(attribute) {

                var buffer = getAttributeBuffer(attribute);

                if (buffer !== undefined) {

                    gl.deleteBuffer(buffer);
                    removeAttributeBuffer(attribute);

                }

            }

            function deleteAttributes(attributes) {

                for (var name in attributes) {

                    deleteAttribute(attributes[name]);

                }

            }

            function removeAttributeBuffer(attribute) {

                if (attribute.isInterleavedBufferAttribute) {

                    properties.delete(attribute.data);

                } else {

                    properties.delete(attribute);

                }

            }

            return {

                get: function(object) {

                    var geometry = object.geometry;

                    if (geometries[geometry.id] !== undefined) {

                        return geometries[geometry.id];

                    }

                    geometry.addEventListener('dispose', onGeometryDispose);

                    var buffergeometry;

                    if (geometry.isBufferGeometry) {

                        buffergeometry = geometry;

                    } else if (geometry.isGeometry) {

                        if (geometry._bufferGeometry === undefined) {

                            geometry._bufferGeometry = new BufferGeometry().setFromObject(object);

                        }

                        buffergeometry = geometry._bufferGeometry;

                    }

                    geometries[geometry.id] = buffergeometry;

                    info.memory.geometries++;

                    return buffergeometry;

                }

            };

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function WebGLObjects(gl, properties, info) {

            var geometries = new WebGLGeometries(gl, properties, info);

            //

            function update(object) {

                // TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.

                var geometry = geometries.get(object);

                if (object.geometry.isGeometry) {

                    geometry.updateFromObject(object);

                }

                var index = geometry.index;
                var attributes = geometry.attributes;

                if (index !== null) {

                    updateAttribute(index, gl.ELEMENT_ARRAY_BUFFER);

                }

                for (var name in attributes) {

                    updateAttribute(attributes[name], gl.ARRAY_BUFFER);

                }

                // morph targets

                var morphAttributes = geometry.morphAttributes;

                for (var name in morphAttributes) {

                    var array = morphAttributes[name];

                    for (var i = 0, l = array.length; i < l; i++) {

                        updateAttribute(array[i], gl.ARRAY_BUFFER);

                    }

                }

                return geometry;

            }

            function updateAttribute(attribute, bufferType) {

                var data = (attribute.isInterleavedBufferAttribute) ? attribute.data : attribute;

                var attributeProperties = properties.get(data);

                if (attributeProperties.__webglBuffer === undefined) {

                    createBuffer(attributeProperties, data, bufferType);

                } else if (attributeProperties.version !== data.version) {

                    updateBuffer(attributeProperties, data, bufferType);

                }

            }

            function createBuffer(attributeProperties, data, bufferType) {

                attributeProperties.__webglBuffer = gl.createBuffer();
                gl.bindBuffer(bufferType, attributeProperties.__webglBuffer);

                var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

                gl.bufferData(bufferType, data.array, usage);

                var type = gl.FLOAT;
                var array = data.array;

                if (array instanceof Float32Array) {

                    type = gl.FLOAT;

                } else if (array instanceof Float64Array) {

                    console.warn("Unsupported data buffer format: Float64Array");

                } else if (array instanceof Uint16Array) {

                    type = gl.UNSIGNED_SHORT;

                } else if (array instanceof Int16Array) {

                    type = gl.SHORT;

                } else if (array instanceof Uint32Array) {

                    type = gl.UNSIGNED_INT;

                } else if (array instanceof Int32Array) {

                    type = gl.INT;

                } else if (array instanceof Int8Array) {

                    type = gl.BYTE;

                } else if (array instanceof Uint8Array) {

                    type = gl.UNSIGNED_BYTE;

                }

                attributeProperties.bytesPerElement = array.BYTES_PER_ELEMENT;
                attributeProperties.type = type;
                attributeProperties.version = data.version;

                data.onUploadCallback();

            }

            function updateBuffer(attributeProperties, data, bufferType) {

                gl.bindBuffer(bufferType, attributeProperties.__webglBuffer);

                if (data.dynamic === false) {

                    gl.bufferData(bufferType, data.array, gl.STATIC_DRAW);

                } else if (data.updateRange.count === -1) {

                    // Not using update ranges

                    gl.bufferSubData(bufferType, 0, data.array);

                } else if (data.updateRange.count === 0) {

                    console.error('THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.');

                } else {

                    gl.bufferSubData(bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,
                        data.array.subarray(data.updateRange.offset, data.updateRange.offset + data.updateRange.count));

                    data.updateRange.count = 0; // reset range

                }

                attributeProperties.version = data.version;

            }

            function getAttributeBuffer(attribute) {

                if (attribute.isInterleavedBufferAttribute) {

                    return properties.get(attribute.data).__webglBuffer;

                }

                return properties.get(attribute).__webglBuffer;

            }

            function getAttributeProperties(attribute) {

                if (attribute.isInterleavedBufferAttribute) {

                    return properties.get(attribute.data);

                }

                return properties.get(attribute);

            }

            function getWireframeAttribute(geometry) {

                var property = properties.get(geometry);

                if (property.wireframe !== undefined) {

                    return property.wireframe;

                }

                var indices = [];

                var index = geometry.index;
                var attributes = geometry.attributes;

                // console.time( 'wireframe' );

                if (index !== null) {

                    var array = index.array;

                    for (var i = 0, l = array.length; i < l; i += 3) {

                        var a = array[i + 0];
                        var b = array[i + 1];
                        var c = array[i + 2];

                        indices.push(a, b, b, c, c, a);

                    }

                } else {

                    var array = attributes.position.array;

                    for (var i = 0, l = (array.length / 3) - 1; i < l; i += 3) {

                        var a = i + 0;
                        var b = i + 1;
                        var c = i + 2;

                        indices.push(a, b, b, c, c, a);

                    }

                }

                // console.timeEnd( 'wireframe' );

                var attribute = new(arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);

                updateAttribute(attribute, gl.ELEMENT_ARRAY_BUFFER);

                property.wireframe = attribute;

                return attribute;

            }

            return {

                getAttributeBuffer: getAttributeBuffer,
                getAttributeProperties: getAttributeProperties,
                getWireframeAttribute: getWireframeAttribute,

                update: update

            };

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function WebGLTextures(_gl, extensions, state, properties, capabilities, paramThreeToGL, info) {

            var _infoMemory = info.memory;
            var _isWebGL2 = (typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext);

            //

            function clampToMaxSize(image, maxSize) {

                if (image.width > maxSize || image.height > maxSize) {

                    // Warning: Scaling through the canvas will only work with images that use
                    // premultiplied alpha.

                    var scale = maxSize / Math.max(image.width, image.height);

                    var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
                    canvas.width = Math.floor(image.width * scale);
                    canvas.height = Math.floor(image.height * scale);

                    var context = canvas.getContext('2d');
                    context.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);

                    console.warn('THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image);

                    return canvas;

                }

                return image;

            }

            function isPowerOfTwo(image) {

                return _Math.isPowerOfTwo(image.width) && _Math.isPowerOfTwo(image.height);

            }

            function makePowerOfTwo(image) {

                if (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement) {

                    var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
                    canvas.width = _Math.nearestPowerOfTwo(image.width);
                    canvas.height = _Math.nearestPowerOfTwo(image.height);

                    var context = canvas.getContext('2d');
                    context.drawImage(image, 0, 0, canvas.width, canvas.height);

                    console.warn('THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image);

                    return canvas;

                }

                return image;

            }

            function textureNeedsPowerOfTwo(texture) {

                return (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) ||
                    (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter);

            }

            // Fallback filters for non-power-of-2 textures

            function filterFallback(f) {

                if (f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter) {

                    return _gl.NEAREST;

                }

                return _gl.LINEAR;

            }

            //

            function onTextureDispose(event) {

                var texture = event.target;

                texture.removeEventListener('dispose', onTextureDispose);

                deallocateTexture(texture);

                _infoMemory.textures--;


            }

            function onRenderTargetDispose(event) {

                var renderTarget = event.target;

                renderTarget.removeEventListener('dispose', onRenderTargetDispose);

                deallocateRenderTarget(renderTarget);

                _infoMemory.textures--;

            }

            //

            function deallocateTexture(texture) {

                var textureProperties = properties.get(texture);

                if (texture.image && textureProperties.__image__webglTextureCube) {

                    // cube texture

                    _gl.deleteTexture(textureProperties.__image__webglTextureCube);

                } else {

                    // 2D texture

                    if (textureProperties.__webglInit === undefined) return;

                    _gl.deleteTexture(textureProperties.__webglTexture);

                }

                // remove all webgl properties
                properties.delete(texture);

            }

            function deallocateRenderTarget(renderTarget) {

                var renderTargetProperties = properties.get(renderTarget);
                var textureProperties = properties.get(renderTarget.texture);

                if (!renderTarget) return;

                if (textureProperties.__webglTexture !== undefined) {

                    _gl.deleteTexture(textureProperties.__webglTexture);

                }

                if (renderTarget.depthTexture) {

                    renderTarget.depthTexture.dispose();

                }

                if (renderTarget.isWebGLRenderTargetCube) {

                    for (var i = 0; i < 6; i++) {

                        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
                        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);

                    }

                } else {

                    _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
                    if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);

                }

                properties.delete(renderTarget.texture);
                properties.delete(renderTarget);

            }

            //



            function setTexture2D(texture, slot) {

                var textureProperties = properties.get(texture);

                if (texture.version > 0 && textureProperties.__version !== texture.version) {

                    var image = texture.image;

                    if (image === undefined) {

                        console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined', texture);

                    } else if (image.complete === false) {

                        console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture);

                    } else {

                        uploadTexture(textureProperties, texture, slot);
                        return;

                    }

                }

                state.activeTexture(_gl.TEXTURE0 + slot);
                state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);

            }

            function setTextureCube(texture, slot) {

                var textureProperties = properties.get(texture);

                if (texture.image.length === 6) {

                    if (texture.version > 0 && textureProperties.__version !== texture.version) {

                        if (!textureProperties.__image__webglTextureCube) {

                            texture.addEventListener('dispose', onTextureDispose);

                            textureProperties.__image__webglTextureCube = _gl.createTexture();

                            _infoMemory.textures++;

                        }

                        state.activeTexture(_gl.TEXTURE0 + slot);
                        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);

                        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);

                        var isCompressed = (texture && texture.isCompressedTexture);
                        var isDataTexture = (texture.image[0] && texture.image[0].isDataTexture);

                        var cubeImage = [];

                        for (var i = 0; i < 6; i++) {

                            if (!isCompressed && !isDataTexture) {

                                cubeImage[i] = clampToMaxSize(texture.image[i], capabilities.maxCubemapSize);

                            } else {

                                cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];

                            }

                        }

                        var image = cubeImage[0],
                            isPowerOfTwoImage = isPowerOfTwo(image),
                            glFormat = paramThreeToGL(texture.format),
                            glType = paramThreeToGL(texture.type);

                        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage);

                        for (var i = 0; i < 6; i++) {

                            if (!isCompressed) {

                                if (isDataTexture) {

                                    state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);

                                } else {

                                    state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[i]);

                                }

                            } else {

                                var mipmap, mipmaps = cubeImage[i].mipmaps;

                                for (var j = 0, jl = mipmaps.length; j < jl; j++) {

                                    mipmap = mipmaps[j];

                                    if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {

                                        if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {

                                            state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data);

                                        } else {

                                            console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");

                                        }

                                    } else {

                                        state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);

                                    }

                                }

                            }

                        }

                        if (texture.generateMipmaps && isPowerOfTwoImage) {

                            _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);

                        }

                        textureProperties.__version = texture.version;

                        if (texture.onUpdate) texture.onUpdate(texture);

                    } else {

                        state.activeTexture(_gl.TEXTURE0 + slot);
                        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);

                    }

                }

            }

            function setTextureCubeDynamic(texture, slot) {

                state.activeTexture(_gl.TEXTURE0 + slot);
                state.bindTexture(_gl.TEXTURE_CUBE_MAP, properties.get(texture).__webglTexture);

            }

            function setTextureParameters(textureType, texture, isPowerOfTwoImage) {

                var extension;

                if (isPowerOfTwoImage) {

                    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL(texture.wrapS));
                    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL(texture.wrapT));

                    _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL(texture.magFilter));
                    _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL(texture.minFilter));

                } else {

                    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
                    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);

                    if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {

                        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture);

                    }

                    _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));
                    _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));

                    if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {

                        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture);

                    }

                }

                extension = extensions.get('EXT_texture_filter_anisotropic');

                if (extension) {

                    if (texture.type === FloatType && extensions.get('OES_texture_float_linear') === null) return;
                    if (texture.type === HalfFloatType && extensions.get('OES_texture_half_float_linear') === null) return;

                    if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {

                        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
                        properties.get(texture).__currentAnisotropy = texture.anisotropy;

                    }

                }

            }

            function uploadTexture(textureProperties, texture, slot) {

                if (textureProperties.__webglInit === undefined) {

                    textureProperties.__webglInit = true;

                    texture.addEventListener('dispose', onTextureDispose);

                    textureProperties.__webglTexture = _gl.createTexture();

                    _infoMemory.textures++;

                }

                state.activeTexture(_gl.TEXTURE0 + slot);
                state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);

                _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
                _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
                _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);

                var image = clampToMaxSize(texture.image, capabilities.maxTextureSize);

                if (textureNeedsPowerOfTwo(texture) && isPowerOfTwo(image) === false) {

                    image = makePowerOfTwo(image);

                }

                var isPowerOfTwoImage = isPowerOfTwo(image),
                    glFormat = paramThreeToGL(texture.format),
                    glType = paramThreeToGL(texture.type);

                setTextureParameters(_gl.TEXTURE_2D, texture, isPowerOfTwoImage);

                var mipmap, mipmaps = texture.mipmaps;

                if (texture.isDepthTexture) {

                    // populate depth texture with dummy data

                    var internalFormat = _gl.DEPTH_COMPONENT;

                    if (texture.type === FloatType) {

                        if (!_isWebGL2) throw new Error('Float Depth Texture only supported in WebGL2.0');
                        internalFormat = _gl.DEPTH_COMPONENT32F;

                    } else if (_isWebGL2) {

                        // WebGL 2.0 requires signed internalformat for glTexImage2D
                        internalFormat = _gl.DEPTH_COMPONENT16;

                    }

                    if (texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT) {

                        // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                        // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
                        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                        if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {

                            console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');

                            texture.type = UnsignedShortType;
                            glType = paramThreeToGL(texture.type);

                        }

                    }

                    // Depth stencil textures need the DEPTH_STENCIL internal format
                    // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                    if (texture.format === DepthStencilFormat) {

                        internalFormat = _gl.DEPTH_STENCIL;

                        // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                        // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
                        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                        if (texture.type !== UnsignedInt248Type) {

                            console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');

                            texture.type = UnsignedInt248Type;
                            glType = paramThreeToGL(texture.type);

                        }

                    }

                    state.texImage2D(_gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null);

                } else if (texture.isDataTexture) {

                    // use manually created mipmaps if available
                    // if there are no manual mipmaps
                    // set 0 level mipmap and then use GL to generate other mipmap levels

                    if (mipmaps.length > 0 && isPowerOfTwoImage) {

                        for (var i = 0, il = mipmaps.length; i < il; i++) {

                            mipmap = mipmaps[i];
                            state.texImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);

                        }

                        texture.generateMipmaps = false;

                    } else {

                        state.texImage2D(_gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data);

                    }

                } else if (texture.isCompressedTexture) {

                    for (var i = 0, il = mipmaps.length; i < il; i++) {

                        mipmap = mipmaps[i];

                        if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {

                            if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {

                                state.compressedTexImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data);

                            } else {

                                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");

                            }

                        } else {

                            state.texImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);

                        }

                    }

                } else {

                    // regular Texture (image, video, canvas)

                    // use manually created mipmaps if available
                    // if there are no manual mipmaps
                    // set 0 level mipmap and then use GL to generate other mipmap levels

                    if (mipmaps.length > 0 && isPowerOfTwoImage) {

                        for (var i = 0, il = mipmaps.length; i < il; i++) {

                            mipmap = mipmaps[i];
                            state.texImage2D(_gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap);

                        }

                        texture.generateMipmaps = false;

                    } else {

                        state.texImage2D(_gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image);

                    }

                }

                if (texture.generateMipmaps && isPowerOfTwoImage) _gl.generateMipmap(_gl.TEXTURE_2D);

                textureProperties.__version = texture.version;

                if (texture.onUpdate) texture.onUpdate(texture);

            }

            // Render targets

            // Setup storage for target texture and bind it to correct framebuffer
            function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {

                var glFormat = paramThreeToGL(renderTarget.texture.format);
                var glType = paramThreeToGL(renderTarget.texture.type);
                state.texImage2D(textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
                _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
                _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);
                _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);

            }

            // Setup storage for internal depth/stencil buffers and bind to correct framebuffer
            function setupRenderBufferStorage(renderbuffer, renderTarget) {

                _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);

                if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {

                    _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height);
                    _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);

                } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {

                    _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
                    _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);

                } else {

                    // FIXME: We don't support !depth !stencil
                    _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height);

                }

                _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);

            }

            // Setup resources for a Depth Texture for a FBO (needs an extension)
            function setupDepthTexture(framebuffer, renderTarget) {

                var isCube = (renderTarget && renderTarget.isWebGLRenderTargetCube);
                if (isCube) throw new Error('Depth Texture with cube render targets is not supported!');

                _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);

                if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {

                    throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');

                }

                // upload an empty depth texture with framebuffer size
                if (!properties.get(renderTarget.depthTexture).__webglTexture ||
                    renderTarget.depthTexture.image.width !== renderTarget.width ||
                    renderTarget.depthTexture.image.height !== renderTarget.height) {
                    renderTarget.depthTexture.image.width = renderTarget.width;
                    renderTarget.depthTexture.image.height = renderTarget.height;
                    renderTarget.depthTexture.needsUpdate = true;
                }

                setTexture2D(renderTarget.depthTexture, 0);

                var webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;

                if (renderTarget.depthTexture.format === DepthFormat) {

                    _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);

                } else if (renderTarget.depthTexture.format === DepthStencilFormat) {

                    _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);

                } else {

                    throw new Error('Unknown depthTexture format')

                }

            }

            // Setup GL resources for a non-texture depth buffer
            function setupDepthRenderbuffer(renderTarget) {

                var renderTargetProperties = properties.get(renderTarget);

                var isCube = (renderTarget.isWebGLRenderTargetCube === true);

                if (renderTarget.depthTexture) {

                    if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');

                    setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);

                } else {

                    if (isCube) {

                        renderTargetProperties.__webglDepthbuffer = [];

                        for (var i = 0; i < 6; i++) {

                            _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
                            renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
                            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget);

                        }

                    } else {

                        _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
                        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
                        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget);

                    }

                }

                _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);

            }

            // Set up GL resources for the render target
            function setupRenderTarget(renderTarget) {

                var renderTargetProperties = properties.get(renderTarget);
                var textureProperties = properties.get(renderTarget.texture);

                renderTarget.addEventListener('dispose', onRenderTargetDispose);

                textureProperties.__webglTexture = _gl.createTexture();

                _infoMemory.textures++;

                var isCube = (renderTarget.isWebGLRenderTargetCube === true);
                var isTargetPowerOfTwo = isPowerOfTwo(renderTarget);

                // Setup framebuffer

                if (isCube) {

                    renderTargetProperties.__webglFramebuffer = [];

                    for (var i = 0; i < 6; i++) {

                        renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();

                    }

                } else {

                    renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

                }

                // Setup color buffer

                if (isCube) {

                    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
                    setTextureParameters(_gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo);

                    for (var i = 0; i < 6; i++) {

                        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);

                    }

                    if (renderTarget.texture.generateMipmaps && isTargetPowerOfTwo) _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);
                    state.bindTexture(_gl.TEXTURE_CUBE_MAP, null);

                } else {

                    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);
                    setTextureParameters(_gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo);
                    setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);

                    if (renderTarget.texture.generateMipmaps && isTargetPowerOfTwo) _gl.generateMipmap(_gl.TEXTURE_2D);
                    state.bindTexture(_gl.TEXTURE_2D, null);

                }

                // Setup depth and stencil buffers

                if (renderTarget.depthBuffer) {

                    setupDepthRenderbuffer(renderTarget);

                }

            }

            function updateRenderTargetMipmap(renderTarget) {

                var texture = renderTarget.texture;

                if (texture.generateMipmaps && isPowerOfTwo(renderTarget) &&
                    texture.minFilter !== NearestFilter &&
                    texture.minFilter !== LinearFilter) {

                    var target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
                    var webglTexture = properties.get(texture).__webglTexture;

                    state.bindTexture(target, webglTexture);
                    _gl.generateMipmap(target);
                    state.bindTexture(target, null);

                }

            }

            this.setTexture2D = setTexture2D;
            this.setTextureCube = setTextureCube;
            this.setTextureCubeDynamic = setTextureCubeDynamic;
            this.setupRenderTarget = setupRenderTarget;
            this.updateRenderTargetMipmap = updateRenderTargetMipmap;

        }

        /**
         * @author fordacious / fordacious.github.io
         */

        function WebGLProperties() {

            var properties = {};

            return {

                get: function(object) {

                    var uuid = object.uuid;
                    var map = properties[uuid];

                    if (map === undefined) {

                        map = {};
                        properties[uuid] = map;

                    }

                    return map;

                },

                delete: function(object) {

                    delete properties[object.uuid];

                },

                clear: function() {

                    properties = {};

                }

            };

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function WebGLState(gl, extensions, paramThreeToGL) {

            function ColorBuffer() {

                var locked = false;

                var color = new Vector4();
                var currentColorMask = null;
                var currentColorClear = new Vector4();

                return {

                    setMask: function(colorMask) {

                        if (currentColorMask !== colorMask && !locked) {

                            gl.colorMask(colorMask, colorMask, colorMask, colorMask);
                            currentColorMask = colorMask;

                        }

                    },

                    setLocked: function(lock) {

                        locked = lock;

                    },

                    setClear: function(r, g, b, a, premultipliedAlpha) {

                        if (premultipliedAlpha === true) {

                            r *= a;
                            g *= a;
                            b *= a;

                        }

                        color.set(r, g, b, a);

                        if (currentColorClear.equals(color) === false) {

                            gl.clearColor(r, g, b, a);
                            currentColorClear.copy(color);

                        }

                    },

                    reset: function() {

                        locked = false;

                        currentColorMask = null;
                        currentColorClear.set(0, 0, 0, 1);

                    }

                };

            }

            function DepthBuffer() {

                var locked = false;

                var currentDepthMask = null;
                var currentDepthFunc = null;
                var currentDepthClear = null;

                return {

                    setTest: function(depthTest) {

                        if (depthTest) {

                            enable(gl.DEPTH_TEST);

                        } else {

                            disable(gl.DEPTH_TEST);

                        }

                    },

                    setMask: function(depthMask) {

                        if (currentDepthMask !== depthMask && !locked) {

                            gl.depthMask(depthMask);
                            currentDepthMask = depthMask;

                        }

                    },

                    setFunc: function(depthFunc) {

                        if (currentDepthFunc !== depthFunc) {

                            if (depthFunc) {

                                switch (depthFunc) {

                                    case NeverDepth:

                                        gl.depthFunc(gl.NEVER);
                                        break;

                                    case AlwaysDepth:

                                        gl.depthFunc(gl.ALWAYS);
                                        break;

                                    case LessDepth:

                                        gl.depthFunc(gl.LESS);
                                        break;

                                    case LessEqualDepth:

                                        gl.depthFunc(gl.LEQUAL);
                                        break;

                                    case EqualDepth:

                                        gl.depthFunc(gl.EQUAL);
                                        break;

                                    case GreaterEqualDepth:

                                        gl.depthFunc(gl.GEQUAL);
                                        break;

                                    case GreaterDepth:

                                        gl.depthFunc(gl.GREATER);
                                        break;

                                    case NotEqualDepth:

                                        gl.depthFunc(gl.NOTEQUAL);
                                        break;

                                    default:

                                        gl.depthFunc(gl.LEQUAL);

                                }

                            } else {

                                gl.depthFunc(gl.LEQUAL);

                            }

                            currentDepthFunc = depthFunc;

                        }

                    },

                    setLocked: function(lock) {

                        locked = lock;

                    },

                    setClear: function(depth) {

                        if (currentDepthClear !== depth) {

                            gl.clearDepth(depth);
                            currentDepthClear = depth;

                        }

                    },

                    reset: function() {

                        locked = false;

                        currentDepthMask = null;
                        currentDepthFunc = null;
                        currentDepthClear = null;

                    }

                };

            }

            function StencilBuffer() {

                var locked = false;

                var currentStencilMask = null;
                var currentStencilFunc = null;
                var currentStencilRef = null;
                var currentStencilFuncMask = null;
                var currentStencilFail = null;
                var currentStencilZFail = null;
                var currentStencilZPass = null;
                var currentStencilClear = null;

                return {

                    setTest: function(stencilTest) {

                        if (stencilTest) {

                            enable(gl.STENCIL_TEST);

                        } else {

                            disable(gl.STENCIL_TEST);

                        }

                    },

                    setMask: function(stencilMask) {

                        if (currentStencilMask !== stencilMask && !locked) {

                            gl.stencilMask(stencilMask);
                            currentStencilMask = stencilMask;

                        }

                    },

                    setFunc: function(stencilFunc, stencilRef, stencilMask) {

                        if (currentStencilFunc !== stencilFunc ||
                            currentStencilRef !== stencilRef ||
                            currentStencilFuncMask !== stencilMask) {

                            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);

                            currentStencilFunc = stencilFunc;
                            currentStencilRef = stencilRef;
                            currentStencilFuncMask = stencilMask;

                        }

                    },

                    setOp: function(stencilFail, stencilZFail, stencilZPass) {

                        if (currentStencilFail !== stencilFail ||
                            currentStencilZFail !== stencilZFail ||
                            currentStencilZPass !== stencilZPass) {

                            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);

                            currentStencilFail = stencilFail;
                            currentStencilZFail = stencilZFail;
                            currentStencilZPass = stencilZPass;

                        }

                    },

                    setLocked: function(lock) {

                        locked = lock;

                    },

                    setClear: function(stencil) {

                        if (currentStencilClear !== stencil) {

                            gl.clearStencil(stencil);
                            currentStencilClear = stencil;

                        }

                    },

                    reset: function() {

                        locked = false;

                        currentStencilMask = null;
                        currentStencilFunc = null;
                        currentStencilRef = null;
                        currentStencilFuncMask = null;
                        currentStencilFail = null;
                        currentStencilZFail = null;
                        currentStencilZPass = null;
                        currentStencilClear = null;

                    }

                };

            }

            //

            var colorBuffer = new ColorBuffer();
            var depthBuffer = new DepthBuffer();
            var stencilBuffer = new StencilBuffer();

            var maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
            var newAttributes = new Uint8Array(maxVertexAttributes);
            var enabledAttributes = new Uint8Array(maxVertexAttributes);
            var attributeDivisors = new Uint8Array(maxVertexAttributes);

            var capabilities = {};

            var compressedTextureFormats = null;

            var currentBlending = null;
            var currentBlendEquation = null;
            var currentBlendSrc = null;
            var currentBlendDst = null;
            var currentBlendEquationAlpha = null;
            var currentBlendSrcAlpha = null;
            var currentBlendDstAlpha = null;
            var currentPremultipledAlpha = false;

            var currentFlipSided = null;
            var currentCullFace = null;

            var currentLineWidth = null;

            var currentPolygonOffsetFactor = null;
            var currentPolygonOffsetUnits = null;

            var currentScissorTest = null;

            var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);

            var version = parseFloat(/^WebGL\ ([0-9])/.exec(gl.getParameter(gl.VERSION))[1]);
            var lineWidthAvailable = parseFloat(version) >= 1.0;

            var currentTextureSlot = null;
            var currentBoundTextures = {};

            var currentScissor = new Vector4();
            var currentViewport = new Vector4();

            function createTexture(type, target, count) {

                var data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.
                var texture = gl.createTexture();

                gl.bindTexture(type, texture);
                gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

                for (var i = 0; i < count; i++) {

                    gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);

                }

                return texture;

            }

            var emptyTextures = {};
            emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
            emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);

            //

            function init() {

                colorBuffer.setClear(0, 0, 0, 1);
                depthBuffer.setClear(1);
                stencilBuffer.setClear(0);

                enable(gl.DEPTH_TEST);
                setDepthFunc(LessEqualDepth);

                setFlipSided(false);
                setCullFace(CullFaceBack);
                enable(gl.CULL_FACE);

                enable(gl.BLEND);
                setBlending(NormalBlending);

            }

            function initAttributes() {

                for (var i = 0, l = newAttributes.length; i < l; i++) {

                    newAttributes[i] = 0;

                }

            }

            function enableAttribute(attribute) {

                newAttributes[attribute] = 1;

                if (enabledAttributes[attribute] === 0) {

                    gl.enableVertexAttribArray(attribute);
                    enabledAttributes[attribute] = 1;

                }

                if (attributeDivisors[attribute] !== 0) {

                    var extension = extensions.get('ANGLE_instanced_arrays');

                    extension.vertexAttribDivisorANGLE(attribute, 0);
                    attributeDivisors[attribute] = 0;

                }

            }

            function enableAttributeAndDivisor(attribute, meshPerAttribute, extension) {

                newAttributes[attribute] = 1;

                if (enabledAttributes[attribute] === 0) {

                    gl.enableVertexAttribArray(attribute);
                    enabledAttributes[attribute] = 1;

                }

                if (attributeDivisors[attribute] !== meshPerAttribute) {

                    extension.vertexAttribDivisorANGLE(attribute, meshPerAttribute);
                    attributeDivisors[attribute] = meshPerAttribute;

                }

            }

            function disableUnusedAttributes() {

                for (var i = 0, l = enabledAttributes.length; i !== l; ++i) {

                    if (enabledAttributes[i] !== newAttributes[i]) {

                        gl.disableVertexAttribArray(i);
                        enabledAttributes[i] = 0;

                    }

                }

            }

            function enable(id) {

                if (capabilities[id] !== true) {

                    gl.enable(id);
                    capabilities[id] = true;

                }

            }

            function disable(id) {

                if (capabilities[id] !== false) {

                    gl.disable(id);
                    capabilities[id] = false;

                }

            }

            function getCompressedTextureFormats() {

                if (compressedTextureFormats === null) {

                    compressedTextureFormats = [];

                    if (extensions.get('WEBGL_compressed_texture_pvrtc') ||
                        extensions.get('WEBGL_compressed_texture_s3tc') ||
                        extensions.get('WEBGL_compressed_texture_etc1')) {

                        var formats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);

                        for (var i = 0; i < formats.length; i++) {

                            compressedTextureFormats.push(formats[i]);

                        }

                    }

                }

                return compressedTextureFormats;

            }

            function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {

                if (blending !== NoBlending) {

                    enable(gl.BLEND);

                } else {

                    disable(gl.BLEND);

                }

                if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {

                    if (blending === AdditiveBlending) {

                        if (premultipliedAlpha) {

                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                            gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);

                        } else {

                            gl.blendEquation(gl.FUNC_ADD);
                            gl.blendFunc(gl.SRC_ALPHA, gl.ONE);

                        }

                    } else if (blending === SubtractiveBlending) {

                        if (premultipliedAlpha) {

                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                            gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);

                        } else {

                            gl.blendEquation(gl.FUNC_ADD);
                            gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);

                        }

                    } else if (blending === MultiplyBlending) {

                        if (premultipliedAlpha) {

                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                            gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);

                        } else {

                            gl.blendEquation(gl.FUNC_ADD);
                            gl.blendFunc(gl.ZERO, gl.SRC_COLOR);

                        }

                    } else {

                        if (premultipliedAlpha) {

                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                            gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);

                        } else {

                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                            gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);

                        }

                    }

                    currentBlending = blending;
                    currentPremultipledAlpha = premultipliedAlpha;

                }

                if (blending === CustomBlending) {

                    blendEquationAlpha = blendEquationAlpha || blendEquation;
                    blendSrcAlpha = blendSrcAlpha || blendSrc;
                    blendDstAlpha = blendDstAlpha || blendDst;

                    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {

                        gl.blendEquationSeparate(paramThreeToGL(blendEquation), paramThreeToGL(blendEquationAlpha));

                        currentBlendEquation = blendEquation;
                        currentBlendEquationAlpha = blendEquationAlpha;

                    }

                    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {

                        gl.blendFuncSeparate(paramThreeToGL(blendSrc), paramThreeToGL(blendDst), paramThreeToGL(blendSrcAlpha), paramThreeToGL(blendDstAlpha));

                        currentBlendSrc = blendSrc;
                        currentBlendDst = blendDst;
                        currentBlendSrcAlpha = blendSrcAlpha;
                        currentBlendDstAlpha = blendDstAlpha;

                    }

                } else {

                    currentBlendEquation = null;
                    currentBlendSrc = null;
                    currentBlendDst = null;
                    currentBlendEquationAlpha = null;
                    currentBlendSrcAlpha = null;
                    currentBlendDstAlpha = null;

                }

            }

            // TODO Deprecate

            function setColorWrite(colorWrite) {

                colorBuffer.setMask(colorWrite);

            }

            function setDepthTest(depthTest) {

                depthBuffer.setTest(depthTest);

            }

            function setDepthWrite(depthWrite) {

                depthBuffer.setMask(depthWrite);

            }

            function setDepthFunc(depthFunc) {

                depthBuffer.setFunc(depthFunc);

            }

            function setStencilTest(stencilTest) {

                stencilBuffer.setTest(stencilTest);

            }

            function setStencilWrite(stencilWrite) {

                stencilBuffer.setMask(stencilWrite);

            }

            function setStencilFunc(stencilFunc, stencilRef, stencilMask) {

                stencilBuffer.setFunc(stencilFunc, stencilRef, stencilMask);

            }

            function setStencilOp(stencilFail, stencilZFail, stencilZPass) {

                stencilBuffer.setOp(stencilFail, stencilZFail, stencilZPass);

            }

            //

            function setFlipSided(flipSided) {

                if (currentFlipSided !== flipSided) {

                    if (flipSided) {

                        gl.frontFace(gl.CW);

                    } else {

                        gl.frontFace(gl.CCW);

                    }

                    currentFlipSided = flipSided;

                }

            }

            function setCullFace(cullFace) {

                if (cullFace !== CullFaceNone) {

                    enable(gl.CULL_FACE);

                    if (cullFace !== currentCullFace) {

                        if (cullFace === CullFaceBack) {

                            gl.cullFace(gl.BACK);

                        } else if (cullFace === CullFaceFront) {

                            gl.cullFace(gl.FRONT);

                        } else {

                            gl.cullFace(gl.FRONT_AND_BACK);

                        }

                    }

                } else {

                    disable(gl.CULL_FACE);

                }

                currentCullFace = cullFace;

            }

            function setLineWidth(width) {

                if (width !== currentLineWidth) {

                    if (lineWidthAvailable) gl.lineWidth(width);

                    currentLineWidth = width;

                }

            }

            function setPolygonOffset(polygonOffset, factor, units) {

                if (polygonOffset) {

                    enable(gl.POLYGON_OFFSET_FILL);

                    if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {

                        gl.polygonOffset(factor, units);

                        currentPolygonOffsetFactor = factor;
                        currentPolygonOffsetUnits = units;

                    }

                } else {

                    disable(gl.POLYGON_OFFSET_FILL);

                }

            }

            function getScissorTest() {

                return currentScissorTest;

            }

            function setScissorTest(scissorTest) {

                currentScissorTest = scissorTest;

                if (scissorTest) {

                    enable(gl.SCISSOR_TEST);

                } else {

                    disable(gl.SCISSOR_TEST);

                }

            }

            // texture

            function activeTexture(webglSlot) {

                if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;

                if (currentTextureSlot !== webglSlot) {

                    gl.activeTexture(webglSlot);
                    currentTextureSlot = webglSlot;

                }

            }

            function bindTexture(webglType, webglTexture) {

                if (currentTextureSlot === null) {

                    activeTexture();

                }

                var boundTexture = currentBoundTextures[currentTextureSlot];

                if (boundTexture === undefined) {

                    boundTexture = {
                        type: undefined,
                        texture: undefined
                    };
                    currentBoundTextures[currentTextureSlot] = boundTexture;

                }

                if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {

                    gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);

                    boundTexture.type = webglType;
                    boundTexture.texture = webglTexture;

                }

            }

            function compressedTexImage2D() {

                try {

                    gl.compressedTexImage2D.apply(gl, arguments);

                } catch (error) {

                    console.error(error);

                }

            }

            function texImage2D() {

                try {

                    gl.texImage2D.apply(gl, arguments);

                } catch (error) {

                    console.error(error);

                }

            }

            //

            function scissor(scissor) {

                if (currentScissor.equals(scissor) === false) {

                    gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
                    currentScissor.copy(scissor);

                }

            }

            function viewport(viewport) {

                if (currentViewport.equals(viewport) === false) {

                    gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
                    currentViewport.copy(viewport);

                }

            }

            //

            function reset() {

                for (var i = 0; i < enabledAttributes.length; i++) {

                    if (enabledAttributes[i] === 1) {

                        gl.disableVertexAttribArray(i);
                        enabledAttributes[i] = 0;

                    }

                }

                capabilities = {};

                compressedTextureFormats = null;

                currentTextureSlot = null;
                currentBoundTextures = {};

                currentBlending = null;

                currentFlipSided = null;
                currentCullFace = null;

                colorBuffer.reset();
                depthBuffer.reset();
                stencilBuffer.reset();

            }

            return {

                buffers: {
                    color: colorBuffer,
                    depth: depthBuffer,
                    stencil: stencilBuffer
                },

                init: init,
                initAttributes: initAttributes,
                enableAttribute: enableAttribute,
                enableAttributeAndDivisor: enableAttributeAndDivisor,
                disableUnusedAttributes: disableUnusedAttributes,
                enable: enable,
                disable: disable,
                getCompressedTextureFormats: getCompressedTextureFormats,

                setBlending: setBlending,

                setColorWrite: setColorWrite,
                setDepthTest: setDepthTest,
                setDepthWrite: setDepthWrite,
                setDepthFunc: setDepthFunc,
                setStencilTest: setStencilTest,
                setStencilWrite: setStencilWrite,
                setStencilFunc: setStencilFunc,
                setStencilOp: setStencilOp,

                setFlipSided: setFlipSided,
                setCullFace: setCullFace,

                setLineWidth: setLineWidth,
                setPolygonOffset: setPolygonOffset,

                getScissorTest: getScissorTest,
                setScissorTest: setScissorTest,

                activeTexture: activeTexture,
                bindTexture: bindTexture,
                compressedTexImage2D: compressedTexImage2D,
                texImage2D: texImage2D,

                scissor: scissor,
                viewport: viewport,

                reset: reset

            };

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function WebGLCapabilities(gl, extensions, parameters) {

            var maxAnisotropy;

            function getMaxAnisotropy() {

                if (maxAnisotropy !== undefined) return maxAnisotropy;

                var extension = extensions.get('EXT_texture_filter_anisotropic');

                if (extension !== null) {

                    maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);

                } else {

                    maxAnisotropy = 0;

                }

                return maxAnisotropy;

            }

            function getMaxPrecision(precision) {

                if (precision === 'highp') {

                    if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 &&
                        gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {

                        return 'highp';

                    }

                    precision = 'mediump';

                }

                if (precision === 'mediump') {

                    if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 &&
                        gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {

                        return 'mediump';

                    }

                }

                return 'lowp';

            }

            var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
            var maxPrecision = getMaxPrecision(precision);

            if (maxPrecision !== precision) {

                console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');
                precision = maxPrecision;

            }

            var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !!extensions.get('EXT_frag_depth');

            var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            var maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
            var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
            var maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);

            var maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
            var maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
            var maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
            var maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);

            var vertexTextures = maxVertexTextures > 0;
            var floatFragmentTextures = !!extensions.get('OES_texture_float');
            var floatVertexTextures = vertexTextures && floatFragmentTextures;

            return {

                getMaxAnisotropy: getMaxAnisotropy,
                getMaxPrecision: getMaxPrecision,

                precision: precision,
                logarithmicDepthBuffer: logarithmicDepthBuffer,

                maxTextures: maxTextures,
                maxVertexTextures: maxVertexTextures,
                maxTextureSize: maxTextureSize,
                maxCubemapSize: maxCubemapSize,

                maxAttributes: maxAttributes,
                maxVertexUniforms: maxVertexUniforms,
                maxVaryings: maxVaryings,
                maxFragmentUniforms: maxFragmentUniforms,

                vertexTextures: vertexTextures,
                floatFragmentTextures: floatFragmentTextures,
                floatVertexTextures: floatVertexTextures

            };

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function WebGLExtensions(gl) {

            var extensions = {};

            return {

                get: function(name) {

                    if (extensions[name] !== undefined) {

                        return extensions[name];

                    }

                    var extension;

                    switch (name) {

                        case 'WEBGL_depth_texture':
                            extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');
                            break;

                        case 'EXT_texture_filter_anisotropic':
                            extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
                            break;

                        case 'WEBGL_compressed_texture_s3tc':
                            extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
                            break;

                        case 'WEBGL_compressed_texture_pvrtc':
                            extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
                            break;

                        case 'WEBGL_compressed_texture_etc1':
                            extension = gl.getExtension('WEBGL_compressed_texture_etc1');
                            break;

                        default:
                            extension = gl.getExtension(name);

                    }

                    if (extension === null) {

                        console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');

                    }

                    extensions[name] = extension;

                    return extension;

                }

            };

        }

        /**
         * @author tschw
         */

        function WebGLClipping() {

            var scope = this,

                globalState = null,
                numGlobalPlanes = 0,
                localClippingEnabled = false,
                renderingShadows = false,

                plane = new Plane(),
                viewNormalMatrix = new Matrix3(),

                uniform = {
                    value: null,
                    needsUpdate: false
                };

            this.uniform = uniform;
            this.numPlanes = 0;
            this.numIntersection = 0;

            this.init = function(planes, enableLocalClipping, camera) {

                var enabled =
                    planes.length !== 0 ||
                    enableLocalClipping ||
                    // enable state of previous frame - the clipping code has to
                    // run another frame in order to reset the state:
                    numGlobalPlanes !== 0 ||
                    localClippingEnabled;

                localClippingEnabled = enableLocalClipping;

                globalState = projectPlanes(planes, camera, 0);
                numGlobalPlanes = planes.length;

                return enabled;

            };

            this.beginShadows = function() {

                renderingShadows = true;
                projectPlanes(null);

            };

            this.endShadows = function() {

                renderingShadows = false;
                resetGlobalState();

            };

            this.setState = function(planes, clipIntersection, clipShadows, camera, cache, fromCache) {

                if (!localClippingEnabled ||
                    planes === null || planes.length === 0 ||
                    renderingShadows && !clipShadows) {
                    // there's no local clipping

                    if (renderingShadows) {
                        // there's no global clipping

                        projectPlanes(null);

                    } else {

                        resetGlobalState();
                    }

                } else {

                    var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
                        lGlobal = nGlobal * 4,

                        dstArray = cache.clippingState || null;

                    uniform.value = dstArray; // ensure unique state

                    dstArray = projectPlanes(planes, camera, lGlobal, fromCache);

                    for (var i = 0; i !== lGlobal; ++i) {

                        dstArray[i] = globalState[i];

                    }

                    cache.clippingState = dstArray;
                    this.numIntersection = clipIntersection ? this.numPlanes : 0;
                    this.numPlanes += nGlobal;

                }


            };

            function resetGlobalState() {

                if (uniform.value !== globalState) {

                    uniform.value = globalState;
                    uniform.needsUpdate = numGlobalPlanes > 0;

                }

                scope.numPlanes = numGlobalPlanes;
                scope.numIntersection = 0;

            }

            function projectPlanes(planes, camera, dstOffset, skipTransform) {

                var nPlanes = planes !== null ? planes.length : 0,
                    dstArray = null;

                if (nPlanes !== 0) {

                    dstArray = uniform.value;

                    if (skipTransform !== true || dstArray === null) {

                        var flatSize = dstOffset + nPlanes * 4,
                            viewMatrix = camera.matrixWorldInverse;

                        viewNormalMatrix.getNormalMatrix(viewMatrix);

                        if (dstArray === null || dstArray.length < flatSize) {

                            dstArray = new Float32Array(flatSize);

                        }

                        for (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {

                            plane.copy(planes[i]).
                            applyMatrix4(viewMatrix, viewNormalMatrix);

                            plane.normal.toArray(dstArray, i4);
                            dstArray[i4 + 3] = plane.constant;

                        }

                    }

                    uniform.value = dstArray;
                    uniform.needsUpdate = true;

                }

                scope.numPlanes = nPlanes;

                return dstArray;

            }

        }

        /**
         * @author supereggbert / http://www.paulbrunt.co.uk/
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         * @author szimek / https://github.com/szimek/
         * @author tschw
         */

        function WebGLRenderer(parameters) {

            console.log('THREE.WebGLRenderer', REVISION);

            parameters = parameters || {};

            var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas'),
                _context = parameters.context !== undefined ? parameters.context : null,

                _alpha = parameters.alpha !== undefined ? parameters.alpha : false,
                _depth = parameters.depth !== undefined ? parameters.depth : true,
                _stencil = parameters.stencil !== undefined ? parameters.stencil : true,
                _antialias = parameters.antialias !== undefined ? parameters.antialias : false,
                _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
                _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

            var lights = [];

            var opaqueObjects = [];
            var opaqueObjectsLastIndex = -1;
            var transparentObjects = [];
            var transparentObjectsLastIndex = -1;

            var morphInfluences = new Float32Array(8);

            var sprites = [];
            var lensFlares = [];

            // public properties

            this.domElement = _canvas;
            this.context = null;

            // clearing

            this.autoClear = true;
            this.autoClearColor = true;
            this.autoClearDepth = true;
            this.autoClearStencil = true;

            // scene graph

            this.sortObjects = true;

            // user-defined clipping

            this.clippingPlanes = [];
            this.localClippingEnabled = false;

            // physically based shading

            this.gammaFactor = 2.0; // for backwards compatibility
            this.gammaInput = false;
            this.gammaOutput = false;

            // physical lights

            this.physicallyCorrectLights = false;

            // tone mapping

            this.toneMapping = LinearToneMapping;
            this.toneMappingExposure = 1.0;
            this.toneMappingWhitePoint = 1.0;

            // morphs

            this.maxMorphTargets = 8;
            this.maxMorphNormals = 4;

            // internal properties

            var _this = this,

                // internal state cache

                _currentProgram = null,
                _currentRenderTarget = null,
                _currentFramebuffer = null,
                _currentMaterialId = -1,
                _currentGeometryProgram = '',
                _currentCamera = null,

                _currentScissor = new Vector4(),
                _currentScissorTest = null,

                _currentViewport = new Vector4(),

                //

                _usedTextureUnits = 0,

                //

                _clearColor = new Color(0x000000),
                _clearAlpha = 0,

                _width = _canvas.width,
                _height = _canvas.height,

                _pixelRatio = 1,

                _scissor = new Vector4(0, 0, _width, _height),
                _scissorTest = false,

                _viewport = new Vector4(0, 0, _width, _height),

                // frustum

                _frustum = new Frustum(),

                // clipping

                _clipping = new WebGLClipping(),
                _clippingEnabled = false,
                _localClippingEnabled = false,

                _sphere = new Sphere(),

                // camera matrices cache

                _projScreenMatrix = new Matrix4(),

                _vector3 = new Vector3(),
                _matrix4 = new Matrix4(),
                _matrix42 = new Matrix4(),

                // light arrays cache

                _lights = {

                    hash: '',

                    ambient: [0, 0, 0],
                    directional: [],
                    directionalShadowMap: [],
                    directionalShadowMatrix: [],
                    spot: [],
                    spotShadowMap: [],
                    spotShadowMatrix: [],
                    rectArea: [],
                    point: [],
                    pointShadowMap: [],
                    pointShadowMatrix: [],
                    hemi: [],

                    shadows: []

                },

                // info

                _infoRender = {

                    calls: 0,
                    vertices: 0,
                    faces: 0,
                    points: 0

                };

            this.info = {

                render: _infoRender,
                memory: {

                    geometries: 0,
                    textures: 0

                },
                programs: null

            };


            // initialize

            var _gl;

            try {

                var attributes = {
                    alpha: _alpha,
                    depth: _depth,
                    stencil: _stencil,
                    antialias: _antialias,
                    premultipliedAlpha: _premultipliedAlpha,
                    preserveDrawingBuffer: _preserveDrawingBuffer
                };

                _gl = _context || _canvas.getContext('webgl', attributes) || _canvas.getContext('experimental-webgl', attributes);

                if (_gl === null) {

                    if (_canvas.getContext('webgl') !== null) {

                        throw 'Error creating WebGL context with your selected attributes.';

                    } else {

                        throw 'Error creating WebGL context.';

                    }

                }

                // Some experimental-webgl implementations do not have getShaderPrecisionFormat

                if (_gl.getShaderPrecisionFormat === undefined) {

                    _gl.getShaderPrecisionFormat = function() {

                        return {
                            'rangeMin': 1,
                            'rangeMax': 1,
                            'precision': 1
                        };

                    };

                }

                _canvas.addEventListener('webglcontextlost', onContextLost, false);

            } catch (error) {

                console.error('THREE.WebGLRenderer: ' + error);

            }

            var extensions = new WebGLExtensions(_gl);

            extensions.get('WEBGL_depth_texture');
            extensions.get('OES_texture_float');
            extensions.get('OES_texture_float_linear');
            extensions.get('OES_texture_half_float');
            extensions.get('OES_texture_half_float_linear');
            extensions.get('OES_standard_derivatives');
            extensions.get('ANGLE_instanced_arrays');

            if (extensions.get('OES_element_index_uint')) {

                BufferGeometry.MaxIndex = 4294967296;

            }

            var capabilities = new WebGLCapabilities(_gl, extensions, parameters);

            var state = new WebGLState(_gl, extensions, paramThreeToGL);
            var properties = new WebGLProperties();
            var textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, paramThreeToGL, this.info);
            var objects = new WebGLObjects(_gl, properties, this.info);
            var programCache = new WebGLPrograms(this, capabilities);
            var lightCache = new WebGLLights();

            this.info.programs = programCache.programs;

            var bufferRenderer = new WebGLBufferRenderer(_gl, extensions, _infoRender);
            var indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, _infoRender);

            //

            var backgroundPlaneCamera, backgroundPlaneMesh;
            var backgroundBoxCamera, backgroundBoxMesh;

            //

            function getTargetPixelRatio() {

                return _currentRenderTarget === null ? _pixelRatio : 1;

            }

            function setDefaultGLState() {

                state.init();

                state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));
                state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));

                state.buffers.color.setClear(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha, _premultipliedAlpha);

            }

            function resetGLState() {

                _currentProgram = null;
                _currentCamera = null;

                _currentGeometryProgram = '';
                _currentMaterialId = -1;

                state.reset();

            }

            setDefaultGLState();

            this.context = _gl;
            this.capabilities = capabilities;
            this.extensions = extensions;
            this.properties = properties;
            this.state = state;

            // shadow map

            var shadowMap = new WebGLShadowMap(this, _lights, objects, capabilities);

            this.shadowMap = shadowMap;


            // Plugins

            var spritePlugin = new SpritePlugin(this, sprites);
            var lensFlarePlugin = new LensFlarePlugin(this, lensFlares);

            // API

            this.getContext = function() {

                return _gl;

            };

            this.getContextAttributes = function() {

                return _gl.getContextAttributes();

            };

            this.forceContextLoss = function() {

                extensions.get('WEBGL_lose_context').loseContext();

            };

            this.getMaxAnisotropy = function() {

                return capabilities.getMaxAnisotropy();

            };

            this.getPrecision = function() {

                return capabilities.precision;

            };

            this.getPixelRatio = function() {

                return _pixelRatio;

            };

            this.setPixelRatio = function(value) {

                if (value === undefined) return;

                _pixelRatio = value;

                this.setSize(_viewport.z, _viewport.w, false);

            };

            this.getSize = function() {

                return {
                    width: _width,
                    height: _height
                };

            };

            this.setSize = function(width, height, updateStyle) {

                _width = width;
                _height = height;

                _canvas.width = width * _pixelRatio;
                _canvas.height = height * _pixelRatio;

                if (updateStyle !== false) {

                    _canvas.style.width = width + 'px';
                    _canvas.style.height = height + 'px';

                }

                this.setViewport(0, 0, width, height);

            };

            this.setViewport = function(x, y, width, height) {

                state.viewport(_viewport.set(x, y, width, height));

            };

            this.setScissor = function(x, y, width, height) {

                state.scissor(_scissor.set(x, y, width, height));

            };

            this.setScissorTest = function(boolean) {

                state.setScissorTest(_scissorTest = boolean);

            };

            // Clearing

            this.getClearColor = function() {

                return _clearColor;

            };

            this.setClearColor = function(color, alpha) {

                _clearColor.set(color);

                _clearAlpha = alpha !== undefined ? alpha : 1;

                state.buffers.color.setClear(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha, _premultipliedAlpha);

            };

            this.getClearAlpha = function() {

                return _clearAlpha;

            };

            this.setClearAlpha = function(alpha) {

                _clearAlpha = alpha;

                state.buffers.color.setClear(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha, _premultipliedAlpha);

            };

            this.clear = function(color, depth, stencil) {

                var bits = 0;

                if (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;
                if (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;
                if (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;

                _gl.clear(bits);

            };

            this.clearColor = function() {

                this.clear(true, false, false);

            };

            this.clearDepth = function() {

                this.clear(false, true, false);

            };

            this.clearStencil = function() {

                this.clear(false, false, true);

            };

            this.clearTarget = function(renderTarget, color, depth, stencil) {

                this.setRenderTarget(renderTarget);
                this.clear(color, depth, stencil);

            };

            // Reset

            this.resetGLState = resetGLState;

            this.dispose = function() {

                transparentObjects = [];
                transparentObjectsLastIndex = -1;
                opaqueObjects = [];
                opaqueObjectsLastIndex = -1;

                _canvas.removeEventListener('webglcontextlost', onContextLost, false);

            };

            // Events

            function onContextLost(event) {

                event.preventDefault();

                resetGLState();
                setDefaultGLState();

                properties.clear();

            }

            function onMaterialDispose(event) {

                var material = event.target;

                material.removeEventListener('dispose', onMaterialDispose);

                deallocateMaterial(material);

            }

            // Buffer deallocation

            function deallocateMaterial(material) {

                releaseMaterialProgramReference(material);

                properties.delete(material);

            }


            function releaseMaterialProgramReference(material) {

                var programInfo = properties.get(material).program;

                material.program = undefined;

                if (programInfo !== undefined) {

                    programCache.releaseProgram(programInfo);

                }

            }

            // Buffer rendering

            this.renderBufferImmediate = function(object, program, material) {

                state.initAttributes();

                var buffers = properties.get(object);

                if (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();
                if (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();
                if (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();
                if (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();

                var attributes = program.getAttributes();

                if (object.hasPositions) {

                    _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);
                    _gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);

                    state.enableAttribute(attributes.position);
                    _gl.vertexAttribPointer(attributes.position, 3, _gl.FLOAT, false, 0, 0);

                }

                if (object.hasNormals) {

                    _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);

                    if (!material.isMeshPhongMaterial &&
                        !material.isMeshStandardMaterial &&
                        !material.isMeshNormalMaterial &&
                        material.shading === FlatShading) {

                        for (var i = 0, l = object.count * 3; i < l; i += 9) {

                            var array = object.normalArray;

                            var nx = (array[i + 0] + array[i + 3] + array[i + 6]) / 3;
                            var ny = (array[i + 1] + array[i + 4] + array[i + 7]) / 3;
                            var nz = (array[i + 2] + array[i + 5] + array[i + 8]) / 3;

                            array[i + 0] = nx;
                            array[i + 1] = ny;
                            array[i + 2] = nz;

                            array[i + 3] = nx;
                            array[i + 4] = ny;
                            array[i + 5] = nz;

                            array[i + 6] = nx;
                            array[i + 7] = ny;
                            array[i + 8] = nz;

                        }

                    }

                    _gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);

                    state.enableAttribute(attributes.normal);

                    _gl.vertexAttribPointer(attributes.normal, 3, _gl.FLOAT, false, 0, 0);

                }

                if (object.hasUvs && material.map) {

                    _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);
                    _gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);

                    state.enableAttribute(attributes.uv);

                    _gl.vertexAttribPointer(attributes.uv, 2, _gl.FLOAT, false, 0, 0);

                }

                if (object.hasColors && material.vertexColors !== NoColors) {

                    _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);
                    _gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);

                    state.enableAttribute(attributes.color);

                    _gl.vertexAttribPointer(attributes.color, 3, _gl.FLOAT, false, 0, 0);

                }

                state.disableUnusedAttributes();

                _gl.drawArrays(_gl.TRIANGLES, 0, object.count);

                object.count = 0;

            };

            this.renderBufferDirect = function(camera, fog, geometry, material, object, group) {

                setMaterial(material);

                var program = setProgram(camera, fog, material, object);

                var updateBuffers = false;
                var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;

                if (geometryProgram !== _currentGeometryProgram) {

                    _currentGeometryProgram = geometryProgram;
                    updateBuffers = true;

                }

                // morph targets

                var morphTargetInfluences = object.morphTargetInfluences;

                if (morphTargetInfluences !== undefined) {

                    var activeInfluences = [];

                    for (var i = 0, l = morphTargetInfluences.length; i < l; i++) {

                        var influence = morphTargetInfluences[i];
                        activeInfluences.push([influence, i]);

                    }

                    activeInfluences.sort(absNumericalSort);

                    if (activeInfluences.length > 8) {

                        activeInfluences.length = 8;

                    }

                    var morphAttributes = geometry.morphAttributes;

                    for (var i = 0, l = activeInfluences.length; i < l; i++) {

                        var influence = activeInfluences[i];
                        morphInfluences[i] = influence[0];

                        if (influence[0] !== 0) {

                            var index = influence[1];

                            if (material.morphTargets === true && morphAttributes.position) geometry.addAttribute('morphTarget' + i, morphAttributes.position[index]);
                            if (material.morphNormals === true && morphAttributes.normal) geometry.addAttribute('morphNormal' + i, morphAttributes.normal[index]);

                        } else {

                            if (material.morphTargets === true) geometry.removeAttribute('morphTarget' + i);
                            if (material.morphNormals === true) geometry.removeAttribute('morphNormal' + i);

                        }

                    }

                    for (var i = activeInfluences.length, il = morphInfluences.length; i < il; i++) {

                        morphInfluences[i] = 0.0;

                    }

                    program.getUniforms().setValue(
                        _gl, 'morphTargetInfluences', morphInfluences);

                    updateBuffers = true;

                }

                //

                var index = geometry.index;
                var position = geometry.attributes.position;
                var rangeFactor = 1;

                if (material.wireframe === true) {

                    index = objects.getWireframeAttribute(geometry);
                    rangeFactor = 2;

                }

                var renderer;

                if (index !== null) {

                    renderer = indexedBufferRenderer;
                    renderer.setIndex(index);

                } else {

                    renderer = bufferRenderer;

                }

                if (updateBuffers) {

                    setupVertexAttributes(material, program, geometry);

                    if (index !== null) {

                        _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer(index));

                    }

                }

                //

                var dataCount = 0;

                if (index !== null) {

                    dataCount = index.count;

                } else if (position !== undefined) {

                    dataCount = position.count;

                }

                var rangeStart = geometry.drawRange.start * rangeFactor;
                var rangeCount = geometry.drawRange.count * rangeFactor;

                var groupStart = group !== null ? group.start * rangeFactor : 0;
                var groupCount = group !== null ? group.count * rangeFactor : Infinity;

                var drawStart = Math.max(rangeStart, groupStart);
                var drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;

                var drawCount = Math.max(0, drawEnd - drawStart + 1);

                if (drawCount === 0) return;

                //

                if (object.isMesh) {

                    if (material.wireframe === true) {

                        state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
                        renderer.setMode(_gl.LINES);

                    } else {

                        switch (object.drawMode) {

                            case TrianglesDrawMode:
                                renderer.setMode(_gl.TRIANGLES);
                                break;

                            case TriangleStripDrawMode:
                                renderer.setMode(_gl.TRIANGLE_STRIP);
                                break;

                            case TriangleFanDrawMode:
                                renderer.setMode(_gl.TRIANGLE_FAN);
                                break;

                        }

                    }


                } else if (object.isLine) {

                    var lineWidth = material.linewidth;

                    if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material

                    state.setLineWidth(lineWidth * getTargetPixelRatio());

                    if (object.isLineSegments) {

                        renderer.setMode(_gl.LINES);

                    } else {

                        renderer.setMode(_gl.LINE_STRIP);

                    }

                } else if (object.isPoints) {

                    renderer.setMode(_gl.POINTS);

                }

                if (geometry && geometry.isInstancedBufferGeometry) {

                    if (geometry.maxInstancedCount > 0) {

                        renderer.renderInstances(geometry, drawStart, drawCount);

                    }

                } else {

                    renderer.render(drawStart, drawCount);

                }

            };

            function setupVertexAttributes(material, program, geometry, startIndex) {

                var extension;

                if (geometry && geometry.isInstancedBufferGeometry) {

                    extension = extensions.get('ANGLE_instanced_arrays');

                    if (extension === null) {

                        console.error('THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
                        return;

                    }

                }

                if (startIndex === undefined) startIndex = 0;

                state.initAttributes();

                var geometryAttributes = geometry.attributes;

                var programAttributes = program.getAttributes();

                var materialDefaultAttributeValues = material.defaultAttributeValues;

                for (var name in programAttributes) {

                    var programAttribute = programAttributes[name];

                    if (programAttribute >= 0) {

                        var geometryAttribute = geometryAttributes[name];

                        if (geometryAttribute !== undefined) {

                            var normalized = geometryAttribute.normalized;
                            var size = geometryAttribute.itemSize;

                            var attributeProperties = objects.getAttributeProperties(geometryAttribute);

                            var buffer = attributeProperties.__webglBuffer;
                            var type = attributeProperties.type;
                            var bytesPerElement = attributeProperties.bytesPerElement;

                            if (geometryAttribute.isInterleavedBufferAttribute) {

                                var data = geometryAttribute.data;
                                var stride = data.stride;
                                var offset = geometryAttribute.offset;

                                if (data && data.isInstancedInterleavedBuffer) {

                                    state.enableAttributeAndDivisor(programAttribute, data.meshPerAttribute, extension);

                                    if (geometry.maxInstancedCount === undefined) {

                                        geometry.maxInstancedCount = data.meshPerAttribute * data.count;

                                    }

                                } else {

                                    state.enableAttribute(programAttribute);

                                }

                                _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
                                _gl.vertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, (startIndex * stride + offset) * bytesPerElement);

                            } else {

                                if (geometryAttribute.isInstancedBufferAttribute) {

                                    state.enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute, extension);

                                    if (geometry.maxInstancedCount === undefined) {

                                        geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

                                    }

                                } else {

                                    state.enableAttribute(programAttribute);

                                }

                                _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
                                _gl.vertexAttribPointer(programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement);

                            }

                        } else if (materialDefaultAttributeValues !== undefined) {

                            var value = materialDefaultAttributeValues[name];

                            if (value !== undefined) {

                                switch (value.length) {

                                    case 2:
                                        _gl.vertexAttrib2fv(programAttribute, value);
                                        break;

                                    case 3:
                                        _gl.vertexAttrib3fv(programAttribute, value);
                                        break;

                                    case 4:
                                        _gl.vertexAttrib4fv(programAttribute, value);
                                        break;

                                    default:
                                        _gl.vertexAttrib1fv(programAttribute, value);

                                }

                            }

                        }

                    }

                }

                state.disableUnusedAttributes();

            }

            // Sorting

            function absNumericalSort(a, b) {

                return Math.abs(b[0]) - Math.abs(a[0]);

            }

            function painterSortStable(a, b) {

                if (a.object.renderOrder !== b.object.renderOrder) {

                    return a.object.renderOrder - b.object.renderOrder;

                } else if (a.material.program && b.material.program && a.material.program !== b.material.program) {

                    return a.material.program.id - b.material.program.id;

                } else if (a.material.id !== b.material.id) {

                    return a.material.id - b.material.id;

                } else if (a.z !== b.z) {

                    return a.z - b.z;

                } else {

                    return a.id - b.id;

                }

            }

            function reversePainterSortStable(a, b) {

                if (a.object.renderOrder !== b.object.renderOrder) {

                    return a.object.renderOrder - b.object.renderOrder;

                }
                if (a.z !== b.z) {

                    return b.z - a.z;

                } else {

                    return a.id - b.id;

                }

            }

            // Rendering

            this.render = function(scene, camera, renderTarget, forceClear) {

                if (camera !== undefined && camera.isCamera !== true) {

                    console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
                    return;

                }

                // reset caching for this frame

                _currentGeometryProgram = '';
                _currentMaterialId = -1;
                _currentCamera = null;

                // update scene graph

                if (scene.autoUpdate === true) scene.updateMatrixWorld();

                // update camera matrices and frustum

                if (camera.parent === null) camera.updateMatrixWorld();

                camera.matrixWorldInverse.getInverse(camera.matrixWorld);

                _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
                _frustum.setFromMatrix(_projScreenMatrix);

                lights.length = 0;

                opaqueObjectsLastIndex = -1;
                transparentObjectsLastIndex = -1;

                sprites.length = 0;
                lensFlares.length = 0;

                _localClippingEnabled = this.localClippingEnabled;
                _clippingEnabled = _clipping.init(this.clippingPlanes, _localClippingEnabled, camera);

                projectObject(scene, camera);

                opaqueObjects.length = opaqueObjectsLastIndex + 1;
                transparentObjects.length = transparentObjectsLastIndex + 1;

                if (_this.sortObjects === true) {

                    opaqueObjects.sort(painterSortStable);
                    transparentObjects.sort(reversePainterSortStable);

                }

                //

                if (_clippingEnabled) _clipping.beginShadows();

                setupShadows(lights);

                shadowMap.render(scene, camera);

                setupLights(lights, camera);

                if (_clippingEnabled) _clipping.endShadows();

                //

                _infoRender.calls = 0;
                _infoRender.vertices = 0;
                _infoRender.faces = 0;
                _infoRender.points = 0;

                if (renderTarget === undefined) {

                    renderTarget = null;

                }

                this.setRenderTarget(renderTarget);

                //

                var background = scene.background;

                if (background === null) {

                    state.buffers.color.setClear(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha, _premultipliedAlpha);

                } else if (background && background.isColor) {

                    state.buffers.color.setClear(background.r, background.g, background.b, 1, _premultipliedAlpha);
                    forceClear = true;

                }

                if (this.autoClear || forceClear) {

                    this.clear(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);

                }

                if (background && background.isCubeTexture) {

                    if (backgroundBoxCamera === undefined) {

                        backgroundBoxCamera = new PerspectiveCamera();

                        backgroundBoxMesh = new Mesh(
                            new BoxBufferGeometry(5, 5, 5),
                            new ShaderMaterial({
                                uniforms: ShaderLib.cube.uniforms,
                                vertexShader: ShaderLib.cube.vertexShader,
                                fragmentShader: ShaderLib.cube.fragmentShader,
                                side: BackSide,
                                depthTest: false,
                                depthWrite: false,
                                fog: false
                            })
                        );

                    }

                    backgroundBoxCamera.projectionMatrix.copy(camera.projectionMatrix);

                    backgroundBoxCamera.matrixWorld.extractRotation(camera.matrixWorld);
                    backgroundBoxCamera.matrixWorldInverse.getInverse(backgroundBoxCamera.matrixWorld);


                    backgroundBoxMesh.material.uniforms["tCube"].value = background;
                    backgroundBoxMesh.modelViewMatrix.multiplyMatrices(backgroundBoxCamera.matrixWorldInverse, backgroundBoxMesh.matrixWorld);

                    objects.update(backgroundBoxMesh);

                    _this.renderBufferDirect(backgroundBoxCamera, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null);

                } else if (background && background.isTexture) {

                    if (backgroundPlaneCamera === undefined) {

                        backgroundPlaneCamera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);

                        backgroundPlaneMesh = new Mesh(
                            new PlaneBufferGeometry(2, 2),
                            new MeshBasicMaterial({
                                depthTest: false,
                                depthWrite: false,
                                fog: false
                            })
                        );

                    }

                    backgroundPlaneMesh.material.map = background;

                    objects.update(backgroundPlaneMesh);

                    _this.renderBufferDirect(backgroundPlaneCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null);

                }

                //

                if (scene.overrideMaterial) {

                    var overrideMaterial = scene.overrideMaterial;

                    renderObjects(opaqueObjects, scene, camera, overrideMaterial);
                    renderObjects(transparentObjects, scene, camera, overrideMaterial);

                } else {

                    // opaque pass (front-to-back order)

                    state.setBlending(NoBlending);
                    renderObjects(opaqueObjects, scene, camera);

                    // transparent pass (back-to-front order)

                    renderObjects(transparentObjects, scene, camera);

                }

                // custom render plugins (post pass)

                spritePlugin.render(scene, camera);
                lensFlarePlugin.render(scene, camera, _currentViewport);

                // Generate mipmap if we're using any kind of mipmap filtering

                if (renderTarget) {

                    textures.updateRenderTargetMipmap(renderTarget);

                }

                // Ensure depth buffer writing is enabled so it can be cleared on next render

                state.setDepthTest(true);
                state.setDepthWrite(true);
                state.setColorWrite(true);

                // _gl.finish();

            };

            function pushRenderItem(object, geometry, material, z, group) {

                var array, index;

                // allocate the next position in the appropriate array

                if (material.transparent) {

                    array = transparentObjects;
                    index = ++transparentObjectsLastIndex;

                } else {

                    array = opaqueObjects;
                    index = ++opaqueObjectsLastIndex;

                }

                // recycle existing render item or grow the array

                var renderItem = array[index];

                if (renderItem !== undefined) {

                    renderItem.id = object.id;
                    renderItem.object = object;
                    renderItem.geometry = geometry;
                    renderItem.material = material;
                    renderItem.z = _vector3.z;
                    renderItem.group = group;

                } else {

                    renderItem = {
                        id: object.id,
                        object: object,
                        geometry: geometry,
                        material: material,
                        z: _vector3.z,
                        group: group
                    };

                    // assert( index === array.length );
                    array.push(renderItem);

                }

            }

            // TODO Duplicated code (Frustum)

            function isObjectViewable(object) {

                var geometry = object.geometry;

                if (geometry.boundingSphere === null)
                    geometry.computeBoundingSphere();

                _sphere.copy(geometry.boundingSphere).
                applyMatrix4(object.matrixWorld);

                return isSphereViewable(_sphere);

            }

            function isSpriteViewable(sprite) {

                _sphere.center.set(0, 0, 0);
                _sphere.radius = 0.7071067811865476;
                _sphere.applyMatrix4(sprite.matrixWorld);

                return isSphereViewable(_sphere);

            }

            function isSphereViewable(sphere) {

                if (!_frustum.intersectsSphere(sphere)) return false;

                var numPlanes = _clipping.numPlanes;

                if (numPlanes === 0) return true;

                var planes = _this.clippingPlanes,

                    center = sphere.center,
                    negRad = -sphere.radius,
                    i = 0;

                do {

                    // out when deeper than radius in the negative halfspace
                    if (planes[i].distanceToPoint(center) < negRad) return false;

                } while (++i !== numPlanes);

                return true;

            }

            function projectObject(object, camera) {

                if (object.visible === false) return;

                var visible = (object.layers.mask & camera.layers.mask) !== 0;

                if (visible) {

                    if (object.isLight) {

                        lights.push(object);

                    } else if (object.isSprite) {

                        if (object.frustumCulled === false || isSpriteViewable(object) === true) {

                            sprites.push(object);

                        }

                    } else if (object.isLensFlare) {

                        lensFlares.push(object);

                    } else if (object.isImmediateRenderObject) {

                        if (_this.sortObjects === true) {

                            _vector3.setFromMatrixPosition(object.matrixWorld);
                            _vector3.applyMatrix4(_projScreenMatrix);

                        }

                        pushRenderItem(object, null, object.material, _vector3.z, null);

                    } else if (object.isMesh || object.isLine || object.isPoints) {

                        if (object.isSkinnedMesh) {

                            object.skeleton.update();

                        }

                        if (object.frustumCulled === false || isObjectViewable(object) === true) {

                            var material = object.material;

                            if (material.visible === true) {

                                if (_this.sortObjects === true) {

                                    _vector3.setFromMatrixPosition(object.matrixWorld);
                                    _vector3.applyMatrix4(_projScreenMatrix);

                                }

                                var geometry = objects.update(object);

                                if (material.isMultiMaterial) {

                                    var groups = geometry.groups;
                                    var materials = material.materials;

                                    for (var i = 0, l = groups.length; i < l; i++) {

                                        var group = groups[i];
                                        var groupMaterial = materials[group.materialIndex];

                                        if (groupMaterial.visible === true) {

                                            pushRenderItem(object, geometry, groupMaterial, _vector3.z, group);

                                        }

                                    }

                                } else {

                                    pushRenderItem(object, geometry, material, _vector3.z, null);

                                }

                            }

                        }

                    }

                }

                var children = object.children;

                for (var i = 0, l = children.length; i < l; i++) {

                    projectObject(children[i], camera);

                }

            }

            function renderObjects(renderList, scene, camera, overrideMaterial) {

                for (var i = 0, l = renderList.length; i < l; i++) {

                    var renderItem = renderList[i];

                    var object = renderItem.object;
                    var geometry = renderItem.geometry;
                    var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
                    var group = renderItem.group;

                    object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
                    object.normalMatrix.getNormalMatrix(object.modelViewMatrix);

                    object.onBeforeRender(_this, scene, camera, geometry, material, group);

                    if (object.isImmediateRenderObject) {

                        setMaterial(material);

                        var program = setProgram(camera, scene.fog, material, object);

                        _currentGeometryProgram = '';

                        object.render(function(object) {

                            _this.renderBufferImmediate(object, program, material);

                        });

                    } else {

                        _this.renderBufferDirect(camera, scene.fog, geometry, material, object, group);

                    }

                    object.onAfterRender(_this, scene, camera, geometry, material, group);


                }

            }

            function initMaterial(material, fog, object) {

                var materialProperties = properties.get(material);

                var parameters = programCache.getParameters(
                    material, _lights, fog, _clipping.numPlanes, _clipping.numIntersection, object);

                var code = programCache.getProgramCode(material, parameters);

                var program = materialProperties.program;
                var programChange = true;

                if (program === undefined) {

                    // new material
                    material.addEventListener('dispose', onMaterialDispose);

                } else if (program.code !== code) {

                    // changed glsl or parameters
                    releaseMaterialProgramReference(material);

                } else if (parameters.shaderID !== undefined) {

                    // same glsl and uniform list
                    return;

                } else {

                    // only rebuild uniform list
                    programChange = false;

                }

                if (programChange) {

                    if (parameters.shaderID) {

                        var shader = ShaderLib[parameters.shaderID];

                        materialProperties.__webglShader = {
                            name: material.type,
                            uniforms: UniformsUtils.clone(shader.uniforms),
                            vertexShader: shader.vertexShader,
                            fragmentShader: shader.fragmentShader
                        };

                    } else {

                        materialProperties.__webglShader = {
                            name: material.type,
                            uniforms: material.uniforms,
                            vertexShader: material.vertexShader,
                            fragmentShader: material.fragmentShader
                        };

                    }

                    material.__webglShader = materialProperties.__webglShader;

                    program = programCache.acquireProgram(material, parameters, code);

                    materialProperties.program = program;
                    material.program = program;

                }

                var attributes = program.getAttributes();

                if (material.morphTargets) {

                    material.numSupportedMorphTargets = 0;

                    for (var i = 0; i < _this.maxMorphTargets; i++) {

                        if (attributes['morphTarget' + i] >= 0) {

                            material.numSupportedMorphTargets++;

                        }

                    }

                }

                if (material.morphNormals) {

                    material.numSupportedMorphNormals = 0;

                    for (var i = 0; i < _this.maxMorphNormals; i++) {

                        if (attributes['morphNormal' + i] >= 0) {

                            material.numSupportedMorphNormals++;

                        }

                    }

                }

                var uniforms = materialProperties.__webglShader.uniforms;

                if (!material.isShaderMaterial &&
                    !material.isRawShaderMaterial ||
                    material.clipping === true) {

                    materialProperties.numClippingPlanes = _clipping.numPlanes;
                    materialProperties.numIntersection = _clipping.numIntersection;
                    uniforms.clippingPlanes = _clipping.uniform;

                }

                materialProperties.fog = fog;

                // store the light setup it was created for

                materialProperties.lightsHash = _lights.hash;

                if (material.lights) {

                    // wire up the material to this renderer's lighting state

                    uniforms.ambientLightColor.value = _lights.ambient;
                    uniforms.directionalLights.value = _lights.directional;
                    uniforms.spotLights.value = _lights.spot;
                    uniforms.rectAreaLights.value = _lights.rectArea;
                    uniforms.pointLights.value = _lights.point;
                    uniforms.hemisphereLights.value = _lights.hemi;

                    uniforms.directionalShadowMap.value = _lights.directionalShadowMap;
                    uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;
                    uniforms.spotShadowMap.value = _lights.spotShadowMap;
                    uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;
                    uniforms.pointShadowMap.value = _lights.pointShadowMap;
                    uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;
                    // TODO (abelnation): add area lights shadow info to uniforms

                }

                var progUniforms = materialProperties.program.getUniforms(),
                    uniformsList =
                    WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);

                materialProperties.uniformsList = uniformsList;

            }

            function setMaterial(material) {

                material.side === DoubleSide ?
                    state.disable(_gl.CULL_FACE) :
                    state.enable(_gl.CULL_FACE);

                state.setFlipSided(material.side === BackSide);

                material.transparent === true ?
                    state.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha) :
                    state.setBlending(NoBlending);

                state.setDepthFunc(material.depthFunc);
                state.setDepthTest(material.depthTest);
                state.setDepthWrite(material.depthWrite);
                state.setColorWrite(material.colorWrite);
                state.setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);

            }

            function setProgram(camera, fog, material, object) {

                _usedTextureUnits = 0;

                var materialProperties = properties.get(material);

                if (_clippingEnabled) {

                    if (_localClippingEnabled || camera !== _currentCamera) {

                        var useCache =
                            camera === _currentCamera &&
                            material.id === _currentMaterialId;

                        // we might want to call this function with some ClippingGroup
                        // object instead of the material, once it becomes feasible
                        // (#8465, #8379)
                        _clipping.setState(
                            material.clippingPlanes, material.clipIntersection, material.clipShadows,
                            camera, materialProperties, useCache);

                    }

                }

                if (material.needsUpdate === false) {

                    if (materialProperties.program === undefined) {

                        material.needsUpdate = true;

                    } else if (material.fog && materialProperties.fog !== fog) {

                        material.needsUpdate = true;

                    } else if (material.lights && materialProperties.lightsHash !== _lights.hash) {

                        material.needsUpdate = true;

                    } else if (materialProperties.numClippingPlanes !== undefined &&
                        (materialProperties.numClippingPlanes !== _clipping.numPlanes ||
                            materialProperties.numIntersection !== _clipping.numIntersection)) {

                        material.needsUpdate = true;

                    }

                }

                if (material.needsUpdate) {

                    initMaterial(material, fog, object);
                    material.needsUpdate = false;

                }

                var refreshProgram = false;
                var refreshMaterial = false;
                var refreshLights = false;

                var program = materialProperties.program,
                    p_uniforms = program.getUniforms(),
                    m_uniforms = materialProperties.__webglShader.uniforms;

                if (program.id !== _currentProgram) {

                    _gl.useProgram(program.program);
                    _currentProgram = program.id;

                    refreshProgram = true;
                    refreshMaterial = true;
                    refreshLights = true;

                }

                if (material.id !== _currentMaterialId) {

                    _currentMaterialId = material.id;

                    refreshMaterial = true;

                }

                if (refreshProgram || camera !== _currentCamera) {

                    p_uniforms.set(_gl, camera, 'projectionMatrix');

                    if (capabilities.logarithmicDepthBuffer) {

                        p_uniforms.setValue(_gl, 'logDepthBufFC',
                            2.0 / (Math.log(camera.far + 1.0) / Math.LN2));

                    }


                    if (camera !== _currentCamera) {

                        _currentCamera = camera;

                        // lighting uniforms depend on the camera so enforce an update
                        // now, in case this material supports lights - or later, when
                        // the next material that does gets activated:

                        refreshMaterial = true; // set to true on material change
                        refreshLights = true; // remains set until update done

                    }

                    // load material specific uniforms
                    // (shader material also gets them for the sake of genericity)

                    if (material.isShaderMaterial ||
                        material.isMeshPhongMaterial ||
                        material.isMeshStandardMaterial ||
                        material.envMap) {

                        var uCamPos = p_uniforms.map.cameraPosition;

                        if (uCamPos !== undefined) {

                            uCamPos.setValue(_gl,
                                _vector3.setFromMatrixPosition(camera.matrixWorld));

                        }

                    }

                    if (material.isMeshPhongMaterial ||
                        material.isMeshLambertMaterial ||
                        material.isMeshBasicMaterial ||
                        material.isMeshStandardMaterial ||
                        material.isShaderMaterial ||
                        material.skinning) {

                        p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);

                    }

                    p_uniforms.set(_gl, _this, 'toneMappingExposure');
                    p_uniforms.set(_gl, _this, 'toneMappingWhitePoint');

                }

                // skinning uniforms must be set even if material didn't change
                // auto-setting of texture unit for bone texture must go before other textures
                // not sure why, but otherwise weird things happen

                if (material.skinning) {

                    p_uniforms.setOptional(_gl, object, 'bindMatrix');
                    p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');

                    var skeleton = object.skeleton;

                    if (skeleton) {

                        if (capabilities.floatVertexTextures && skeleton.useVertexTexture) {

                            p_uniforms.set(_gl, skeleton, 'boneTexture');
                            p_uniforms.set(_gl, skeleton, 'boneTextureWidth');
                            p_uniforms.set(_gl, skeleton, 'boneTextureHeight');

                        } else {

                            p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');

                        }

                    }

                }

                if (refreshMaterial) {

                    if (material.lights) {

                        // the current material requires lighting info

                        // note: all lighting uniforms are always set correctly
                        // they simply reference the renderer's state for their
                        // values
                        //
                        // use the current material's .needsUpdate flags to set
                        // the GL state when required

                        markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);

                    }

                    // refresh uniforms common to several materials

                    if (fog && material.fog) {

                        refreshUniformsFog(m_uniforms, fog);

                    }

                    if (material.isMeshBasicMaterial ||
                        material.isMeshLambertMaterial ||
                        material.isMeshPhongMaterial ||
                        material.isMeshStandardMaterial ||
                        material.isMeshNormalMaterial ||
                        material.isMeshDepthMaterial) {

                        refreshUniformsCommon(m_uniforms, material);

                    }

                    // refresh single material specific uniforms

                    if (material.isLineBasicMaterial) {

                        refreshUniformsLine(m_uniforms, material);

                    } else if (material.isLineDashedMaterial) {

                        refreshUniformsLine(m_uniforms, material);
                        refreshUniformsDash(m_uniforms, material);

                    } else if (material.isPointsMaterial) {

                        refreshUniformsPoints(m_uniforms, material);

                    } else if (material.isMeshLambertMaterial) {

                        refreshUniformsLambert(m_uniforms, material);

                    } else if (material.isMeshToonMaterial) {

                        refreshUniformsToon(m_uniforms, material);

                    } else if (material.isMeshPhongMaterial) {

                        refreshUniformsPhong(m_uniforms, material);

                    } else if (material.isMeshPhysicalMaterial) {

                        refreshUniformsPhysical(m_uniforms, material);

                    } else if (material.isMeshStandardMaterial) {

                        refreshUniformsStandard(m_uniforms, material);

                    } else if (material.isMeshDepthMaterial) {

                        if (material.displacementMap) {

                            m_uniforms.displacementMap.value = material.displacementMap;
                            m_uniforms.displacementScale.value = material.displacementScale;
                            m_uniforms.displacementBias.value = material.displacementBias;

                        }

                    } else if (material.isMeshNormalMaterial) {

                        refreshUniformsNormal(m_uniforms, material);

                    }

                    // RectAreaLight Texture
                    // TODO (mrdoob): Find a nicer implementation

                    if (m_uniforms.ltcMat !== undefined) m_uniforms.ltcMat.value = THREE.UniformsLib.LTC_MAT_TEXTURE;
                    if (m_uniforms.ltcMag !== undefined) m_uniforms.ltcMag.value = THREE.UniformsLib.LTC_MAG_TEXTURE;

                    WebGLUniforms.upload(
                        _gl, materialProperties.uniformsList, m_uniforms, _this);

                }


                // common matrices

                p_uniforms.set(_gl, object, 'modelViewMatrix');
                p_uniforms.set(_gl, object, 'normalMatrix');
                p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);

                return program;

            }

            // Uniforms (refresh uniforms objects)

            function refreshUniformsCommon(uniforms, material) {

                uniforms.opacity.value = material.opacity;

                uniforms.diffuse.value = material.color;

                if (material.emissive) {

                    uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);

                }

                uniforms.map.value = material.map;
                uniforms.specularMap.value = material.specularMap;
                uniforms.alphaMap.value = material.alphaMap;

                if (material.lightMap) {

                    uniforms.lightMap.value = material.lightMap;
                    uniforms.lightMapIntensity.value = material.lightMapIntensity;

                }

                if (material.aoMap) {

                    uniforms.aoMap.value = material.aoMap;
                    uniforms.aoMapIntensity.value = material.aoMapIntensity;

                }

                // uv repeat and offset setting priorities
                // 1. color map
                // 2. specular map
                // 3. normal map
                // 4. bump map
                // 5. alpha map
                // 6. emissive map

                var uvScaleMap;

                if (material.map) {

                    uvScaleMap = material.map;

                } else if (material.specularMap) {

                    uvScaleMap = material.specularMap;

                } else if (material.displacementMap) {

                    uvScaleMap = material.displacementMap;

                } else if (material.normalMap) {

                    uvScaleMap = material.normalMap;

                } else if (material.bumpMap) {

                    uvScaleMap = material.bumpMap;

                } else if (material.roughnessMap) {

                    uvScaleMap = material.roughnessMap;

                } else if (material.metalnessMap) {

                    uvScaleMap = material.metalnessMap;

                } else if (material.alphaMap) {

                    uvScaleMap = material.alphaMap;

                } else if (material.emissiveMap) {

                    uvScaleMap = material.emissiveMap;

                }

                if (uvScaleMap !== undefined) {

                    // backwards compatibility
                    if (uvScaleMap.isWebGLRenderTarget) {

                        uvScaleMap = uvScaleMap.texture;

                    }

                    var offset = uvScaleMap.offset;
                    var repeat = uvScaleMap.repeat;

                    uniforms.offsetRepeat.value.set(offset.x, offset.y, repeat.x, repeat.y);

                }

                uniforms.envMap.value = material.envMap;

                // don't flip CubeTexture envMaps, flip everything else:
                //  WebGLRenderTargetCube will be flipped for backwards compatibility
                //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
                // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
                uniforms.flipEnvMap.value = (!(material.envMap && material.envMap.isCubeTexture)) ? 1 : -1;

                uniforms.reflectivity.value = material.reflectivity;
                uniforms.refractionRatio.value = material.refractionRatio;

            }

            function refreshUniformsLine(uniforms, material) {

                uniforms.diffuse.value = material.color;
                uniforms.opacity.value = material.opacity;

            }

            function refreshUniformsDash(uniforms, material) {

                uniforms.dashSize.value = material.dashSize;
                uniforms.totalSize.value = material.dashSize + material.gapSize;
                uniforms.scale.value = material.scale;

            }

            function refreshUniformsPoints(uniforms, material) {

                uniforms.diffuse.value = material.color;
                uniforms.opacity.value = material.opacity;
                uniforms.size.value = material.size * _pixelRatio;
                uniforms.scale.value = _height * 0.5;

                uniforms.map.value = material.map;

                if (material.map !== null) {

                    var offset = material.map.offset;
                    var repeat = material.map.repeat;

                    uniforms.offsetRepeat.value.set(offset.x, offset.y, repeat.x, repeat.y);

                }

            }

            function refreshUniformsFog(uniforms, fog) {

                uniforms.fogColor.value = fog.color;

                if (fog.isFog) {

                    uniforms.fogNear.value = fog.near;
                    uniforms.fogFar.value = fog.far;

                } else if (fog.isFogExp2) {

                    uniforms.fogDensity.value = fog.density;

                }

            }

            function refreshUniformsLambert(uniforms, material) {

                if (material.emissiveMap) {

                    uniforms.emissiveMap.value = material.emissiveMap;

                }

            }

            function refreshUniformsPhong(uniforms, material) {

                uniforms.specular.value = material.specular;
                uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )

                if (material.emissiveMap) {

                    uniforms.emissiveMap.value = material.emissiveMap;

                }

                if (material.bumpMap) {

                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.bumpScale.value = material.bumpScale;

                }

                if (material.normalMap) {

                    uniforms.normalMap.value = material.normalMap;
                    uniforms.normalScale.value.copy(material.normalScale);

                }

                if (material.displacementMap) {

                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias;

                }

            }

            function refreshUniformsToon(uniforms, material) {

                refreshUniformsPhong(uniforms, material);

                if (material.gradientMap) {

                    uniforms.gradientMap.value = material.gradientMap;

                }

            }

            function refreshUniformsStandard(uniforms, material) {

                uniforms.roughness.value = material.roughness;
                uniforms.metalness.value = material.metalness;

                if (material.roughnessMap) {

                    uniforms.roughnessMap.value = material.roughnessMap;

                }

                if (material.metalnessMap) {

                    uniforms.metalnessMap.value = material.metalnessMap;

                }

                if (material.emissiveMap) {

                    uniforms.emissiveMap.value = material.emissiveMap;

                }

                if (material.bumpMap) {

                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.bumpScale.value = material.bumpScale;

                }

                if (material.normalMap) {

                    uniforms.normalMap.value = material.normalMap;
                    uniforms.normalScale.value.copy(material.normalScale);

                }

                if (material.displacementMap) {

                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias;

                }

                if (material.envMap) {

                    //uniforms.envMap.value = material.envMap; // part of uniforms common
                    uniforms.envMapIntensity.value = material.envMapIntensity;

                }

            }

            function refreshUniformsPhysical(uniforms, material) {

                uniforms.clearCoat.value = material.clearCoat;
                uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

                refreshUniformsStandard(uniforms, material);

            }

            function refreshUniformsNormal(uniforms, material) {

                if (material.bumpMap) {

                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.bumpScale.value = material.bumpScale;

                }

                if (material.normalMap) {

                    uniforms.normalMap.value = material.normalMap;
                    uniforms.normalScale.value.copy(material.normalScale);

                }

                if (material.displacementMap) {

                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias;

                }

            }

            // If uniforms are marked as clean, they don't need to be loaded to the GPU.

            function markUniformsLightsNeedsUpdate(uniforms, value) {

                uniforms.ambientLightColor.needsUpdate = value;

                uniforms.directionalLights.needsUpdate = value;
                uniforms.pointLights.needsUpdate = value;
                uniforms.spotLights.needsUpdate = value;
                uniforms.rectAreaLights.needsUpdate = value;
                uniforms.hemisphereLights.needsUpdate = value;

            }

            // Lighting

            function setupShadows(lights) {

                var lightShadowsLength = 0;

                for (var i = 0, l = lights.length; i < l; i++) {

                    var light = lights[i];

                    if (light.castShadow) {

                        _lights.shadows[lightShadowsLength++] = light;

                    }

                }

                _lights.shadows.length = lightShadowsLength;

            }

            function setupLights(lights, camera) {

                var l, ll, light,
                    r = 0,
                    g = 0,
                    b = 0,
                    color,
                    intensity,
                    distance,
                    shadowMap,

                    viewMatrix = camera.matrixWorldInverse,

                    directionalLength = 0,
                    pointLength = 0,
                    spotLength = 0,
                    rectAreaLength = 0,
                    hemiLength = 0;

                for (l = 0, ll = lights.length; l < ll; l++) {

                    light = lights[l];

                    color = light.color;
                    intensity = light.intensity;
                    distance = light.distance;

                    shadowMap = (light.shadow && light.shadow.map) ? light.shadow.map.texture : null;

                    if (light.isAmbientLight) {

                        r += color.r * intensity;
                        g += color.g * intensity;
                        b += color.b * intensity;

                    } else if (light.isDirectionalLight) {

                        var uniforms = lightCache.get(light);

                        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
                        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                        _vector3.setFromMatrixPosition(light.target.matrixWorld);
                        uniforms.direction.sub(_vector3);
                        uniforms.direction.transformDirection(viewMatrix);

                        uniforms.shadow = light.castShadow;

                        if (light.castShadow) {

                            uniforms.shadowBias = light.shadow.bias;
                            uniforms.shadowRadius = light.shadow.radius;
                            uniforms.shadowMapSize = light.shadow.mapSize;

                        }

                        _lights.directionalShadowMap[directionalLength] = shadowMap;
                        _lights.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
                        _lights.directional[directionalLength++] = uniforms;

                    } else if (light.isSpotLight) {

                        var uniforms = lightCache.get(light);

                        uniforms.position.setFromMatrixPosition(light.matrixWorld);
                        uniforms.position.applyMatrix4(viewMatrix);

                        uniforms.color.copy(color).multiplyScalar(intensity);
                        uniforms.distance = distance;

                        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                        _vector3.setFromMatrixPosition(light.target.matrixWorld);
                        uniforms.direction.sub(_vector3);
                        uniforms.direction.transformDirection(viewMatrix);

                        uniforms.coneCos = Math.cos(light.angle);
                        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
                        uniforms.decay = (light.distance === 0) ? 0.0 : light.decay;

                        uniforms.shadow = light.castShadow;

                        if (light.castShadow) {

                            uniforms.shadowBias = light.shadow.bias;
                            uniforms.shadowRadius = light.shadow.radius;
                            uniforms.shadowMapSize = light.shadow.mapSize;

                        }

                        _lights.spotShadowMap[spotLength] = shadowMap;
                        _lights.spotShadowMatrix[spotLength] = light.shadow.matrix;
                        _lights.spot[spotLength++] = uniforms;

                    } else if (light.isRectAreaLight) {

                        var uniforms = lightCache.get(light);

                        // (a) intensity controls irradiance of entire light
                        uniforms.color
                            .copy(color)
                            .multiplyScalar(intensity / (light.width * light.height));

                        // (b) intensity controls the radiance per light area
                        // uniforms.color.copy( color ).multiplyScalar( intensity );

                        uniforms.position.setFromMatrixPosition(light.matrixWorld);
                        uniforms.position.applyMatrix4(viewMatrix);

                        // extract local rotation of light to derive width/height half vectors
                        _matrix42.identity();
                        _matrix4.copy(light.matrixWorld);
                        _matrix4.premultiply(viewMatrix);
                        _matrix42.extractRotation(_matrix4);

                        uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
                        uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);

                        uniforms.halfWidth.applyMatrix4(_matrix42);
                        uniforms.halfHeight.applyMatrix4(_matrix42);

                        // TODO (abelnation): RectAreaLight distance?
                        // uniforms.distance = distance;

                        _lights.rectArea[rectAreaLength++] = uniforms;

                    } else if (light.isPointLight) {

                        var uniforms = lightCache.get(light);

                        uniforms.position.setFromMatrixPosition(light.matrixWorld);
                        uniforms.position.applyMatrix4(viewMatrix);

                        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
                        uniforms.distance = light.distance;
                        uniforms.decay = (light.distance === 0) ? 0.0 : light.decay;

                        uniforms.shadow = light.castShadow;

                        if (light.castShadow) {

                            uniforms.shadowBias = light.shadow.bias;
                            uniforms.shadowRadius = light.shadow.radius;
                            uniforms.shadowMapSize = light.shadow.mapSize;

                        }

                        _lights.pointShadowMap[pointLength] = shadowMap;

                        if (_lights.pointShadowMatrix[pointLength] === undefined) {

                            _lights.pointShadowMatrix[pointLength] = new Matrix4();

                        }

                        // for point lights we set the shadow matrix to be a translation-only matrix
                        // equal to inverse of the light's position
                        _vector3.setFromMatrixPosition(light.matrixWorld).negate();
                        _lights.pointShadowMatrix[pointLength].identity().setPosition(_vector3);

                        _lights.point[pointLength++] = uniforms;

                    } else if (light.isHemisphereLight) {

                        var uniforms = lightCache.get(light);

                        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                        uniforms.direction.transformDirection(viewMatrix);
                        uniforms.direction.normalize();

                        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
                        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);

                        _lights.hemi[hemiLength++] = uniforms;

                    }

                }

                _lights.ambient[0] = r;
                _lights.ambient[1] = g;
                _lights.ambient[2] = b;

                _lights.directional.length = directionalLength;
                _lights.spot.length = spotLength;
                _lights.rectArea.length = rectAreaLength;
                _lights.point.length = pointLength;
                _lights.hemi.length = hemiLength;

                // TODO (sam-g-steel) why aren't we using join
                _lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + _lights.shadows.length;

            }

            // GL state setting

            this.setFaceCulling = function(cullFace, frontFaceDirection) {

                state.setCullFace(cullFace);
                state.setFlipSided(frontFaceDirection === FrontFaceDirectionCW);

            };

            // Textures

            function allocTextureUnit() {

                var textureUnit = _usedTextureUnits;

                if (textureUnit >= capabilities.maxTextures) {

                    console.warn('WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures);

                }

                _usedTextureUnits += 1;

                return textureUnit;

            }

            this.allocTextureUnit = allocTextureUnit;

            // this.setTexture2D = setTexture2D;
            this.setTexture2D = (function() {

                var warned = false;

                // backwards compatibility: peel texture.texture
                return function setTexture2D(texture, slot) {

                    if (texture && texture.isWebGLRenderTarget) {

                        if (!warned) {

                            console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.");
                            warned = true;

                        }

                        texture = texture.texture;

                    }

                    textures.setTexture2D(texture, slot);

                };

            }());

            this.setTexture = (function() {

                var warned = false;

                return function setTexture(texture, slot) {

                    if (!warned) {

                        console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.");
                        warned = true;

                    }

                    textures.setTexture2D(texture, slot);

                };

            }());

            this.setTextureCube = (function() {

                var warned = false;

                return function setTextureCube(texture, slot) {

                    // backwards compatibility: peel texture.texture
                    if (texture && texture.isWebGLRenderTargetCube) {

                        if (!warned) {

                            console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.");
                            warned = true;

                        }

                        texture = texture.texture;

                    }

                    // currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
                    // TODO: unify these code paths
                    if ((texture && texture.isCubeTexture) ||
                        (Array.isArray(texture.image) && texture.image.length === 6)) {

                        // CompressedTexture can have Array in image :/

                        // this function alone should take care of cube textures
                        textures.setTextureCube(texture, slot);

                    } else {

                        // assumed: texture property of THREE.WebGLRenderTargetCube

                        textures.setTextureCubeDynamic(texture, slot);

                    }

                };

            }());

            this.getCurrentRenderTarget = function() {

                return _currentRenderTarget;

            };

            this.setRenderTarget = function(renderTarget) {

                _currentRenderTarget = renderTarget;

                if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {

                    textures.setupRenderTarget(renderTarget);

                }

                var isCube = (renderTarget && renderTarget.isWebGLRenderTargetCube);
                var framebuffer;

                if (renderTarget) {

                    var renderTargetProperties = properties.get(renderTarget);

                    if (isCube) {

                        framebuffer = renderTargetProperties.__webglFramebuffer[renderTarget.activeCubeFace];

                    } else {

                        framebuffer = renderTargetProperties.__webglFramebuffer;

                    }

                    _currentScissor.copy(renderTarget.scissor);
                    _currentScissorTest = renderTarget.scissorTest;

                    _currentViewport.copy(renderTarget.viewport);

                } else {

                    framebuffer = null;

                    _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio);
                    _currentScissorTest = _scissorTest;

                    _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio);

                }

                if (_currentFramebuffer !== framebuffer) {

                    _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
                    _currentFramebuffer = framebuffer;

                }

                state.scissor(_currentScissor);
                state.setScissorTest(_currentScissorTest);

                state.viewport(_currentViewport);

                if (isCube) {

                    var textureProperties = properties.get(renderTarget.texture);
                    _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel);

                }

            };

            this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer) {

                if ((renderTarget && renderTarget.isWebGLRenderTarget) === false) {

                    console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');
                    return;

                }

                var framebuffer = properties.get(renderTarget).__webglFramebuffer;

                if (framebuffer) {

                    var restore = false;

                    if (framebuffer !== _currentFramebuffer) {

                        _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);

                        restore = true;

                    }

                    try {

                        var texture = renderTarget.texture;
                        var textureFormat = texture.format;
                        var textureType = texture.type;

                        if (textureFormat !== RGBAFormat && paramThreeToGL(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {

                            console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');
                            return;

                        }

                        if (textureType !== UnsignedByteType && paramThreeToGL(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // IE11, Edge and Chrome Mac < 52 (#9513)
                            !(textureType === FloatType && (extensions.get('OES_texture_float') || extensions.get('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox
                            !(textureType === HalfFloatType && extensions.get('EXT_color_buffer_half_float'))) {

                            console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');
                            return;

                        }

                        if (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {

                            // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

                            if ((x >= 0 && x <= (renderTarget.width - width)) && (y >= 0 && y <= (renderTarget.height - height))) {

                                _gl.readPixels(x, y, width, height, paramThreeToGL(textureFormat), paramThreeToGL(textureType), buffer);

                            }

                        } else {

                            console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');

                        }

                    } finally {

                        if (restore) {

                            _gl.bindFramebuffer(_gl.FRAMEBUFFER, _currentFramebuffer);

                        }

                    }

                }

            };

            // Map three.js constants to WebGL constants

            function paramThreeToGL(p) {

                var extension;

                if (p === RepeatWrapping) return _gl.REPEAT;
                if (p === ClampToEdgeWrapping) return _gl.CLAMP_TO_EDGE;
                if (p === MirroredRepeatWrapping) return _gl.MIRRORED_REPEAT;

                if (p === NearestFilter) return _gl.NEAREST;
                if (p === NearestMipMapNearestFilter) return _gl.NEAREST_MIPMAP_NEAREST;
                if (p === NearestMipMapLinearFilter) return _gl.NEAREST_MIPMAP_LINEAR;

                if (p === LinearFilter) return _gl.LINEAR;
                if (p === LinearMipMapNearestFilter) return _gl.LINEAR_MIPMAP_NEAREST;
                if (p === LinearMipMapLinearFilter) return _gl.LINEAR_MIPMAP_LINEAR;

                if (p === UnsignedByteType) return _gl.UNSIGNED_BYTE;
                if (p === UnsignedShort4444Type) return _gl.UNSIGNED_SHORT_4_4_4_4;
                if (p === UnsignedShort5551Type) return _gl.UNSIGNED_SHORT_5_5_5_1;
                if (p === UnsignedShort565Type) return _gl.UNSIGNED_SHORT_5_6_5;

                if (p === ByteType) return _gl.BYTE;
                if (p === ShortType) return _gl.SHORT;
                if (p === UnsignedShortType) return _gl.UNSIGNED_SHORT;
                if (p === IntType) return _gl.INT;
                if (p === UnsignedIntType) return _gl.UNSIGNED_INT;
                if (p === FloatType) return _gl.FLOAT;

                if (p === HalfFloatType) {

                    extension = extensions.get('OES_texture_half_float');

                    if (extension !== null) return extension.HALF_FLOAT_OES;

                }

                if (p === AlphaFormat) return _gl.ALPHA;
                if (p === RGBFormat) return _gl.RGB;
                if (p === RGBAFormat) return _gl.RGBA;
                if (p === LuminanceFormat) return _gl.LUMINANCE;
                if (p === LuminanceAlphaFormat) return _gl.LUMINANCE_ALPHA;
                if (p === DepthFormat) return _gl.DEPTH_COMPONENT;
                if (p === DepthStencilFormat) return _gl.DEPTH_STENCIL;

                if (p === AddEquation) return _gl.FUNC_ADD;
                if (p === SubtractEquation) return _gl.FUNC_SUBTRACT;
                if (p === ReverseSubtractEquation) return _gl.FUNC_REVERSE_SUBTRACT;

                if (p === ZeroFactor) return _gl.ZERO;
                if (p === OneFactor) return _gl.ONE;
                if (p === SrcColorFactor) return _gl.SRC_COLOR;
                if (p === OneMinusSrcColorFactor) return _gl.ONE_MINUS_SRC_COLOR;
                if (p === SrcAlphaFactor) return _gl.SRC_ALPHA;
                if (p === OneMinusSrcAlphaFactor) return _gl.ONE_MINUS_SRC_ALPHA;
                if (p === DstAlphaFactor) return _gl.DST_ALPHA;
                if (p === OneMinusDstAlphaFactor) return _gl.ONE_MINUS_DST_ALPHA;

                if (p === DstColorFactor) return _gl.DST_COLOR;
                if (p === OneMinusDstColorFactor) return _gl.ONE_MINUS_DST_COLOR;
                if (p === SrcAlphaSaturateFactor) return _gl.SRC_ALPHA_SATURATE;

                if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
                    p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {

                    extension = extensions.get('WEBGL_compressed_texture_s3tc');

                    if (extension !== null) {

                        if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                        if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                        if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                        if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

                    }

                }

                if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
                    p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {

                    extension = extensions.get('WEBGL_compressed_texture_pvrtc');

                    if (extension !== null) {

                        if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                        if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                        if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                        if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

                    }

                }

                if (p === RGB_ETC1_Format) {

                    extension = extensions.get('WEBGL_compressed_texture_etc1');

                    if (extension !== null) return extension.COMPRESSED_RGB_ETC1_WEBGL;

                }

                if (p === MinEquation || p === MaxEquation) {

                    extension = extensions.get('EXT_blend_minmax');

                    if (extension !== null) {

                        if (p === MinEquation) return extension.MIN_EXT;
                        if (p === MaxEquation) return extension.MAX_EXT;

                    }

                }

                if (p === UnsignedInt248Type) {

                    extension = extensions.get('WEBGL_depth_texture');

                    if (extension !== null) return extension.UNSIGNED_INT_24_8_WEBGL;

                }

                return 0;

            }

        }

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */

        function FogExp2(color, density) {

            this.name = '';

            this.color = new Color(color);
            this.density = (density !== undefined) ? density : 0.00025;

        }

        FogExp2.prototype.isFogExp2 = true;

        FogExp2.prototype.clone = function() {

            return new FogExp2(this.color.getHex(), this.density);

        };

        FogExp2.prototype.toJSON = function(meta) {

            return {
                type: 'FogExp2',
                color: this.color.getHex(),
                density: this.density
            };

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */

        function Fog(color, near, far) {

            this.name = '';

            this.color = new Color(color);

            this.near = (near !== undefined) ? near : 1;
            this.far = (far !== undefined) ? far : 1000;

        }

        Fog.prototype.isFog = true;

        Fog.prototype.clone = function() {

            return new Fog(this.color.getHex(), this.near, this.far);

        };

        Fog.prototype.toJSON = function(meta) {

            return {
                type: 'Fog',
                color: this.color.getHex(),
                near: this.near,
                far: this.far
            };

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function Scene() {

            Object3D.call(this);

            this.type = 'Scene';

            this.background = null;
            this.fog = null;
            this.overrideMaterial = null;

            this.autoUpdate = true; // checked by the renderer

        }

        Scene.prototype = Object.create(Object3D.prototype);

        Scene.prototype.constructor = Scene;

        Scene.prototype.copy = function(source, recursive) {

            Object3D.prototype.copy.call(this, source, recursive);

            if (source.background !== null) this.background = source.background.clone();
            if (source.fog !== null) this.fog = source.fog.clone();
            if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();

            this.autoUpdate = source.autoUpdate;
            this.matrixAutoUpdate = source.matrixAutoUpdate;

            return this;

        };

        Scene.prototype.toJSON = function(meta) {

            var data = Object3D.prototype.toJSON.call(this, meta);

            if (this.background !== null) data.object.background = this.background.toJSON(meta);
            if (this.fog !== null) data.object.fog = this.fog.toJSON();

            return data;

        };

        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         */

        function LensFlare(texture, size, distance, blending, color) {

            Object3D.call(this);

            this.lensFlares = [];

            this.positionScreen = new Vector3();
            this.customUpdateCallback = undefined;

            if (texture !== undefined) {

                this.add(texture, size, distance, blending, color);

            }

        }

        LensFlare.prototype = Object.assign(Object.create(Object3D.prototype), {

            constructor: LensFlare,

            isLensFlare: true,

            copy: function(source) {

                Object3D.prototype.copy.call(this, source);

                this.positionScreen.copy(source.positionScreen);
                this.customUpdateCallback = source.customUpdateCallback;

                for (var i = 0, l = source.lensFlares.length; i < l; i++) {

                    this.lensFlares.push(source.lensFlares[i]);

                }

                return this;

            },

            add: function(texture, size, distance, blending, color, opacity) {

                if (size === undefined) size = -1;
                if (distance === undefined) distance = 0;
                if (opacity === undefined) opacity = 1;
                if (color === undefined) color = new Color(0xffffff);
                if (blending === undefined) blending = NormalBlending;

                distance = Math.min(distance, Math.max(0, distance));

                this.lensFlares.push({
                    texture: texture, // THREE.Texture
                    size: size, // size in pixels (-1 = use texture.width)
                    distance: distance, // distance (0-1) from light source (0=at light source)
                    x: 0,
                    y: 0,
                    z: 0, // screen position (-1 => 1) z = 0 is in front z = 1 is back
                    scale: 1, // scale
                    rotation: 0, // rotation
                    opacity: opacity, // opacity
                    color: color, // color
                    blending: blending // blending
                });

            },

            /*
             * Update lens flares update positions on all flares based on the screen position
             * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
             */

            updateLensFlares: function() {

                var f, fl = this.lensFlares.length;
                var flare;
                var vecX = -this.positionScreen.x * 2;
                var vecY = -this.positionScreen.y * 2;

                for (f = 0; f < fl; f++) {

                    flare = this.lensFlares[f];

                    flare.x = this.positionScreen.x + vecX * flare.distance;
                    flare.y = this.positionScreen.y + vecY * flare.distance;

                    flare.wantedRotation = flare.x * Math.PI * 0.25;
                    flare.rotation += (flare.wantedRotation - flare.rotation) * 0.25;

                }

            }

        });

        /**
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *  map: new THREE.Texture( <Image> ),
         *
         *	uvOffset: new THREE.Vector2(),
         *	uvScale: new THREE.Vector2()
         * }
         */

        function SpriteMaterial(parameters) {

            Material.call(this);

            this.type = 'SpriteMaterial';

            this.color = new Color(0xffffff);
            this.map = null;

            this.rotation = 0;

            this.fog = false;
            this.lights = false;

            this.setValues(parameters);

        }

        SpriteMaterial.prototype = Object.create(Material.prototype);
        SpriteMaterial.prototype.constructor = SpriteMaterial;

        SpriteMaterial.prototype.copy = function(source) {

            Material.prototype.copy.call(this, source);

            this.color.copy(source.color);
            this.map = source.map;

            this.rotation = source.rotation;

            return this;

        };

        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         */

        function Sprite(material) {

            Object3D.call(this);

            this.type = 'Sprite';

            this.material = (material !== undefined) ? material : new SpriteMaterial();

        }

        Sprite.prototype = Object.assign(Object.create(Object3D.prototype), {

            constructor: Sprite,

            isSprite: true,

            raycast: (function() {

                var matrixPosition = new Vector3();

                return function raycast(raycaster, intersects) {

                    matrixPosition.setFromMatrixPosition(this.matrixWorld);

                    var distanceSq = raycaster.ray.distanceSqToPoint(matrixPosition);
                    var guessSizeSq = this.scale.x * this.scale.y / 4;

                    if (distanceSq > guessSizeSq) {

                        return;

                    }

                    intersects.push({

                        distance: Math.sqrt(distanceSq),
                        point: this.position,
                        face: null,
                        object: this

                    });

                };

            }()),

            clone: function() {

                return new this.constructor(this.material).copy(this);

            }

        });

        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         */

        function LOD() {

            Object3D.call(this);

            this.type = 'LOD';

            Object.defineProperties(this, {
                levels: {
                    enumerable: true,
                    value: []
                }
            });

        }


        LOD.prototype = Object.assign(Object.create(Object3D.prototype), {

            constructor: LOD,

            copy: function(source) {

                Object3D.prototype.copy.call(this, source, false);

                var levels = source.levels;

                for (var i = 0, l = levels.length; i < l; i++) {

                    var level = levels[i];

                    this.addLevel(level.object.clone(), level.distance);

                }

                return this;

            },

            addLevel: function(object, distance) {

                if (distance === undefined) distance = 0;

                distance = Math.abs(distance);

                var levels = this.levels;

                for (var l = 0; l < levels.length; l++) {

                    if (distance < levels[l].distance) {

                        break;

                    }

                }

                levels.splice(l, 0, {
                    distance: distance,
                    object: object
                });

                this.add(object);

            },

            getObjectForDistance: function(distance) {

                var levels = this.levels;

                for (var i = 1, l = levels.length; i < l; i++) {

                    if (distance < levels[i].distance) {

                        break;

                    }

                }

                return levels[i - 1].object;

            },

            raycast: (function() {

                var matrixPosition = new Vector3();

                return function raycast(raycaster, intersects) {

                    matrixPosition.setFromMatrixPosition(this.matrixWorld);

                    var distance = raycaster.ray.origin.distanceTo(matrixPosition);

                    this.getObjectForDistance(distance).raycast(raycaster, intersects);

                };

            }()),

            update: function() {

                var v1 = new Vector3();
                var v2 = new Vector3();

                return function update(camera) {

                    var levels = this.levels;

                    if (levels.length > 1) {

                        v1.setFromMatrixPosition(camera.matrixWorld);
                        v2.setFromMatrixPosition(this.matrixWorld);

                        var distance = v1.distanceTo(v2);

                        levels[0].object.visible = true;

                        for (var i = 1, l = levels.length; i < l; i++) {

                            if (distance >= levels[i].distance) {

                                levels[i - 1].object.visible = false;
                                levels[i].object.visible = true;

                            } else {

                                break;

                            }

                        }

                        for (; i < l; i++) {

                            levels[i].object.visible = false;

                        }

                    }

                };

            }(),

            toJSON: function(meta) {

                var data = Object3D.prototype.toJSON.call(this, meta);

                data.object.levels = [];

                var levels = this.levels;

                for (var i = 0, l = levels.length; i < l; i++) {

                    var level = levels[i];

                    data.object.levels.push({
                        object: level.object.uuid,
                        distance: level.distance
                    });

                }

                return data;

            }

        });

        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author michael guerrero / http://realitymeltdown.com
         * @author ikerr / http://verold.com
         */

        function Skeleton(bones, boneInverses, useVertexTexture) {

            this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

            this.identityMatrix = new Matrix4();

            // copy the bone array

            bones = bones || [];

            this.bones = bones.slice(0);

            // create a bone texture or an array of floats

            if (this.useVertexTexture) {

                // layout (1 matrix = 4 pixels)
                //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
                //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
                //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
                //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
                //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


                var size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix
                size = _Math.nextPowerOfTwo(Math.ceil(size));
                size = Math.max(size, 4);

                this.boneTextureWidth = size;
                this.boneTextureHeight = size;

                this.boneMatrices = new Float32Array(this.boneTextureWidth * this.boneTextureHeight * 4); // 4 floats per RGBA pixel
                this.boneTexture = new DataTexture(this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType);

            } else {

                this.boneMatrices = new Float32Array(16 * this.bones.length);

            }

            // use the supplied bone inverses or calculate the inverses

            if (boneInverses === undefined) {

                this.calculateInverses();

            } else {

                if (this.bones.length === boneInverses.length) {

                    this.boneInverses = boneInverses.slice(0);

                } else {

                    console.warn('THREE.Skeleton bonInverses is the wrong length.');

                    this.boneInverses = [];

                    for (var b = 0, bl = this.bones.length; b < bl; b++) {

                        this.boneInverses.push(new Matrix4());

                    }

                }

            }

        }

        Object.assign(Skeleton.prototype, {

            calculateInverses: function() {

                this.boneInverses = [];

                for (var b = 0, bl = this.bones.length; b < bl; b++) {

                    var inverse = new Matrix4();

                    if (this.bones[b]) {

                        inverse.getInverse(this.bones[b].matrixWorld);

                    }

                    this.boneInverses.push(inverse);

                }

            },

            pose: function() {

                var bone;

                // recover the bind-time world matrices

                for (var b = 0, bl = this.bones.length; b < bl; b++) {

                    bone = this.bones[b];

                    if (bone) {

                        bone.matrixWorld.getInverse(this.boneInverses[b]);

                    }

                }

                // compute the local matrices, positions, rotations and scales

                for (var b = 0, bl = this.bones.length; b < bl; b++) {

                    bone = this.bones[b];

                    if (bone) {

                        if (bone.parent && bone.parent.isBone) {

                            bone.matrix.getInverse(bone.parent.matrixWorld);
                            bone.matrix.multiply(bone.matrixWorld);

                        } else {

                            bone.matrix.copy(bone.matrixWorld);

                        }

                        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);

                    }

                }

            },

            update: (function() {

                var offsetMatrix = new Matrix4();

                return function update() {

                    // flatten bone matrices to array

                    for (var b = 0, bl = this.bones.length; b < bl; b++) {

                        // compute the offset between the current and the original transform

                        var matrix = this.bones[b] ? this.bones[b].matrixWorld : this.identityMatrix;

                        offsetMatrix.multiplyMatrices(matrix, this.boneInverses[b]);
                        offsetMatrix.toArray(this.boneMatrices, b * 16);

                    }

                    if (this.useVertexTexture) {

                        this.boneTexture.needsUpdate = true;

                    }

                };

            })(),

            clone: function() {

                return new Skeleton(this.bones, this.boneInverses, this.useVertexTexture);

            }

        });

        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author ikerr / http://verold.com
         */

        function Bone() {

            Object3D.call(this);

            this.type = 'Bone';

        }

        Bone.prototype = Object.assign(Object.create(Object3D.prototype), {

            constructor: Bone,

            isBone: true

        });

        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author ikerr / http://verold.com
         */

        function SkinnedMesh(geometry, material, useVertexTexture) {

            Mesh.call(this, geometry, material);

            this.type = 'SkinnedMesh';

            this.bindMode = "attached";
            this.bindMatrix = new Matrix4();
            this.bindMatrixInverse = new Matrix4();

            // init bones

            // TODO: remove bone creation as there is no reason (other than
            // convenience) for THREE.SkinnedMesh to do this.

            var bones = [];

            if (this.geometry && this.geometry.bones !== undefined) {

                var bone, gbone;

                for (var b = 0, bl = this.geometry.bones.length; b < bl; ++b) {

                    gbone = this.geometry.bones[b];

                    bone = new Bone();
                    bones.push(bone);

                    bone.name = gbone.name;
                    bone.position.fromArray(gbone.pos);
                    bone.quaternion.fromArray(gbone.rotq);
                    if (gbone.scl !== undefined) bone.scale.fromArray(gbone.scl);

                }

                for (var b = 0, bl = this.geometry.bones.length; b < bl; ++b) {

                    gbone = this.geometry.bones[b];

                    if (gbone.parent !== -1 && gbone.parent !== null &&
                        bones[gbone.parent] !== undefined) {

                        bones[gbone.parent].add(bones[b]);

                    } else {

                        this.add(bones[b]);

                    }

                }

            }

            this.normalizeSkinWeights();

            this.updateMatrixWorld(true);
            this.bind(new Skeleton(bones, undefined, useVertexTexture), this.matrixWorld);

        }


        SkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {

            constructor: SkinnedMesh,

            isSkinnedMesh: true,

            bind: function(skeleton, bindMatrix) {

                this.skeleton = skeleton;

                if (bindMatrix === undefined) {

                    this.updateMatrixWorld(true);

                    this.skeleton.calculateInverses();

                    bindMatrix = this.matrixWorld;

                }

                this.bindMatrix.copy(bindMatrix);
                this.bindMatrixInverse.getInverse(bindMatrix);

            },

            pose: function() {

                this.skeleton.pose();

            },

            normalizeSkinWeights: function() {

                if (this.geometry && this.geometry.isGeometry) {

                    for (var i = 0; i < this.geometry.skinWeights.length; i++) {

                        var sw = this.geometry.skinWeights[i];

                        var scale = 1.0 / sw.lengthManhattan();

                        if (scale !== Infinity) {

                            sw.multiplyScalar(scale);

                        } else {

                            sw.set(1, 0, 0, 0); // do something reasonable

                        }

                    }

                } else if (this.geometry && this.geometry.isBufferGeometry) {

                    var vec = new Vector4();

                    var skinWeight = this.geometry.attributes.skinWeight;

                    for (var i = 0; i < skinWeight.count; i++) {

                        vec.x = skinWeight.getX(i);
                        vec.y = skinWeight.getY(i);
                        vec.z = skinWeight.getZ(i);
                        vec.w = skinWeight.getW(i);

                        var scale = 1.0 / vec.lengthManhattan();

                        if (scale !== Infinity) {

                            vec.multiplyScalar(scale);

                        } else {

                            vec.set(1, 0, 0, 0); // do something reasonable

                        }

                        skinWeight.setXYZW(i, vec.x, vec.y, vec.z, vec.w);

                    }

                }

            },

            updateMatrixWorld: function(force) {

                Mesh.prototype.updateMatrixWorld.call(this, true);

                if (this.bindMode === "attached") {

                    this.bindMatrixInverse.getInverse(this.matrixWorld);

                } else if (this.bindMode === "detached") {

                    this.bindMatrixInverse.getInverse(this.bindMatrix);

                } else {

                    console.warn('THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode);

                }

            },

            clone: function() {

                return new this.constructor(this.geometry, this.material, this.skeleton.useVertexTexture).copy(this);

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *
         *  linewidth: <float>,
         *  linecap: "round",
         *  linejoin: "round"
         * }
         */

        function LineBasicMaterial(parameters) {

            Material.call(this);

            this.type = 'LineBasicMaterial';

            this.color = new Color(0xffffff);

            this.linewidth = 1;
            this.linecap = 'round';
            this.linejoin = 'round';

            this.lights = false;

            this.setValues(parameters);

        }

        LineBasicMaterial.prototype = Object.create(Material.prototype);
        LineBasicMaterial.prototype.constructor = LineBasicMaterial;

        LineBasicMaterial.prototype.isLineBasicMaterial = true;

        LineBasicMaterial.prototype.copy = function(source) {

            Material.prototype.copy.call(this, source);

            this.color.copy(source.color);

            this.linewidth = source.linewidth;
            this.linecap = source.linecap;
            this.linejoin = source.linejoin;

            return this;

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function Line(geometry, material, mode) {

            if (mode === 1) {

                console.warn('THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.');
                return new LineSegments(geometry, material);

            }

            Object3D.call(this);

            this.type = 'Line';

            this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
            this.material = material !== undefined ? material : new LineBasicMaterial({
                color: Math.random() * 0xffffff
            });

        }

        Line.prototype = Object.assign(Object.create(Object3D.prototype), {

            constructor: Line,

            isLine: true,

            raycast: (function() {

                var inverseMatrix = new Matrix4();
                var ray = new Ray();
                var sphere = new Sphere();

                return function raycast(raycaster, intersects) {

                    var precision = raycaster.linePrecision;
                    var precisionSq = precision * precision;

                    var geometry = this.geometry;
                    var matrixWorld = this.matrixWorld;

                    // Checking boundingSphere distance to ray

                    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

                    sphere.copy(geometry.boundingSphere);
                    sphere.applyMatrix4(matrixWorld);

                    if (raycaster.ray.intersectsSphere(sphere) === false) return;

                    //

                    inverseMatrix.getInverse(matrixWorld);
                    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);

                    var vStart = new Vector3();
                    var vEnd = new Vector3();
                    var interSegment = new Vector3();
                    var interRay = new Vector3();
                    var step = (this && this.isLineSegments) ? 2 : 1;

                    if (geometry.isBufferGeometry) {

                        var index = geometry.index;
                        var attributes = geometry.attributes;
                        var positions = attributes.position.array;

                        if (index !== null) {

                            var indices = index.array;

                            for (var i = 0, l = indices.length - 1; i < l; i += step) {

                                var a = indices[i];
                                var b = indices[i + 1];

                                vStart.fromArray(positions, a * 3);
                                vEnd.fromArray(positions, b * 3);

                                var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);

                                if (distSq > precisionSq) continue;

                                interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

                                var distance = raycaster.ray.origin.distanceTo(interRay);

                                if (distance < raycaster.near || distance > raycaster.far) continue;

                                intersects.push({

                                    distance: distance,
                                    // What do we want? intersection point on the ray or on the segment??
                                    // point: raycaster.ray.at( distance ),
                                    point: interSegment.clone().applyMatrix4(this.matrixWorld),
                                    index: i,
                                    face: null,
                                    faceIndex: null,
                                    object: this

                                });

                            }

                        } else {

                            for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {

                                vStart.fromArray(positions, 3 * i);
                                vEnd.fromArray(positions, 3 * i + 3);

                                var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);

                                if (distSq > precisionSq) continue;

                                interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

                                var distance = raycaster.ray.origin.distanceTo(interRay);

                                if (distance < raycaster.near || distance > raycaster.far) continue;

                                intersects.push({

                                    distance: distance,
                                    // What do we want? intersection point on the ray or on the segment??
                                    // point: raycaster.ray.at( distance ),
                                    point: interSegment.clone().applyMatrix4(this.matrixWorld),
                                    index: i,
                                    face: null,
                                    faceIndex: null,
                                    object: this

                                });

                            }

                        }

                    } else if (geometry.isGeometry) {

                        var vertices = geometry.vertices;
                        var nbVertices = vertices.length;

                        for (var i = 0; i < nbVertices - 1; i += step) {

                            var distSq = ray.distanceSqToSegment(vertices[i], vertices[i + 1], interRay, interSegment);

                            if (distSq > precisionSq) continue;

                            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

                            var distance = raycaster.ray.origin.distanceTo(interRay);

                            if (distance < raycaster.near || distance > raycaster.far) continue;

                            intersects.push({

                                distance: distance,
                                // What do we want? intersection point on the ray or on the segment??
                                // point: raycaster.ray.at( distance ),
                                point: interSegment.clone().applyMatrix4(this.matrixWorld),
                                index: i,
                                face: null,
                                faceIndex: null,
                                object: this

                            });

                        }

                    }

                };

            }()),

            clone: function() {

                return new this.constructor(this.geometry, this.material).copy(this);

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function LineSegments(geometry, material) {

            Line.call(this, geometry, material);

            this.type = 'LineSegments';

        }

        LineSegments.prototype = Object.assign(Object.create(Line.prototype), {

            constructor: LineSegments,

            isLineSegments: true

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *  map: new THREE.Texture( <Image> ),
         *
         *  size: <float>,
         *  sizeAttenuation: <bool>
         * }
         */

        function PointsMaterial(parameters) {

            Material.call(this);

            this.type = 'PointsMaterial';

            this.color = new Color(0xffffff);

            this.map = null;

            this.size = 1;
            this.sizeAttenuation = true;

            this.lights = false;

            this.setValues(parameters);

        }

        PointsMaterial.prototype = Object.create(Material.prototype);
        PointsMaterial.prototype.constructor = PointsMaterial;

        PointsMaterial.prototype.isPointsMaterial = true;

        PointsMaterial.prototype.copy = function(source) {

            Material.prototype.copy.call(this, source);

            this.color.copy(source.color);

            this.map = source.map;

            this.size = source.size;
            this.sizeAttenuation = source.sizeAttenuation;

            return this;

        };

        /**
         * @author alteredq / http://alteredqualia.com/
         */

        function Points(geometry, material) {

            Object3D.call(this);

            this.type = 'Points';

            this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
            this.material = material !== undefined ? material : new PointsMaterial({
                color: Math.random() * 0xffffff
            });

        }

        Points.prototype = Object.assign(Object.create(Object3D.prototype), {

            constructor: Points,

            isPoints: true,

            raycast: (function() {

                var inverseMatrix = new Matrix4();
                var ray = new Ray();
                var sphere = new Sphere();

                return function raycast(raycaster, intersects) {

                    var object = this;
                    var geometry = this.geometry;
                    var matrixWorld = this.matrixWorld;
                    var threshold = raycaster.params.Points.threshold;

                    // Checking boundingSphere distance to ray

                    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

                    sphere.copy(geometry.boundingSphere);
                    sphere.applyMatrix4(matrixWorld);

                    if (raycaster.ray.intersectsSphere(sphere) === false) return;

                    //

                    inverseMatrix.getInverse(matrixWorld);
                    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);

                    var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
                    var localThresholdSq = localThreshold * localThreshold;
                    var position = new Vector3();

                    function testPoint(point, index) {

                        var rayPointDistanceSq = ray.distanceSqToPoint(point);

                        if (rayPointDistanceSq < localThresholdSq) {

                            var intersectPoint = ray.closestPointToPoint(point);
                            intersectPoint.applyMatrix4(matrixWorld);

                            var distance = raycaster.ray.origin.distanceTo(intersectPoint);

                            if (distance < raycaster.near || distance > raycaster.far) return;

                            intersects.push({

                                distance: distance,
                                distanceToRay: Math.sqrt(rayPointDistanceSq),
                                point: intersectPoint.clone(),
                                index: index,
                                face: null,
                                object: object

                            });

                        }

                    }

                    if (geometry.isBufferGeometry) {

                        var index = geometry.index;
                        var attributes = geometry.attributes;
                        var positions = attributes.position.array;

                        if (index !== null) {

                            var indices = index.array;

                            for (var i = 0, il = indices.length; i < il; i++) {

                                var a = indices[i];

                                position.fromArray(positions, a * 3);

                                testPoint(position, a);

                            }

                        } else {

                            for (var i = 0, l = positions.length / 3; i < l; i++) {

                                position.fromArray(positions, i * 3);

                                testPoint(position, i);

                            }

                        }

                    } else {

                        var vertices = geometry.vertices;

                        for (var i = 0, l = vertices.length; i < l; i++) {

                            testPoint(vertices[i], i);

                        }

                    }

                };

            }()),

            clone: function() {

                return new this.constructor(this.geometry, this.material).copy(this);

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function Group() {

            Object3D.call(this);

            this.type = 'Group';

        }

        Group.prototype = Object.assign(Object.create(Object3D.prototype), {

            constructor: Group

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {

            Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);

            this.generateMipmaps = false;

            var scope = this;

            function update() {

                requestAnimationFrame(update);

                if (video.readyState >= video.HAVE_CURRENT_DATA) {

                    scope.needsUpdate = true;

                }

            }

            update();

        }

        VideoTexture.prototype = Object.create(Texture.prototype);
        VideoTexture.prototype.constructor = VideoTexture;

        /**
         * @author alteredq / http://alteredqualia.com/
         */

        function CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {

            Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);

            this.image = {
                width: width,
                height: height
            };
            this.mipmaps = mipmaps;

            // no flipping for cube textures
            // (also flipping doesn't work for compressed textures )

            this.flipY = false;

            // can't generate mipmaps for compressed textures
            // mips must be embedded in DDS files

            this.generateMipmaps = false;

        }

        CompressedTexture.prototype = Object.create(Texture.prototype);
        CompressedTexture.prototype.constructor = CompressedTexture;

        CompressedTexture.prototype.isCompressedTexture = true;

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {

            Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);

            this.needsUpdate = true;

        }

        CanvasTexture.prototype = Object.create(Texture.prototype);
        CanvasTexture.prototype.constructor = CanvasTexture;

        /**
         * @author Matt DesLauriers / @mattdesl
         * @author atix / arthursilber.de
         */

        function DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {

            format = format !== undefined ? format : DepthFormat;

            if (format !== DepthFormat && format !== DepthStencilFormat) {

                throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat')

            }

            if (type === undefined && format === DepthFormat) type = UnsignedShortType;
            if (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;

            Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);

            this.image = {
                width: width,
                height: height
            };

            this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
            this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

            this.flipY = false;
            this.generateMipmaps = false;

        }

        DepthTexture.prototype = Object.create(Texture.prototype);
        DepthTexture.prototype.constructor = DepthTexture;
        DepthTexture.prototype.isDepthTexture = true;

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / https://github.com/Mugen87
         */

        function WireframeGeometry(geometry) {

            BufferGeometry.call(this);

            this.type = 'WireframeGeometry';

            // buffer

            var vertices = [];

            // helper variables

            var i, j, l, o, ol;
            var edge = [0, 0],
                edges = {},
                e;
            var key, keys = ['a', 'b', 'c'];
            var vertex;

            // different logic for Geometry and BufferGeometry

            if (geometry && geometry.isGeometry) {

                // create a data structure that contains all edges without duplicates

                var faces = geometry.faces;

                for (i = 0, l = faces.length; i < l; i++) {

                    var face = faces[i];

                    for (j = 0; j < 3; j++) {

                        edge[0] = face[keys[j]];
                        edge[1] = face[keys[(j + 1) % 3]];
                        edge.sort(sortFunction); // sorting prevents duplicates

                        key = edge.toString();

                        if (edges[key] === undefined) {

                            edges[key] = {
                                index1: edge[0],
                                index2: edge[1]
                            };

                        }

                    }

                }

                // generate vertices

                for (key in edges) {

                    e = edges[key];

                    vertex = geometry.vertices[e.index1];
                    vertices.push(vertex.x, vertex.y, vertex.z);

                    vertex = geometry.vertices[e.index2];
                    vertices.push(vertex.x, vertex.y, vertex.z);

                }

            } else if (geometry && geometry.isBufferGeometry) {

                var position, indices, groups;
                var group, start, count;
                var index1, index2;

                vertex = new Vector3();

                if (geometry.index !== null) {

                    // indexed BufferGeometry

                    position = geometry.attributes.position;
                    indices = geometry.index;
                    groups = geometry.groups;

                    if (groups.length === 0) {

                        geometry.addGroup(0, indices.count);

                    }

                    // create a data structure that contains all eges without duplicates

                    for (o = 0, ol = groups.length; o < ol; ++o) {

                        group = groups[o];

                        start = group.start;
                        count = group.count;

                        for (i = start, l = (start + count); i < l; i += 3) {

                            for (j = 0; j < 3; j++) {

                                edge[0] = indices.getX(i + j);
                                edge[1] = indices.getX(i + (j + 1) % 3);
                                edge.sort(sortFunction); // sorting prevents duplicates

                                key = edge.toString();

                                if (edges[key] === undefined) {

                                    edges[key] = {
                                        index1: edge[0],
                                        index2: edge[1]
                                    };

                                }

                            }

                        }

                    }

                    // generate vertices

                    for (key in edges) {

                        e = edges[key];

                        vertex.fromBufferAttribute(position, e.index1);
                        vertices.push(vertex.x, vertex.y, vertex.z);

                        vertex.fromBufferAttribute(position, e.index2);
                        vertices.push(vertex.x, vertex.y, vertex.z);

                    }

                } else {

                    // non-indexed BufferGeometry

                    position = geometry.attributes.position;

                    for (i = 0, l = (position.count / 3); i < l; i++) {

                        for (j = 0; j < 3; j++) {

                            // three edges per triangle, an edge is represented as (index1, index2)
                            // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

                            index1 = 3 * i + j;
                            vertex.fromBufferAttribute(position, index1);
                            vertices.push(vertex.x, vertex.y, vertex.z);

                            index2 = 3 * i + ((j + 1) % 3);
                            vertex.fromBufferAttribute(position, index2);
                            vertices.push(vertex.x, vertex.y, vertex.z);

                        }

                    }

                }

            }

            // build geometry

            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));

            // custom array sort function

            function sortFunction(a, b) {

                return a - b;

            }

        }

        WireframeGeometry.prototype = Object.create(BufferGeometry.prototype);
        WireframeGeometry.prototype.constructor = WireframeGeometry;

        /**
         * @author zz85 / https://github.com/zz85
         *
         * Parametric Surfaces Geometry
         * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
         */

        function ParametricGeometry(func, slices, stacks) {

            Geometry.call(this);

            this.type = 'ParametricGeometry';

            this.parameters = {
                func: func,
                slices: slices,
                stacks: stacks
            };

            this.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks));
            this.mergeVertices();

        }

        ParametricGeometry.prototype = Object.create(Geometry.prototype);
        ParametricGeometry.prototype.constructor = ParametricGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         *
         * Parametric Surfaces Geometry
         * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
         */

        function ParametricBufferGeometry(func, slices, stacks) {

            BufferGeometry.call(this);

            this.type = 'ParametricBufferGeometry';

            this.parameters = {
                func: func,
                slices: slices,
                stacks: stacks
            };

            // buffers

            var indices = [];
            var vertices = [];
            var uvs = [];

            var i, j;

            // generate vertices and uvs

            var sliceCount = slices + 1;

            for (i = 0; i <= stacks; i++) {

                var v = i / stacks;

                for (j = 0; j <= slices; j++) {

                    var u = j / slices;

                    var p = func(u, v);
                    vertices.push(p.x, p.y, p.z);

                    uvs.push(u, v);

                }

            }

            // generate indices

            for (i = 0; i < stacks; i++) {

                for (j = 0; j < slices; j++) {

                    var a = i * sliceCount + j;
                    var b = i * sliceCount + j + 1;
                    var c = (i + 1) * sliceCount + j + 1;
                    var d = (i + 1) * sliceCount + j;

                    // faces one and two

                    indices.push(a, b, d);
                    indices.push(b, c, d);

                }

            }

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

            // generate normals

            this.computeVertexNormals();

        }

        ParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

        /**
         * @author clockworkgeek / https://github.com/clockworkgeek
         * @author timothypratley / https://github.com/timothypratley
         * @author WestLangley / http://github.com/WestLangley
         */

        function PolyhedronGeometry(vertices, indices, radius, detail) {

            Geometry.call(this);

            this.type = 'PolyhedronGeometry';

            this.parameters = {
                vertices: vertices,
                indices: indices,
                radius: radius,
                detail: detail
            };

            this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices, indices, radius, detail));
            this.mergeVertices();

        }

        PolyhedronGeometry.prototype = Object.create(Geometry.prototype);
        PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function PolyhedronBufferGeometry(vertices, indices, radius, detail) {

            BufferGeometry.call(this);

            this.type = 'PolyhedronBufferGeometry';

            this.parameters = {
                vertices: vertices,
                indices: indices,
                radius: radius,
                detail: detail
            };

            radius = radius || 1;
            detail = detail || 0;

            // default buffer data

            var vertexBuffer = [];
            var uvBuffer = [];

            // the subdivision creates the vertex buffer data

            subdivide(detail);

            // all vertices should lie on a conceptual sphere with a given radius

            appplyRadius(radius);

            // finally, create the uv data

            generateUVs();

            // build non-indexed geometry

            this.addAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));
            this.addAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));
            this.normalizeNormals();

            // helper functions

            function subdivide(detail) {

                var a = new Vector3();
                var b = new Vector3();
                var c = new Vector3();

                // iterate over all faces and apply a subdivison with the given detail value

                for (var i = 0; i < indices.length; i += 3) {

                    // get the vertices of the face

                    getVertexByIndex(indices[i + 0], a);
                    getVertexByIndex(indices[i + 1], b);
                    getVertexByIndex(indices[i + 2], c);

                    // perform subdivision

                    subdivideFace(a, b, c, detail);

                }

            }

            function subdivideFace(a, b, c, detail) {

                var cols = Math.pow(2, detail);

                // we use this multidimensional array as a data structure for creating the subdivision

                var v = [];

                var i, j;

                // construct all of the vertices for this subdivision

                for (i = 0; i <= cols; i++) {

                    v[i] = [];

                    var aj = a.clone().lerp(c, i / cols);
                    var bj = b.clone().lerp(c, i / cols);

                    var rows = cols - i;

                    for (j = 0; j <= rows; j++) {

                        if (j === 0 && i === cols) {

                            v[i][j] = aj;

                        } else {

                            v[i][j] = aj.clone().lerp(bj, j / rows);

                        }

                    }

                }

                // construct all of the faces

                for (i = 0; i < cols; i++) {

                    for (j = 0; j < 2 * (cols - i) - 1; j++) {

                        var k = Math.floor(j / 2);

                        if (j % 2 === 0) {

                            pushVertex(v[i][k + 1]);
                            pushVertex(v[i + 1][k]);
                            pushVertex(v[i][k]);

                        } else {

                            pushVertex(v[i][k + 1]);
                            pushVertex(v[i + 1][k + 1]);
                            pushVertex(v[i + 1][k]);

                        }

                    }

                }

            }

            function appplyRadius(radius) {

                var vertex = new Vector3();

                // iterate over the entire buffer and apply the radius to each vertex

                for (var i = 0; i < vertexBuffer.length; i += 3) {

                    vertex.x = vertexBuffer[i + 0];
                    vertex.y = vertexBuffer[i + 1];
                    vertex.z = vertexBuffer[i + 2];

                    vertex.normalize().multiplyScalar(radius);

                    vertexBuffer[i + 0] = vertex.x;
                    vertexBuffer[i + 1] = vertex.y;
                    vertexBuffer[i + 2] = vertex.z;

                }

            }

            function generateUVs() {

                var vertex = new Vector3();

                for (var i = 0; i < vertexBuffer.length; i += 3) {

                    vertex.x = vertexBuffer[i + 0];
                    vertex.y = vertexBuffer[i + 1];
                    vertex.z = vertexBuffer[i + 2];

                    var u = azimuth(vertex) / 2 / Math.PI + 0.5;
                    var v = inclination(vertex) / Math.PI + 0.5;
                    uvBuffer.push(u, 1 - v);

                }

                correctUVs();

                correctSeam();

            }

            function correctSeam() {

                // handle case when face straddles the seam, see #3269

                for (var i = 0; i < uvBuffer.length; i += 6) {

                    // uv data of a single face

                    var x0 = uvBuffer[i + 0];
                    var x1 = uvBuffer[i + 2];
                    var x2 = uvBuffer[i + 4];

                    var max = Math.max(x0, x1, x2);
                    var min = Math.min(x0, x1, x2);

                    // 0.9 is somewhat arbitrary

                    if (max > 0.9 && min < 0.1) {

                        if (x0 < 0.2) uvBuffer[i + 0] += 1;
                        if (x1 < 0.2) uvBuffer[i + 2] += 1;
                        if (x2 < 0.2) uvBuffer[i + 4] += 1;

                    }

                }

            }

            function pushVertex(vertex) {

                vertexBuffer.push(vertex.x, vertex.y, vertex.z);

            }

            function getVertexByIndex(index, vertex) {

                var stride = index * 3;

                vertex.x = vertices[stride + 0];
                vertex.y = vertices[stride + 1];
                vertex.z = vertices[stride + 2];

            }

            function correctUVs() {

                var a = new Vector3();
                var b = new Vector3();
                var c = new Vector3();

                var centroid = new Vector3();

                var uvA = new Vector2();
                var uvB = new Vector2();
                var uvC = new Vector2();

                for (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {

                    a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
                    b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
                    c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);

                    uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
                    uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
                    uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);

                    centroid.copy(a).add(b).add(c).divideScalar(3);

                    var azi = azimuth(centroid);

                    correctUV(uvA, j + 0, a, azi);
                    correctUV(uvB, j + 2, b, azi);
                    correctUV(uvC, j + 4, c, azi);

                }

            }

            function correctUV(uv, stride, vector, azimuth) {

                if ((azimuth < 0) && (uv.x === 1)) {

                    uvBuffer[stride] = uv.x - 1;

                }

                if ((vector.x === 0) && (vector.z === 0)) {

                    uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;

                }

            }

            // Angle around the Y axis, counter-clockwise when looking from above.

            function azimuth(vector) {

                return Math.atan2(vector.z, -vector.x);

            }


            // Angle above the XZ plane.

            function inclination(vector) {

                return Math.atan2(-vector.y, Math.sqrt((vector.x * vector.x) + (vector.z * vector.z)));

            }

        }

        PolyhedronBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

        /**
         * @author timothypratley / https://github.com/timothypratley
         */

        function TetrahedronGeometry(radius, detail) {

            Geometry.call(this);

            this.type = 'TetrahedronGeometry';

            this.parameters = {
                radius: radius,
                detail: detail
            };

            this.fromBufferGeometry(new TetrahedronBufferGeometry(radius, detail));
            this.mergeVertices();

        }

        TetrahedronGeometry.prototype = Object.create(Geometry.prototype);
        TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function TetrahedronBufferGeometry(radius, detail) {

            var vertices = [
                1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1
            ];

            var indices = [
                2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1
            ];

            PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);

            this.type = 'TetrahedronBufferGeometry';

            this.parameters = {
                radius: radius,
                detail: detail
            };

        }

        TetrahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
        TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

        /**
         * @author timothypratley / https://github.com/timothypratley
         */

        function OctahedronGeometry(radius, detail) {

            Geometry.call(this);

            this.type = 'OctahedronGeometry';

            this.parameters = {
                radius: radius,
                detail: detail
            };

            this.fromBufferGeometry(new OctahedronBufferGeometry(radius, detail));
            this.mergeVertices();

        }

        OctahedronGeometry.prototype = Object.create(Geometry.prototype);
        OctahedronGeometry.prototype.constructor = OctahedronGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function OctahedronBufferGeometry(radius, detail) {

            var vertices = [
                1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1
            ];

            var indices = [
                0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2
            ];

            PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);

            this.type = 'OctahedronBufferGeometry';

            this.parameters = {
                radius: radius,
                detail: detail
            };

        }

        OctahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
        OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

        /**
         * @author timothypratley / https://github.com/timothypratley
         */

        function IcosahedronGeometry(radius, detail) {

            Geometry.call(this);

            this.type = 'IcosahedronGeometry';

            this.parameters = {
                radius: radius,
                detail: detail
            };

            this.fromBufferGeometry(new IcosahedronBufferGeometry(radius, detail));
            this.mergeVertices();

        }

        IcosahedronGeometry.prototype = Object.create(Geometry.prototype);
        IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function IcosahedronBufferGeometry(radius, detail) {

            var t = (1 + Math.sqrt(5)) / 2;

            var vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0,
                0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t,
                t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1
            ];

            var indices = [
                0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11,
                1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8,
                3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9,
                4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1
            ];

            PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);

            this.type = 'IcosahedronBufferGeometry';

            this.parameters = {
                radius: radius,
                detail: detail
            };

        }

        IcosahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
        IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

        /**
         * @author Abe Pazos / https://hamoid.com
         */

        function DodecahedronGeometry(radius, detail) {

            Geometry.call(this);

            this.type = 'DodecahedronGeometry';

            this.parameters = {
                radius: radius,
                detail: detail
            };

            this.fromBufferGeometry(new DodecahedronBufferGeometry(radius, detail));
            this.mergeVertices();

        }

        DodecahedronGeometry.prototype = Object.create(Geometry.prototype);
        DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function DodecahedronBufferGeometry(radius, detail) {

            var t = (1 + Math.sqrt(5)) / 2;
            var r = 1 / t;

            var vertices = [

                // (±1, ±1, ±1)
                -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1,
                1, -1, -1, 1, -1, 1,
                1, 1, -1, 1, 1, 1,

                // (0, ±1/φ, ±φ)
                0, -r, -t, 0, -r, t,
                0, r, -t, 0, r, t,

                // (±1/φ, ±φ, 0)
                -r, -t, 0, -r, t, 0,
                r, -t, 0, r, t, 0,

                // (±φ, 0, ±1/φ)
                -t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r
            ];

            var indices = [
                3, 11, 7, 3, 7, 15, 3, 15, 13,
                7, 19, 17, 7, 17, 6, 7, 6, 15,
                17, 4, 8, 17, 8, 10, 17, 10, 6,
                8, 0, 16, 8, 16, 2, 8, 2, 10,
                0, 12, 1, 0, 1, 18, 0, 18, 16,
                6, 10, 2, 6, 2, 13, 6, 13, 15,
                2, 16, 18, 2, 18, 3, 2, 3, 13,
                18, 1, 9, 18, 9, 11, 18, 11, 3,
                4, 14, 12, 4, 12, 0, 4, 0, 8,
                11, 9, 5, 11, 5, 19, 11, 19, 7,
                19, 5, 14, 19, 14, 4, 19, 4, 17,
                1, 12, 14, 1, 14, 5, 1, 5, 9
            ];

            PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);

            this.type = 'DodecahedronBufferGeometry';

            this.parameters = {
                radius: radius,
                detail: detail
            };

        }

        DodecahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
        DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

        /**
         * @author oosmoxiecode / https://github.com/oosmoxiecode
         * @author WestLangley / https://github.com/WestLangley
         * @author zz85 / https://github.com/zz85
         * @author miningold / https://github.com/miningold
         * @author jonobr1 / https://github.com/jonobr1
         *
         * Creates a tube which extrudes along a 3d spline.
         */

        function TubeGeometry(path, tubularSegments, radius, radialSegments, closed, taper) {

            Geometry.call(this);

            this.type = 'TubeGeometry';

            this.parameters = {
                path: path,
                tubularSegments: tubularSegments,
                radius: radius,
                radialSegments: radialSegments,
                closed: closed
            };

            if (taper !== undefined) console.warn('THREE.TubeGeometry: taper has been removed.');

            var bufferGeometry = new TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed);

            // expose internals

            this.tangents = bufferGeometry.tangents;
            this.normals = bufferGeometry.normals;
            this.binormals = bufferGeometry.binormals;

            // create geometry

            this.fromBufferGeometry(bufferGeometry);
            this.mergeVertices();

        }

        TubeGeometry.prototype = Object.create(Geometry.prototype);
        TubeGeometry.prototype.constructor = TubeGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed) {

            BufferGeometry.call(this);

            this.type = 'TubeBufferGeometry';

            this.parameters = {
                path: path,
                tubularSegments: tubularSegments,
                radius: radius,
                radialSegments: radialSegments,
                closed: closed
            };

            tubularSegments = tubularSegments || 64;
            radius = radius || 1;
            radialSegments = radialSegments || 8;
            closed = closed || false;

            var frames = path.computeFrenetFrames(tubularSegments, closed);

            // expose internals

            this.tangents = frames.tangents;
            this.normals = frames.normals;
            this.binormals = frames.binormals;

            // helper variables

            var vertex = new Vector3();
            var normal = new Vector3();
            var uv = new Vector2();

            var i, j;

            // buffer

            var vertices = [];
            var normals = [];
            var uvs = [];
            var indices = [];

            // create buffer data

            generateBufferData();

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

            // functions

            function generateBufferData() {

                for (i = 0; i < tubularSegments; i++) {

                    generateSegment(i);

                }

                // if the geometry is not closed, generate the last row of vertices and normals
                // at the regular position on the given path
                //
                // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

                generateSegment((closed === false) ? tubularSegments : 0);

                // uvs are generated in a separate function.
                // this makes it easy compute correct values for closed geometries

                generateUVs();

                // finally create faces

                generateIndices();

            }

            function generateSegment(i) {

                // we use getPointAt to sample evenly distributed points from the given path

                var P = path.getPointAt(i / tubularSegments);

                // retrieve corresponding normal and binormal

                var N = frames.normals[i];
                var B = frames.binormals[i];

                // generate normals and vertices for the current segment

                for (j = 0; j <= radialSegments; j++) {

                    var v = j / radialSegments * Math.PI * 2;

                    var sin = Math.sin(v);
                    var cos = -Math.cos(v);

                    // normal

                    normal.x = (cos * N.x + sin * B.x);
                    normal.y = (cos * N.y + sin * B.y);
                    normal.z = (cos * N.z + sin * B.z);
                    normal.normalize();

                    normals.push(normal.x, normal.y, normal.z);

                    // vertex

                    vertex.x = P.x + radius * normal.x;
                    vertex.y = P.y + radius * normal.y;
                    vertex.z = P.z + radius * normal.z;

                    vertices.push(vertex.x, vertex.y, vertex.z);

                }

            }

            function generateIndices() {

                for (j = 1; j <= tubularSegments; j++) {

                    for (i = 1; i <= radialSegments; i++) {

                        var a = (radialSegments + 1) * (j - 1) + (i - 1);
                        var b = (radialSegments + 1) * j + (i - 1);
                        var c = (radialSegments + 1) * j + i;
                        var d = (radialSegments + 1) * (j - 1) + i;

                        // faces

                        indices.push(a, b, d);
                        indices.push(b, c, d);

                    }

                }

            }

            function generateUVs() {

                for (i = 0; i <= tubularSegments; i++) {

                    for (j = 0; j <= radialSegments; j++) {

                        uv.x = i / tubularSegments;
                        uv.y = j / radialSegments;

                        uvs.push(uv.x, uv.y);

                    }

                }

            }

        }

        TubeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

        /**
         * @author oosmoxiecode
         */

        function TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q, heightScale) {

            Geometry.call(this);

            this.type = 'TorusKnotGeometry';

            this.parameters = {
                radius: radius,
                tube: tube,
                tubularSegments: tubularSegments,
                radialSegments: radialSegments,
                p: p,
                q: q
            };

            if (heightScale !== undefined) console.warn('THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.');

            this.fromBufferGeometry(new TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q));
            this.mergeVertices();

        }

        TorusKnotGeometry.prototype = Object.create(Geometry.prototype);
        TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         * see: http://www.blackpawn.com/texts/pqtorus/
         */

        function TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q) {

            BufferGeometry.call(this);

            this.type = 'TorusKnotBufferGeometry';

            this.parameters = {
                radius: radius,
                tube: tube,
                tubularSegments: tubularSegments,
                radialSegments: radialSegments,
                p: p,
                q: q
            };

            radius = radius || 100;
            tube = tube || 40;
            tubularSegments = Math.floor(tubularSegments) || 64;
            radialSegments = Math.floor(radialSegments) || 8;
            p = p || 2;
            q = q || 3;

            // buffers

            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];

            // helper variables

            var i, j;

            var vertex = new Vector3();
            var normal = new Vector3();
            var uv = new Vector2();

            var P1 = new Vector3();
            var P2 = new Vector3();

            var B = new Vector3();
            var T = new Vector3();
            var N = new Vector3();

            // generate vertices, normals and uvs

            for (i = 0; i <= tubularSegments; ++i) {

                // the radian "u" is used to calculate the position on the torus curve of the current tubular segement

                var u = i / tubularSegments * p * Math.PI * 2;

                // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
                // these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

                calculatePositionOnCurve(u, p, q, radius, P1);
                calculatePositionOnCurve(u + 0.01, p, q, radius, P2);

                // calculate orthonormal basis

                T.subVectors(P2, P1);
                N.addVectors(P2, P1);
                B.crossVectors(T, N);
                N.crossVectors(B, T);

                // normalize B, N. T can be ignored, we don't use it

                B.normalize();
                N.normalize();

                for (j = 0; j <= radialSegments; ++j) {

                    // now calculate the vertices. they are nothing more than an extrusion of the torus curve.
                    // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

                    var v = j / radialSegments * Math.PI * 2;
                    var cx = -tube * Math.cos(v);
                    var cy = tube * Math.sin(v);

                    // now calculate the final vertex position.
                    // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

                    vertex.x = P1.x + (cx * N.x + cy * B.x);
                    vertex.y = P1.y + (cx * N.y + cy * B.y);
                    vertex.z = P1.z + (cx * N.z + cy * B.z);

                    vertices.push(vertex.x, vertex.y, vertex.z);

                    // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

                    normal.subVectors(vertex, P1).normalize();

                    normals.push(normal.x, normal.y, normal.z);

                    // uv

                    uvs.push(i / tubularSegments);
                    uvs.push(j / radialSegments);

                }

            }

            // generate indices

            for (j = 1; j <= tubularSegments; j++) {

                for (i = 1; i <= radialSegments; i++) {

                    // indices

                    var a = (radialSegments + 1) * (j - 1) + (i - 1);
                    var b = (radialSegments + 1) * j + (i - 1);
                    var c = (radialSegments + 1) * j + i;
                    var d = (radialSegments + 1) * (j - 1) + i;

                    // faces

                    indices.push(a, b, d);
                    indices.push(b, c, d);

                }

            }

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

            // this function calculates the current position on the torus curve

            function calculatePositionOnCurve(u, p, q, radius, position) {

                var cu = Math.cos(u);
                var su = Math.sin(u);
                var quOverP = q / p * u;
                var cs = Math.cos(quOverP);

                position.x = radius * (2 + cs) * 0.5 * cu;
                position.y = radius * (2 + cs) * su * 0.5;
                position.z = radius * Math.sin(quOverP) * 0.5;

            }

        }

        TorusKnotBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

        /**
         * @author oosmoxiecode
         * @author mrdoob / http://mrdoob.com/
         * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
         */

        function TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {

            Geometry.call(this);

            this.type = 'TorusGeometry';

            this.parameters = {
                radius: radius,
                tube: tube,
                radialSegments: radialSegments,
                tubularSegments: tubularSegments,
                arc: arc
            };

            this.fromBufferGeometry(new TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc));

        }

        TorusGeometry.prototype = Object.create(Geometry.prototype);
        TorusGeometry.prototype.constructor = TorusGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc) {

            BufferGeometry.call(this);

            this.type = 'TorusBufferGeometry';

            this.parameters = {
                radius: radius,
                tube: tube,
                radialSegments: radialSegments,
                tubularSegments: tubularSegments,
                arc: arc
            };

            radius = radius || 100;
            tube = tube || 40;
            radialSegments = Math.floor(radialSegments) || 8;
            tubularSegments = Math.floor(tubularSegments) || 6;
            arc = arc || Math.PI * 2;

            // buffers

            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];

            // helper variables

            var center = new Vector3();
            var vertex = new Vector3();
            var normal = new Vector3();

            var j, i;

            // generate vertices, normals and uvs

            for (j = 0; j <= radialSegments; j++) {

                for (i = 0; i <= tubularSegments; i++) {

                    var u = i / tubularSegments * arc;
                    var v = j / radialSegments * Math.PI * 2;

                    // vertex

                    vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
                    vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
                    vertex.z = tube * Math.sin(v);

                    vertices.push(vertex.x, vertex.y, vertex.z);

                    // normal

                    center.x = radius * Math.cos(u);
                    center.y = radius * Math.sin(u);
                    normal.subVectors(vertex, center).normalize();

                    normals.push(normal.x, normal.y, normal.z);

                    // uv

                    uvs.push(i / tubularSegments);
                    uvs.push(j / radialSegments);

                }

            }

            // generate indices

            for (j = 1; j <= radialSegments; j++) {

                for (i = 1; i <= tubularSegments; i++) {

                    // indices

                    var a = (tubularSegments + 1) * j + i - 1;
                    var b = (tubularSegments + 1) * (j - 1) + i - 1;
                    var c = (tubularSegments + 1) * (j - 1) + i;
                    var d = (tubularSegments + 1) * j + i;

                    // faces

                    indices.push(a, b, d);
                    indices.push(b, c, d);

                }

            }

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

        }

        TorusBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         */

        var ShapeUtils = {

            // calculate area of the contour polygon

            area: function(contour) {

                var n = contour.length;
                var a = 0.0;

                for (var p = n - 1, q = 0; q < n; p = q++) {

                    a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;

                }

                return a * 0.5;

            },

            triangulate: (function() {

                /**
                 * This code is a quick port of code written in C++ which was submitted to
                 * flipcode.com by John W. Ratcliff  // July 22, 2000
                 * See original code and more information here:
                 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
                 *
                 * ported to actionscript by Zevan Rosser
                 * www.actionsnippet.com
                 *
                 * ported to javascript by Joshua Koo
                 * http://www.lab4games.net/zz85/blog
                 *
                 */

                function snip(contour, u, v, w, n, verts) {

                    var p;
                    var ax, ay, bx, by;
                    var cx, cy, px, py;

                    ax = contour[verts[u]].x;
                    ay = contour[verts[u]].y;

                    bx = contour[verts[v]].x;
                    by = contour[verts[v]].y;

                    cx = contour[verts[w]].x;
                    cy = contour[verts[w]].y;

                    if ((bx - ax) * (cy - ay) - (by - ay) * (cx - ax) <= 0) return false;

                    var aX, aY, bX, bY, cX, cY;
                    var apx, apy, bpx, bpy, cpx, cpy;
                    var cCROSSap, bCROSScp, aCROSSbp;

                    aX = cx - bx;
                    aY = cy - by;
                    bX = ax - cx;
                    bY = ay - cy;
                    cX = bx - ax;
                    cY = by - ay;

                    for (p = 0; p < n; p++) {

                        px = contour[verts[p]].x;
                        py = contour[verts[p]].y;

                        if (((px === ax) && (py === ay)) ||
                            ((px === bx) && (py === by)) ||
                            ((px === cx) && (py === cy))) continue;

                        apx = px - ax;
                        apy = py - ay;
                        bpx = px - bx;
                        bpy = py - by;
                        cpx = px - cx;
                        cpy = py - cy;

                        // see if p is inside triangle abc

                        aCROSSbp = aX * bpy - aY * bpx;
                        cCROSSap = cX * apy - cY * apx;
                        bCROSScp = bX * cpy - bY * cpx;

                        if ((aCROSSbp >= -Number.EPSILON) && (bCROSScp >= -Number.EPSILON) && (cCROSSap >= -Number.EPSILON)) return false;

                    }

                    return true;

                }

                // takes in an contour array and returns

                return function triangulate(contour, indices) {

                    var n = contour.length;

                    if (n < 3) return null;

                    var result = [],
                        verts = [],
                        vertIndices = [];

                    /* we want a counter-clockwise polygon in verts */

                    var u, v, w;

                    if (ShapeUtils.area(contour) > 0.0) {

                        for (v = 0; v < n; v++) verts[v] = v;

                    } else {

                        for (v = 0; v < n; v++) verts[v] = (n - 1) - v;

                    }

                    var nv = n;

                    /*  remove nv - 2 vertices, creating 1 triangle every time */

                    var count = 2 * nv; /* error detection */

                    for (v = nv - 1; nv > 2;) {

                        /* if we loop, it is probably a non-simple polygon */

                        if ((count--) <= 0) {

                            //** Triangulate: ERROR - probable bad polygon!

                            //throw ( "Warning, unable to triangulate polygon!" );
                            //return null;
                            // Sometimes warning is fine, especially polygons are triangulated in reverse.
                            console.warn('THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()');

                            if (indices) return vertIndices;
                            return result;

                        }

                        /* three consecutive vertices in current polygon, <u,v,w> */

                        u = v;
                        if (nv <= u) u = 0; /* previous */
                        v = u + 1;
                        if (nv <= v) v = 0; /* new v    */
                        w = v + 1;
                        if (nv <= w) w = 0; /* next     */

                        if (snip(contour, u, v, w, nv, verts)) {

                            var a, b, c, s, t;

                            /* true names of the vertices */

                            a = verts[u];
                            b = verts[v];
                            c = verts[w];

                            /* output Triangle */

                            result.push([contour[a],
                                contour[b],
                                contour[c]
                            ]);


                            vertIndices.push([verts[u], verts[v], verts[w]]);

                            /* remove v from the remaining polygon */

                            for (s = v, t = v + 1; t < nv; s++, t++) {

                                verts[s] = verts[t];

                            }

                            nv--;

                            /* reset error detection counter */

                            count = 2 * nv;

                        }

                    }

                    if (indices) return vertIndices;
                    return result;

                }

            })(),

            triangulateShape: function(contour, holes) {

                function removeDupEndPts(points) {

                    var l = points.length;

                    if (l > 2 && points[l - 1].equals(points[0])) {

                        points.pop();

                    }

                }

                removeDupEndPts(contour);
                holes.forEach(removeDupEndPts);

                function point_in_segment_2D_colin(inSegPt1, inSegPt2, inOtherPt) {

                    // inOtherPt needs to be collinear to the inSegment
                    if (inSegPt1.x !== inSegPt2.x) {

                        if (inSegPt1.x < inSegPt2.x) {

                            return ((inSegPt1.x <= inOtherPt.x) && (inOtherPt.x <= inSegPt2.x));

                        } else {

                            return ((inSegPt2.x <= inOtherPt.x) && (inOtherPt.x <= inSegPt1.x));

                        }

                    } else {

                        if (inSegPt1.y < inSegPt2.y) {

                            return ((inSegPt1.y <= inOtherPt.y) && (inOtherPt.y <= inSegPt2.y));

                        } else {

                            return ((inSegPt2.y <= inOtherPt.y) && (inOtherPt.y <= inSegPt1.y));

                        }

                    }

                }

                function intersect_segments_2D(inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs) {

                    var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,
                        seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
                    var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,
                        seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

                    var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
                    var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

                    var limit = seg1dy * seg2dx - seg1dx * seg2dy;
                    var perpSeg1 = seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

                    if (Math.abs(limit) > Number.EPSILON) {

                        // not parallel

                        var perpSeg2;
                        if (limit > 0) {

                            if ((perpSeg1 < 0) || (perpSeg1 > limit)) return [];
                            perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
                            if ((perpSeg2 < 0) || (perpSeg2 > limit)) return [];

                        } else {

                            if ((perpSeg1 > 0) || (perpSeg1 < limit)) return [];
                            perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
                            if ((perpSeg2 > 0) || (perpSeg2 < limit)) return [];

                        }

                        // i.e. to reduce rounding errors
                        // intersection at endpoint of segment#1?
                        if (perpSeg2 === 0) {

                            if ((inExcludeAdjacentSegs) &&
                                ((perpSeg1 === 0) || (perpSeg1 === limit))) return [];
                            return [inSeg1Pt1];

                        }
                        if (perpSeg2 === limit) {

                            if ((inExcludeAdjacentSegs) &&
                                ((perpSeg1 === 0) || (perpSeg1 === limit))) return [];
                            return [inSeg1Pt2];

                        }
                        // intersection at endpoint of segment#2?
                        if (perpSeg1 === 0) return [inSeg2Pt1];
                        if (perpSeg1 === limit) return [inSeg2Pt2];

                        // return real intersection point
                        var factorSeg1 = perpSeg2 / limit;
                        return [{
                            x: inSeg1Pt1.x + factorSeg1 * seg1dx,
                            y: inSeg1Pt1.y + factorSeg1 * seg1dy
                        }];

                    } else {

                        // parallel or collinear
                        if ((perpSeg1 !== 0) ||
                            (seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy)) return [];

                        // they are collinear or degenerate
                        var seg1Pt = ((seg1dx === 0) && (seg1dy === 0)); // segment1 is just a point?
                        var seg2Pt = ((seg2dx === 0) && (seg2dy === 0)); // segment2 is just a point?
                        // both segments are points
                        if (seg1Pt && seg2Pt) {

                            if ((inSeg1Pt1.x !== inSeg2Pt1.x) ||
                                (inSeg1Pt1.y !== inSeg2Pt1.y)) return []; // they are distinct  points
                            return [inSeg1Pt1]; // they are the same point

                        }
                        // segment#1  is a single point
                        if (seg1Pt) {

                            if (!point_in_segment_2D_colin(inSeg2Pt1, inSeg2Pt2, inSeg1Pt1)) return []; // but not in segment#2
                            return [inSeg1Pt1];

                        }
                        // segment#2  is a single point
                        if (seg2Pt) {

                            if (!point_in_segment_2D_colin(inSeg1Pt1, inSeg1Pt2, inSeg2Pt1)) return []; // but not in segment#1
                            return [inSeg2Pt1];

                        }

                        // they are collinear segments, which might overlap
                        var seg1min, seg1max, seg1minVal, seg1maxVal;
                        var seg2min, seg2max, seg2minVal, seg2maxVal;
                        if (seg1dx !== 0) {

                            // the segments are NOT on a vertical line
                            if (inSeg1Pt1.x < inSeg1Pt2.x) {

                                seg1min = inSeg1Pt1;
                                seg1minVal = inSeg1Pt1.x;
                                seg1max = inSeg1Pt2;
                                seg1maxVal = inSeg1Pt2.x;

                            } else {

                                seg1min = inSeg1Pt2;
                                seg1minVal = inSeg1Pt2.x;
                                seg1max = inSeg1Pt1;
                                seg1maxVal = inSeg1Pt1.x;

                            }
                            if (inSeg2Pt1.x < inSeg2Pt2.x) {

                                seg2min = inSeg2Pt1;
                                seg2minVal = inSeg2Pt1.x;
                                seg2max = inSeg2Pt2;
                                seg2maxVal = inSeg2Pt2.x;

                            } else {

                                seg2min = inSeg2Pt2;
                                seg2minVal = inSeg2Pt2.x;
                                seg2max = inSeg2Pt1;
                                seg2maxVal = inSeg2Pt1.x;

                            }

                        } else {

                            // the segments are on a vertical line
                            if (inSeg1Pt1.y < inSeg1Pt2.y) {

                                seg1min = inSeg1Pt1;
                                seg1minVal = inSeg1Pt1.y;
                                seg1max = inSeg1Pt2;
                                seg1maxVal = inSeg1Pt2.y;

                            } else {

                                seg1min = inSeg1Pt2;
                                seg1minVal = inSeg1Pt2.y;
                                seg1max = inSeg1Pt1;
                                seg1maxVal = inSeg1Pt1.y;

                            }
                            if (inSeg2Pt1.y < inSeg2Pt2.y) {

                                seg2min = inSeg2Pt1;
                                seg2minVal = inSeg2Pt1.y;
                                seg2max = inSeg2Pt2;
                                seg2maxVal = inSeg2Pt2.y;

                            } else {

                                seg2min = inSeg2Pt2;
                                seg2minVal = inSeg2Pt2.y;
                                seg2max = inSeg2Pt1;
                                seg2maxVal = inSeg2Pt1.y;

                            }

                        }
                        if (seg1minVal <= seg2minVal) {

                            if (seg1maxVal < seg2minVal) return [];
                            if (seg1maxVal === seg2minVal) {

                                if (inExcludeAdjacentSegs) return [];
                                return [seg2min];

                            }
                            if (seg1maxVal <= seg2maxVal) return [seg2min, seg1max];
                            return [seg2min, seg2max];

                        } else {

                            if (seg1minVal > seg2maxVal) return [];
                            if (seg1minVal === seg2maxVal) {

                                if (inExcludeAdjacentSegs) return [];
                                return [seg1min];

                            }
                            if (seg1maxVal <= seg2maxVal) return [seg1min, seg1max];
                            return [seg1min, seg2max];

                        }

                    }

                }

                function isPointInsideAngle(inVertex, inLegFromPt, inLegToPt, inOtherPt) {

                    // The order of legs is important

                    // translation of all points, so that Vertex is at (0,0)
                    var legFromPtX = inLegFromPt.x - inVertex.x,
                        legFromPtY = inLegFromPt.y - inVertex.y;
                    var legToPtX = inLegToPt.x - inVertex.x,
                        legToPtY = inLegToPt.y - inVertex.y;
                    var otherPtX = inOtherPt.x - inVertex.x,
                        otherPtY = inOtherPt.y - inVertex.y;

                    // main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
                    var from2toAngle = legFromPtX * legToPtY - legFromPtY * legToPtX;
                    var from2otherAngle = legFromPtX * otherPtY - legFromPtY * otherPtX;

                    if (Math.abs(from2toAngle) > Number.EPSILON) {

                        // angle != 180 deg.

                        var other2toAngle = otherPtX * legToPtY - otherPtY * legToPtX;
                        // console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

                        if (from2toAngle > 0) {

                            // main angle < 180 deg.
                            return ((from2otherAngle >= 0) && (other2toAngle >= 0));

                        } else {

                            // main angle > 180 deg.
                            return ((from2otherAngle >= 0) || (other2toAngle >= 0));

                        }

                    } else {

                        // angle == 180 deg.
                        // console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
                        return (from2otherAngle > 0);

                    }

                }


                function removeHoles(contour, holes) {

                    var shape = contour.concat(); // work on this shape
                    var hole;

                    function isCutLineInsideAngles(inShapeIdx, inHoleIdx) {

                        // Check if hole point lies within angle around shape point
                        var lastShapeIdx = shape.length - 1;

                        var prevShapeIdx = inShapeIdx - 1;
                        if (prevShapeIdx < 0) prevShapeIdx = lastShapeIdx;

                        var nextShapeIdx = inShapeIdx + 1;
                        if (nextShapeIdx > lastShapeIdx) nextShapeIdx = 0;

                        var insideAngle = isPointInsideAngle(shape[inShapeIdx], shape[prevShapeIdx], shape[nextShapeIdx], hole[inHoleIdx]);
                        if (!insideAngle) {

                            // console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
                            return false;

                        }

                        // Check if shape point lies within angle around hole point
                        var lastHoleIdx = hole.length - 1;

                        var prevHoleIdx = inHoleIdx - 1;
                        if (prevHoleIdx < 0) prevHoleIdx = lastHoleIdx;

                        var nextHoleIdx = inHoleIdx + 1;
                        if (nextHoleIdx > lastHoleIdx) nextHoleIdx = 0;

                        insideAngle = isPointInsideAngle(hole[inHoleIdx], hole[prevHoleIdx], hole[nextHoleIdx], shape[inShapeIdx]);
                        if (!insideAngle) {

                            // console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
                            return false;

                        }

                        return true;

                    }

                    function intersectsShapeEdge(inShapePt, inHolePt) {

                        // checks for intersections with shape edges
                        var sIdx, nextIdx, intersection;
                        for (sIdx = 0; sIdx < shape.length; sIdx++) {

                            nextIdx = sIdx + 1;
                            nextIdx %= shape.length;
                            intersection = intersect_segments_2D(inShapePt, inHolePt, shape[sIdx], shape[nextIdx], true);
                            if (intersection.length > 0) return true;

                        }

                        return false;

                    }

                    var indepHoles = [];

                    function intersectsHoleEdge(inShapePt, inHolePt) {

                        // checks for intersections with hole edges
                        var ihIdx, chkHole,
                            hIdx, nextIdx, intersection;
                        for (ihIdx = 0; ihIdx < indepHoles.length; ihIdx++) {

                            chkHole = holes[indepHoles[ihIdx]];
                            for (hIdx = 0; hIdx < chkHole.length; hIdx++) {

                                nextIdx = hIdx + 1;
                                nextIdx %= chkHole.length;
                                intersection = intersect_segments_2D(inShapePt, inHolePt, chkHole[hIdx], chkHole[nextIdx], true);
                                if (intersection.length > 0) return true;

                            }

                        }
                        return false;

                    }

                    var holeIndex, shapeIndex,
                        shapePt, holePt,
                        holeIdx, cutKey, failedCuts = [],
                        tmpShape1, tmpShape2,
                        tmpHole1, tmpHole2;

                    for (var h = 0, hl = holes.length; h < hl; h++) {

                        indepHoles.push(h);

                    }

                    var minShapeIndex = 0;
                    var counter = indepHoles.length * 2;
                    while (indepHoles.length > 0) {

                        counter--;
                        if (counter < 0) {

                            console.log("Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!");
                            break;

                        }

                        // search for shape-vertex and hole-vertex,
                        // which can be connected without intersections
                        for (shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex++) {

                            shapePt = shape[shapeIndex];
                            holeIndex = -1;

                            // search for hole which can be reached without intersections
                            for (var h = 0; h < indepHoles.length; h++) {

                                holeIdx = indepHoles[h];

                                // prevent multiple checks
                                cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
                                if (failedCuts[cutKey] !== undefined) continue;

                                hole = holes[holeIdx];
                                for (var h2 = 0; h2 < hole.length; h2++) {

                                    holePt = hole[h2];
                                    if (!isCutLineInsideAngles(shapeIndex, h2)) continue;
                                    if (intersectsShapeEdge(shapePt, holePt)) continue;
                                    if (intersectsHoleEdge(shapePt, holePt)) continue;

                                    holeIndex = h2;
                                    indepHoles.splice(h, 1);

                                    tmpShape1 = shape.slice(0, shapeIndex + 1);
                                    tmpShape2 = shape.slice(shapeIndex);
                                    tmpHole1 = hole.slice(holeIndex);
                                    tmpHole2 = hole.slice(0, holeIndex + 1);

                                    shape = tmpShape1.concat(tmpHole1).concat(tmpHole2).concat(tmpShape2);

                                    minShapeIndex = shapeIndex;

                                    // Debug only, to show the selected cuts
                                    // glob_CutLines.push( [ shapePt, holePt ] );

                                    break;

                                }
                                if (holeIndex >= 0) break; // hole-vertex found

                                failedCuts[cutKey] = true; // remember failure

                            }
                            if (holeIndex >= 0) break; // hole-vertex found

                        }

                    }

                    return shape; /* shape with no holes */

                }


                var i, il, f, face,
                    key, index,
                    allPointsMap = {};

                // To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

                var allpoints = contour.concat();

                for (var h = 0, hl = holes.length; h < hl; h++) {

                    Array.prototype.push.apply(allpoints, holes[h]);

                }

                //console.log( "allpoints",allpoints, allpoints.length );

                // prepare all points map

                for (i = 0, il = allpoints.length; i < il; i++) {

                    key = allpoints[i].x + ":" + allpoints[i].y;

                    if (allPointsMap[key] !== undefined) {

                        console.warn("THREE.ShapeUtils: Duplicate point", key, i);

                    }

                    allPointsMap[key] = i;

                }

                // remove holes by cutting paths to holes and adding them to the shape
                var shapeWithoutHoles = removeHoles(contour, holes);

                var triangles = ShapeUtils.triangulate(shapeWithoutHoles, false); // True returns indices for points of spooled shape
                //console.log( "triangles",triangles, triangles.length );

                // check all face vertices against all points map

                for (i = 0, il = triangles.length; i < il; i++) {

                    face = triangles[i];

                    for (f = 0; f < 3; f++) {

                        key = face[f].x + ":" + face[f].y;

                        index = allPointsMap[key];

                        if (index !== undefined) {

                            face[f] = index;

                        }

                    }

                }

                return triangles.concat();

            },

            isClockWise: function(pts) {

                return ShapeUtils.area(pts) < 0;

            }

        };

        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         *
         * Creates extruded geometry from a path shape.
         *
         * parameters = {
         *
         *  curveSegments: <int>, // number of points on the curves
         *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
         *  amount: <int>, // Depth to extrude the shape
         *
         *  bevelEnabled: <bool>, // turn on bevel
         *  bevelThickness: <float>, // how deep into the original shape bevel goes
         *  bevelSize: <float>, // how far from shape outline is bevel
         *  bevelSegments: <int>, // number of bevel layers
         *
         *  extrudePath: <THREE.Curve> // curve to extrude shape along
         *  frames: <Object> // containing arrays of tangents, normals, binormals
         *
         *  uvGenerator: <Object> // object that provides UV generator functions
         *
         * }
         **/

        function ExtrudeGeometry(shapes, options) {

            if (typeof(shapes) === "undefined") {

                shapes = [];
                return;

            }

            Geometry.call(this);

            this.type = 'ExtrudeGeometry';

            shapes = Array.isArray(shapes) ? shapes : [shapes];

            this.addShapeList(shapes, options);

            this.computeFaceNormals();

            // can't really use automatic vertex normals
            // as then front and back sides get smoothed too
            // should do separate smoothing just for sides

            //this.computeVertexNormals();

            //console.log( "took", ( Date.now() - startTime ) );

        }

        ExtrudeGeometry.prototype = Object.create(Geometry.prototype);
        ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

        ExtrudeGeometry.prototype.addShapeList = function(shapes, options) {

            var sl = shapes.length;

            for (var s = 0; s < sl; s++) {

                var shape = shapes[s];
                this.addShape(shape, options);

            }

        };

        ExtrudeGeometry.prototype.addShape = function(shape, options) {

            var amount = options.amount !== undefined ? options.amount : 100;

            var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
            var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
            var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

            var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

            var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

            var steps = options.steps !== undefined ? options.steps : 1;

            var extrudePath = options.extrudePath;
            var extrudePts, extrudeByPath = false;

            // Use default WorldUVGenerator if no UV generators are specified.
            var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;

            var splineTube, binormal, normal, position2;
            if (extrudePath) {

                extrudePts = extrudePath.getSpacedPoints(steps);

                extrudeByPath = true;
                bevelEnabled = false; // bevels not supported for path extrusion

                // SETUP TNB variables

                // TODO1 - have a .isClosed in spline?

                splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames(steps, false);

                // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

                binormal = new Vector3();
                normal = new Vector3();
                position2 = new Vector3();

            }

            // Safeguards if bevels are not enabled

            if (!bevelEnabled) {

                bevelSegments = 0;
                bevelThickness = 0;
                bevelSize = 0;

            }

            // Variables initialization

            var ahole, h, hl; // looping of holes
            var scope = this;

            var shapesOffset = this.vertices.length;

            var shapePoints = shape.extractPoints(curveSegments);

            var vertices = shapePoints.shape;
            var holes = shapePoints.holes;

            var reverse = !ShapeUtils.isClockWise(vertices);

            if (reverse) {

                vertices = vertices.reverse();

                // Maybe we should also check if holes are in the opposite direction, just to be safe ...

                for (h = 0, hl = holes.length; h < hl; h++) {

                    ahole = holes[h];

                    if (ShapeUtils.isClockWise(ahole)) {

                        holes[h] = ahole.reverse();

                    }

                }

                reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

            }


            var faces = ShapeUtils.triangulateShape(vertices, holes);

            /* Vertices */

            var contour = vertices; // vertices has all points but contour has only points of circumference

            for (h = 0, hl = holes.length; h < hl; h++) {

                ahole = holes[h];

                vertices = vertices.concat(ahole);

            }


            function scalePt2(pt, vec, size) {

                if (!vec) console.error("THREE.ExtrudeGeometry: vec does not exist");

                return vec.clone().multiplyScalar(size).add(pt);

            }

            var b, bs, t, z,
                vert, vlen = vertices.length,
                face, flen = faces.length;


            // Find directions for point movement


            function getBevelVec(inPt, inPrev, inNext) {

                // computes for inPt the corresponding point inPt' on a new contour
                //   shifted by 1 unit (length of normalized vector) to the left
                // if we walk along contour clockwise, this new contour is outside the old one
                //
                // inPt' is the intersection of the two lines parallel to the two
                //  adjacent edges of inPt at a distance of 1 unit on the left side.

                var v_trans_x, v_trans_y, shrink_by = 1; // resulting translation vector for inPt

                // good reading for geometry algorithms (here: line-line intersection)
                // http://geomalgorithms.com/a05-_intersect-1.html

                var v_prev_x = inPt.x - inPrev.x,
                    v_prev_y = inPt.y - inPrev.y;
                var v_next_x = inNext.x - inPt.x,
                    v_next_y = inNext.y - inPt.y;

                var v_prev_lensq = (v_prev_x * v_prev_x + v_prev_y * v_prev_y);

                // check for collinear edges
                var collinear0 = (v_prev_x * v_next_y - v_prev_y * v_next_x);

                if (Math.abs(collinear0) > Number.EPSILON) {

                    // not collinear

                    // length of vectors for normalizing

                    var v_prev_len = Math.sqrt(v_prev_lensq);
                    var v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);

                    // shift adjacent points by unit vectors to the left

                    var ptPrevShift_x = (inPrev.x - v_prev_y / v_prev_len);
                    var ptPrevShift_y = (inPrev.y + v_prev_x / v_prev_len);

                    var ptNextShift_x = (inNext.x - v_next_y / v_next_len);
                    var ptNextShift_y = (inNext.y + v_next_x / v_next_len);

                    // scaling factor for v_prev to intersection point

                    var sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y -
                            (ptNextShift_y - ptPrevShift_y) * v_next_x) /
                        (v_prev_x * v_next_y - v_prev_y * v_next_x);

                    // vector from inPt to intersection point

                    v_trans_x = (ptPrevShift_x + v_prev_x * sf - inPt.x);
                    v_trans_y = (ptPrevShift_y + v_prev_y * sf - inPt.y);

                    // Don't normalize!, otherwise sharp corners become ugly
                    //  but prevent crazy spikes
                    var v_trans_lensq = (v_trans_x * v_trans_x + v_trans_y * v_trans_y);
                    if (v_trans_lensq <= 2) {

                        return new Vector2(v_trans_x, v_trans_y);

                    } else {

                        shrink_by = Math.sqrt(v_trans_lensq / 2);

                    }

                } else {

                    // handle special case of collinear edges

                    var direction_eq = false; // assumes: opposite
                    if (v_prev_x > Number.EPSILON) {

                        if (v_next_x > Number.EPSILON) {

                            direction_eq = true;

                        }

                    } else {

                        if (v_prev_x < -Number.EPSILON) {

                            if (v_next_x < -Number.EPSILON) {

                                direction_eq = true;

                            }

                        } else {

                            if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {

                                direction_eq = true;

                            }

                        }

                    }

                    if (direction_eq) {

                        // console.log("Warning: lines are a straight sequence");
                        v_trans_x = -v_prev_y;
                        v_trans_y = v_prev_x;
                        shrink_by = Math.sqrt(v_prev_lensq);

                    } else {

                        // console.log("Warning: lines are a straight spike");
                        v_trans_x = v_prev_x;
                        v_trans_y = v_prev_y;
                        shrink_by = Math.sqrt(v_prev_lensq / 2);

                    }

                }

                return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);

            }


            var contourMovements = [];

            for (var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {

                if (j === il) j = 0;
                if (k === il) k = 0;

                //  (j)---(i)---(k)
                // console.log('i,j,k', i, j , k)

                contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);

            }

            var holesMovements = [],
                oneHoleMovements, verticesMovements = contourMovements.concat();

            for (h = 0, hl = holes.length; h < hl; h++) {

                ahole = holes[h];

                oneHoleMovements = [];

                for (i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {

                    if (j === il) j = 0;
                    if (k === il) k = 0;

                    //  (j)---(i)---(k)
                    oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);

                }

                holesMovements.push(oneHoleMovements);
                verticesMovements = verticesMovements.concat(oneHoleMovements);

            }


            // Loop bevelSegments, 1 for the front, 1 for the back

            for (b = 0; b < bevelSegments; b++) {

                //for ( b = bevelSegments; b > 0; b -- ) {

                t = b / bevelSegments;
                z = bevelThickness * Math.cos(t * Math.PI / 2);
                bs = bevelSize * Math.sin(t * Math.PI / 2);

                // contract shape

                for (i = 0, il = contour.length; i < il; i++) {

                    vert = scalePt2(contour[i], contourMovements[i], bs);

                    v(vert.x, vert.y, -z);

                }

                // expand holes

                for (h = 0, hl = holes.length; h < hl; h++) {

                    ahole = holes[h];
                    oneHoleMovements = holesMovements[h];

                    for (i = 0, il = ahole.length; i < il; i++) {

                        vert = scalePt2(ahole[i], oneHoleMovements[i], bs);

                        v(vert.x, vert.y, -z);

                    }

                }

            }

            bs = bevelSize;

            // Back facing vertices

            for (i = 0; i < vlen; i++) {

                vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];

                if (!extrudeByPath) {

                    v(vert.x, vert.y, 0);

                } else {

                    // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

                    normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
                    binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);

                    position2.copy(extrudePts[0]).add(normal).add(binormal);

                    v(position2.x, position2.y, position2.z);

                }

            }

            // Add stepped vertices...
            // Including front facing vertices

            var s;

            for (s = 1; s <= steps; s++) {

                for (i = 0; i < vlen; i++) {

                    vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];

                    if (!extrudeByPath) {

                        v(vert.x, vert.y, amount / steps * s);

                    } else {

                        // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

                        normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
                        binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);

                        position2.copy(extrudePts[s]).add(normal).add(binormal);

                        v(position2.x, position2.y, position2.z);

                    }

                }

            }


            // Add bevel segments planes

            //for ( b = 1; b <= bevelSegments; b ++ ) {
            for (b = bevelSegments - 1; b >= 0; b--) {

                t = b / bevelSegments;
                z = bevelThickness * Math.cos(t * Math.PI / 2);
                bs = bevelSize * Math.sin(t * Math.PI / 2);

                // contract shape

                for (i = 0, il = contour.length; i < il; i++) {

                    vert = scalePt2(contour[i], contourMovements[i], bs);
                    v(vert.x, vert.y, amount + z);

                }

                // expand holes

                for (h = 0, hl = holes.length; h < hl; h++) {

                    ahole = holes[h];
                    oneHoleMovements = holesMovements[h];

                    for (i = 0, il = ahole.length; i < il; i++) {

                        vert = scalePt2(ahole[i], oneHoleMovements[i], bs);

                        if (!extrudeByPath) {

                            v(vert.x, vert.y, amount + z);

                        } else {

                            v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);

                        }

                    }

                }

            }

            /* Faces */

            // Top and bottom faces

            buildLidFaces();

            // Sides faces

            buildSideFaces();


            /////  Internal functions

            function buildLidFaces() {

                if (bevelEnabled) {

                    var layer = 0; // steps + 1
                    var offset = vlen * layer;

                    // Bottom faces

                    for (i = 0; i < flen; i++) {

                        face = faces[i];
                        f3(face[2] + offset, face[1] + offset, face[0] + offset);

                    }

                    layer = steps + bevelSegments * 2;
                    offset = vlen * layer;

                    // Top faces

                    for (i = 0; i < flen; i++) {

                        face = faces[i];
                        f3(face[0] + offset, face[1] + offset, face[2] + offset);

                    }

                } else {

                    // Bottom faces

                    for (i = 0; i < flen; i++) {

                        face = faces[i];
                        f3(face[2], face[1], face[0]);

                    }

                    // Top faces

                    for (i = 0; i < flen; i++) {

                        face = faces[i];
                        f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);

                    }

                }

            }

            // Create faces for the z-sides of the shape

            function buildSideFaces() {

                var layeroffset = 0;
                sidewalls(contour, layeroffset);
                layeroffset += contour.length;

                for (h = 0, hl = holes.length; h < hl; h++) {

                    ahole = holes[h];
                    sidewalls(ahole, layeroffset);

                    //, true
                    layeroffset += ahole.length;

                }

            }

            function sidewalls(contour, layeroffset) {

                var j, k;
                i = contour.length;

                while (--i >= 0) {

                    j = i;
                    k = i - 1;
                    if (k < 0) k = contour.length - 1;

                    //console.log('b', i,j, i-1, k,vertices.length);

                    var s = 0,
                        sl = steps + bevelSegments * 2;

                    for (s = 0; s < sl; s++) {

                        var slen1 = vlen * s;
                        var slen2 = vlen * (s + 1);

                        var a = layeroffset + j + slen1,
                            b = layeroffset + k + slen1,
                            c = layeroffset + k + slen2,
                            d = layeroffset + j + slen2;

                        f4(a, b, c, d, contour, s, sl, j, k);

                    }

                }

            }


            function v(x, y, z) {

                scope.vertices.push(new Vector3(x, y, z));

            }

            function f3(a, b, c) {

                a += shapesOffset;
                b += shapesOffset;
                c += shapesOffset;

                scope.faces.push(new Face3(a, b, c, null, null, 0));

                var uvs = uvgen.generateTopUV(scope, a, b, c);

                scope.faceVertexUvs[0].push(uvs);

            }

            function f4(a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2) {

                a += shapesOffset;
                b += shapesOffset;
                c += shapesOffset;
                d += shapesOffset;

                scope.faces.push(new Face3(a, b, d, null, null, 1));
                scope.faces.push(new Face3(b, c, d, null, null, 1));

                var uvs = uvgen.generateSideWallUV(scope, a, b, c, d);

                scope.faceVertexUvs[0].push([uvs[0], uvs[1], uvs[3]]);
                scope.faceVertexUvs[0].push([uvs[1], uvs[2], uvs[3]]);

            }

        };

        ExtrudeGeometry.WorldUVGenerator = {

            generateTopUV: function(geometry, indexA, indexB, indexC) {

                var vertices = geometry.vertices;

                var a = vertices[indexA];
                var b = vertices[indexB];
                var c = vertices[indexC];

                return [
                    new Vector2(a.x, a.y),
                    new Vector2(b.x, b.y),
                    new Vector2(c.x, c.y)
                ];

            },

            generateSideWallUV: function(geometry, indexA, indexB, indexC, indexD) {

                var vertices = geometry.vertices;

                var a = vertices[indexA];
                var b = vertices[indexB];
                var c = vertices[indexC];
                var d = vertices[indexD];

                if (Math.abs(a.y - b.y) < 0.01) {

                    return [
                        new Vector2(a.x, 1 - a.z),
                        new Vector2(b.x, 1 - b.z),
                        new Vector2(c.x, 1 - c.z),
                        new Vector2(d.x, 1 - d.z)
                    ];

                } else {

                    return [
                        new Vector2(a.y, 1 - a.z),
                        new Vector2(b.y, 1 - b.z),
                        new Vector2(c.y, 1 - c.z),
                        new Vector2(d.y, 1 - d.z)
                    ];

                }

            }
        };

        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * @author alteredq / http://alteredqualia.com/
         *
         * Text = 3D Text
         *
         * parameters = {
         *  font: <THREE.Font>, // font
         *
         *  size: <float>, // size of the text
         *  height: <float>, // thickness to extrude text
         *  curveSegments: <int>, // number of points on the curves
         *
         *  bevelEnabled: <bool>, // turn on bevel
         *  bevelThickness: <float>, // how deep into text bevel goes
         *  bevelSize: <float> // how far from text outline is bevel
         * }
         */

        function TextGeometry(text, parameters) {

            parameters = parameters || {};

            var font = parameters.font;

            if ((font && font.isFont) === false) {

                console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');
                return new Geometry();

            }

            var shapes = font.generateShapes(text, parameters.size, parameters.curveSegments);

            // translate parameters to ExtrudeGeometry API

            parameters.amount = parameters.height !== undefined ? parameters.height : 50;

            // defaults

            if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;
            if (parameters.bevelSize === undefined) parameters.bevelSize = 8;
            if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;

            ExtrudeGeometry.call(this, shapes, parameters);

            this.type = 'TextGeometry';

        }

        TextGeometry.prototype = Object.create(ExtrudeGeometry.prototype);
        TextGeometry.prototype.constructor = TextGeometry;

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {

            Geometry.call(this);

            this.type = 'SphereGeometry';

            this.parameters = {
                radius: radius,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                phiStart: phiStart,
                phiLength: phiLength,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };

            this.fromBufferGeometry(new SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength));

        }

        SphereGeometry.prototype = Object.create(Geometry.prototype);
        SphereGeometry.prototype.constructor = SphereGeometry;

        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         * @author Mugen87 / https://github.com/Mugen87
         */

        function SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {

            BufferGeometry.call(this);

            this.type = 'SphereBufferGeometry';

            this.parameters = {
                radius: radius,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                phiStart: phiStart,
                phiLength: phiLength,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };

            radius = radius || 50;

            widthSegments = Math.max(3, Math.floor(widthSegments) || 8);
            heightSegments = Math.max(2, Math.floor(heightSegments) || 6);

            phiStart = phiStart !== undefined ? phiStart : 0;
            phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

            thetaStart = thetaStart !== undefined ? thetaStart : 0;
            thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

            var thetaEnd = thetaStart + thetaLength;

            var ix, iy;

            var index = 0;
            var grid = [];

            var vertex = new Vector3();
            var normal = new Vector3();

            // buffers

            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];

            // generate vertices, normals and uvs

            for (iy = 0; iy <= heightSegments; iy++) {

                var verticesRow = [];

                var v = iy / heightSegments;

                for (ix = 0; ix <= widthSegments; ix++) {

                    var u = ix / widthSegments;

                    // vertex

                    vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                    vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
                    vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);

                    vertices.push(vertex.x, vertex.y, vertex.z);

                    // normal

                    normal.set(vertex.x, vertex.y, vertex.z).normalize();
                    normals.push(normal.x, normal.y, normal.z);

                    // uv

                    uvs.push(u, 1 - v);

                    verticesRow.push(index++);

                }

                grid.push(verticesRow);

            }

            // indices

            for (iy = 0; iy < heightSegments; iy++) {

                for (ix = 0; ix < widthSegments; ix++) {

                    var a = grid[iy][ix + 1];
                    var b = grid[iy][ix];
                    var c = grid[iy + 1][ix];
                    var d = grid[iy + 1][ix + 1];

                    if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);
                    if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);

                }

            }

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

        }

        SphereBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

        /**
         * @author Kaleb Murphy
         */

        function RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {

            Geometry.call(this);

            this.type = 'RingGeometry';

            this.parameters = {
                innerRadius: innerRadius,
                outerRadius: outerRadius,
                thetaSegments: thetaSegments,
                phiSegments: phiSegments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };

            this.fromBufferGeometry(new RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength));

        }

        RingGeometry.prototype = Object.create(Geometry.prototype);
        RingGeometry.prototype.constructor = RingGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {

            BufferGeometry.call(this);

            this.type = 'RingBufferGeometry';

            this.parameters = {
                innerRadius: innerRadius,
                outerRadius: outerRadius,
                thetaSegments: thetaSegments,
                phiSegments: phiSegments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };

            innerRadius = innerRadius || 20;
            outerRadius = outerRadius || 50;

            thetaStart = thetaStart !== undefined ? thetaStart : 0;
            thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

            thetaSegments = thetaSegments !== undefined ? Math.max(3, thetaSegments) : 8;
            phiSegments = phiSegments !== undefined ? Math.max(1, phiSegments) : 1;

            // buffers

            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];

            // some helper variables

            var segment;
            var radius = innerRadius;
            var radiusStep = ((outerRadius - innerRadius) / phiSegments);
            var vertex = new Vector3();
            var uv = new Vector2();
            var j, i;

            // generate vertices, normals and uvs

            for (j = 0; j <= phiSegments; j++) {

                for (i = 0; i <= thetaSegments; i++) {

                    // values are generate from the inside of the ring to the outside

                    segment = thetaStart + i / thetaSegments * thetaLength;

                    // vertex

                    vertex.x = radius * Math.cos(segment);
                    vertex.y = radius * Math.sin(segment);

                    vertices.push(vertex.x, vertex.y, vertex.z);

                    // normal

                    normals.push(0, 0, 1);

                    // uv

                    uv.x = (vertex.x / outerRadius + 1) / 2;
                    uv.y = (vertex.y / outerRadius + 1) / 2;

                    uvs.push(uv.x, uv.y);

                }

                // increase the radius for next row of vertices

                radius += radiusStep;

            }

            // indices

            for (j = 0; j < phiSegments; j++) {

                var thetaSegmentLevel = j * (thetaSegments + 1);

                for (i = 0; i < thetaSegments; i++) {

                    segment = i + thetaSegmentLevel;

                    var a = segment;
                    var b = segment + thetaSegments + 1;
                    var c = segment + thetaSegments + 2;
                    var d = segment + 1;

                    // faces

                    indices.push(a, b, d);
                    indices.push(b, c, d);

                }

            }

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

        }

        RingBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        RingBufferGeometry.prototype.constructor = RingBufferGeometry;

        /**
         * @author astrodud / http://astrodud.isgreat.org/
         * @author zz85 / https://github.com/zz85
         * @author bhouston / http://clara.io
         */

        // points - to create a closed torus, one must use a set of points
        //    like so: [ a, b, c, d, a ], see first is the same as last.
        // segments - the number of circumference segments to create
        // phiStart - the starting radian
        // phiLength - the radian (0 to 2PI) range of the lathed section
        //    2PI is a closed lathe, less than 2PI is a portion.

        function LatheGeometry(points, segments, phiStart, phiLength) {

            Geometry.call(this);

            this.type = 'LatheGeometry';

            this.parameters = {
                points: points,
                segments: segments,
                phiStart: phiStart,
                phiLength: phiLength
            };

            this.fromBufferGeometry(new LatheBufferGeometry(points, segments, phiStart, phiLength));
            this.mergeVertices();

        }

        LatheGeometry.prototype = Object.create(Geometry.prototype);
        LatheGeometry.prototype.constructor = LatheGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function LatheBufferGeometry(points, segments, phiStart, phiLength) {

            BufferGeometry.call(this);

            this.type = 'LatheBufferGeometry';

            this.parameters = {
                points: points,
                segments: segments,
                phiStart: phiStart,
                phiLength: phiLength
            };

            segments = Math.floor(segments) || 12;
            phiStart = phiStart || 0;
            phiLength = phiLength || Math.PI * 2;

            // clamp phiLength so it's in range of [ 0, 2PI ]

            phiLength = _Math.clamp(phiLength, 0, Math.PI * 2);


            // buffers

            var indices = [];
            var vertices = [];
            var uvs = [];

            // helper variables

            var base;
            var inverseSegments = 1.0 / segments;
            var vertex = new Vector3();
            var uv = new Vector2();
            var i, j;

            // generate vertices and uvs

            for (i = 0; i <= segments; i++) {

                var phi = phiStart + i * inverseSegments * phiLength;

                var sin = Math.sin(phi);
                var cos = Math.cos(phi);

                for (j = 0; j <= (points.length - 1); j++) {

                    // vertex

                    vertex.x = points[j].x * sin;
                    vertex.y = points[j].y;
                    vertex.z = points[j].x * cos;

                    vertices.push(vertex.x, vertex.y, vertex.z);

                    // uv

                    uv.x = i / segments;
                    uv.y = j / (points.length - 1);

                    uvs.push(uv.x, uv.y);


                }

            }

            // indices

            for (i = 0; i < segments; i++) {

                for (j = 0; j < (points.length - 1); j++) {

                    base = j + i * points.length;

                    var a = base;
                    var b = base + points.length;
                    var c = base + points.length + 1;
                    var d = base + 1;

                    // faces

                    indices.push(a, b, d);
                    indices.push(b, c, d);

                }

            }

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

            // generate normals

            this.computeVertexNormals();

            // if the geometry is closed, we need to average the normals along the seam.
            // because the corresponding vertices are identical (but still have different UVs).

            if (phiLength === Math.PI * 2) {

                var normals = this.attributes.normal.array;
                var n1 = new Vector3();
                var n2 = new Vector3();
                var n = new Vector3();

                // this is the buffer offset for the last line of vertices

                base = segments * points.length * 3;

                for (i = 0, j = 0; i < points.length; i++, j += 3) {

                    // select the normal of the vertex in the first line

                    n1.x = normals[j + 0];
                    n1.y = normals[j + 1];
                    n1.z = normals[j + 2];

                    // select the normal of the vertex in the last line

                    n2.x = normals[base + j + 0];
                    n2.y = normals[base + j + 1];
                    n2.z = normals[base + j + 2];

                    // average normals

                    n.addVectors(n1, n2).normalize();

                    // assign the new values to both normals

                    normals[j + 0] = normals[base + j + 0] = n.x;
                    normals[j + 1] = normals[base + j + 1] = n.y;
                    normals[j + 2] = normals[base + j + 2] = n.z;

                }

            }

        }

        LatheBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

        /**
         * @author jonobr1 / http://jonobr1.com
         */

        function ShapeGeometry(shapes, curveSegments) {

            Geometry.call(this);

            this.type = 'ShapeGeometry';

            if (typeof curveSegments === 'object') {

                console.warn('THREE.ShapeGeometry: Options parameter has been removed.');

                curveSegments = curveSegments.curveSegments;

            }

            this.parameters = {
                shapes: shapes,
                curveSegments: curveSegments
            };

            this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments));
            this.mergeVertices();

        }

        ShapeGeometry.prototype = Object.create(Geometry.prototype);
        ShapeGeometry.prototype.constructor = ShapeGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function ShapeBufferGeometry(shapes, curveSegments) {

            BufferGeometry.call(this);

            this.type = 'ShapeBufferGeometry';

            this.parameters = {
                shapes: shapes,
                curveSegments: curveSegments
            };

            curveSegments = curveSegments || 12;

            // buffers

            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];

            // helper variables

            var groupStart = 0;
            var groupCount = 0;

            // allow single and array values for "shapes" parameter

            if (Array.isArray(shapes) === false) {

                addShape(shapes);

            } else {

                for (var i = 0; i < shapes.length; i++) {

                    addShape(shapes[i]);

                    this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support

                    groupStart += groupCount;
                    groupCount = 0;

                }

            }

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));


            // helper functions

            function addShape(shape) {

                var i, l, shapeHole;

                var indexOffset = vertices.length / 3;
                var points = shape.extractPoints(curveSegments);

                var shapeVertices = points.shape;
                var shapeHoles = points.holes;

                // check direction of vertices

                if (ShapeUtils.isClockWise(shapeVertices) === false) {

                    shapeVertices = shapeVertices.reverse();

                    // also check if holes are in the opposite direction

                    for (i = 0, l = shapeHoles.length; i < l; i++) {

                        shapeHole = shapeHoles[i];

                        if (ShapeUtils.isClockWise(shapeHole) === true) {

                            shapeHoles[i] = shapeHole.reverse();

                        }

                    }

                }

                var faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);

                // join vertices of inner and outer paths to a single array

                for (i = 0, l = shapeHoles.length; i < l; i++) {

                    shapeHole = shapeHoles[i];
                    shapeVertices = shapeVertices.concat(shapeHole);

                }

                // vertices, normals, uvs

                for (i = 0, l = shapeVertices.length; i < l; i++) {

                    var vertex = shapeVertices[i];

                    vertices.push(vertex.x, vertex.y, 0);
                    normals.push(0, 0, 1);
                    uvs.push(vertex.x, vertex.y); // world uvs

                }

                // incides

                for (i = 0, l = faces.length; i < l; i++) {

                    var face = faces[i];

                    var a = face[0] + indexOffset;
                    var b = face[1] + indexOffset;
                    var c = face[2] + indexOffset;

                    indices.push(a, b, c);
                    groupCount += 3;

                }

            }

        }

        ShapeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

        /**
         * @author WestLangley / http://github.com/WestLangley
         * @author Mugen87 / https://github.com/Mugen87
         */

        function EdgesGeometry(geometry, thresholdAngle) {

            BufferGeometry.call(this);

            this.type = 'EdgesGeometry';

            this.parameters = {
                thresholdAngle: thresholdAngle
            };

            thresholdAngle = (thresholdAngle !== undefined) ? thresholdAngle : 1;

            // buffer

            var vertices = [];

            // helper variables

            var thresholdDot = Math.cos(_Math.DEG2RAD * thresholdAngle);
            var edge = [0, 0],
                edges = {};
            var key, keys = ['a', 'b', 'c'];

            // prepare source geometry

            var geometry2;

            if (geometry.isBufferGeometry) {

                geometry2 = new Geometry();
                geometry2.fromBufferGeometry(geometry);

            } else {

                geometry2 = geometry.clone();

            }

            geometry2.mergeVertices();
            geometry2.computeFaceNormals();

            var sourceVertices = geometry2.vertices;
            var faces = geometry2.faces;

            // now create a data structure where each entry represents an edge with its adjoining faces

            for (var i = 0, l = faces.length; i < l; i++) {

                var face = faces[i];

                for (var j = 0; j < 3; j++) {

                    edge[0] = face[keys[j]];
                    edge[1] = face[keys[(j + 1) % 3]];
                    edge.sort(sortFunction);

                    key = edge.toString();

                    if (edges[key] === undefined) {

                        edges[key] = {
                            index1: edge[0],
                            index2: edge[1],
                            face1: i,
                            face2: undefined
                        };

                    } else {

                        edges[key].face2 = i;

                    }

                }

            }

            // generate vertices

            for (key in edges) {

                var e = edges[key];

                // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

                if (e.face2 === undefined || faces[e.face1].normal.dot(faces[e.face2].normal) <= thresholdDot) {

                    var vertex = sourceVertices[e.index1];
                    vertices.push(vertex.x, vertex.y, vertex.z);

                    vertex = sourceVertices[e.index2];
                    vertices.push(vertex.x, vertex.y, vertex.z);

                }

            }

            // build geometry

            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));

            // custom array sort function

            function sortFunction(a, b) {

                return a - b;

            }

        }

        EdgesGeometry.prototype = Object.create(BufferGeometry.prototype);
        EdgesGeometry.prototype.constructor = EdgesGeometry;

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {

            Geometry.call(this);

            this.type = 'CylinderGeometry';

            this.parameters = {
                radiusTop: radiusTop,
                radiusBottom: radiusBottom,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };

            this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength));
            this.mergeVertices();

        }

        CylinderGeometry.prototype = Object.create(Geometry.prototype);
        CylinderGeometry.prototype.constructor = CylinderGeometry;

        /**
         * @author Mugen87 / https://github.com/Mugen87
         */

        function CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {

            BufferGeometry.call(this);

            this.type = 'CylinderBufferGeometry';

            this.parameters = {
                radiusTop: radiusTop,
                radiusBottom: radiusBottom,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };

            var scope = this;

            radiusTop = radiusTop !== undefined ? radiusTop : 20;
            radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
            height = height !== undefined ? height : 100;

            radialSegments = Math.floor(radialSegments) || 8;
            heightSegments = Math.floor(heightSegments) || 1;

            openEnded = openEnded !== undefined ? openEnded : false;
            thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
            thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;

            // buffers

            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];

            // helper variables

            var index = 0;
            var indexOffset = 0;
            var indexArray = [];
            var halfHeight = height / 2;
            var groupStart = 0;

            // generate geometry

            generateTorso();

            if (openEnded === false) {

                if (radiusTop > 0) generateCap(true);
                if (radiusBottom > 0) generateCap(false);

            }

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

            function generateTorso() {

                var x, y;
                var normal = new Vector3();
                var vertex = new Vector3();

                var groupCount = 0;

                // this will be used to calculate the normal
                var slope = (radiusBottom - radiusTop) / height;

                // generate vertices, normals and uvs

                for (y = 0; y <= heightSegments; y++) {

                    var indexRow = [];

                    var v = y / heightSegments;

                    // calculate the radius of the current row

                    var radius = v * (radiusBottom - radiusTop) + radiusTop;

                    for (x = 0; x <= radialSegments; x++) {

                        var u = x / radialSegments;

                        var theta = u * thetaLength + thetaStart;

                        var sinTheta = Math.sin(theta);
                        var cosTheta = Math.cos(theta);

                        // vertex

                        vertex.x = radius * sinTheta;
                        vertex.y = -v * height + halfHeight;
                        vertex.z = radius * cosTheta;
                        vertices.push(vertex.x, vertex.y, vertex.z);

                        // normal

                        normal.set(sinTheta, slope, cosTheta).normalize();
                        normals.push(normal.x, normal.y, normal.z);

                        // uv

                        uvs.push(u, 1 - v);

                        // save index of vertex in respective row

                        indexRow.push(index++);

                    }

                    // now save vertices of the row in our index array

                    indexArray.push(indexRow);

                }

                // generate indices

                for (x = 0; x < radialSegments; x++) {

                    for (y = 0; y < heightSegments; y++) {

                        // we use the index array to access the correct indices

                        var a = indexArray[y][x];
                        var b = indexArray[y + 1][x];
                        var c = indexArray[y + 1][x + 1];
                        var d = indexArray[y][x + 1];

                        // faces

                        indices.push(a, b, d);
                        indices.push(b, c, d);

                        // update group counter

                        groupCount += 6;

                    }

                }

                // add a group to the geometry. this will ensure multi material support

                scope.addGroup(groupStart, groupCount, 0);

                // calculate new start value for groups

                groupStart += groupCount;

            }

            function generateCap(top) {

                var x, centerIndexStart, centerIndexEnd;

                var uv = new Vector2();
                var vertex = new Vector3();

                var groupCount = 0;

                var radius = (top === true) ? radiusTop : radiusBottom;
                var sign = (top === true) ? 1 : -1;

                // save the index of the first center vertex
                centerIndexStart = index;

                // first we generate the center vertex data of the cap.
                // because the geometry needs one set of uvs per face,
                // we must generate a center vertex per face/segment

                for (x = 1; x <= radialSegments; x++) {

                    // vertex

                    vertices.push(0, halfHeight * sign, 0);

                    // normal

                    normals.push(0, sign, 0);

                    // uv

                    uvs.push(0.5, 0.5);

                    // increase index

                    index++;

                }

                // save the index of the last center vertex

                centerIndexEnd = index;

                // now we generate the surrounding vertices, normals and uvs

                for (x = 0; x <= radialSegments; x++) {

                    var u = x / radialSegments;
                    var theta = u * thetaLength + thetaStart;

                    var cosTheta = Math.cos(theta);
                    var sinTheta = Math.sin(theta);

                    // vertex

                    vertex.x = radius * sinTheta;
                    vertex.y = halfHeight * sign;
                    vertex.z = radius * cosTheta;
                    vertices.push(vertex.x, vertex.y, vertex.z);

                    // normal

                    normals.push(0, sign, 0);

                    // uv

                    uv.x = (cosTheta * 0.5) + 0.5;
                    uv.y = (sinTheta * 0.5 * sign) + 0.5;
                    uvs.push(uv.x, uv.y);

                    // increase index

                    index++;

                }

                // generate indices

                for (x = 0; x < radialSegments; x++) {

                    var c = centerIndexStart + x;
                    var i = centerIndexEnd + x;

                    if (top === true) {

                        // face top

                        indices.push(i, i + 1, c);

                    } else {

                        // face bottom

                        indices.push(i + 1, i, c);

                    }

                    groupCount += 3;

                }

                // add a group to the geometry. this will ensure multi material support

                scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);

                // calculate new start value for groups

                groupStart += groupCount;

            }

        }

        CylinderBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

        /**
         * @author abelnation / http://github.com/abelnation
         */

        function ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {

            CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);

            this.type = 'ConeGeometry';

            this.parameters = {
                radius: radius,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };

        }

        ConeGeometry.prototype = Object.create(CylinderGeometry.prototype);
        ConeGeometry.prototype.constructor = ConeGeometry;

        /**
         * @author: abelnation / http://github.com/abelnation
         */

        function ConeBufferGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {

            CylinderBufferGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);

            this.type = 'ConeBufferGeometry';

            this.parameters = {
                radius: radius,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };

        }

        ConeBufferGeometry.prototype = Object.create(CylinderBufferGeometry.prototype);
        ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

        /**
         * @author hughes
         */

        function CircleGeometry(radius, segments, thetaStart, thetaLength) {

            Geometry.call(this);

            this.type = 'CircleGeometry';

            this.parameters = {
                radius: radius,
                segments: segments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };

            this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength));

        }

        CircleGeometry.prototype = Object.create(Geometry.prototype);
        CircleGeometry.prototype.constructor = CircleGeometry;

        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         * @author Mugen87 / https://github.com/Mugen87
         */

        function CircleBufferGeometry(radius, segments, thetaStart, thetaLength) {

            BufferGeometry.call(this);

            this.type = 'CircleBufferGeometry';

            this.parameters = {
                radius: radius,
                segments: segments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };

            radius = radius || 50;
            segments = segments !== undefined ? Math.max(3, segments) : 8;

            thetaStart = thetaStart !== undefined ? thetaStart : 0;
            thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

            // buffers

            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];

            // helper variables

            var i, s;
            var vertex = new Vector3();
            var uv = new Vector2();

            // center point

            vertices.push(0, 0, 0);
            normals.push(0, 0, 1);
            uvs.push(0.5, 0.5);

            for (s = 0, i = 3; s <= segments; s++, i += 3) {

                var segment = thetaStart + s / segments * thetaLength;

                // vertex

                vertex.x = radius * Math.cos(segment);
                vertex.y = radius * Math.sin(segment);

                vertices.push(vertex.x, vertex.y, vertex.z);

                // normal

                normals.push(0, 0, 1);

                // uvs

                uv.x = (vertices[i] / radius + 1) / 2;
                uv.y = (vertices[i + 1] / radius + 1) / 2;

                uvs.push(uv.x, uv.y);

            }

            // indices

            for (i = 1; i <= segments; i++) {

                indices.push(i, i + 1, 0);

            }

            // build geometry

            this.setIndex(indices);
            this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
            this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

        }

        CircleBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



        var Geometries = Object.freeze({
            WireframeGeometry: WireframeGeometry,
            ParametricGeometry: ParametricGeometry,
            ParametricBufferGeometry: ParametricBufferGeometry,
            TetrahedronGeometry: TetrahedronGeometry,
            TetrahedronBufferGeometry: TetrahedronBufferGeometry,
            OctahedronGeometry: OctahedronGeometry,
            OctahedronBufferGeometry: OctahedronBufferGeometry,
            IcosahedronGeometry: IcosahedronGeometry,
            IcosahedronBufferGeometry: IcosahedronBufferGeometry,
            DodecahedronGeometry: DodecahedronGeometry,
            DodecahedronBufferGeometry: DodecahedronBufferGeometry,
            PolyhedronGeometry: PolyhedronGeometry,
            PolyhedronBufferGeometry: PolyhedronBufferGeometry,
            TubeGeometry: TubeGeometry,
            TubeBufferGeometry: TubeBufferGeometry,
            TorusKnotGeometry: TorusKnotGeometry,
            TorusKnotBufferGeometry: TorusKnotBufferGeometry,
            TorusGeometry: TorusGeometry,
            TorusBufferGeometry: TorusBufferGeometry,
            TextGeometry: TextGeometry,
            SphereGeometry: SphereGeometry,
            SphereBufferGeometry: SphereBufferGeometry,
            RingGeometry: RingGeometry,
            RingBufferGeometry: RingBufferGeometry,
            PlaneGeometry: PlaneGeometry,
            PlaneBufferGeometry: PlaneBufferGeometry,
            LatheGeometry: LatheGeometry,
            LatheBufferGeometry: LatheBufferGeometry,
            ShapeGeometry: ShapeGeometry,
            ShapeBufferGeometry: ShapeBufferGeometry,
            ExtrudeGeometry: ExtrudeGeometry,
            EdgesGeometry: EdgesGeometry,
            ConeGeometry: ConeGeometry,
            ConeBufferGeometry: ConeBufferGeometry,
            CylinderGeometry: CylinderGeometry,
            CylinderBufferGeometry: CylinderBufferGeometry,
            CircleGeometry: CircleGeometry,
            CircleBufferGeometry: CircleBufferGeometry,
            BoxGeometry: BoxGeometry,
            BoxBufferGeometry: BoxBufferGeometry
        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function ShadowMaterial() {

            ShaderMaterial.call(this, {
                uniforms: UniformsUtils.merge([
                    UniformsLib.lights,
                    {
                        opacity: {
                            value: 1.0
                        }
                    }
                ]),
                vertexShader: ShaderChunk['shadow_vert'],
                fragmentShader: ShaderChunk['shadow_frag']
            });

            this.lights = true;
            this.transparent = true;

            Object.defineProperties(this, {
                opacity: {
                    enumerable: true,
                    get: function() {
                        return this.uniforms.opacity.value;
                    },
                    set: function(value) {
                        this.uniforms.opacity.value = value;
                    }
                }
            });

        }

        ShadowMaterial.prototype = Object.create(ShaderMaterial.prototype);
        ShadowMaterial.prototype.constructor = ShadowMaterial;

        ShadowMaterial.prototype.isShadowMaterial = true;

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function RawShaderMaterial(parameters) {

            ShaderMaterial.call(this, parameters);

            this.type = 'RawShaderMaterial';

        }

        RawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);
        RawShaderMaterial.prototype.constructor = RawShaderMaterial;

        RawShaderMaterial.prototype.isRawShaderMaterial = true;

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function MultiMaterial(materials) {

            this.uuid = _Math.generateUUID();

            this.type = 'MultiMaterial';

            this.materials = Array.isArray(materials) ? materials : [];

            this.visible = true;

        }

        MultiMaterial.prototype = {

            constructor: MultiMaterial,

            isMultiMaterial: true,

            toJSON: function(meta) {

                var output = {
                    metadata: {
                        version: 4.2,
                        type: 'material',
                        generator: 'MaterialExporter'
                    },
                    uuid: this.uuid,
                    type: this.type,
                    materials: []
                };

                var materials = this.materials;

                for (var i = 0, l = materials.length; i < l; i++) {

                    var material = materials[i].toJSON(meta);
                    delete material.metadata;

                    output.materials.push(material);

                }

                output.visible = this.visible;

                return output;

            },

            clone: function() {

                var material = new this.constructor();

                for (var i = 0; i < this.materials.length; i++) {

                    material.materials.push(this.materials[i].clone());

                }

                material.visible = this.visible;

                return material;

            }

        };

        /**
         * @author WestLangley / http://github.com/WestLangley
         *
         * parameters = {
         *  color: <hex>,
         *  roughness: <float>,
         *  metalness: <float>,
         *  opacity: <float>,
         *
         *  map: new THREE.Texture( <Image> ),
         *
         *  lightMap: new THREE.Texture( <Image> ),
         *  lightMapIntensity: <float>
         *
         *  aoMap: new THREE.Texture( <Image> ),
         *  aoMapIntensity: <float>
         *
         *  emissive: <hex>,
         *  emissiveIntensity: <float>
         *  emissiveMap: new THREE.Texture( <Image> ),
         *
         *  bumpMap: new THREE.Texture( <Image> ),
         *  bumpScale: <float>,
         *
         *  normalMap: new THREE.Texture( <Image> ),
         *  normalScale: <Vector2>,
         *
         *  displacementMap: new THREE.Texture( <Image> ),
         *  displacementScale: <float>,
         *  displacementBias: <float>,
         *
         *  roughnessMap: new THREE.Texture( <Image> ),
         *
         *  metalnessMap: new THREE.Texture( <Image> ),
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
         *  envMapIntensity: <float>
         *
         *  refractionRatio: <float>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>,
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *  morphNormals: <bool>
         * }
         */

        function MeshStandardMaterial(parameters) {

            Material.call(this);

            this.defines = {
                'STANDARD': ''
            };

            this.type = 'MeshStandardMaterial';

            this.color = new Color(0xffffff); // diffuse
            this.roughness = 0.5;
            this.metalness = 0.5;

            this.map = null;

            this.lightMap = null;
            this.lightMapIntensity = 1.0;

            this.aoMap = null;
            this.aoMapIntensity = 1.0;

            this.emissive = new Color(0x000000);
            this.emissiveIntensity = 1.0;
            this.emissiveMap = null;

            this.bumpMap = null;
            this.bumpScale = 1;

            this.normalMap = null;
            this.normalScale = new Vector2(1, 1);

            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;

            this.roughnessMap = null;

            this.metalnessMap = null;

            this.alphaMap = null;

            this.envMap = null;
            this.envMapIntensity = 1.0;

            this.refractionRatio = 0.98;

            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = 'round';
            this.wireframeLinejoin = 'round';

            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;

            this.setValues(parameters);

        }

        MeshStandardMaterial.prototype = Object.create(Material.prototype);
        MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

        MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

        MeshStandardMaterial.prototype.copy = function(source) {

            Material.prototype.copy.call(this, source);

            this.defines = {
                'STANDARD': ''
            };

            this.color.copy(source.color);
            this.roughness = source.roughness;
            this.metalness = source.metalness;

            this.map = source.map;

            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;

            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;

            this.emissive.copy(source.emissive);
            this.emissiveMap = source.emissiveMap;
            this.emissiveIntensity = source.emissiveIntensity;

            this.bumpMap = source.bumpMap;
            this.bumpScale = source.bumpScale;

            this.normalMap = source.normalMap;
            this.normalScale.copy(source.normalScale);

            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;

            this.roughnessMap = source.roughnessMap;

            this.metalnessMap = source.metalnessMap;

            this.alphaMap = source.alphaMap;

            this.envMap = source.envMap;
            this.envMapIntensity = source.envMapIntensity;

            this.refractionRatio = source.refractionRatio;

            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;

            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;

            return this;

        };

        /**
         * @author WestLangley / http://github.com/WestLangley
         *
         * parameters = {
         *  reflectivity: <float>
         * }
         */

        function MeshPhysicalMaterial(parameters) {

            MeshStandardMaterial.call(this);

            this.defines = {
                'PHYSICAL': ''
            };

            this.type = 'MeshPhysicalMaterial';

            this.reflectivity = 0.5; // maps to F0 = 0.04

            this.clearCoat = 0.0;
            this.clearCoatRoughness = 0.0;

            this.setValues(parameters);

        }

        MeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);
        MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

        MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

        MeshPhysicalMaterial.prototype.copy = function(source) {

            MeshStandardMaterial.prototype.copy.call(this, source);

            this.defines = {
                'PHYSICAL': ''
            };

            this.reflectivity = source.reflectivity;

            this.clearCoat = source.clearCoat;
            this.clearCoatRoughness = source.clearCoatRoughness;

            return this;

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  specular: <hex>,
         *  shininess: <float>,
         *  opacity: <float>,
         *
         *  map: new THREE.Texture( <Image> ),
         *
         *  lightMap: new THREE.Texture( <Image> ),
         *  lightMapIntensity: <float>
         *
         *  aoMap: new THREE.Texture( <Image> ),
         *  aoMapIntensity: <float>
         *
         *  emissive: <hex>,
         *  emissiveIntensity: <float>
         *  emissiveMap: new THREE.Texture( <Image> ),
         *
         *  bumpMap: new THREE.Texture( <Image> ),
         *  bumpScale: <float>,
         *
         *  normalMap: new THREE.Texture( <Image> ),
         *  normalScale: <Vector2>,
         *
         *  displacementMap: new THREE.Texture( <Image> ),
         *  displacementScale: <float>,
         *  displacementBias: <float>,
         *
         *  specularMap: new THREE.Texture( <Image> ),
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
         *  combine: THREE.Multiply,
         *  reflectivity: <float>,
         *  refractionRatio: <float>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>,
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *  morphNormals: <bool>
         * }
         */

        function MeshPhongMaterial(parameters) {

            Material.call(this);

            this.type = 'MeshPhongMaterial';

            this.color = new Color(0xffffff); // diffuse
            this.specular = new Color(0x111111);
            this.shininess = 30;

            this.map = null;

            this.lightMap = null;
            this.lightMapIntensity = 1.0;

            this.aoMap = null;
            this.aoMapIntensity = 1.0;

            this.emissive = new Color(0x000000);
            this.emissiveIntensity = 1.0;
            this.emissiveMap = null;

            this.bumpMap = null;
            this.bumpScale = 1;

            this.normalMap = null;
            this.normalScale = new Vector2(1, 1);

            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;

            this.specularMap = null;

            this.alphaMap = null;

            this.envMap = null;
            this.combine = MultiplyOperation;
            this.reflectivity = 1;
            this.refractionRatio = 0.98;

            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = 'round';
            this.wireframeLinejoin = 'round';

            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;

            this.setValues(parameters);

        }

        MeshPhongMaterial.prototype = Object.create(Material.prototype);
        MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

        MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

        MeshPhongMaterial.prototype.copy = function(source) {

            Material.prototype.copy.call(this, source);

            this.color.copy(source.color);
            this.specular.copy(source.specular);
            this.shininess = source.shininess;

            this.map = source.map;

            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;

            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;

            this.emissive.copy(source.emissive);
            this.emissiveMap = source.emissiveMap;
            this.emissiveIntensity = source.emissiveIntensity;

            this.bumpMap = source.bumpMap;
            this.bumpScale = source.bumpScale;

            this.normalMap = source.normalMap;
            this.normalScale.copy(source.normalScale);

            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;

            this.specularMap = source.specularMap;

            this.alphaMap = source.alphaMap;

            this.envMap = source.envMap;
            this.combine = source.combine;
            this.reflectivity = source.reflectivity;
            this.refractionRatio = source.refractionRatio;

            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;

            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;

            return this;

        };

        /**
         * @author takahirox / http://github.com/takahirox
         *
         * parameters = {
         *  gradientMap: new THREE.Texture( <Image> )
         * }
         */

        function MeshToonMaterial(parameters) {

            MeshPhongMaterial.call(this);

            this.defines = {
                'TOON': ''
            };

            this.type = 'MeshToonMaterial';

            this.gradientMap = null;

            this.setValues(parameters);

        }

        MeshToonMaterial.prototype = Object.create(MeshPhongMaterial.prototype);
        MeshToonMaterial.prototype.constructor = MeshToonMaterial;

        MeshToonMaterial.prototype.isMeshToonMaterial = true;

        MeshToonMaterial.prototype.copy = function(source) {

            MeshPhongMaterial.prototype.copy.call(this, source);

            this.gradientMap = source.gradientMap;

            return this;

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         *
         * parameters = {
         *  opacity: <float>,
         *
         *  bumpMap: new THREE.Texture( <Image> ),
         *  bumpScale: <float>,
         *
         *  normalMap: new THREE.Texture( <Image> ),
         *  normalScale: <Vector2>,
         *
         *  displacementMap: new THREE.Texture( <Image> ),
         *  displacementScale: <float>,
         *  displacementBias: <float>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *  morphNormals: <bool>
         * }
         */

        function MeshNormalMaterial(parameters) {

            Material.call(this, parameters);

            this.type = 'MeshNormalMaterial';

            this.bumpMap = null;
            this.bumpScale = 1;

            this.normalMap = null;
            this.normalScale = new Vector2(1, 1);

            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;

            this.wireframe = false;
            this.wireframeLinewidth = 1;

            this.fog = false;
            this.lights = false;

            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;

            this.setValues(parameters);

        }

        MeshNormalMaterial.prototype = Object.create(Material.prototype);
        MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

        MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

        MeshNormalMaterial.prototype.copy = function(source) {

            Material.prototype.copy.call(this, source);

            this.bumpMap = source.bumpMap;
            this.bumpScale = source.bumpScale;

            this.normalMap = source.normalMap;
            this.normalScale.copy(source.normalScale);

            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;

            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;

            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;

            return this;

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *
         *  map: new THREE.Texture( <Image> ),
         *
         *  lightMap: new THREE.Texture( <Image> ),
         *  lightMapIntensity: <float>
         *
         *  aoMap: new THREE.Texture( <Image> ),
         *  aoMapIntensity: <float>
         *
         *  emissive: <hex>,
         *  emissiveIntensity: <float>
         *  emissiveMap: new THREE.Texture( <Image> ),
         *
         *  specularMap: new THREE.Texture( <Image> ),
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
         *  combine: THREE.Multiply,
         *  reflectivity: <float>,
         *  refractionRatio: <float>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>,
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *  morphNormals: <bool>
         * }
         */

        function MeshLambertMaterial(parameters) {

            Material.call(this);

            this.type = 'MeshLambertMaterial';

            this.color = new Color(0xffffff); // diffuse

            this.map = null;

            this.lightMap = null;
            this.lightMapIntensity = 1.0;

            this.aoMap = null;
            this.aoMapIntensity = 1.0;

            this.emissive = new Color(0x000000);
            this.emissiveIntensity = 1.0;
            this.emissiveMap = null;

            this.specularMap = null;

            this.alphaMap = null;

            this.envMap = null;
            this.combine = MultiplyOperation;
            this.reflectivity = 1;
            this.refractionRatio = 0.98;

            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = 'round';
            this.wireframeLinejoin = 'round';

            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;

            this.setValues(parameters);

        }

        MeshLambertMaterial.prototype = Object.create(Material.prototype);
        MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

        MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

        MeshLambertMaterial.prototype.copy = function(source) {

            Material.prototype.copy.call(this, source);

            this.color.copy(source.color);

            this.map = source.map;

            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;

            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;

            this.emissive.copy(source.emissive);
            this.emissiveMap = source.emissiveMap;
            this.emissiveIntensity = source.emissiveIntensity;

            this.specularMap = source.specularMap;

            this.alphaMap = source.alphaMap;

            this.envMap = source.envMap;
            this.combine = source.combine;
            this.reflectivity = source.reflectivity;
            this.refractionRatio = source.refractionRatio;

            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;

            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;

            return this;

        };

        /**
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *
         *  linewidth: <float>,
         *
         *  scale: <float>,
         *  dashSize: <float>,
         *  gapSize: <float>
         * }
         */

        function LineDashedMaterial(parameters) {

            Material.call(this);

            this.type = 'LineDashedMaterial';

            this.color = new Color(0xffffff);

            this.linewidth = 1;

            this.scale = 1;
            this.dashSize = 3;
            this.gapSize = 1;

            this.lights = false;

            this.setValues(parameters);

        }

        LineDashedMaterial.prototype = Object.create(Material.prototype);
        LineDashedMaterial.prototype.constructor = LineDashedMaterial;

        LineDashedMaterial.prototype.isLineDashedMaterial = true;

        LineDashedMaterial.prototype.copy = function(source) {

            Material.prototype.copy.call(this, source);

            this.color.copy(source.color);

            this.linewidth = source.linewidth;

            this.scale = source.scale;
            this.dashSize = source.dashSize;
            this.gapSize = source.gapSize;

            return this;

        };



        var Materials = Object.freeze({
            ShadowMaterial: ShadowMaterial,
            SpriteMaterial: SpriteMaterial,
            RawShaderMaterial: RawShaderMaterial,
            ShaderMaterial: ShaderMaterial,
            PointsMaterial: PointsMaterial,
            MultiMaterial: MultiMaterial,
            MeshPhysicalMaterial: MeshPhysicalMaterial,
            MeshStandardMaterial: MeshStandardMaterial,
            MeshPhongMaterial: MeshPhongMaterial,
            MeshToonMaterial: MeshToonMaterial,
            MeshNormalMaterial: MeshNormalMaterial,
            MeshLambertMaterial: MeshLambertMaterial,
            MeshDepthMaterial: MeshDepthMaterial,
            MeshBasicMaterial: MeshBasicMaterial,
            LineDashedMaterial: LineDashedMaterial,
            LineBasicMaterial: LineBasicMaterial,
            Material: Material
        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        var Cache = {

            enabled: false,

            files: {},

            add: function(key, file) {

                if (this.enabled === false) return;

                // console.log( 'THREE.Cache', 'Adding key:', key );

                this.files[key] = file;

            },

            get: function(key) {

                if (this.enabled === false) return;

                // console.log( 'THREE.Cache', 'Checking key:', key );

                return this.files[key];

            },

            remove: function(key) {

                delete this.files[key];

            },

            clear: function() {

                this.files = {};

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function LoadingManager(onLoad, onProgress, onError) {

            var scope = this;

            var isLoading = false,
                itemsLoaded = 0,
                itemsTotal = 0;

            this.onStart = undefined;
            this.onLoad = onLoad;
            this.onProgress = onProgress;
            this.onError = onError;

            this.itemStart = function(url) {

                itemsTotal++;

                if (isLoading === false) {

                    if (scope.onStart !== undefined) {

                        scope.onStart(url, itemsLoaded, itemsTotal);

                    }

                }

                isLoading = true;

            };

            this.itemEnd = function(url) {

                itemsLoaded++;

                if (scope.onProgress !== undefined) {

                    scope.onProgress(url, itemsLoaded, itemsTotal);

                }

                if (itemsLoaded === itemsTotal) {

                    isLoading = false;

                    if (scope.onLoad !== undefined) {

                        scope.onLoad();

                    }

                }

            };

            this.itemError = function(url) {

                if (scope.onError !== undefined) {

                    scope.onError(url);

                }

            };

        }

        var DefaultLoadingManager = new LoadingManager();

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function FileLoader(manager) {

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;

        }

        Object.assign(FileLoader.prototype, {

            load: function(url, onLoad, onProgress, onError) {

                if (url === undefined) url = '';

                if (this.path !== undefined) url = this.path + url;

                var scope = this;

                var cached = Cache.get(url);

                if (cached !== undefined) {

                    scope.manager.itemStart(url);

                    setTimeout(function() {

                        if (onLoad) onLoad(cached);

                        scope.manager.itemEnd(url);

                    }, 0);

                    return cached;

                }

                // Check for data: URI
                var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
                var dataUriRegexResult = url.match(dataUriRegex);

                // Safari can not handle Data URIs through XMLHttpRequest so process manually
                if (dataUriRegexResult) {

                    var mimeType = dataUriRegexResult[1];
                    var isBase64 = !!dataUriRegexResult[2];
                    var data = dataUriRegexResult[3];

                    data = window.decodeURIComponent(data);

                    if (isBase64) data = window.atob(data);

                    try {

                        var response;
                        var responseType = (this.responseType || '').toLowerCase();

                        switch (responseType) {

                            case 'arraybuffer':
                            case 'blob':

                                response = new ArrayBuffer(data.length);

                                var view = new Uint8Array(response);

                                for (var i = 0; i < data.length; i++) {

                                    view[i] = data.charCodeAt(i);

                                }

                                if (responseType === 'blob') {

                                    response = new Blob([response], {
                                        type: mimeType
                                    });

                                }

                                break;

                            case 'document':

                                var parser = new DOMParser();
                                response = parser.parseFromString(data, mimeType);

                                break;

                            case 'json':

                                response = JSON.parse(data);

                                break;

                            default: // 'text' or other

                                response = data;

                                break;

                        }

                        // Wait for next browser tick
                        window.setTimeout(function() {

                            if (onLoad) onLoad(response);

                            scope.manager.itemEnd(url);

                        }, 0);

                    } catch (error) {

                        // Wait for next browser tick
                        window.setTimeout(function() {

                            if (onError) onError(error);

                            scope.manager.itemError(url);

                        }, 0);

                    }

                } else {

                    var request = new XMLHttpRequest();
                    request.open('GET', url, true);

                    request.addEventListener('load', function(event) {

                        var response = event.target.response;

                        Cache.add(url, response);

                        if (this.status === 200) {

                            if (onLoad) onLoad(response);

                            scope.manager.itemEnd(url);

                        } else if (this.status === 0) {

                            // Some browsers return HTTP Status 0 when using non-http protocol
                            // e.g. 'file://' or 'data://'. Handle as success.

                            console.warn('THREE.FileLoader: HTTP Status 0 received.');

                            if (onLoad) onLoad(response);

                            scope.manager.itemEnd(url);

                        } else {

                            if (onError) onError(event);

                            scope.manager.itemError(url);

                        }

                    }, false);

                    if (onProgress !== undefined) {

                        request.addEventListener('progress', function(event) {

                            onProgress(event);

                        }, false);

                    }

                    request.addEventListener('error', function(event) {

                        if (onError) onError(event);

                        scope.manager.itemError(url);

                    }, false);

                    if (this.responseType !== undefined) request.responseType = this.responseType;
                    if (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;

                    if (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');

                    request.send(null);

                }

                scope.manager.itemStart(url);

                return request;

            },

            setPath: function(value) {

                this.path = value;
                return this;

            },

            setResponseType: function(value) {

                this.responseType = value;
                return this;

            },

            setWithCredentials: function(value) {

                this.withCredentials = value;
                return this;

            },

            setMimeType: function(value) {

                this.mimeType = value;
                return this;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         *
         * Abstract Base class to block based textures loader (dds, pvr, ...)
         */

        function CompressedTextureLoader(manager) {

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;

            // override in sub classes
            this._parser = null;

        }

        Object.assign(CompressedTextureLoader.prototype, {

            load: function(url, onLoad, onProgress, onError) {

                var scope = this;

                var images = [];

                var texture = new CompressedTexture();
                texture.image = images;

                var loader = new FileLoader(this.manager);
                loader.setPath(this.path);
                loader.setResponseType('arraybuffer');

                function loadTexture(i) {

                    loader.load(url[i], function(buffer) {

                        var texDatas = scope._parser(buffer, true);

                        images[i] = {
                            width: texDatas.width,
                            height: texDatas.height,
                            format: texDatas.format,
                            mipmaps: texDatas.mipmaps
                        };

                        loaded += 1;

                        if (loaded === 6) {

                            if (texDatas.mipmapCount === 1)
                                texture.minFilter = LinearFilter;

                            texture.format = texDatas.format;
                            texture.needsUpdate = true;

                            if (onLoad) onLoad(texture);

                        }

                    }, onProgress, onError);

                }

                if (Array.isArray(url)) {

                    var loaded = 0;

                    for (var i = 0, il = url.length; i < il; ++i) {

                        loadTexture(i);

                    }

                } else {

                    // compressed cubemap texture stored in a single DDS file

                    loader.load(url, function(buffer) {

                        var texDatas = scope._parser(buffer, true);

                        if (texDatas.isCubemap) {

                            var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

                            for (var f = 0; f < faces; f++) {

                                images[f] = {
                                    mipmaps: []
                                };

                                for (var i = 0; i < texDatas.mipmapCount; i++) {

                                    images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
                                    images[f].format = texDatas.format;
                                    images[f].width = texDatas.width;
                                    images[f].height = texDatas.height;

                                }

                            }

                        } else {

                            texture.image.width = texDatas.width;
                            texture.image.height = texDatas.height;
                            texture.mipmaps = texDatas.mipmaps;

                        }

                        if (texDatas.mipmapCount === 1) {

                            texture.minFilter = LinearFilter;

                        }

                        texture.format = texDatas.format;
                        texture.needsUpdate = true;

                        if (onLoad) onLoad(texture);

                    }, onProgress, onError);

                }

                return texture;

            },

            setPath: function(value) {

                this.path = value;
                return this;

            }

        });

        /**
         * @author Nikos M. / https://github.com/foo123/
         *
         * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
         */

        function DataTextureLoader(manager) {

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;

            // override in sub classes
            this._parser = null;

        }

        Object.assign(DataTextureLoader.prototype, {

            load: function(url, onLoad, onProgress, onError) {

                var scope = this;

                var texture = new DataTexture();

                var loader = new FileLoader(this.manager);
                loader.setResponseType('arraybuffer');

                loader.load(url, function(buffer) {

                    var texData = scope._parser(buffer);

                    if (!texData) return;

                    if (undefined !== texData.image) {

                        texture.image = texData.image;

                    } else if (undefined !== texData.data) {

                        texture.image.width = texData.width;
                        texture.image.height = texData.height;
                        texture.image.data = texData.data;

                    }

                    texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
                    texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

                    texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
                    texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

                    texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

                    if (undefined !== texData.format) {

                        texture.format = texData.format;

                    }
                    if (undefined !== texData.type) {

                        texture.type = texData.type;

                    }

                    if (undefined !== texData.mipmaps) {

                        texture.mipmaps = texData.mipmaps;

                    }

                    if (1 === texData.mipmapCount) {

                        texture.minFilter = LinearFilter;

                    }

                    texture.needsUpdate = true;

                    if (onLoad) onLoad(texture, texData);

                }, onProgress, onError);


                return texture;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function ImageLoader(manager) {

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;

        }

        Object.assign(ImageLoader.prototype, {

            load: function(url, onLoad, onProgress, onError) {

                if (url === undefined) url = '';

                if (this.path !== undefined) url = this.path + url;

                var scope = this;

                var cached = Cache.get(url);

                if (cached !== undefined) {

                    scope.manager.itemStart(url);

                    setTimeout(function() {

                        if (onLoad) onLoad(cached);

                        scope.manager.itemEnd(url);

                    }, 0);

                    return cached;

                }

                var image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');

                image.addEventListener('load', function() {

                    Cache.add(url, this);

                    if (onLoad) onLoad(this);

                    scope.manager.itemEnd(url);

                }, false);

                /*
                image.addEventListener( 'progress', function ( event ) {

                	if ( onProgress ) onProgress( event );

                }, false );
                */

                image.addEventListener('error', function(event) {

                    if (onError) onError(event);

                    scope.manager.itemError(url);

                }, false);

                if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;

                scope.manager.itemStart(url);

                image.src = url;

                return image;

            },

            setCrossOrigin: function(value) {

                this.crossOrigin = value;
                return this;

            },

            setPath: function(value) {

                this.path = value;
                return this;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function CubeTextureLoader(manager) {

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;

        }

        Object.assign(CubeTextureLoader.prototype, {

            load: function(urls, onLoad, onProgress, onError) {

                var texture = new CubeTexture();

                var loader = new ImageLoader(this.manager);
                loader.setCrossOrigin(this.crossOrigin);
                loader.setPath(this.path);

                var loaded = 0;

                function loadTexture(i) {

                    loader.load(urls[i], function(image) {

                        texture.images[i] = image;

                        loaded++;

                        if (loaded === 6) {

                            texture.needsUpdate = true;

                            if (onLoad) onLoad(texture);

                        }

                    }, undefined, onError);

                }

                for (var i = 0; i < urls.length; ++i) {

                    loadTexture(i);

                }

                return texture;

            },

            setCrossOrigin: function(value) {

                this.crossOrigin = value;
                return this;

            },

            setPath: function(value) {

                this.path = value;
                return this;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function TextureLoader(manager) {

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;

        }

        Object.assign(TextureLoader.prototype, {

            load: function(url, onLoad, onProgress, onError) {

                var texture = new Texture();

                var loader = new ImageLoader(this.manager);
                loader.setCrossOrigin(this.crossOrigin);
                loader.setPath(this.path);
                loader.load(url, function(image) {

                    // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
                    var isJPEG = url.search(/\.(jpg|jpeg)$/) > 0 || url.search(/^data\:image\/jpeg/) === 0;

                    texture.format = isJPEG ? RGBFormat : RGBAFormat;
                    texture.image = image;
                    texture.needsUpdate = true;

                    if (onLoad !== undefined) {

                        onLoad(texture);

                    }

                }, onProgress, onError);

                return texture;

            },

            setCrossOrigin: function(value) {

                this.crossOrigin = value;
                return this;

            },

            setPath: function(value) {

                this.path = value;
                return this;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */

        function Light(color, intensity) {

            Object3D.call(this);

            this.type = 'Light';

            this.color = new Color(color);
            this.intensity = intensity !== undefined ? intensity : 1;

            this.receiveShadow = undefined;

        }

        Light.prototype = Object.assign(Object.create(Object3D.prototype), {

            constructor: Light,

            isLight: true,

            copy: function(source) {

                Object3D.prototype.copy.call(this, source);

                this.color.copy(source.color);
                this.intensity = source.intensity;

                return this;

            },

            toJSON: function(meta) {

                var data = Object3D.prototype.toJSON.call(this, meta);

                data.object.color = this.color.getHex();
                data.object.intensity = this.intensity;

                if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();

                if (this.distance !== undefined) data.object.distance = this.distance;
                if (this.angle !== undefined) data.object.angle = this.angle;
                if (this.decay !== undefined) data.object.decay = this.decay;
                if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;

                if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();

                return data;

            }

        });

        /**
         * @author alteredq / http://alteredqualia.com/
         */

        function HemisphereLight(skyColor, groundColor, intensity) {

            Light.call(this, skyColor, intensity);

            this.type = 'HemisphereLight';

            this.castShadow = undefined;

            this.position.copy(Object3D.DefaultUp);
            this.updateMatrix();

            this.groundColor = new Color(groundColor);

        }

        HemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {

            constructor: HemisphereLight,

            isHemisphereLight: true,

            copy: function(source) {

                Light.prototype.copy.call(this, source);

                this.groundColor.copy(source.groundColor);

                return this;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function LightShadow(camera) {

            this.camera = camera;

            this.bias = 0;
            this.radius = 1;

            this.mapSize = new Vector2(512, 512);

            this.map = null;
            this.matrix = new Matrix4();

        }

        Object.assign(LightShadow.prototype, {

            copy: function(source) {

                this.camera = source.camera.clone();

                this.bias = source.bias;
                this.radius = source.radius;

                this.mapSize.copy(source.mapSize);

                return this;

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            toJSON: function() {

                var object = {};

                if (this.bias !== 0) object.bias = this.bias;
                if (this.radius !== 1) object.radius = this.radius;
                if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();

                object.camera = this.camera.toJSON(false).object;
                delete object.camera.matrix;

                return object;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function SpotLightShadow() {

            LightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));

        }

        SpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {

            constructor: SpotLightShadow,

            isSpotLightShadow: true,

            update: function(light) {

                var fov = _Math.RAD2DEG * 2 * light.angle;
                var aspect = this.mapSize.width / this.mapSize.height;
                var far = light.distance || 500;

                var camera = this.camera;

                if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {

                    camera.fov = fov;
                    camera.aspect = aspect;
                    camera.far = far;
                    camera.updateProjectionMatrix();

                }

            }

        });

        /**
         * @author alteredq / http://alteredqualia.com/
         */

        function SpotLight(color, intensity, distance, angle, penumbra, decay) {

            Light.call(this, color, intensity);

            this.type = 'SpotLight';

            this.position.copy(Object3D.DefaultUp);
            this.updateMatrix();

            this.target = new Object3D();

            Object.defineProperty(this, 'power', {
                get: function() {
                    // intensity = power per solid angle.
                    // ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
                    return this.intensity * Math.PI;
                },
                set: function(power) {
                    // intensity = power per solid angle.
                    // ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
                    this.intensity = power / Math.PI;
                }
            });

            this.distance = (distance !== undefined) ? distance : 0;
            this.angle = (angle !== undefined) ? angle : Math.PI / 3;
            this.penumbra = (penumbra !== undefined) ? penumbra : 0;
            this.decay = (decay !== undefined) ? decay : 1; // for physically correct lights, should be 2.

            this.shadow = new SpotLightShadow();

        }

        SpotLight.prototype = Object.assign(Object.create(Light.prototype), {

            constructor: SpotLight,

            isSpotLight: true,

            copy: function(source) {

                Light.prototype.copy.call(this, source);

                this.distance = source.distance;
                this.angle = source.angle;
                this.penumbra = source.penumbra;
                this.decay = source.decay;

                this.target = source.target.clone();

                this.shadow = source.shadow.clone();

                return this;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */


        function PointLight(color, intensity, distance, decay) {

            Light.call(this, color, intensity);

            this.type = 'PointLight';

            Object.defineProperty(this, 'power', {
                get: function() {
                    // intensity = power per solid angle.
                    // ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
                    return this.intensity * 4 * Math.PI;

                },
                set: function(power) {
                    // intensity = power per solid angle.
                    // ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
                    this.intensity = power / (4 * Math.PI);
                }
            });

            this.distance = (distance !== undefined) ? distance : 0;
            this.decay = (decay !== undefined) ? decay : 1; // for physically correct lights, should be 2.

            this.shadow = new LightShadow(new PerspectiveCamera(90, 1, 0.5, 500));

        }

        PointLight.prototype = Object.assign(Object.create(Light.prototype), {

            constructor: PointLight,

            isPointLight: true,

            copy: function(source) {

                Light.prototype.copy.call(this, source);

                this.distance = source.distance;
                this.decay = source.decay;

                this.shadow = source.shadow.clone();

                return this;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function DirectionalLightShadow() {

            LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));

        }

        DirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {

            constructor: DirectionalLightShadow

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */

        function DirectionalLight(color, intensity) {

            Light.call(this, color, intensity);

            this.type = 'DirectionalLight';

            this.position.copy(Object3D.DefaultUp);
            this.updateMatrix();

            this.target = new Object3D();

            this.shadow = new DirectionalLightShadow();

        }

        DirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {

            constructor: DirectionalLight,

            isDirectionalLight: true,

            copy: function(source) {

                Light.prototype.copy.call(this, source);

                this.target = source.target.clone();

                this.shadow = source.shadow.clone();

                return this;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function AmbientLight(color, intensity) {

            Light.call(this, color, intensity);

            this.type = 'AmbientLight';

            this.castShadow = undefined;

        }

        AmbientLight.prototype = Object.assign(Object.create(Light.prototype), {

            constructor: AmbientLight,

            isAmbientLight: true

        });

        /**
         * @author tschw
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         */

        var AnimationUtils = {

            // same as Array.prototype.slice, but also works on typed arrays
            arraySlice: function(array, from, to) {

                if (AnimationUtils.isTypedArray(array)) {

                    return new array.constructor(array.subarray(from, to));

                }

                return array.slice(from, to);

            },

            // converts an array to a specific type
            convertArray: function(array, type, forceClone) {

                if (!array || // let 'undefined' and 'null' pass
                    !forceClone && array.constructor === type) return array;

                if (typeof type.BYTES_PER_ELEMENT === 'number') {

                    return new type(array); // create typed array

                }

                return Array.prototype.slice.call(array); // create Array

            },

            isTypedArray: function(object) {

                return ArrayBuffer.isView(object) &&
                    !(object instanceof DataView);

            },

            // returns an array by which times and values can be sorted
            getKeyframeOrder: function(times) {

                function compareTime(i, j) {

                    return times[i] - times[j];

                }

                var n = times.length;
                var result = new Array(n);
                for (var i = 0; i !== n; ++i) result[i] = i;

                result.sort(compareTime);

                return result;

            },

            // uses the array previously returned by 'getKeyframeOrder' to sort data
            sortedArray: function(values, stride, order) {

                var nValues = values.length;
                var result = new values.constructor(nValues);

                for (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {

                    var srcOffset = order[i] * stride;

                    for (var j = 0; j !== stride; ++j) {

                        result[dstOffset++] = values[srcOffset + j];

                    }

                }

                return result;

            },

            // function for parsing AOS keyframe formats
            flattenJSON: function(jsonKeys, times, values, valuePropertyName) {

                var i = 1,
                    key = jsonKeys[0];

                while (key !== undefined && key[valuePropertyName] === undefined) {

                    key = jsonKeys[i++];

                }

                if (key === undefined) return; // no data

                var value = key[valuePropertyName];
                if (value === undefined) return; // no data

                if (Array.isArray(value)) {

                    do {

                        value = key[valuePropertyName];

                        if (value !== undefined) {

                            times.push(key.time);
                            values.push.apply(values, value); // push all elements

                        }

                        key = jsonKeys[i++];

                    } while (key !== undefined);

                } else if (value.toArray !== undefined) {
                    // ...assume THREE.Math-ish

                    do {

                        value = key[valuePropertyName];

                        if (value !== undefined) {

                            times.push(key.time);
                            value.toArray(values, values.length);

                        }

                        key = jsonKeys[i++];

                    } while (key !== undefined);

                } else {
                    // otherwise push as-is

                    do {

                        value = key[valuePropertyName];

                        if (value !== undefined) {

                            times.push(key.time);
                            values.push(value);

                        }

                        key = jsonKeys[i++];

                    } while (key !== undefined);

                }

            }

        };

        /**
         * Abstract base class of interpolants over parametric samples.
         *
         * The parameter domain is one dimensional, typically the time or a path
         * along a curve defined by the data.
         *
         * The sample values can have any dimensionality and derived classes may
         * apply special interpretations to the data.
         *
         * This class provides the interval seek in a Template Method, deferring
         * the actual interpolation to derived classes.
         *
         * Time complexity is O(1) for linear access crossing at most two points
         * and O(log N) for random access, where N is the number of positions.
         *
         * References:
         *
         * 		http://www.oodesign.com/template-method-pattern.html
         *
         * @author tschw
         */

        function Interpolant(
            parameterPositions, sampleValues, sampleSize, resultBuffer) {

            this.parameterPositions = parameterPositions;
            this._cachedIndex = 0;

            this.resultBuffer = resultBuffer !== undefined ?
                resultBuffer : new sampleValues.constructor(sampleSize);
            this.sampleValues = sampleValues;
            this.valueSize = sampleSize;

        }

        Interpolant.prototype = {

            constructor: Interpolant,

            evaluate: function(t) {

                var pp = this.parameterPositions,
                    i1 = this._cachedIndex,

                    t1 = pp[i1],
                    t0 = pp[i1 - 1];

                validate_interval: {

                    seek: {

                        var right;

                        linear_scan: {
                            //- See http://jsperf.com/comparison-to-undefined/3
                            //- slower code:
                            //-
                            //- 				if ( t >= t1 || t1 === undefined ) {
                            forward_scan: if (!(t < t1)) {

                                for (var giveUpAt = i1 + 2;;) {

                                    if (t1 === undefined) {

                                        if (t < t0) break forward_scan;

                                        // after end

                                        i1 = pp.length;
                                        this._cachedIndex = i1;
                                        return this.afterEnd_(i1 - 1, t, t0);

                                    }

                                    if (i1 === giveUpAt) break; // this loop

                                    t0 = t1;
                                    t1 = pp[++i1];

                                    if (t < t1) {

                                        // we have arrived at the sought interval
                                        break seek;

                                    }

                                }

                                // prepare binary search on the right side of the index
                                right = pp.length;
                                break linear_scan;

                            }

                            //- slower code:
                            //-					if ( t < t0 || t0 === undefined ) {
                            if (!(t >= t0)) {

                                // looping?

                                var t1global = pp[1];

                                if (t < t1global) {

                                    i1 = 2; // + 1, using the scan for the details
                                    t0 = t1global;

                                }

                                // linear reverse scan

                                for (var giveUpAt = i1 - 2;;) {

                                    if (t0 === undefined) {

                                        // before start

                                        this._cachedIndex = 0;
                                        return this.beforeStart_(0, t, t1);

                                    }

                                    if (i1 === giveUpAt) break; // this loop

                                    t1 = t0;
                                    t0 = pp[--i1 - 1];

                                    if (t >= t0) {

                                        // we have arrived at the sought interval
                                        break seek;

                                    }

                                }

                                // prepare binary search on the left side of the index
                                right = i1;
                                i1 = 0;
                                break linear_scan;

                            }

                            // the interval is valid

                            break validate_interval;

                        } // linear scan

                        // binary search

                        while (i1 < right) {

                            var mid = (i1 + right) >>> 1;

                            if (t < pp[mid]) {

                                right = mid;

                            } else {

                                i1 = mid + 1;

                            }

                        }

                        t1 = pp[i1];
                        t0 = pp[i1 - 1];

                        // check boundary cases, again

                        if (t0 === undefined) {

                            this._cachedIndex = 0;
                            return this.beforeStart_(0, t, t1);

                        }

                        if (t1 === undefined) {

                            i1 = pp.length;
                            this._cachedIndex = i1;
                            return this.afterEnd_(i1 - 1, t0, t);

                        }

                    } // seek

                    this._cachedIndex = i1;

                    this.intervalChanged_(i1, t0, t1);

                } // validate_interval

                return this.interpolate_(i1, t0, t, t1);

            },

            settings: null, // optional, subclass-specific settings structure
            // Note: The indirection allows central control of many interpolants.

            // --- Protected interface

            DefaultSettings_: {},

            getSettings_: function() {

                return this.settings || this.DefaultSettings_;

            },

            copySampleValue_: function(index) {

                // copies a sample value to the result buffer

                var result = this.resultBuffer,
                    values = this.sampleValues,
                    stride = this.valueSize,
                    offset = index * stride;

                for (var i = 0; i !== stride; ++i) {

                    result[i] = values[offset + i];

                }

                return result;

            },

            // Template methods for derived classes:

            interpolate_: function(i1, t0, t, t1) {

                throw new Error("call to abstract method");
                // implementations shall return this.resultBuffer

            },

            intervalChanged_: function(i1, t0, t1) {

                // empty

            }

        };

        Object.assign(Interpolant.prototype, {

            beforeStart_: //( 0, t, t0 ), returns this.resultBuffer
                Interpolant.prototype.copySampleValue_,

            afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer
                Interpolant.prototype.copySampleValue_

        });

        /**
         * Fast and simple cubic spline interpolant.
         *
         * It was derived from a Hermitian construction setting the first derivative
         * at each sample position to the linear slope between neighboring positions
         * over their parameter interval.
         *
         * @author tschw
         */

        function CubicInterpolant(
            parameterPositions, sampleValues, sampleSize, resultBuffer) {

            Interpolant.call(
                this, parameterPositions, sampleValues, sampleSize, resultBuffer);

            this._weightPrev = -0;
            this._offsetPrev = -0;
            this._weightNext = -0;
            this._offsetNext = -0;

        }

        CubicInterpolant.prototype =
            Object.assign(Object.create(Interpolant.prototype), {

                constructor: CubicInterpolant,

                DefaultSettings_: {

                    endingStart: ZeroCurvatureEnding,
                    endingEnd: ZeroCurvatureEnding

                },

                intervalChanged_: function(i1, t0, t1) {

                    var pp = this.parameterPositions,
                        iPrev = i1 - 2,
                        iNext = i1 + 1,

                        tPrev = pp[iPrev],
                        tNext = pp[iNext];

                    if (tPrev === undefined) {

                        switch (this.getSettings_().endingStart) {

                            case ZeroSlopeEnding:

                                // f'(t0) = 0
                                iPrev = i1;
                                tPrev = 2 * t0 - t1;

                                break;

                            case WrapAroundEnding:

                                // use the other end of the curve
                                iPrev = pp.length - 2;
                                tPrev = t0 + pp[iPrev] - pp[iPrev + 1];

                                break;

                            default: // ZeroCurvatureEnding

                                // f''(t0) = 0 a.k.a. Natural Spline
                                iPrev = i1;
                                tPrev = t1;

                        }

                    }

                    if (tNext === undefined) {

                        switch (this.getSettings_().endingEnd) {

                            case ZeroSlopeEnding:

                                // f'(tN) = 0
                                iNext = i1;
                                tNext = 2 * t1 - t0;

                                break;

                            case WrapAroundEnding:

                                // use the other end of the curve
                                iNext = 1;
                                tNext = t1 + pp[1] - pp[0];

                                break;

                            default: // ZeroCurvatureEnding

                                // f''(tN) = 0, a.k.a. Natural Spline
                                iNext = i1 - 1;
                                tNext = t0;

                        }

                    }

                    var halfDt = (t1 - t0) * 0.5,
                        stride = this.valueSize;

                    this._weightPrev = halfDt / (t0 - tPrev);
                    this._weightNext = halfDt / (tNext - t1);
                    this._offsetPrev = iPrev * stride;
                    this._offsetNext = iNext * stride;

                },

                interpolate_: function(i1, t0, t, t1) {

                    var result = this.resultBuffer,
                        values = this.sampleValues,
                        stride = this.valueSize,

                        o1 = i1 * stride,
                        o0 = o1 - stride,
                        oP = this._offsetPrev,
                        oN = this._offsetNext,
                        wP = this._weightPrev,
                        wN = this._weightNext,

                        p = (t - t0) / (t1 - t0),
                        pp = p * p,
                        ppp = pp * p;

                    // evaluate polynomials

                    var sP = -wP * ppp + 2 * wP * pp - wP * p;
                    var s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
                    var s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
                    var sN = wN * ppp - wN * pp;

                    // combine data linearly

                    for (var i = 0; i !== stride; ++i) {

                        result[i] =
                            sP * values[oP + i] +
                            s0 * values[o0 + i] +
                            s1 * values[o1 + i] +
                            sN * values[oN + i];

                    }

                    return result;

                }

            });

        /**
         * @author tschw
         */

        function LinearInterpolant(
            parameterPositions, sampleValues, sampleSize, resultBuffer) {

            Interpolant.call(
                this, parameterPositions, sampleValues, sampleSize, resultBuffer);

        }

        LinearInterpolant.prototype =
            Object.assign(Object.create(Interpolant.prototype), {

                constructor: LinearInterpolant,

                interpolate_: function(i1, t0, t, t1) {

                    var result = this.resultBuffer,
                        values = this.sampleValues,
                        stride = this.valueSize,

                        offset1 = i1 * stride,
                        offset0 = offset1 - stride,

                        weight1 = (t - t0) / (t1 - t0),
                        weight0 = 1 - weight1;

                    for (var i = 0; i !== stride; ++i) {

                        result[i] =
                            values[offset0 + i] * weight0 +
                            values[offset1 + i] * weight1;

                    }

                    return result;

                }

            });

        /**
         *
         * Interpolant that evaluates to the sample value at the position preceeding
         * the parameter.
         *
         * @author tschw
         */

        function DiscreteInterpolant(
            parameterPositions, sampleValues, sampleSize, resultBuffer) {

            Interpolant.call(
                this, parameterPositions, sampleValues, sampleSize, resultBuffer);

        }

        DiscreteInterpolant.prototype =
            Object.assign(Object.create(Interpolant.prototype), {

                constructor: DiscreteInterpolant,

                interpolate_: function(i1, t0, t, t1) {

                    return this.copySampleValue_(i1 - 1);

                }

            });

        var KeyframeTrackPrototype;

        KeyframeTrackPrototype = {

            TimeBufferType: Float32Array,
            ValueBufferType: Float32Array,

            DefaultInterpolation: InterpolateLinear,

            InterpolantFactoryMethodDiscrete: function(result) {

                return new DiscreteInterpolant(
                    this.times, this.values, this.getValueSize(), result);

            },

            InterpolantFactoryMethodLinear: function(result) {

                return new LinearInterpolant(
                    this.times, this.values, this.getValueSize(), result);

            },

            InterpolantFactoryMethodSmooth: function(result) {

                return new CubicInterpolant(
                    this.times, this.values, this.getValueSize(), result);

            },

            setInterpolation: function(interpolation) {

                var factoryMethod;

                switch (interpolation) {

                    case InterpolateDiscrete:

                        factoryMethod = this.InterpolantFactoryMethodDiscrete;

                        break;

                    case InterpolateLinear:

                        factoryMethod = this.InterpolantFactoryMethodLinear;

                        break;

                    case InterpolateSmooth:

                        factoryMethod = this.InterpolantFactoryMethodSmooth;

                        break;

                }

                if (factoryMethod === undefined) {

                    var message = "unsupported interpolation for " +
                        this.ValueTypeName + " keyframe track named " + this.name;

                    if (this.createInterpolant === undefined) {

                        // fall back to default, unless the default itself is messed up
                        if (interpolation !== this.DefaultInterpolation) {

                            this.setInterpolation(this.DefaultInterpolation);

                        } else {

                            throw new Error(message); // fatal, in this case

                        }

                    }

                    console.warn(message);
                    return;

                }

                this.createInterpolant = factoryMethod;

            },

            getInterpolation: function() {

                switch (this.createInterpolant) {

                    case this.InterpolantFactoryMethodDiscrete:

                        return InterpolateDiscrete;

                    case this.InterpolantFactoryMethodLinear:

                        return InterpolateLinear;

                    case this.InterpolantFactoryMethodSmooth:

                        return InterpolateSmooth;

                }

            },

            getValueSize: function() {

                return this.values.length / this.times.length;

            },

            // move all keyframes either forwards or backwards in time
            shift: function(timeOffset) {

                if (timeOffset !== 0.0) {

                    var times = this.times;

                    for (var i = 0, n = times.length; i !== n; ++i) {

                        times[i] += timeOffset;

                    }

                }

                return this;

            },

            // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
            scale: function(timeScale) {

                if (timeScale !== 1.0) {

                    var times = this.times;

                    for (var i = 0, n = times.length; i !== n; ++i) {

                        times[i] *= timeScale;

                    }

                }

                return this;

            },

            // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
            // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
            trim: function(startTime, endTime) {

                var times = this.times,
                    nKeys = times.length,
                    from = 0,
                    to = nKeys - 1;

                while (from !== nKeys && times[from] < startTime) ++from;
                while (to !== -1 && times[to] > endTime) --to;

                ++to; // inclusive -> exclusive bound

                if (from !== 0 || to !== nKeys) {

                    // empty tracks are forbidden, so keep at least one keyframe
                    if (from >= to) to = Math.max(to, 1), from = to - 1;

                    var stride = this.getValueSize();
                    this.times = AnimationUtils.arraySlice(times, from, to);
                    this.values = AnimationUtils.
                    arraySlice(this.values, from * stride, to * stride);

                }

                return this;

            },

            // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
            validate: function() {

                var valid = true;

                var valueSize = this.getValueSize();
                if (valueSize - Math.floor(valueSize) !== 0) {

                    console.error("invalid value size in track", this);
                    valid = false;

                }

                var times = this.times,
                    values = this.values,

                    nKeys = times.length;

                if (nKeys === 0) {

                    console.error("track is empty", this);
                    valid = false;

                }

                var prevTime = null;

                for (var i = 0; i !== nKeys; i++) {

                    var currTime = times[i];

                    if (typeof currTime === 'number' && isNaN(currTime)) {

                        console.error("time is not a valid number", this, i, currTime);
                        valid = false;
                        break;

                    }

                    if (prevTime !== null && prevTime > currTime) {

                        console.error("out of order keys", this, i, currTime, prevTime);
                        valid = false;
                        break;

                    }

                    prevTime = currTime;

                }

                if (values !== undefined) {

                    if (AnimationUtils.isTypedArray(values)) {

                        for (var i = 0, n = values.length; i !== n; ++i) {

                            var value = values[i];

                            if (isNaN(value)) {

                                console.error("value is not a valid number", this, i, value);
                                valid = false;
                                break;

                            }

                        }

                    }

                }

                return valid;

            },

            // removes equivalent sequential keys as common in morph target sequences
            // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
            optimize: function() {

                var times = this.times,
                    values = this.values,
                    stride = this.getValueSize(),

                    smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

                    writeIndex = 1,
                    lastIndex = times.length - 1;

                for (var i = 1; i < lastIndex; ++i) {

                    var keep = false;

                    var time = times[i];
                    var timeNext = times[i + 1];

                    // remove adjacent keyframes scheduled at the same time

                    if (time !== timeNext && (i !== 1 || time !== time[0])) {

                        if (!smoothInterpolation) {

                            // remove unnecessary keyframes same as their neighbors

                            var offset = i * stride,
                                offsetP = offset - stride,
                                offsetN = offset + stride;

                            for (var j = 0; j !== stride; ++j) {

                                var value = values[offset + j];

                                if (value !== values[offsetP + j] ||
                                    value !== values[offsetN + j]) {

                                    keep = true;
                                    break;

                                }

                            }

                        } else keep = true;

                    }

                    // in-place compaction

                    if (keep) {

                        if (i !== writeIndex) {

                            times[writeIndex] = times[i];

                            var readOffset = i * stride,
                                writeOffset = writeIndex * stride;

                            for (var j = 0; j !== stride; ++j)

                                values[writeOffset + j] = values[readOffset + j];

                        }

                        ++writeIndex;

                    }

                }

                // flush last keyframe (compaction looks ahead)

                if (lastIndex > 0) {

                    times[writeIndex] = times[lastIndex];

                    for (var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j)

                        values[writeOffset + j] = values[readOffset + j];

                    ++writeIndex;

                }

                if (writeIndex !== times.length) {

                    this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
                    this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);

                }

                return this;

            }

        };

        function KeyframeTrackConstructor(name, times, values, interpolation) {

            if (name === undefined) throw new Error("track name is undefined");

            if (times === undefined || times.length === 0) {

                throw new Error("no keyframes in track named " + name);

            }

            this.name = name;

            this.times = AnimationUtils.convertArray(times, this.TimeBufferType);
            this.values = AnimationUtils.convertArray(values, this.ValueBufferType);

            this.setInterpolation(interpolation || this.DefaultInterpolation);

            this.validate();
            this.optimize();

        }

        /**
         *
         * A Track of vectored keyframe values.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */

        function VectorKeyframeTrack(name, times, values, interpolation) {

            KeyframeTrackConstructor.call(this, name, times, values, interpolation);

        }

        VectorKeyframeTrack.prototype =
            Object.assign(Object.create(KeyframeTrackPrototype), {

                constructor: VectorKeyframeTrack,

                ValueTypeName: 'vector'

                // ValueBufferType is inherited

                // DefaultInterpolation is inherited

            });

        /**
         * Spherical linear unit quaternion interpolant.
         *
         * @author tschw
         */

        function QuaternionLinearInterpolant(
            parameterPositions, sampleValues, sampleSize, resultBuffer) {

            Interpolant.call(
                this, parameterPositions, sampleValues, sampleSize, resultBuffer);

        }

        QuaternionLinearInterpolant.prototype =
            Object.assign(Object.create(Interpolant.prototype), {

                constructor: QuaternionLinearInterpolant,

                interpolate_: function(i1, t0, t, t1) {

                    var result = this.resultBuffer,
                        values = this.sampleValues,
                        stride = this.valueSize,

                        offset = i1 * stride,

                        alpha = (t - t0) / (t1 - t0);

                    for (var end = offset + stride; offset !== end; offset += 4) {

                        Quaternion.slerpFlat(result, 0,
                            values, offset - stride, values, offset, alpha);

                    }

                    return result;

                }

            });

        /**
         *
         * A Track of quaternion keyframe values.
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */

        function QuaternionKeyframeTrack(name, times, values, interpolation) {

            KeyframeTrackConstructor.call(this, name, times, values, interpolation);

        }

        QuaternionKeyframeTrack.prototype =
            Object.assign(Object.create(KeyframeTrackPrototype), {

                constructor: QuaternionKeyframeTrack,

                ValueTypeName: 'quaternion',

                // ValueBufferType is inherited

                DefaultInterpolation: InterpolateLinear,

                InterpolantFactoryMethodLinear: function(result) {

                    return new QuaternionLinearInterpolant(
                        this.times, this.values, this.getValueSize(), result);

                },

                InterpolantFactoryMethodSmooth: undefined // not yet implemented

            });

        /**
         *
         * A Track of numeric keyframe values.
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */

        function NumberKeyframeTrack(name, times, values, interpolation) {

            KeyframeTrackConstructor.call(this, name, times, values, interpolation);

        }

        NumberKeyframeTrack.prototype =
            Object.assign(Object.create(KeyframeTrackPrototype), {

                constructor: NumberKeyframeTrack,

                ValueTypeName: 'number'

                // ValueBufferType is inherited

                // DefaultInterpolation is inherited

            });

        /**
         *
         * A Track that interpolates Strings
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */

        function StringKeyframeTrack(name, times, values, interpolation) {

            KeyframeTrackConstructor.call(this, name, times, values, interpolation);

        }

        StringKeyframeTrack.prototype =
            Object.assign(Object.create(KeyframeTrackPrototype), {

                constructor: StringKeyframeTrack,

                ValueTypeName: 'string',
                ValueBufferType: Array,

                DefaultInterpolation: InterpolateDiscrete,

                InterpolantFactoryMethodLinear: undefined,

                InterpolantFactoryMethodSmooth: undefined

            });

        /**
         *
         * A Track of Boolean keyframe values.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */

        function BooleanKeyframeTrack(name, times, values) {

            KeyframeTrackConstructor.call(this, name, times, values);

        }

        BooleanKeyframeTrack.prototype =
            Object.assign(Object.create(KeyframeTrackPrototype), {

                constructor: BooleanKeyframeTrack,

                ValueTypeName: 'bool',
                ValueBufferType: Array,

                DefaultInterpolation: InterpolateDiscrete,

                InterpolantFactoryMethodLinear: undefined,
                InterpolantFactoryMethodSmooth: undefined

                // Note: Actually this track could have a optimized / compressed
                // representation of a single value and a custom interpolant that
                // computes "firstValue ^ isOdd( index )".

            });

        /**
         *
         * A Track of keyframe values that represent color.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */

        function ColorKeyframeTrack(name, times, values, interpolation) {

            KeyframeTrackConstructor.call(this, name, times, values, interpolation);

        }

        ColorKeyframeTrack.prototype =
            Object.assign(Object.create(KeyframeTrackPrototype), {

                constructor: ColorKeyframeTrack,

                ValueTypeName: 'color'

                // ValueBufferType is inherited

                // DefaultInterpolation is inherited


                // Note: Very basic implementation and nothing special yet.
                // However, this is the place for color space parameterization.

            });

        /**
         *
         * A timed sequence of keyframes for a specific property.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */

        function KeyframeTrack(name, times, values, interpolation) {

            KeyframeTrackConstructor.apply(this, arguments);

        }

        KeyframeTrack.prototype = KeyframeTrackPrototype;
        KeyframeTrackPrototype.constructor = KeyframeTrack;

        // Static methods:

        Object.assign(KeyframeTrack, {

            // Serialization (in static context, because of constructor invocation
            // and automatic invocation of .toJSON):

            parse: function(json) {

                if (json.type === undefined) {

                    throw new Error("track type undefined, can not parse");

                }

                var trackType = KeyframeTrack._getTrackTypeForValueTypeName(json.type);

                if (json.times === undefined) {

                    var times = [],
                        values = [];

                    AnimationUtils.flattenJSON(json.keys, times, values, 'value');

                    json.times = times;
                    json.values = values;

                }

                // derived classes can define a static parse method
                if (trackType.parse !== undefined) {

                    return trackType.parse(json);

                } else {

                    // by default, we asssume a constructor compatible with the base
                    return new trackType(
                        json.name, json.times, json.values, json.interpolation);

                }

            },

            toJSON: function(track) {

                var trackType = track.constructor;

                var json;

                // derived classes can define a static toJSON method
                if (trackType.toJSON !== undefined) {

                    json = trackType.toJSON(track);

                } else {

                    // by default, we assume the data can be serialized as-is
                    json = {

                        'name': track.name,
                        'times': AnimationUtils.convertArray(track.times, Array),
                        'values': AnimationUtils.convertArray(track.values, Array)

                    };

                    var interpolation = track.getInterpolation();

                    if (interpolation !== track.DefaultInterpolation) {

                        json.interpolation = interpolation;

                    }

                }

                json.type = track.ValueTypeName; // mandatory

                return json;

            },

            _getTrackTypeForValueTypeName: function(typeName) {

                switch (typeName.toLowerCase()) {

                    case "scalar":
                    case "double":
                    case "float":
                    case "number":
                    case "integer":

                        return NumberKeyframeTrack;

                    case "vector":
                    case "vector2":
                    case "vector3":
                    case "vector4":

                        return VectorKeyframeTrack;

                    case "color":

                        return ColorKeyframeTrack;

                    case "quaternion":

                        return QuaternionKeyframeTrack;

                    case "bool":
                    case "boolean":

                        return BooleanKeyframeTrack;

                    case "string":

                        return StringKeyframeTrack;

                }

                throw new Error("Unsupported typeName: " + typeName);

            }

        });

        /**
         *
         * Reusable set of Tracks that represent an animation.
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         */

        function AnimationClip(name, duration, tracks) {

            this.name = name;
            this.tracks = tracks;
            this.duration = (duration !== undefined) ? duration : -1;

            this.uuid = _Math.generateUUID();

            // this means it should figure out its duration by scanning the tracks
            if (this.duration < 0) {

                this.resetDuration();

            }

            this.optimize();

        }

        AnimationClip.prototype = {

            constructor: AnimationClip,

            resetDuration: function() {

                var tracks = this.tracks,
                    duration = 0;

                for (var i = 0, n = tracks.length; i !== n; ++i) {

                    var track = this.tracks[i];

                    duration = Math.max(duration, track.times[track.times.length - 1]);

                }

                this.duration = duration;

            },

            trim: function() {

                for (var i = 0; i < this.tracks.length; i++) {

                    this.tracks[i].trim(0, this.duration);

                }

                return this;

            },

            optimize: function() {

                for (var i = 0; i < this.tracks.length; i++) {

                    this.tracks[i].optimize();

                }

                return this;

            }

        };

        // Static methods:

        Object.assign(AnimationClip, {

            parse: function(json) {

                var tracks = [],
                    jsonTracks = json.tracks,
                    frameTime = 1.0 / (json.fps || 1.0);

                for (var i = 0, n = jsonTracks.length; i !== n; ++i) {

                    tracks.push(KeyframeTrack.parse(jsonTracks[i]).scale(frameTime));

                }

                return new AnimationClip(json.name, json.duration, tracks);

            },


            toJSON: function(clip) {

                var tracks = [],
                    clipTracks = clip.tracks;

                var json = {

                    'name': clip.name,
                    'duration': clip.duration,
                    'tracks': tracks

                };

                for (var i = 0, n = clipTracks.length; i !== n; ++i) {

                    tracks.push(KeyframeTrack.toJSON(clipTracks[i]));

                }

                return json;

            },


            CreateFromMorphTargetSequence: function(name, morphTargetSequence, fps, noLoop) {

                var numMorphTargets = morphTargetSequence.length;
                var tracks = [];

                for (var i = 0; i < numMorphTargets; i++) {

                    var times = [];
                    var values = [];

                    times.push(
                        (i + numMorphTargets - 1) % numMorphTargets,
                        i,
                        (i + 1) % numMorphTargets);

                    values.push(0, 1, 0);

                    var order = AnimationUtils.getKeyframeOrder(times);
                    times = AnimationUtils.sortedArray(times, 1, order);
                    values = AnimationUtils.sortedArray(values, 1, order);

                    // if there is a key at the first frame, duplicate it as the
                    // last frame as well for perfect loop.
                    if (!noLoop && times[0] === 0) {

                        times.push(numMorphTargets);
                        values.push(values[0]);

                    }

                    tracks.push(
                        new NumberKeyframeTrack(
                            '.morphTargetInfluences[' + morphTargetSequence[i].name + ']',
                            times, values
                        ).scale(1.0 / fps));
                }

                return new AnimationClip(name, -1, tracks);

            },

            findByName: function(objectOrClipArray, name) {

                var clipArray = objectOrClipArray;

                if (!Array.isArray(objectOrClipArray)) {

                    var o = objectOrClipArray;
                    clipArray = o.geometry && o.geometry.animations || o.animations;

                }

                for (var i = 0; i < clipArray.length; i++) {

                    if (clipArray[i].name === name) {

                        return clipArray[i];

                    }
                }

                return null;

            },

            CreateClipsFromMorphTargetSequences: function(morphTargets, fps, noLoop) {

                var animationToMorphTargets = {};

                // tested with https://regex101.com/ on trick sequences
                // such flamingo_flyA_003, flamingo_run1_003, crdeath0059
                var pattern = /^([\w-]*?)([\d]+)$/;

                // sort morph target names into animation groups based
                // patterns like Walk_001, Walk_002, Run_001, Run_002
                for (var i = 0, il = morphTargets.length; i < il; i++) {

                    var morphTarget = morphTargets[i];
                    var parts = morphTarget.name.match(pattern);

                    if (parts && parts.length > 1) {

                        var name = parts[1];

                        var animationMorphTargets = animationToMorphTargets[name];
                        if (!animationMorphTargets) {

                            animationToMorphTargets[name] = animationMorphTargets = [];

                        }

                        animationMorphTargets.push(morphTarget);

                    }

                }

                var clips = [];

                for (var name in animationToMorphTargets) {

                    clips.push(AnimationClip.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));

                }

                return clips;

            },

            // parse the animation.hierarchy format
            parseAnimation: function(animation, bones) {

                if (!animation) {

                    console.error("  no animation in JSONLoader data");
                    return null;

                }

                var addNonemptyTrack = function(
                    trackType, trackName, animationKeys, propertyName, destTracks) {

                    // only return track if there are actually keys.
                    if (animationKeys.length !== 0) {

                        var times = [];
                        var values = [];

                        AnimationUtils.flattenJSON(
                            animationKeys, times, values, propertyName);

                        // empty keys are filtered out, so check again
                        if (times.length !== 0) {

                            destTracks.push(new trackType(trackName, times, values));

                        }

                    }

                };

                var tracks = [];

                var clipName = animation.name || 'default';
                // automatic length determination in AnimationClip.
                var duration = animation.length || -1;
                var fps = animation.fps || 30;

                var hierarchyTracks = animation.hierarchy || [];

                for (var h = 0; h < hierarchyTracks.length; h++) {

                    var animationKeys = hierarchyTracks[h].keys;

                    // skip empty tracks
                    if (!animationKeys || animationKeys.length === 0) continue;

                    // process morph targets in a way exactly compatible
                    // with AnimationHandler.init( animation )
                    if (animationKeys[0].morphTargets) {

                        // figure out all morph targets used in this track
                        var morphTargetNames = {};
                        for (var k = 0; k < animationKeys.length; k++) {

                            if (animationKeys[k].morphTargets) {

                                for (var m = 0; m < animationKeys[k].morphTargets.length; m++) {

                                    morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
                                }

                            }

                        }

                        // create a track for each morph target with all zero
                        // morphTargetInfluences except for the keys in which
                        // the morphTarget is named.
                        for (var morphTargetName in morphTargetNames) {

                            var times = [];
                            var values = [];

                            for (var m = 0; m !== animationKeys[k].morphTargets.length; ++m) {

                                var animationKey = animationKeys[k];

                                times.push(animationKey.time);
                                values.push((animationKey.morphTarget === morphTargetName) ? 1 : 0);

                            }

                            tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));

                        }

                        duration = morphTargetNames.length * (fps || 1.0);

                    } else {
                        // ...assume skeletal animation

                        var boneName = '.bones[' + bones[h].name + ']';

                        addNonemptyTrack(
                            VectorKeyframeTrack, boneName + '.position',
                            animationKeys, 'pos', tracks);

                        addNonemptyTrack(
                            QuaternionKeyframeTrack, boneName + '.quaternion',
                            animationKeys, 'rot', tracks);

                        addNonemptyTrack(
                            VectorKeyframeTrack, boneName + '.scale',
                            animationKeys, 'scl', tracks);

                    }

                }

                if (tracks.length === 0) {

                    return null;

                }

                var clip = new AnimationClip(clipName, duration, tracks);

                return clip;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function MaterialLoader(manager) {

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;
            this.textures = {};

        }

        Object.assign(MaterialLoader.prototype, {

            load: function(url, onLoad, onProgress, onError) {

                var scope = this;

                var loader = new FileLoader(scope.manager);
                loader.load(url, function(text) {

                    onLoad(scope.parse(JSON.parse(text)));

                }, onProgress, onError);

            },

            setTextures: function(value) {

                this.textures = value;

            },

            parse: function(json) {

                var textures = this.textures;

                function getTexture(name) {

                    if (textures[name] === undefined) {

                        console.warn('THREE.MaterialLoader: Undefined texture', name);

                    }

                    return textures[name];

                }

                var material = new Materials[json.type]();

                if (json.uuid !== undefined) material.uuid = json.uuid;
                if (json.name !== undefined) material.name = json.name;
                if (json.color !== undefined) material.color.setHex(json.color);
                if (json.roughness !== undefined) material.roughness = json.roughness;
                if (json.metalness !== undefined) material.metalness = json.metalness;
                if (json.emissive !== undefined) material.emissive.setHex(json.emissive);
                if (json.specular !== undefined) material.specular.setHex(json.specular);
                if (json.shininess !== undefined) material.shininess = json.shininess;
                if (json.clearCoat !== undefined) material.clearCoat = json.clearCoat;
                if (json.clearCoatRoughness !== undefined) material.clearCoatRoughness = json.clearCoatRoughness;
                if (json.uniforms !== undefined) material.uniforms = json.uniforms;
                if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;
                if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;
                if (json.vertexColors !== undefined) material.vertexColors = json.vertexColors;
                if (json.fog !== undefined) material.fog = json.fog;
                if (json.shading !== undefined) material.shading = json.shading;
                if (json.blending !== undefined) material.blending = json.blending;
                if (json.side !== undefined) material.side = json.side;
                if (json.opacity !== undefined) material.opacity = json.opacity;
                if (json.transparent !== undefined) material.transparent = json.transparent;
                if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;
                if (json.depthTest !== undefined) material.depthTest = json.depthTest;
                if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;
                if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;
                if (json.wireframe !== undefined) material.wireframe = json.wireframe;
                if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;
                if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;
                if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;
                if (json.skinning !== undefined) material.skinning = json.skinning;
                if (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;

                // for PointsMaterial

                if (json.size !== undefined) material.size = json.size;
                if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation;

                // maps

                if (json.map !== undefined) material.map = getTexture(json.map);

                if (json.alphaMap !== undefined) {

                    material.alphaMap = getTexture(json.alphaMap);
                    material.transparent = true;

                }

                if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);
                if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;

                if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);
                if (json.normalScale !== undefined) {

                    var normalScale = json.normalScale;

                    if (Array.isArray(normalScale) === false) {

                        // Blender exporter used to export a scalar. See #7459

                        normalScale = [normalScale, normalScale];

                    }

                    material.normalScale = new Vector2().fromArray(normalScale);

                }

                if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);
                if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;
                if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;

                if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);
                if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);

                if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);
                if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;

                if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);

                if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);

                if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;

                if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);
                if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;

                if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);
                if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;

                if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);

                // MultiMaterial

                if (json.materials !== undefined) {

                    for (var i = 0, l = json.materials.length; i < l; i++) {

                        material.materials.push(this.parse(json.materials[i]));

                    }

                }

                return material;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function BufferGeometryLoader(manager) {

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;

        }

        Object.assign(BufferGeometryLoader.prototype, {

            load: function(url, onLoad, onProgress, onError) {

                var scope = this;

                var loader = new FileLoader(scope.manager);
                loader.load(url, function(text) {

                    onLoad(scope.parse(JSON.parse(text)));

                }, onProgress, onError);

            },

            parse: function(json) {

                var geometry = new BufferGeometry();

                var index = json.data.index;

                var TYPED_ARRAYS = {
                    'Int8Array': Int8Array,
                    'Uint8Array': Uint8Array,
                    'Uint8ClampedArray': Uint8ClampedArray,
                    'Int16Array': Int16Array,
                    'Uint16Array': Uint16Array,
                    'Int32Array': Int32Array,
                    'Uint32Array': Uint32Array,
                    'Float32Array': Float32Array,
                    'Float64Array': Float64Array
                };

                if (index !== undefined) {

                    var typedArray = new TYPED_ARRAYS[index.type](index.array);
                    geometry.setIndex(new BufferAttribute(typedArray, 1));

                }

                var attributes = json.data.attributes;

                for (var key in attributes) {

                    var attribute = attributes[key];
                    var typedArray = new TYPED_ARRAYS[attribute.type](attribute.array);

                    geometry.addAttribute(key, new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized));

                }

                var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

                if (groups !== undefined) {

                    for (var i = 0, n = groups.length; i !== n; ++i) {

                        var group = groups[i];

                        geometry.addGroup(group.start, group.count, group.materialIndex);

                    }

                }

                var boundingSphere = json.data.boundingSphere;

                if (boundingSphere !== undefined) {

                    var center = new Vector3();

                    if (boundingSphere.center !== undefined) {

                        center.fromArray(boundingSphere.center);

                    }

                    geometry.boundingSphere = new Sphere(center, boundingSphere.radius);

                }

                return geometry;

            }

        });

        /**
         * @author alteredq / http://alteredqualia.com/
         */

        function Loader() {

            this.onLoadStart = function() {};
            this.onLoadProgress = function() {};
            this.onLoadComplete = function() {};

        }

        Loader.prototype = {

            constructor: Loader,

            crossOrigin: undefined,

            extractUrlBase: function(url) {

                var parts = url.split('/');

                if (parts.length === 1) return './';

                parts.pop();

                return parts.join('/') + '/';

            },

            initMaterials: function(materials, texturePath, crossOrigin) {

                var array = [];

                for (var i = 0; i < materials.length; ++i) {

                    array[i] = this.createMaterial(materials[i], texturePath, crossOrigin);

                }

                return array;

            },

            createMaterial: (function() {

                var BlendingMode = {
                    NoBlending: NoBlending,
                    NormalBlending: NormalBlending,
                    AdditiveBlending: AdditiveBlending,
                    SubtractiveBlending: SubtractiveBlending,
                    MultiplyBlending: MultiplyBlending,
                    CustomBlending: CustomBlending
                };

                var color, textureLoader, materialLoader;

                return function createMaterial(m, texturePath, crossOrigin) {

                    if (color === undefined) color = new Color();
                    if (textureLoader === undefined) textureLoader = new TextureLoader();
                    if (materialLoader === undefined) materialLoader = new MaterialLoader();

                    // convert from old material format

                    var textures = {};

                    function loadTexture(path, repeat, offset, wrap, anisotropy) {

                        var fullPath = texturePath + path;
                        var loader = Loader.Handlers.get(fullPath);

                        var texture;

                        if (loader !== null) {

                            texture = loader.load(fullPath);

                        } else {

                            textureLoader.setCrossOrigin(crossOrigin);
                            texture = textureLoader.load(fullPath);

                        }

                        if (repeat !== undefined) {

                            texture.repeat.fromArray(repeat);

                            if (repeat[0] !== 1) texture.wrapS = RepeatWrapping;
                            if (repeat[1] !== 1) texture.wrapT = RepeatWrapping;

                        }

                        if (offset !== undefined) {

                            texture.offset.fromArray(offset);

                        }

                        if (wrap !== undefined) {

                            if (wrap[0] === 'repeat') texture.wrapS = RepeatWrapping;
                            if (wrap[0] === 'mirror') texture.wrapS = MirroredRepeatWrapping;

                            if (wrap[1] === 'repeat') texture.wrapT = RepeatWrapping;
                            if (wrap[1] === 'mirror') texture.wrapT = MirroredRepeatWrapping;

                        }

                        if (anisotropy !== undefined) {

                            texture.anisotropy = anisotropy;

                        }

                        var uuid = _Math.generateUUID();

                        textures[uuid] = texture;

                        return uuid;

                    }

                    //

                    var json = {
                        uuid: _Math.generateUUID(),
                        type: 'MeshLambertMaterial'
                    };

                    for (var name in m) {

                        var value = m[name];

                        switch (name) {

                            case 'DbgColor':
                            case 'DbgIndex':
                            case 'opticalDensity':
                            case 'illumination':
                                break;
                            case 'DbgName':
                                json.name = value;
                                break;
                            case 'blending':
                                json.blending = BlendingMode[value];
                                break;
                            case 'colorAmbient':
                            case 'mapAmbient':
                                console.warn('THREE.Loader.createMaterial:', name, 'is no longer supported.');
                                break;
                            case 'colorDiffuse':
                                json.color = color.fromArray(value).getHex();
                                break;
                            case 'colorSpecular':
                                json.specular = color.fromArray(value).getHex();
                                break;
                            case 'colorEmissive':
                                json.emissive = color.fromArray(value).getHex();
                                break;
                            case 'specularCoef':
                                json.shininess = value;
                                break;
                            case 'shading':
                                if (value.toLowerCase() === 'basic') json.type = 'MeshBasicMaterial';
                                if (value.toLowerCase() === 'phong') json.type = 'MeshPhongMaterial';
                                if (value.toLowerCase() === 'standard') json.type = 'MeshStandardMaterial';
                                break;
                            case 'mapDiffuse':
                                json.map = loadTexture(value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy);
                                break;
                            case 'mapDiffuseRepeat':
                            case 'mapDiffuseOffset':
                            case 'mapDiffuseWrap':
                            case 'mapDiffuseAnisotropy':
                                break;
                            case 'mapEmissive':
                                json.emissiveMap = loadTexture(value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy);
                                break;
                            case 'mapEmissiveRepeat':
                            case 'mapEmissiveOffset':
                            case 'mapEmissiveWrap':
                            case 'mapEmissiveAnisotropy':
                                break;
                            case 'mapLight':
                                json.lightMap = loadTexture(value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy);
                                break;
                            case 'mapLightRepeat':
                            case 'mapLightOffset':
                            case 'mapLightWrap':
                            case 'mapLightAnisotropy':
                                break;
                            case 'mapAO':
                                json.aoMap = loadTexture(value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy);
                                break;
                            case 'mapAORepeat':
                            case 'mapAOOffset':
                            case 'mapAOWrap':
                            case 'mapAOAnisotropy':
                                break;
                            case 'mapBump':
                                json.bumpMap = loadTexture(value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy);
                                break;
                            case 'mapBumpScale':
                                json.bumpScale = value;
                                break;
                            case 'mapBumpRepeat':
                            case 'mapBumpOffset':
                            case 'mapBumpWrap':
                            case 'mapBumpAnisotropy':
                                break;
                            case 'mapNormal':
                                json.normalMap = loadTexture(value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy);
                                break;
                            case 'mapNormalFactor':
                                json.normalScale = [value, value];
                                break;
                            case 'mapNormalRepeat':
                            case 'mapNormalOffset':
                            case 'mapNormalWrap':
                            case 'mapNormalAnisotropy':
                                break;
                            case 'mapSpecular':
                                json.specularMap = loadTexture(value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy);
                                break;
                            case 'mapSpecularRepeat':
                            case 'mapSpecularOffset':
                            case 'mapSpecularWrap':
                            case 'mapSpecularAnisotropy':
                                break;
                            case 'mapMetalness':
                                json.metalnessMap = loadTexture(value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy);
                                break;
                            case 'mapMetalnessRepeat':
                            case 'mapMetalnessOffset':
                            case 'mapMetalnessWrap':
                            case 'mapMetalnessAnisotropy':
                                break;
                            case 'mapRoughness':
                                json.roughnessMap = loadTexture(value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy);
                                break;
                            case 'mapRoughnessRepeat':
                            case 'mapRoughnessOffset':
                            case 'mapRoughnessWrap':
                            case 'mapRoughnessAnisotropy':
                                break;
                            case 'mapAlpha':
                                json.alphaMap = loadTexture(value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy);
                                break;
                            case 'mapAlphaRepeat':
                            case 'mapAlphaOffset':
                            case 'mapAlphaWrap':
                            case 'mapAlphaAnisotropy':
                                break;
                            case 'flipSided':
                                json.side = BackSide;
                                break;
                            case 'doubleSided':
                                json.side = DoubleSide;
                                break;
                            case 'transparency':
                                console.warn('THREE.Loader.createMaterial: transparency has been renamed to opacity');
                                json.opacity = value;
                                break;
                            case 'depthTest':
                            case 'depthWrite':
                            case 'colorWrite':
                            case 'opacity':
                            case 'reflectivity':
                            case 'transparent':
                            case 'visible':
                            case 'wireframe':
                                json[name] = value;
                                break;
                            case 'vertexColors':
                                if (value === true) json.vertexColors = VertexColors;
                                if (value === 'face') json.vertexColors = FaceColors;
                                break;
                            default:
                                console.error('THREE.Loader.createMaterial: Unsupported', name, value);
                                break;

                        }

                    }

                    if (json.type === 'MeshBasicMaterial') delete json.emissive;
                    if (json.type !== 'MeshPhongMaterial') delete json.specular;

                    if (json.opacity < 1) json.transparent = true;

                    materialLoader.setTextures(textures);

                    return materialLoader.parse(json);

                };

            })()

        };

        Loader.Handlers = {

            handlers: [],

            add: function(regex, loader) {

                this.handlers.push(regex, loader);

            },

            get: function(file) {

                var handlers = this.handlers;

                for (var i = 0, l = handlers.length; i < l; i += 2) {

                    var regex = handlers[i];
                    var loader = handlers[i + 1];

                    if (regex.test(file)) {

                        return loader;

                    }

                }

                return null;

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */

        function JSONLoader(manager) {

            if (typeof manager === 'boolean') {

                console.warn('THREE.JSONLoader: showStatus parameter has been removed from constructor.');
                manager = undefined;

            }

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;

            this.withCredentials = false;

        }

        Object.assign(JSONLoader.prototype, {

            load: function(url, onLoad, onProgress, onError) {

                var scope = this;

                var texturePath = this.texturePath && (typeof this.texturePath === "string") ? this.texturePath : Loader.prototype.extractUrlBase(url);

                var loader = new FileLoader(this.manager);
                loader.setWithCredentials(this.withCredentials);
                loader.load(url, function(text) {

                    var json = JSON.parse(text);
                    var metadata = json.metadata;

                    if (metadata !== undefined) {

                        var type = metadata.type;

                        if (type !== undefined) {

                            if (type.toLowerCase() === 'object') {

                                console.error('THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.');
                                return;

                            }

                            if (type.toLowerCase() === 'scene') {

                                console.error('THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.');
                                return;

                            }

                        }

                    }

                    var object = scope.parse(json, texturePath);
                    onLoad(object.geometry, object.materials);

                }, onProgress, onError);

            },

            setTexturePath: function(value) {

                this.texturePath = value;

            },

            parse: function(json, texturePath) {

                var geometry = new Geometry(),
                    scale = (json.scale !== undefined) ? 1.0 / json.scale : 1.0;

                parseModel(scale);

                parseSkin();
                parseMorphing(scale);
                parseAnimations();

                geometry.computeFaceNormals();
                geometry.computeBoundingSphere();

                function parseModel(scale) {

                    function isBitSet(value, position) {

                        return value & (1 << position);

                    }

                    var i, j, fi,

                        offset, zLength,

                        colorIndex, normalIndex, uvIndex, materialIndex,

                        type,
                        isQuad,
                        hasMaterial,
                        hasFaceVertexUv,
                        hasFaceNormal, hasFaceVertexNormal,
                        hasFaceColor, hasFaceVertexColor,

                        vertex, face, faceA, faceB, hex, normal,

                        uvLayer, uv, u, v,

                        faces = json.faces,
                        vertices = json.vertices,
                        normals = json.normals,
                        colors = json.colors,

                        nUvLayers = 0;

                    if (json.uvs !== undefined) {

                        // disregard empty arrays

                        for (i = 0; i < json.uvs.length; i++) {

                            if (json.uvs[i].length) nUvLayers++;

                        }

                        for (i = 0; i < nUvLayers; i++) {

                            geometry.faceVertexUvs[i] = [];

                        }

                    }

                    offset = 0;
                    zLength = vertices.length;

                    while (offset < zLength) {

                        vertex = new Vector3();

                        vertex.x = vertices[offset++] * scale;
                        vertex.y = vertices[offset++] * scale;
                        vertex.z = vertices[offset++] * scale;

                        geometry.vertices.push(vertex);

                    }

                    offset = 0;
                    zLength = faces.length;

                    while (offset < zLength) {

                        type = faces[offset++];


                        isQuad = isBitSet(type, 0);
                        hasMaterial = isBitSet(type, 1);
                        hasFaceVertexUv = isBitSet(type, 3);
                        hasFaceNormal = isBitSet(type, 4);
                        hasFaceVertexNormal = isBitSet(type, 5);
                        hasFaceColor = isBitSet(type, 6);
                        hasFaceVertexColor = isBitSet(type, 7);

                        // console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

                        if (isQuad) {

                            faceA = new Face3();
                            faceA.a = faces[offset];
                            faceA.b = faces[offset + 1];
                            faceA.c = faces[offset + 3];

                            faceB = new Face3();
                            faceB.a = faces[offset + 1];
                            faceB.b = faces[offset + 2];
                            faceB.c = faces[offset + 3];

                            offset += 4;

                            if (hasMaterial) {

                                materialIndex = faces[offset++];
                                faceA.materialIndex = materialIndex;
                                faceB.materialIndex = materialIndex;

                            }

                            // to get face <=> uv index correspondence

                            fi = geometry.faces.length;

                            if (hasFaceVertexUv) {

                                for (i = 0; i < nUvLayers; i++) {

                                    uvLayer = json.uvs[i];

                                    geometry.faceVertexUvs[i][fi] = [];
                                    geometry.faceVertexUvs[i][fi + 1] = [];

                                    for (j = 0; j < 4; j++) {

                                        uvIndex = faces[offset++];

                                        u = uvLayer[uvIndex * 2];
                                        v = uvLayer[uvIndex * 2 + 1];

                                        uv = new Vector2(u, v);

                                        if (j !== 2) geometry.faceVertexUvs[i][fi].push(uv);
                                        if (j !== 0) geometry.faceVertexUvs[i][fi + 1].push(uv);

                                    }

                                }

                            }

                            if (hasFaceNormal) {

                                normalIndex = faces[offset++] * 3;

                                faceA.normal.set(
                                    normals[normalIndex++],
                                    normals[normalIndex++],
                                    normals[normalIndex]
                                );

                                faceB.normal.copy(faceA.normal);

                            }

                            if (hasFaceVertexNormal) {

                                for (i = 0; i < 4; i++) {

                                    normalIndex = faces[offset++] * 3;

                                    normal = new Vector3(
                                        normals[normalIndex++],
                                        normals[normalIndex++],
                                        normals[normalIndex]
                                    );


                                    if (i !== 2) faceA.vertexNormals.push(normal);
                                    if (i !== 0) faceB.vertexNormals.push(normal);

                                }

                            }


                            if (hasFaceColor) {

                                colorIndex = faces[offset++];
                                hex = colors[colorIndex];

                                faceA.color.setHex(hex);
                                faceB.color.setHex(hex);

                            }


                            if (hasFaceVertexColor) {

                                for (i = 0; i < 4; i++) {

                                    colorIndex = faces[offset++];
                                    hex = colors[colorIndex];

                                    if (i !== 2) faceA.vertexColors.push(new Color(hex));
                                    if (i !== 0) faceB.vertexColors.push(new Color(hex));

                                }

                            }

                            geometry.faces.push(faceA);
                            geometry.faces.push(faceB);

                        } else {

                            face = new Face3();
                            face.a = faces[offset++];
                            face.b = faces[offset++];
                            face.c = faces[offset++];

                            if (hasMaterial) {

                                materialIndex = faces[offset++];
                                face.materialIndex = materialIndex;

                            }

                            // to get face <=> uv index correspondence

                            fi = geometry.faces.length;

                            if (hasFaceVertexUv) {

                                for (i = 0; i < nUvLayers; i++) {

                                    uvLayer = json.uvs[i];

                                    geometry.faceVertexUvs[i][fi] = [];

                                    for (j = 0; j < 3; j++) {

                                        uvIndex = faces[offset++];

                                        u = uvLayer[uvIndex * 2];
                                        v = uvLayer[uvIndex * 2 + 1];

                                        uv = new Vector2(u, v);

                                        geometry.faceVertexUvs[i][fi].push(uv);

                                    }

                                }

                            }

                            if (hasFaceNormal) {

                                normalIndex = faces[offset++] * 3;

                                face.normal.set(
                                    normals[normalIndex++],
                                    normals[normalIndex++],
                                    normals[normalIndex]
                                );

                            }

                            if (hasFaceVertexNormal) {

                                for (i = 0; i < 3; i++) {

                                    normalIndex = faces[offset++] * 3;

                                    normal = new Vector3(
                                        normals[normalIndex++],
                                        normals[normalIndex++],
                                        normals[normalIndex]
                                    );

                                    face.vertexNormals.push(normal);

                                }

                            }


                            if (hasFaceColor) {

                                colorIndex = faces[offset++];
                                face.color.setHex(colors[colorIndex]);

                            }


                            if (hasFaceVertexColor) {

                                for (i = 0; i < 3; i++) {

                                    colorIndex = faces[offset++];
                                    face.vertexColors.push(new Color(colors[colorIndex]));

                                }

                            }

                            geometry.faces.push(face);

                        }

                    }

                }

                function parseSkin() {

                    var influencesPerVertex = (json.influencesPerVertex !== undefined) ? json.influencesPerVertex : 2;

                    if (json.skinWeights) {

                        for (var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex) {

                            var x = json.skinWeights[i];
                            var y = (influencesPerVertex > 1) ? json.skinWeights[i + 1] : 0;
                            var z = (influencesPerVertex > 2) ? json.skinWeights[i + 2] : 0;
                            var w = (influencesPerVertex > 3) ? json.skinWeights[i + 3] : 0;

                            geometry.skinWeights.push(new Vector4(x, y, z, w));

                        }

                    }

                    if (json.skinIndices) {

                        for (var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex) {

                            var a = json.skinIndices[i];
                            var b = (influencesPerVertex > 1) ? json.skinIndices[i + 1] : 0;
                            var c = (influencesPerVertex > 2) ? json.skinIndices[i + 2] : 0;
                            var d = (influencesPerVertex > 3) ? json.skinIndices[i + 3] : 0;

                            geometry.skinIndices.push(new Vector4(a, b, c, d));

                        }

                    }

                    geometry.bones = json.bones;

                    if (geometry.bones && geometry.bones.length > 0 && (geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length)) {

                        console.warn('When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
                            geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.');

                    }

                }

                function parseMorphing(scale) {

                    if (json.morphTargets !== undefined) {

                        for (var i = 0, l = json.morphTargets.length; i < l; i++) {

                            geometry.morphTargets[i] = {};
                            geometry.morphTargets[i].name = json.morphTargets[i].name;
                            geometry.morphTargets[i].vertices = [];

                            var dstVertices = geometry.morphTargets[i].vertices;
                            var srcVertices = json.morphTargets[i].vertices;

                            for (var v = 0, vl = srcVertices.length; v < vl; v += 3) {

                                var vertex = new Vector3();
                                vertex.x = srcVertices[v] * scale;
                                vertex.y = srcVertices[v + 1] * scale;
                                vertex.z = srcVertices[v + 2] * scale;

                                dstVertices.push(vertex);

                            }

                        }

                    }

                    if (json.morphColors !== undefined && json.morphColors.length > 0) {

                        console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');

                        var faces = geometry.faces;
                        var morphColors = json.morphColors[0].colors;

                        for (var i = 0, l = faces.length; i < l; i++) {

                            faces[i].color.fromArray(morphColors, i * 3);

                        }

                    }

                }

                function parseAnimations() {

                    var outputAnimations = [];

                    // parse old style Bone/Hierarchy animations
                    var animations = [];

                    if (json.animation !== undefined) {

                        animations.push(json.animation);

                    }

                    if (json.animations !== undefined) {

                        if (json.animations.length) {

                            animations = animations.concat(json.animations);

                        } else {

                            animations.push(json.animations);

                        }

                    }

                    for (var i = 0; i < animations.length; i++) {

                        var clip = AnimationClip.parseAnimation(animations[i], geometry.bones);
                        if (clip) outputAnimations.push(clip);

                    }

                    // parse implicit morph animations
                    if (geometry.morphTargets) {

                        // TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
                        var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphTargets, 10);
                        outputAnimations = outputAnimations.concat(morphAnimationClips);

                    }

                    if (outputAnimations.length > 0) geometry.animations = outputAnimations;

                }

                if (json.materials === undefined || json.materials.length === 0) {

                    return {
                        geometry: geometry
                    };

                } else {

                    var materials = Loader.prototype.initMaterials(json.materials, texturePath, this.crossOrigin);

                    return {
                        geometry: geometry,
                        materials: materials
                    };

                }

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function ObjectLoader(manager) {

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;
            this.texturePath = '';

        }

        Object.assign(ObjectLoader.prototype, {

            load: function(url, onLoad, onProgress, onError) {

                if (this.texturePath === '') {

                    this.texturePath = url.substring(0, url.lastIndexOf('/') + 1);

                }

                var scope = this;

                var loader = new FileLoader(scope.manager);
                loader.load(url, function(text) {

                    var json = null;

                    try {

                        json = JSON.parse(text);

                    } catch (error) {

                        if (onError !== undefined) onError(error);

                        console.error('THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message);

                        return;

                    }

                    var metadata = json.metadata;

                    if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {

                        console.error('THREE.ObjectLoader: Can\'t load ' + url + '. Use THREE.JSONLoader instead.');
                        return;

                    }

                    scope.parse(json, onLoad);

                }, onProgress, onError);

            },

            setTexturePath: function(value) {

                this.texturePath = value;

            },

            setCrossOrigin: function(value) {

                this.crossOrigin = value;

            },

            parse: function(json, onLoad) {

                var geometries = this.parseGeometries(json.geometries);

                var images = this.parseImages(json.images, function() {

                    if (onLoad !== undefined) onLoad(object);

                });

                var textures = this.parseTextures(json.textures, images);
                var materials = this.parseMaterials(json.materials, textures);

                var object = this.parseObject(json.object, geometries, materials);

                if (json.animations) {

                    object.animations = this.parseAnimations(json.animations);

                }

                if (json.images === undefined || json.images.length === 0) {

                    if (onLoad !== undefined) onLoad(object);

                }

                return object;

            },

            parseGeometries: function(json) {

                var geometries = {};

                if (json !== undefined) {

                    var geometryLoader = new JSONLoader();
                    var bufferGeometryLoader = new BufferGeometryLoader();

                    for (var i = 0, l = json.length; i < l; i++) {

                        var geometry;
                        var data = json[i];

                        switch (data.type) {

                            case 'PlaneGeometry':
                            case 'PlaneBufferGeometry':

                                geometry = new Geometries[data.type](
                                    data.width,
                                    data.height,
                                    data.widthSegments,
                                    data.heightSegments
                                );

                                break;

                            case 'BoxGeometry':
                            case 'BoxBufferGeometry':
                            case 'CubeGeometry': // backwards compatible

                                geometry = new Geometries[data.type](
                                    data.width,
                                    data.height,
                                    data.depth,
                                    data.widthSegments,
                                    data.heightSegments,
                                    data.depthSegments
                                );

                                break;

                            case 'CircleGeometry':
                            case 'CircleBufferGeometry':

                                geometry = new Geometries[data.type](
                                    data.radius,
                                    data.segments,
                                    data.thetaStart,
                                    data.thetaLength
                                );

                                break;

                            case 'CylinderGeometry':
                            case 'CylinderBufferGeometry':

                                geometry = new Geometries[data.type](
                                    data.radiusTop,
                                    data.radiusBottom,
                                    data.height,
                                    data.radialSegments,
                                    data.heightSegments,
                                    data.openEnded,
                                    data.thetaStart,
                                    data.thetaLength
                                );

                                break;

                            case 'ConeGeometry':
                            case 'ConeBufferGeometry':

                                geometry = new Geometries[data.type](
                                    data.radius,
                                    data.height,
                                    data.radialSegments,
                                    data.heightSegments,
                                    data.openEnded,
                                    data.thetaStart,
                                    data.thetaLength
                                );

                                break;

                            case 'SphereGeometry':
                            case 'SphereBufferGeometry':

                                geometry = new Geometries[data.type](
                                    data.radius,
                                    data.widthSegments,
                                    data.heightSegments,
                                    data.phiStart,
                                    data.phiLength,
                                    data.thetaStart,
                                    data.thetaLength
                                );

                                break;

                            case 'DodecahedronGeometry':
                            case 'IcosahedronGeometry':
                            case 'OctahedronGeometry':
                            case 'TetrahedronGeometry':

                                geometry = new Geometries[data.type](
                                    data.radius,
                                    data.detail
                                );

                                break;

                            case 'RingGeometry':
                            case 'RingBufferGeometry':

                                geometry = new Geometries[data.type](
                                    data.innerRadius,
                                    data.outerRadius,
                                    data.thetaSegments,
                                    data.phiSegments,
                                    data.thetaStart,
                                    data.thetaLength
                                );

                                break;

                            case 'TorusGeometry':
                            case 'TorusBufferGeometry':

                                geometry = new Geometries[data.type](
                                    data.radius,
                                    data.tube,
                                    data.radialSegments,
                                    data.tubularSegments,
                                    data.arc
                                );

                                break;

                            case 'TorusKnotGeometry':
                            case 'TorusKnotBufferGeometry':

                                geometry = new Geometries[data.type](
                                    data.radius,
                                    data.tube,
                                    data.tubularSegments,
                                    data.radialSegments,
                                    data.p,
                                    data.q
                                );

                                break;

                            case 'LatheGeometry':
                            case 'LatheBufferGeometry':

                                geometry = new Geometries[data.type](
                                    data.points,
                                    data.segments,
                                    data.phiStart,
                                    data.phiLength
                                );

                                break;

                            case 'BufferGeometry':

                                geometry = bufferGeometryLoader.parse(data);

                                break;

                            case 'Geometry':

                                geometry = geometryLoader.parse(data.data, this.texturePath).geometry;

                                break;

                            default:

                                console.warn('THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"');

                                continue;

                        }

                        geometry.uuid = data.uuid;

                        if (data.name !== undefined) geometry.name = data.name;

                        geometries[data.uuid] = geometry;

                    }

                }

                return geometries;

            },

            parseMaterials: function(json, textures) {

                var materials = {};

                if (json !== undefined) {

                    var loader = new MaterialLoader();
                    loader.setTextures(textures);

                    for (var i = 0, l = json.length; i < l; i++) {

                        var material = loader.parse(json[i]);
                        materials[material.uuid] = material;

                    }

                }

                return materials;

            },

            parseAnimations: function(json) {

                var animations = [];

                for (var i = 0; i < json.length; i++) {

                    var clip = AnimationClip.parse(json[i]);

                    animations.push(clip);

                }

                return animations;

            },

            parseImages: function(json, onLoad) {

                var scope = this;
                var images = {};

                function loadImage(url) {

                    scope.manager.itemStart(url);

                    return loader.load(url, function() {

                        scope.manager.itemEnd(url);

                    }, undefined, function() {

                        scope.manager.itemError(url);

                    });

                }

                if (json !== undefined && json.length > 0) {

                    var manager = new LoadingManager(onLoad);

                    var loader = new ImageLoader(manager);
                    loader.setCrossOrigin(this.crossOrigin);

                    for (var i = 0, l = json.length; i < l; i++) {

                        var image = json[i];
                        var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(image.url) ? image.url : scope.texturePath + image.url;

                        images[image.uuid] = loadImage(path);

                    }

                }

                return images;

            },

            parseTextures: function(json, images) {

                var TextureMapping = {
                    UVMapping: UVMapping,
                    CubeReflectionMapping: CubeReflectionMapping,
                    CubeRefractionMapping: CubeRefractionMapping,
                    EquirectangularReflectionMapping: EquirectangularReflectionMapping,
                    EquirectangularRefractionMapping: EquirectangularRefractionMapping,
                    SphericalReflectionMapping: SphericalReflectionMapping,
                    CubeUVReflectionMapping: CubeUVReflectionMapping,
                    CubeUVRefractionMapping: CubeUVRefractionMapping
                };

                var TextureWrapping = {
                    RepeatWrapping: RepeatWrapping,
                    ClampToEdgeWrapping: ClampToEdgeWrapping,
                    MirroredRepeatWrapping: MirroredRepeatWrapping
                };

                var TextureFilter = {
                    NearestFilter: NearestFilter,
                    NearestMipMapNearestFilter: NearestMipMapNearestFilter,
                    NearestMipMapLinearFilter: NearestMipMapLinearFilter,
                    LinearFilter: LinearFilter,
                    LinearMipMapNearestFilter: LinearMipMapNearestFilter,
                    LinearMipMapLinearFilter: LinearMipMapLinearFilter
                };

                function parseConstant(value, type) {

                    if (typeof(value) === 'number') return value;

                    console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);

                    return type[value];

                }

                var textures = {};

                if (json !== undefined) {

                    for (var i = 0, l = json.length; i < l; i++) {

                        var data = json[i];

                        if (data.image === undefined) {

                            console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);

                        }

                        if (images[data.image] === undefined) {

                            console.warn('THREE.ObjectLoader: Undefined image', data.image);

                        }

                        var texture = new Texture(images[data.image]);
                        texture.needsUpdate = true;

                        texture.uuid = data.uuid;

                        if (data.name !== undefined) texture.name = data.name;

                        if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TextureMapping);

                        if (data.offset !== undefined) texture.offset.fromArray(data.offset);
                        if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
                        if (data.wrap !== undefined) {

                            texture.wrapS = parseConstant(data.wrap[0], TextureWrapping);
                            texture.wrapT = parseConstant(data.wrap[1], TextureWrapping);

                        }

                        if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TextureFilter);
                        if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TextureFilter);
                        if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;

                        if (data.flipY !== undefined) texture.flipY = data.flipY;

                        textures[data.uuid] = texture;

                    }

                }

                return textures;

            },

            parseObject: function() {

                var matrix = new Matrix4();

                return function parseObject(data, geometries, materials) {

                    var object;

                    function getGeometry(name) {

                        if (geometries[name] === undefined) {

                            console.warn('THREE.ObjectLoader: Undefined geometry', name);

                        }

                        return geometries[name];

                    }

                    function getMaterial(name) {

                        if (name === undefined) return undefined;

                        if (materials[name] === undefined) {

                            console.warn('THREE.ObjectLoader: Undefined material', name);

                        }

                        return materials[name];

                    }

                    switch (data.type) {

                        case 'Scene':

                            object = new Scene();

                            if (data.background !== undefined) {

                                if (Number.isInteger(data.background)) {

                                    object.background = new Color(data.background);

                                }

                            }

                            if (data.fog !== undefined) {

                                if (data.fog.type === 'Fog') {

                                    object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);

                                } else if (data.fog.type === 'FogExp2') {

                                    object.fog = new FogExp2(data.fog.color, data.fog.density);

                                }

                            }

                            break;

                        case 'PerspectiveCamera':

                            object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);

                            if (data.focus !== undefined) object.focus = data.focus;
                            if (data.zoom !== undefined) object.zoom = data.zoom;
                            if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;
                            if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
                            if (data.view !== undefined) object.view = Object.assign({}, data.view);

                            break;

                        case 'OrthographicCamera':

                            object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);

                            break;

                        case 'AmbientLight':

                            object = new AmbientLight(data.color, data.intensity);

                            break;

                        case 'DirectionalLight':

                            object = new DirectionalLight(data.color, data.intensity);

                            break;

                        case 'PointLight':

                            object = new PointLight(data.color, data.intensity, data.distance, data.decay);

                            break;

                        case 'SpotLight':

                            object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);

                            break;

                        case 'HemisphereLight':

                            object = new HemisphereLight(data.color, data.groundColor, data.intensity);

                            break;

                        case 'Mesh':

                            var geometry = getGeometry(data.geometry);
                            var material = getMaterial(data.material);

                            if (geometry.bones && geometry.bones.length > 0) {

                                object = new SkinnedMesh(geometry, material);

                            } else {

                                object = new Mesh(geometry, material);

                            }

                            break;

                        case 'LOD':

                            object = new LOD();

                            break;

                        case 'Line':

                            object = new Line(getGeometry(data.geometry), getMaterial(data.material), data.mode);

                            break;

                        case 'LineSegments':

                            object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));

                            break;

                        case 'PointCloud':
                        case 'Points':

                            object = new Points(getGeometry(data.geometry), getMaterial(data.material));

                            break;

                        case 'Sprite':

                            object = new Sprite(getMaterial(data.material));

                            break;

                        case 'Group':

                            object = new Group();

                            break;

                        case 'SkinnedMesh':

                            console.warn('THREE.ObjectLoader.parseObject() does not support SkinnedMesh type. Instantiates Object3D instead.');

                        default:

                            object = new Object3D();

                    }

                    object.uuid = data.uuid;

                    if (data.name !== undefined) object.name = data.name;
                    if (data.matrix !== undefined) {

                        matrix.fromArray(data.matrix);
                        matrix.decompose(object.position, object.quaternion, object.scale);

                    } else {

                        if (data.position !== undefined) object.position.fromArray(data.position);
                        if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);
                        if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
                        if (data.scale !== undefined) object.scale.fromArray(data.scale);

                    }

                    if (data.castShadow !== undefined) object.castShadow = data.castShadow;
                    if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;

                    if (data.shadow) {

                        if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
                        if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;
                        if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
                        if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);

                    }

                    if (data.visible !== undefined) object.visible = data.visible;
                    if (data.userData !== undefined) object.userData = data.userData;

                    if (data.children !== undefined) {

                        for (var child in data.children) {

                            object.add(this.parseObject(data.children[child], geometries, materials));

                        }

                    }

                    if (data.type === 'LOD') {

                        var levels = data.levels;

                        for (var l = 0; l < levels.length; l++) {

                            var level = levels[l];
                            var child = object.getObjectByProperty('uuid', level.object);

                            if (child !== undefined) {

                                object.addLevel(child, level.distance);

                            }

                        }

                    }

                    return object;

                };

            }()

        });

        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         *
         * Bezier Curves formulas obtained from
         * http://en.wikipedia.org/wiki/Bézier_curve
         */

        function CatmullRom(t, p0, p1, p2, p3) {

            var v0 = (p2 - p0) * 0.5;
            var v1 = (p3 - p1) * 0.5;
            var t2 = t * t;
            var t3 = t * t2;
            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;

        }

        //

        function QuadraticBezierP0(t, p) {

            var k = 1 - t;
            return k * k * p;

        }

        function QuadraticBezierP1(t, p) {

            return 2 * (1 - t) * t * p;

        }

        function QuadraticBezierP2(t, p) {

            return t * t * p;

        }

        function QuadraticBezier(t, p0, p1, p2) {

            return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) +
                QuadraticBezierP2(t, p2);

        }

        //

        function CubicBezierP0(t, p) {

            var k = 1 - t;
            return k * k * k * p;

        }

        function CubicBezierP1(t, p) {

            var k = 1 - t;
            return 3 * k * k * t * p;

        }

        function CubicBezierP2(t, p) {

            return 3 * (1 - t) * t * t * p;

        }

        function CubicBezierP3(t, p) {

            return t * t * t * p;

        }

        function CubicBezier(t, p0, p1, p2, p3) {

            return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) +
                CubicBezierP3(t, p3);

        }

        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * Extensible curve object
         *
         * Some common of Curve methods
         * .getPoint(t), getTangent(t)
         * .getPointAt(u), getTangentAt(u)
         * .getPoints(), .getSpacedPoints()
         * .getLength()
         * .updateArcLengths()
         *
         * This following classes subclasses THREE.Curve:
         *
         * -- 2d classes --
         * THREE.LineCurve
         * THREE.QuadraticBezierCurve
         * THREE.CubicBezierCurve
         * THREE.SplineCurve
         * THREE.ArcCurve
         * THREE.EllipseCurve
         *
         * -- 3d classes --
         * THREE.LineCurve3
         * THREE.QuadraticBezierCurve3
         * THREE.CubicBezierCurve3
         * THREE.CatmullRomCurve3
         *
         * A series of curves can be represented as a THREE.CurvePath
         *
         **/

        /**************************************************************
         *	Abstract Curve base class
         **************************************************************/

        function Curve() {}

        Curve.prototype = {

            constructor: Curve,

            // Virtual base class method to overwrite and implement in subclasses
            //	- t [0 .. 1]

            getPoint: function(t) {

                console.warn("THREE.Curve: Warning, getPoint() not implemented!");
                return null;

            },

            // Get point at relative position in curve according to arc length
            // - u [0 .. 1]

            getPointAt: function(u) {

                var t = this.getUtoTmapping(u);
                return this.getPoint(t);

            },

            // Get sequence of points using getPoint( t )

            getPoints: function(divisions) {

                if (isNaN(divisions)) divisions = 5;

                var points = [];

                for (var d = 0; d <= divisions; d++) {

                    points.push(this.getPoint(d / divisions));

                }

                return points;

            },

            // Get sequence of points using getPointAt( u )

            getSpacedPoints: function(divisions) {

                if (isNaN(divisions)) divisions = 5;

                var points = [];

                for (var d = 0; d <= divisions; d++) {

                    points.push(this.getPointAt(d / divisions));

                }

                return points;

            },

            // Get total curve arc length

            getLength: function() {

                var lengths = this.getLengths();
                return lengths[lengths.length - 1];

            },

            // Get list of cumulative segment lengths

            getLengths: function(divisions) {

                if (isNaN(divisions)) divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions) : 200;

                if (this.cacheArcLengths &&
                    (this.cacheArcLengths.length === divisions + 1) &&
                    !this.needsUpdate) {

                    //console.log( "cached", this.cacheArcLengths );
                    return this.cacheArcLengths;

                }

                this.needsUpdate = false;

                var cache = [];
                var current, last = this.getPoint(0);
                var p, sum = 0;

                cache.push(0);

                for (p = 1; p <= divisions; p++) {

                    current = this.getPoint(p / divisions);
                    sum += current.distanceTo(last);
                    cache.push(sum);
                    last = current;

                }

                this.cacheArcLengths = cache;

                return cache; // { sums: cache, sum:sum }; Sum is in the last element.

            },

            updateArcLengths: function() {

                this.needsUpdate = true;
                this.getLengths();

            },

            // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

            getUtoTmapping: function(u, distance) {

                var arcLengths = this.getLengths();

                var i = 0,
                    il = arcLengths.length;

                var targetArcLength; // The targeted u distance value to get

                if (distance) {

                    targetArcLength = distance;

                } else {

                    targetArcLength = u * arcLengths[il - 1];

                }

                //var time = Date.now();

                // binary search for the index with largest value smaller than target u distance

                var low = 0,
                    high = il - 1,
                    comparison;

                while (low <= high) {

                    i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

                    comparison = arcLengths[i] - targetArcLength;

                    if (comparison < 0) {

                        low = i + 1;

                    } else if (comparison > 0) {

                        high = i - 1;

                    } else {

                        high = i;
                        break;

                        // DONE

                    }

                }

                i = high;

                //console.log('b' , i, low, high, Date.now()- time);

                if (arcLengths[i] === targetArcLength) {

                    var t = i / (il - 1);
                    return t;

                }

                // we could get finer grain at lengths, or use simple interpolation between two points

                var lengthBefore = arcLengths[i];
                var lengthAfter = arcLengths[i + 1];

                var segmentLength = lengthAfter - lengthBefore;

                // determine where we are between the 'before' and 'after' points

                var segmentFraction = (targetArcLength - lengthBefore) / segmentLength;

                // add that fractional amount to t

                var t = (i + segmentFraction) / (il - 1);

                return t;

            },

            // Returns a unit vector tangent at t
            // In case any sub curve does not implement its tangent derivation,
            // 2 points a small delta apart will be used to find its gradient
            // which seems to give a reasonable approximation

            getTangent: function(t) {

                var delta = 0.0001;
                var t1 = t - delta;
                var t2 = t + delta;

                // Capping in case of danger

                if (t1 < 0) t1 = 0;
                if (t2 > 1) t2 = 1;

                var pt1 = this.getPoint(t1);
                var pt2 = this.getPoint(t2);

                var vec = pt2.clone().sub(pt1);
                return vec.normalize();

            },

            getTangentAt: function(u) {

                var t = this.getUtoTmapping(u);
                return this.getTangent(t);

            },

            computeFrenetFrames: function(segments, closed) {

                // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

                var normal = new Vector3();

                var tangents = [];
                var normals = [];
                var binormals = [];

                var vec = new Vector3();
                var mat = new Matrix4();

                var i, u, theta;

                // compute the tangent vectors for each segment on the curve

                for (i = 0; i <= segments; i++) {

                    u = i / segments;

                    tangents[i] = this.getTangentAt(u);
                    tangents[i].normalize();

                }

                // select an initial normal vector perpendicular to the first tangent vector,
                // and in the direction of the minimum tangent xyz component

                normals[0] = new Vector3();
                binormals[0] = new Vector3();
                var min = Number.MAX_VALUE;
                var tx = Math.abs(tangents[0].x);
                var ty = Math.abs(tangents[0].y);
                var tz = Math.abs(tangents[0].z);

                if (tx <= min) {

                    min = tx;
                    normal.set(1, 0, 0);

                }

                if (ty <= min) {

                    min = ty;
                    normal.set(0, 1, 0);

                }

                if (tz <= min) {

                    normal.set(0, 0, 1);

                }

                vec.crossVectors(tangents[0], normal).normalize();

                normals[0].crossVectors(tangents[0], vec);
                binormals[0].crossVectors(tangents[0], normals[0]);


                // compute the slowly-varying normal and binormal vectors for each segment on the curve

                for (i = 1; i <= segments; i++) {

                    normals[i] = normals[i - 1].clone();

                    binormals[i] = binormals[i - 1].clone();

                    vec.crossVectors(tangents[i - 1], tangents[i]);

                    if (vec.length() > Number.EPSILON) {

                        vec.normalize();

                        theta = Math.acos(_Math.clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors

                        normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));

                    }

                    binormals[i].crossVectors(tangents[i], normals[i]);

                }

                // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

                if (closed === true) {

                    theta = Math.acos(_Math.clamp(normals[0].dot(normals[segments]), -1, 1));
                    theta /= segments;

                    if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {

                        theta = -theta;

                    }

                    for (i = 1; i <= segments; i++) {

                        // twist a little...
                        normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
                        binormals[i].crossVectors(tangents[i], normals[i]);

                    }

                }

                return {
                    tangents: tangents,
                    normals: normals,
                    binormals: binormals
                };

            }

        };

        function LineCurve(v1, v2) {

            this.v1 = v1;
            this.v2 = v2;

        }

        LineCurve.prototype = Object.create(Curve.prototype);
        LineCurve.prototype.constructor = LineCurve;

        LineCurve.prototype.isLineCurve = true;

        LineCurve.prototype.getPoint = function(t) {

            if (t === 1) {

                return this.v2.clone();

            }

            var point = this.v2.clone().sub(this.v1);
            point.multiplyScalar(t).add(this.v1);

            return point;

        };

        // Line curve is linear, so we can overwrite default getPointAt

        LineCurve.prototype.getPointAt = function(u) {

            return this.getPoint(u);

        };

        LineCurve.prototype.getTangent = function(t) {

            var tangent = this.v2.clone().sub(this.v1);

            return tangent.normalize();

        };

        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         *
         **/

        /**************************************************************
         *	Curved Path - a curve path is simply a array of connected
         *  curves, but retains the api of a curve
         **************************************************************/

        function CurvePath() {

            this.curves = [];

            this.autoClose = false; // Automatically closes the path

        }

        CurvePath.prototype = Object.assign(Object.create(Curve.prototype), {

            constructor: CurvePath,

            add: function(curve) {

                this.curves.push(curve);

            },

            closePath: function() {

                // Add a line curve if start and end of lines are not connected
                var startPoint = this.curves[0].getPoint(0);
                var endPoint = this.curves[this.curves.length - 1].getPoint(1);

                if (!startPoint.equals(endPoint)) {

                    this.curves.push(new LineCurve(endPoint, startPoint));

                }

            },

            // To get accurate point with reference to
            // entire path distance at time t,
            // following has to be done:

            // 1. Length of each sub path have to be known
            // 2. Locate and identify type of curve
            // 3. Get t for the curve
            // 4. Return curve.getPointAt(t')

            getPoint: function(t) {

                var d = t * this.getLength();
                var curveLengths = this.getCurveLengths();
                var i = 0;

                // To think about boundaries points.

                while (i < curveLengths.length) {

                    if (curveLengths[i] >= d) {

                        var diff = curveLengths[i] - d;
                        var curve = this.curves[i];

                        var segmentLength = curve.getLength();
                        var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

                        return curve.getPointAt(u);

                    }

                    i++;

                }

                return null;

                // loop where sum != 0, sum > d , sum+1 <d

            },

            // We cannot use the default THREE.Curve getPoint() with getLength() because in
            // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
            // getPoint() depends on getLength

            getLength: function() {

                var lens = this.getCurveLengths();
                return lens[lens.length - 1];

            },

            // cacheLengths must be recalculated.
            updateArcLengths: function() {

                this.needsUpdate = true;
                this.cacheLengths = null;
                this.getLengths();

            },

            // Compute lengths and cache them
            // We cannot overwrite getLengths() because UtoT mapping uses it.

            getCurveLengths: function() {

                // We use cache values if curves and cache array are same length

                if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {

                    return this.cacheLengths;

                }

                // Get length of sub-curve
                // Push sums into cached array

                var lengths = [],
                    sums = 0;

                for (var i = 0, l = this.curves.length; i < l; i++) {

                    sums += this.curves[i].getLength();
                    lengths.push(sums);

                }

                this.cacheLengths = lengths;

                return lengths;

            },

            getSpacedPoints: function(divisions) {

                if (isNaN(divisions)) divisions = 40;

                var points = [];

                for (var i = 0; i <= divisions; i++) {

                    points.push(this.getPoint(i / divisions));

                }

                if (this.autoClose) {

                    points.push(points[0]);

                }

                return points;

            },

            getPoints: function(divisions) {

                divisions = divisions || 12;

                var points = [],
                    last;

                for (var i = 0, curves = this.curves; i < curves.length; i++) {

                    var curve = curves[i];
                    var resolution = (curve && curve.isEllipseCurve) ? divisions * 2 :
                        (curve && curve.isLineCurve) ? 1 :
                        (curve && curve.isSplineCurve) ? divisions * curve.points.length :
                        divisions;

                    var pts = curve.getPoints(resolution);

                    for (var j = 0; j < pts.length; j++) {

                        var point = pts[j];

                        if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates

                        points.push(point);
                        last = point;

                    }

                }

                if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {

                    points.push(points[0]);

                }

                return points;

            },

            /**************************************************************
             *	Create Geometries Helpers
             **************************************************************/

            /// Generate geometry from path points (for Line or Points objects)

            createPointsGeometry: function(divisions) {

                var pts = this.getPoints(divisions);
                return this.createGeometry(pts);

            },

            // Generate geometry from equidistant sampling along the path

            createSpacedPointsGeometry: function(divisions) {

                var pts = this.getSpacedPoints(divisions);
                return this.createGeometry(pts);

            },

            createGeometry: function(points) {

                var geometry = new Geometry();

                for (var i = 0, l = points.length; i < l; i++) {

                    var point = points[i];
                    geometry.vertices.push(new Vector3(point.x, point.y, point.z || 0));

                }

                return geometry;

            }

        });

        function EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {

            this.aX = aX;
            this.aY = aY;

            this.xRadius = xRadius;
            this.yRadius = yRadius;

            this.aStartAngle = aStartAngle;
            this.aEndAngle = aEndAngle;

            this.aClockwise = aClockwise;

            this.aRotation = aRotation || 0;

        }

        EllipseCurve.prototype = Object.create(Curve.prototype);
        EllipseCurve.prototype.constructor = EllipseCurve;

        EllipseCurve.prototype.isEllipseCurve = true;

        EllipseCurve.prototype.getPoint = function(t) {

            var twoPi = Math.PI * 2;
            var deltaAngle = this.aEndAngle - this.aStartAngle;
            var samePoints = Math.abs(deltaAngle) < Number.EPSILON;

            // ensures that deltaAngle is 0 .. 2 PI
            while (deltaAngle < 0) deltaAngle += twoPi;
            while (deltaAngle > twoPi) deltaAngle -= twoPi;

            if (deltaAngle < Number.EPSILON) {

                if (samePoints) {

                    deltaAngle = 0;

                } else {

                    deltaAngle = twoPi;

                }

            }

            if (this.aClockwise === true && !samePoints) {

                if (deltaAngle === twoPi) {

                    deltaAngle = -twoPi;

                } else {

                    deltaAngle = deltaAngle - twoPi;

                }

            }

            var angle = this.aStartAngle + t * deltaAngle;
            var x = this.aX + this.xRadius * Math.cos(angle);
            var y = this.aY + this.yRadius * Math.sin(angle);

            if (this.aRotation !== 0) {

                var cos = Math.cos(this.aRotation);
                var sin = Math.sin(this.aRotation);

                var tx = x - this.aX;
                var ty = y - this.aY;

                // Rotate the point about the center of the ellipse.
                x = tx * cos - ty * sin + this.aX;
                y = tx * sin + ty * cos + this.aY;

            }

            return new Vector2(x, y);

        };

        function SplineCurve(points /* array of Vector2 */ ) {

            this.points = (points === undefined) ? [] : points;

        }

        SplineCurve.prototype = Object.create(Curve.prototype);
        SplineCurve.prototype.constructor = SplineCurve;

        SplineCurve.prototype.isSplineCurve = true;

        SplineCurve.prototype.getPoint = function(t) {

            var points = this.points;
            var point = (points.length - 1) * t;

            var intPoint = Math.floor(point);
            var weight = point - intPoint;

            var point0 = points[intPoint === 0 ? intPoint : intPoint - 1];
            var point1 = points[intPoint];
            var point2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
            var point3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];

            return new Vector2(
                CatmullRom(weight, point0.x, point1.x, point2.x, point3.x),
                CatmullRom(weight, point0.y, point1.y, point2.y, point3.y)
            );

        };

        function CubicBezierCurve(v0, v1, v2, v3) {

            this.v0 = v0;
            this.v1 = v1;
            this.v2 = v2;
            this.v3 = v3;

        }

        CubicBezierCurve.prototype = Object.create(Curve.prototype);
        CubicBezierCurve.prototype.constructor = CubicBezierCurve;

        CubicBezierCurve.prototype.getPoint = function(t) {

            var v0 = this.v0,
                v1 = this.v1,
                v2 = this.v2,
                v3 = this.v3;

            return new Vector2(
                CubicBezier(t, v0.x, v1.x, v2.x, v3.x),
                CubicBezier(t, v0.y, v1.y, v2.y, v3.y)
            );

        };

        function QuadraticBezierCurve(v0, v1, v2) {

            this.v0 = v0;
            this.v1 = v1;
            this.v2 = v2;

        }

        QuadraticBezierCurve.prototype = Object.create(Curve.prototype);
        QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

        QuadraticBezierCurve.prototype.getPoint = function(t) {

            var v0 = this.v0,
                v1 = this.v1,
                v2 = this.v2;

            return new Vector2(
                QuadraticBezier(t, v0.x, v1.x, v2.x),
                QuadraticBezier(t, v0.y, v1.y, v2.y)
            );

        };

        var PathPrototype = Object.assign(Object.create(CurvePath.prototype), {

            fromPoints: function(vectors) {

                this.moveTo(vectors[0].x, vectors[0].y);

                for (var i = 1, l = vectors.length; i < l; i++) {

                    this.lineTo(vectors[i].x, vectors[i].y);

                }

            },

            moveTo: function(x, y) {

                this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?

            },

            lineTo: function(x, y) {

                var curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
                this.curves.push(curve);

                this.currentPoint.set(x, y);

            },

            quadraticCurveTo: function(aCPx, aCPy, aX, aY) {

                var curve = new QuadraticBezierCurve(
                    this.currentPoint.clone(),
                    new Vector2(aCPx, aCPy),
                    new Vector2(aX, aY)
                );

                this.curves.push(curve);

                this.currentPoint.set(aX, aY);

            },

            bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {

                var curve = new CubicBezierCurve(
                    this.currentPoint.clone(),
                    new Vector2(aCP1x, aCP1y),
                    new Vector2(aCP2x, aCP2y),
                    new Vector2(aX, aY)
                );

                this.curves.push(curve);

                this.currentPoint.set(aX, aY);

            },

            splineThru: function(pts /*Array of Vector*/ ) {

                var npts = [this.currentPoint.clone()].concat(pts);

                var curve = new SplineCurve(npts);
                this.curves.push(curve);

                this.currentPoint.copy(pts[pts.length - 1]);

            },

            arc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {

                var x0 = this.currentPoint.x;
                var y0 = this.currentPoint.y;

                this.absarc(aX + x0, aY + y0, aRadius,
                    aStartAngle, aEndAngle, aClockwise);

            },

            absarc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {

                this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);

            },

            ellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {

                var x0 = this.currentPoint.x;
                var y0 = this.currentPoint.y;

                this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);

            },

            absellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {

                var curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);

                if (this.curves.length > 0) {

                    // if a previous curve is present, attempt to join
                    var firstPoint = curve.getPoint(0);

                    if (!firstPoint.equals(this.currentPoint)) {

                        this.lineTo(firstPoint.x, firstPoint.y);

                    }

                }

                this.curves.push(curve);

                var lastPoint = curve.getPoint(1);
                this.currentPoint.copy(lastPoint);

            }

        });

        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * Creates free form 2d path using series of points, lines or curves.
         **/

        function Path(points) {

            CurvePath.call(this);
            this.currentPoint = new Vector2();

            if (points) {

                this.fromPoints(points);

            }

        }

        Path.prototype = PathPrototype;
        PathPrototype.constructor = Path;

        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * Defines a 2d shape plane using paths.
         **/

        // STEP 1 Create a path.
        // STEP 2 Turn path into shape.
        // STEP 3 ExtrudeGeometry takes in Shape/Shapes
        // STEP 3a - Extract points from each shape, turn to vertices
        // STEP 3b - Triangulate each shape, add faces.

        function Shape() {

            Path.apply(this, arguments);

            this.holes = [];

        }

        Shape.prototype = Object.assign(Object.create(PathPrototype), {

            constructor: Shape,

            getPointsHoles: function(divisions) {

                var holesPts = [];

                for (var i = 0, l = this.holes.length; i < l; i++) {

                    holesPts[i] = this.holes[i].getPoints(divisions);

                }

                return holesPts;

            },

            // Get points of shape and holes (keypoints based on segments parameter)

            extractAllPoints: function(divisions) {

                return {

                    shape: this.getPoints(divisions),
                    holes: this.getPointsHoles(divisions)

                };

            },

            extractPoints: function(divisions) {

                return this.extractAllPoints(divisions);

            }

        });

        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
         **/

        function ShapePath() {

            this.subPaths = [];
            this.currentPath = null;

        }

        ShapePath.prototype = {

            moveTo: function(x, y) {

                this.currentPath = new Path();
                this.subPaths.push(this.currentPath);
                this.currentPath.moveTo(x, y);

            },

            lineTo: function(x, y) {

                this.currentPath.lineTo(x, y);

            },

            quadraticCurveTo: function(aCPx, aCPy, aX, aY) {

                this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);

            },

            bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {

                this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);

            },

            splineThru: function(pts) {

                this.currentPath.splineThru(pts);

            },

            toShapes: function(isCCW, noHoles) {

                function toShapesNoHoles(inSubpaths) {

                    var shapes = [];

                    for (var i = 0, l = inSubpaths.length; i < l; i++) {

                        var tmpPath = inSubpaths[i];

                        var tmpShape = new Shape();
                        tmpShape.curves = tmpPath.curves;

                        shapes.push(tmpShape);

                    }

                    return shapes;

                }

                function isPointInsidePolygon(inPt, inPolygon) {

                    var polyLen = inPolygon.length;

                    // inPt on polygon contour => immediate success    or
                    // toggling of inside/outside at every single! intersection point of an edge
                    //  with the horizontal line through inPt, left of inPt
                    //  not counting lowerY endpoints of edges and whole edges on that line
                    var inside = false;
                    for (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {

                        var edgeLowPt = inPolygon[p];
                        var edgeHighPt = inPolygon[q];

                        var edgeDx = edgeHighPt.x - edgeLowPt.x;
                        var edgeDy = edgeHighPt.y - edgeLowPt.y;

                        if (Math.abs(edgeDy) > Number.EPSILON) {

                            // not parallel
                            if (edgeDy < 0) {

                                edgeLowPt = inPolygon[q];
                                edgeDx = -edgeDx;
                                edgeHighPt = inPolygon[p];
                                edgeDy = -edgeDy;

                            }
                            if ((inPt.y < edgeLowPt.y) || (inPt.y > edgeHighPt.y)) continue;

                            if (inPt.y === edgeLowPt.y) {

                                if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
                                // continue;				// no intersection or edgeLowPt => doesn't count !!!

                            } else {

                                var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
                                if (perpEdge === 0) return true; // inPt is on contour ?
                                if (perpEdge < 0) continue;
                                inside = !inside; // true intersection left of inPt

                            }

                        } else {

                            // parallel or collinear
                            if (inPt.y !== edgeLowPt.y) continue; // parallel
                            // edge lies on the same horizontal line as inPt
                            if (((edgeHighPt.x <= inPt.x) && (inPt.x <= edgeLowPt.x)) ||
                                ((edgeLowPt.x <= inPt.x) && (inPt.x <= edgeHighPt.x))) return true; // inPt: Point on contour !
                            // continue;

                        }

                    }

                    return inside;

                }

                var isClockWise = ShapeUtils.isClockWise;

                var subPaths = this.subPaths;
                if (subPaths.length === 0) return [];

                if (noHoles === true) return toShapesNoHoles(subPaths);


                var solid, tmpPath, tmpShape, shapes = [];

                if (subPaths.length === 1) {

                    tmpPath = subPaths[0];
                    tmpShape = new Shape();
                    tmpShape.curves = tmpPath.curves;
                    shapes.push(tmpShape);
                    return shapes;

                }

                var holesFirst = !isClockWise(subPaths[0].getPoints());
                holesFirst = isCCW ? !holesFirst : holesFirst;

                // console.log("Holes first", holesFirst);

                var betterShapeHoles = [];
                var newShapes = [];
                var newShapeHoles = [];
                var mainIdx = 0;
                var tmpPoints;

                newShapes[mainIdx] = undefined;
                newShapeHoles[mainIdx] = [];

                for (var i = 0, l = subPaths.length; i < l; i++) {

                    tmpPath = subPaths[i];
                    tmpPoints = tmpPath.getPoints();
                    solid = isClockWise(tmpPoints);
                    solid = isCCW ? !solid : solid;

                    if (solid) {

                        if ((!holesFirst) && (newShapes[mainIdx])) mainIdx++;

                        newShapes[mainIdx] = {
                            s: new Shape(),
                            p: tmpPoints
                        };
                        newShapes[mainIdx].s.curves = tmpPath.curves;

                        if (holesFirst) mainIdx++;
                        newShapeHoles[mainIdx] = [];

                        //console.log('cw', i);

                    } else {

                        newShapeHoles[mainIdx].push({
                            h: tmpPath,
                            p: tmpPoints[0]
                        });

                        //console.log('ccw', i);

                    }

                }

                // only Holes? -> probably all Shapes with wrong orientation
                if (!newShapes[0]) return toShapesNoHoles(subPaths);


                if (newShapes.length > 1) {

                    var ambiguous = false;
                    var toChange = [];

                    for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {

                        betterShapeHoles[sIdx] = [];

                    }

                    for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {

                        var sho = newShapeHoles[sIdx];

                        for (var hIdx = 0; hIdx < sho.length; hIdx++) {

                            var ho = sho[hIdx];
                            var hole_unassigned = true;

                            for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {

                                if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {

                                    if (sIdx !== s2Idx) toChange.push({
                                        froms: sIdx,
                                        tos: s2Idx,
                                        hole: hIdx
                                    });
                                    if (hole_unassigned) {

                                        hole_unassigned = false;
                                        betterShapeHoles[s2Idx].push(ho);

                                    } else {

                                        ambiguous = true;

                                    }

                                }

                            }
                            if (hole_unassigned) {

                                betterShapeHoles[sIdx].push(ho);

                            }

                        }

                    }
                    // console.log("ambiguous: ", ambiguous);
                    if (toChange.length > 0) {

                        // console.log("to change: ", toChange);
                        if (!ambiguous) newShapeHoles = betterShapeHoles;

                    }

                }

                var tmpHoles;

                for (var i = 0, il = newShapes.length; i < il; i++) {

                    tmpShape = newShapes[i].s;
                    shapes.push(tmpShape);
                    tmpHoles = newShapeHoles[i];

                    for (var j = 0, jl = tmpHoles.length; j < jl; j++) {

                        tmpShape.holes.push(tmpHoles[j].h);

                    }

                }

                //console.log("shape", shapes);

                return shapes;

            }

        };

        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * @author mrdoob / http://mrdoob.com/
         */

        function Font(data) {

            this.data = data;

        }

        Object.assign(Font.prototype, {

            isFont: true,

            generateShapes: function(text, size, divisions) {

                function createPaths(text) {

                    var chars = String(text).split('');
                    var scale = size / data.resolution;
                    var line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;

                    var offsetX = 0,
                        offsetY = 0;

                    var paths = [];

                    for (var i = 0; i < chars.length; i++) {

                        var char = chars[i];

                        if (char === '\n') {

                            offsetX = 0;
                            offsetY -= line_height;

                        } else {

                            var ret = createPath(char, scale, offsetX, offsetY);
                            offsetX += ret.offsetX;
                            paths.push(ret.path);

                        }

                    }

                    return paths;

                }

                function createPath(c, scale, offsetX, offsetY) {

                    var glyph = data.glyphs[c] || data.glyphs['?'];

                    if (!glyph) return;

                    var path = new ShapePath();

                    var pts = [];
                    var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

                    if (glyph.o) {

                        var outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));

                        for (var i = 0, l = outline.length; i < l;) {

                            var action = outline[i++];

                            switch (action) {

                                case 'm': // moveTo

                                    x = outline[i++] * scale + offsetX;
                                    y = outline[i++] * scale + offsetY;

                                    path.moveTo(x, y);

                                    break;

                                case 'l': // lineTo

                                    x = outline[i++] * scale + offsetX;
                                    y = outline[i++] * scale + offsetY;

                                    path.lineTo(x, y);

                                    break;

                                case 'q': // quadraticCurveTo

                                    cpx = outline[i++] * scale + offsetX;
                                    cpy = outline[i++] * scale + offsetY;
                                    cpx1 = outline[i++] * scale + offsetX;
                                    cpy1 = outline[i++] * scale + offsetY;

                                    path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);

                                    laste = pts[pts.length - 1];

                                    if (laste) {

                                        cpx0 = laste.x;
                                        cpy0 = laste.y;

                                        for (var i2 = 1; i2 <= divisions; i2++) {

                                            var t = i2 / divisions;
                                            QuadraticBezier(t, cpx0, cpx1, cpx);
                                            QuadraticBezier(t, cpy0, cpy1, cpy);

                                        }

                                    }

                                    break;

                                case 'b': // bezierCurveTo

                                    cpx = outline[i++] * scale + offsetX;
                                    cpy = outline[i++] * scale + offsetY;
                                    cpx1 = outline[i++] * scale + offsetX;
                                    cpy1 = outline[i++] * scale + offsetY;
                                    cpx2 = outline[i++] * scale + offsetX;
                                    cpy2 = outline[i++] * scale + offsetY;

                                    path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);

                                    laste = pts[pts.length - 1];

                                    if (laste) {

                                        cpx0 = laste.x;
                                        cpy0 = laste.y;

                                        for (var i2 = 1; i2 <= divisions; i2++) {

                                            var t = i2 / divisions;
                                            CubicBezier(t, cpx0, cpx1, cpx2, cpx);
                                            CubicBezier(t, cpy0, cpy1, cpy2, cpy);

                                        }

                                    }

                                    break;

                            }

                        }

                    }

                    return {
                        offsetX: glyph.ha * scale,
                        path: path
                    };

                }

                //

                if (size === undefined) size = 100;
                if (divisions === undefined) divisions = 4;

                var data = this.data;

                var paths = createPaths(text);
                var shapes = [];

                for (var p = 0, pl = paths.length; p < pl; p++) {

                    Array.prototype.push.apply(shapes, paths[p].toShapes());

                }

                return shapes;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function FontLoader(manager) {

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;

        }

        Object.assign(FontLoader.prototype, {

            load: function(url, onLoad, onProgress, onError) {

                var scope = this;

                var loader = new FileLoader(this.manager);
                loader.load(url, function(text) {

                    var json;

                    try {

                        json = JSON.parse(text);

                    } catch (e) {

                        console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');
                        json = JSON.parse(text.substring(65, text.length - 2));

                    }

                    var font = scope.parse(json);

                    if (onLoad) onLoad(font);

                }, onProgress, onError);

            },

            parse: function(json) {

                return new Font(json);

            }

        });

        var context;

        var AudioContext = {

            getContext: function() {

                if (context === undefined) {

                    context = new(window.AudioContext || window.webkitAudioContext)();

                }

                return context;

            },

            setContext: function(value) {

                context = value;

            }

        };

        /**
         * @author Reece Aaron Lecrivain / http://reecenotes.com/
         */

        function AudioLoader(manager) {

            this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;

        }

        Object.assign(AudioLoader.prototype, {

            load: function(url, onLoad, onProgress, onError) {

                var loader = new FileLoader(this.manager);
                loader.setResponseType('arraybuffer');
                loader.load(url, function(buffer) {

                    var context = AudioContext.getContext();

                    context.decodeAudioData(buffer, function(audioBuffer) {

                        onLoad(audioBuffer);

                    });

                }, onProgress, onError);

            }

        });

        /**
         * @author abelnation / http://github.com/abelnation
         */

        function RectAreaLight(color, intensity, width, height) {

            Light.call(this, color, intensity);

            this.type = 'RectAreaLight';

            this.position.set(0, 1, 0);
            this.updateMatrix();

            this.width = (width !== undefined) ? width : 10;
            this.height = (height !== undefined) ? height : 10;

            // TODO (abelnation): distance/decay

            // TODO (abelnation): update method for RectAreaLight to update transform to lookat target

            // TODO (abelnation): shadows
            // this.shadow = new THREE.RectAreaLightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );

        }

        // TODO (abelnation): RectAreaLight update when light shape is changed
        RectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {

            constructor: RectAreaLight,

            isRectAreaLight: true,

            copy: function(source) {

                Light.prototype.copy.call(this, source);

                this.width = source.width;
                this.height = source.height;

                // this.shadow = source.shadow.clone();

                return this;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function StereoCamera() {

            this.type = 'StereoCamera';

            this.aspect = 1;

            this.eyeSep = 0.064;

            this.cameraL = new PerspectiveCamera();
            this.cameraL.layers.enable(1);
            this.cameraL.matrixAutoUpdate = false;

            this.cameraR = new PerspectiveCamera();
            this.cameraR.layers.enable(2);
            this.cameraR.matrixAutoUpdate = false;

        }

        Object.assign(StereoCamera.prototype, {

            update: (function() {

                var instance, focus, fov, aspect, near, far, zoom;

                var eyeRight = new Matrix4();
                var eyeLeft = new Matrix4();

                return function update(camera) {

                    var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
                        aspect !== camera.aspect * this.aspect || near !== camera.near ||
                        far !== camera.far || zoom !== camera.zoom;

                    if (needsUpdate) {

                        instance = this;
                        focus = camera.focus;
                        fov = camera.fov;
                        aspect = camera.aspect * this.aspect;
                        near = camera.near;
                        far = camera.far;
                        zoom = camera.zoom;

                        // Off-axis stereoscopic effect based on
                        // http://paulbourke.net/stereographics/stereorender/

                        var projectionMatrix = camera.projectionMatrix.clone();
                        var eyeSep = this.eyeSep / 2;
                        var eyeSepOnProjection = eyeSep * near / focus;
                        var ymax = (near * Math.tan(_Math.DEG2RAD * fov * 0.5)) / zoom;
                        var xmin, xmax;

                        // translate xOffset

                        eyeLeft.elements[12] = -eyeSep;
                        eyeRight.elements[12] = eyeSep;

                        // for left eye

                        xmin = -ymax * aspect + eyeSepOnProjection;
                        xmax = ymax * aspect + eyeSepOnProjection;

                        projectionMatrix.elements[0] = 2 * near / (xmax - xmin);
                        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);

                        this.cameraL.projectionMatrix.copy(projectionMatrix);

                        // for right eye

                        xmin = -ymax * aspect - eyeSepOnProjection;
                        xmax = ymax * aspect - eyeSepOnProjection;

                        projectionMatrix.elements[0] = 2 * near / (xmax - xmin);
                        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);

                        this.cameraR.projectionMatrix.copy(projectionMatrix);

                    }

                    this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(eyeLeft);
                    this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(eyeRight);

                };

            })()

        });

        /**
         * Camera for rendering cube maps
         *	- renders scene into axis-aligned cube
         *
         * @author alteredq / http://alteredqualia.com/
         */

        function CubeCamera(near, far, cubeResolution) {

            Object3D.call(this);

            this.type = 'CubeCamera';

            var fov = 90,
                aspect = 1;

            var cameraPX = new PerspectiveCamera(fov, aspect, near, far);
            cameraPX.up.set(0, -1, 0);
            cameraPX.lookAt(new Vector3(1, 0, 0));
            this.add(cameraPX);

            var cameraNX = new PerspectiveCamera(fov, aspect, near, far);
            cameraNX.up.set(0, -1, 0);
            cameraNX.lookAt(new Vector3(-1, 0, 0));
            this.add(cameraNX);

            var cameraPY = new PerspectiveCamera(fov, aspect, near, far);
            cameraPY.up.set(0, 0, 1);
            cameraPY.lookAt(new Vector3(0, 1, 0));
            this.add(cameraPY);

            var cameraNY = new PerspectiveCamera(fov, aspect, near, far);
            cameraNY.up.set(0, 0, -1);
            cameraNY.lookAt(new Vector3(0, -1, 0));
            this.add(cameraNY);

            var cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
            cameraPZ.up.set(0, -1, 0);
            cameraPZ.lookAt(new Vector3(0, 0, 1));
            this.add(cameraPZ);

            var cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
            cameraNZ.up.set(0, -1, 0);
            cameraNZ.lookAt(new Vector3(0, 0, -1));
            this.add(cameraNZ);

            var options = {
                format: RGBFormat,
                magFilter: LinearFilter,
                minFilter: LinearFilter
            };

            this.renderTarget = new WebGLRenderTargetCube(cubeResolution, cubeResolution, options);

            this.updateCubeMap = function(renderer, scene) {

                if (this.parent === null) this.updateMatrixWorld();

                var renderTarget = this.renderTarget;
                var generateMipmaps = renderTarget.texture.generateMipmaps;

                renderTarget.texture.generateMipmaps = false;

                renderTarget.activeCubeFace = 0;
                renderer.render(scene, cameraPX, renderTarget);

                renderTarget.activeCubeFace = 1;
                renderer.render(scene, cameraNX, renderTarget);

                renderTarget.activeCubeFace = 2;
                renderer.render(scene, cameraPY, renderTarget);

                renderTarget.activeCubeFace = 3;
                renderer.render(scene, cameraNY, renderTarget);

                renderTarget.activeCubeFace = 4;
                renderer.render(scene, cameraPZ, renderTarget);

                renderTarget.texture.generateMipmaps = generateMipmaps;

                renderTarget.activeCubeFace = 5;
                renderer.render(scene, cameraNZ, renderTarget);

                renderer.setRenderTarget(null);

            };

        }

        CubeCamera.prototype = Object.create(Object3D.prototype);
        CubeCamera.prototype.constructor = CubeCamera;

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function AudioListener() {

            Object3D.call(this);

            this.type = 'AudioListener';

            this.context = AudioContext.getContext();

            this.gain = this.context.createGain();
            this.gain.connect(this.context.destination);

            this.filter = null;

        }

        AudioListener.prototype = Object.assign(Object.create(Object3D.prototype), {

            constructor: AudioListener,

            getInput: function() {

                return this.gain;

            },

            removeFilter: function() {

                if (this.filter !== null) {

                    this.gain.disconnect(this.filter);
                    this.filter.disconnect(this.context.destination);
                    this.gain.connect(this.context.destination);
                    this.filter = null;

                }

            },

            getFilter: function() {

                return this.filter;

            },

            setFilter: function(value) {

                if (this.filter !== null) {

                    this.gain.disconnect(this.filter);
                    this.filter.disconnect(this.context.destination);

                } else {

                    this.gain.disconnect(this.context.destination);

                }

                this.filter = value;
                this.gain.connect(this.filter);
                this.filter.connect(this.context.destination);

            },

            getMasterVolume: function() {

                return this.gain.gain.value;

            },

            setMasterVolume: function(value) {

                this.gain.gain.value = value;

            },

            updateMatrixWorld: (function() {

                var position = new Vector3();
                var quaternion = new Quaternion();
                var scale = new Vector3();

                var orientation = new Vector3();

                return function updateMatrixWorld(force) {

                    Object3D.prototype.updateMatrixWorld.call(this, force);

                    var listener = this.context.listener;
                    var up = this.up;

                    this.matrixWorld.decompose(position, quaternion, scale);

                    orientation.set(0, 0, -1).applyQuaternion(quaternion);

                    if (listener.positionX) {

                        listener.positionX.setValueAtTime(position.x, this.context.currentTime);
                        listener.positionY.setValueAtTime(position.y, this.context.currentTime);
                        listener.positionZ.setValueAtTime(position.z, this.context.currentTime);
                        listener.forwardX.setValueAtTime(orientation.x, this.context.currentTime);
                        listener.forwardY.setValueAtTime(orientation.y, this.context.currentTime);
                        listener.forwardZ.setValueAtTime(orientation.z, this.context.currentTime);
                        listener.upX.setValueAtTime(up.x, this.context.currentTime);
                        listener.upY.setValueAtTime(up.y, this.context.currentTime);
                        listener.upZ.setValueAtTime(up.z, this.context.currentTime);

                    } else {

                        listener.setPosition(position.x, position.y, position.z);
                        listener.setOrientation(orientation.x, orientation.y, orientation.z, up.x, up.y, up.z);

                    }

                };

            })()

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author Reece Aaron Lecrivain / http://reecenotes.com/
         */

        function Audio(listener) {

            Object3D.call(this);

            this.type = 'Audio';

            this.context = listener.context;

            this.gain = this.context.createGain();
            this.gain.connect(listener.getInput());

            this.autoplay = false;

            this.buffer = null;
            this.loop = false;
            this.startTime = 0;
            this.playbackRate = 1;
            this.isPlaying = false;
            this.hasPlaybackControl = true;
            this.sourceType = 'empty';

            this.filters = [];

        }

        Audio.prototype = Object.assign(Object.create(Object3D.prototype), {

            constructor: Audio,

            getOutput: function() {

                return this.gain;

            },

            setNodeSource: function(audioNode) {

                this.hasPlaybackControl = false;
                this.sourceType = 'audioNode';
                this.source = audioNode;
                this.connect();

                return this;

            },

            setBuffer: function(audioBuffer) {

                this.buffer = audioBuffer;
                this.sourceType = 'buffer';

                if (this.autoplay) this.play();

                return this;

            },

            play: function() {

                if (this.isPlaying === true) {

                    console.warn('THREE.Audio: Audio is already playing.');
                    return;

                }

                if (this.hasPlaybackControl === false) {

                    console.warn('THREE.Audio: this Audio has no playback control.');
                    return;

                }

                var source = this.context.createBufferSource();

                source.buffer = this.buffer;
                source.loop = this.loop;
                source.onended = this.onEnded.bind(this);
                source.playbackRate.setValueAtTime(this.playbackRate, this.startTime);
                source.start(0, this.startTime);

                this.isPlaying = true;

                this.source = source;

                return this.connect();

            },

            pause: function() {

                if (this.hasPlaybackControl === false) {

                    console.warn('THREE.Audio: this Audio has no playback control.');
                    return;

                }

                this.source.stop();
                this.startTime = this.context.currentTime;
                this.isPlaying = false;

                return this;

            },

            stop: function() {

                if (this.hasPlaybackControl === false) {

                    console.warn('THREE.Audio: this Audio has no playback control.');
                    return;

                }

                this.source.stop();
                this.startTime = 0;
                this.isPlaying = false;

                return this;

            },

            connect: function() {

                if (this.filters.length > 0) {

                    this.source.connect(this.filters[0]);

                    for (var i = 1, l = this.filters.length; i < l; i++) {

                        this.filters[i - 1].connect(this.filters[i]);

                    }

                    this.filters[this.filters.length - 1].connect(this.getOutput());

                } else {

                    this.source.connect(this.getOutput());

                }

                return this;

            },

            disconnect: function() {

                if (this.filters.length > 0) {

                    this.source.disconnect(this.filters[0]);

                    for (var i = 1, l = this.filters.length; i < l; i++) {

                        this.filters[i - 1].disconnect(this.filters[i]);

                    }

                    this.filters[this.filters.length - 1].disconnect(this.getOutput());

                } else {

                    this.source.disconnect(this.getOutput());

                }

                return this;

            },

            getFilters: function() {

                return this.filters;

            },

            setFilters: function(value) {

                if (!value) value = [];

                if (this.isPlaying === true) {

                    this.disconnect();
                    this.filters = value;
                    this.connect();

                } else {

                    this.filters = value;

                }

                return this;

            },

            getFilter: function() {

                return this.getFilters()[0];

            },

            setFilter: function(filter) {

                return this.setFilters(filter ? [filter] : []);

            },

            setPlaybackRate: function(value) {

                if (this.hasPlaybackControl === false) {

                    console.warn('THREE.Audio: this Audio has no playback control.');
                    return;

                }

                this.playbackRate = value;

                if (this.isPlaying === true) {

                    this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime);

                }

                return this;

            },

            getPlaybackRate: function() {

                return this.playbackRate;

            },

            onEnded: function() {

                this.isPlaying = false;

            },

            getLoop: function() {

                if (this.hasPlaybackControl === false) {

                    console.warn('THREE.Audio: this Audio has no playback control.');
                    return false;

                }

                return this.loop;

            },

            setLoop: function(value) {

                if (this.hasPlaybackControl === false) {

                    console.warn('THREE.Audio: this Audio has no playback control.');
                    return;

                }

                this.loop = value;

                if (this.isPlaying === true) {

                    this.source.loop = this.loop;

                }

                return this;

            },

            getVolume: function() {

                return this.gain.gain.value;

            },


            setVolume: function(value) {

                this.gain.gain.value = value;

                return this;

            }

        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function PositionalAudio(listener) {

            Audio.call(this, listener);

            this.panner = this.context.createPanner();
            this.panner.connect(this.gain);

        }

        PositionalAudio.prototype = Object.assign(Object.create(Audio.prototype), {

            constructor: PositionalAudio,

            getOutput: function() {

                return this.panner;

            },

            getRefDistance: function() {

                return this.panner.refDistance;

            },

            setRefDistance: function(value) {

                this.panner.refDistance = value;

            },

            getRolloffFactor: function() {

                return this.panner.rolloffFactor;

            },

            setRolloffFactor: function(value) {

                this.panner.rolloffFactor = value;

            },

            getDistanceModel: function() {

                return this.panner.distanceModel;

            },

            setDistanceModel: function(value) {

                this.panner.distanceModel = value;

            },

            getMaxDistance: function() {

                return this.panner.maxDistance;

            },

            setMaxDistance: function(value) {

                this.panner.maxDistance = value;

            },

            updateMatrixWorld: (function() {

                var position = new Vector3();

                return function updateMatrixWorld(force) {

                    Object3D.prototype.updateMatrixWorld.call(this, force);

                    position.setFromMatrixPosition(this.matrixWorld);

                    this.panner.setPosition(position.x, position.y, position.z);

                };

            })()


        });

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function AudioAnalyser(audio, fftSize) {

            this.analyser = audio.context.createAnalyser();
            this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

            this.data = new Uint8Array(this.analyser.frequencyBinCount);

            audio.getOutput().connect(this.analyser);

        }

        Object.assign(AudioAnalyser.prototype, {

            getFrequencyData: function() {

                this.analyser.getByteFrequencyData(this.data);

                return this.data;

            },

            getAverageFrequency: function() {

                var value = 0,
                    data = this.getFrequencyData();

                for (var i = 0; i < data.length; i++) {

                    value += data[i];

                }

                return value / data.length;

            }

        });

        /**
         *
         * Buffered scene graph property that allows weighted accumulation.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */

        function PropertyMixer(binding, typeName, valueSize) {

            this.binding = binding;
            this.valueSize = valueSize;

            var bufferType = Float64Array,
                mixFunction;

            switch (typeName) {

                case 'quaternion':
                    mixFunction = this._slerp;
                    break;

                case 'string':
                case 'bool':
                    bufferType = Array;
                    mixFunction = this._select;
                    break;

                default:
                    mixFunction = this._lerp;

            }

            this.buffer = new bufferType(valueSize * 4);
            // layout: [ incoming | accu0 | accu1 | orig ]
            //
            // interpolators can use .buffer as their .result
            // the data then goes to 'incoming'
            //
            // 'accu0' and 'accu1' are used frame-interleaved for
            // the cumulative result and are compared to detect
            // changes
            //
            // 'orig' stores the original state of the property

            this._mixBufferRegion = mixFunction;

            this.cumulativeWeight = 0;

            this.useCount = 0;
            this.referenceCount = 0;

        }

        PropertyMixer.prototype = {

            constructor: PropertyMixer,

            // accumulate data in the 'incoming' region into 'accu<i>'
            accumulate: function(accuIndex, weight) {

                // note: happily accumulating nothing when weight = 0, the caller knows
                // the weight and shouldn't have made the call in the first place

                var buffer = this.buffer,
                    stride = this.valueSize,
                    offset = accuIndex * stride + stride,

                    currentWeight = this.cumulativeWeight;

                if (currentWeight === 0) {

                    // accuN := incoming * weight

                    for (var i = 0; i !== stride; ++i) {

                        buffer[offset + i] = buffer[i];

                    }

                    currentWeight = weight;

                } else {

                    // accuN := accuN + incoming * weight

                    currentWeight += weight;
                    var mix = weight / currentWeight;
                    this._mixBufferRegion(buffer, offset, 0, mix, stride);

                }

                this.cumulativeWeight = currentWeight;

            },

            // apply the state of 'accu<i>' to the binding when accus differ
            apply: function(accuIndex) {

                var stride = this.valueSize,
                    buffer = this.buffer,
                    offset = accuIndex * stride + stride,

                    weight = this.cumulativeWeight,

                    binding = this.binding;

                this.cumulativeWeight = 0;

                if (weight < 1) {

                    // accuN := accuN + original * ( 1 - cumulativeWeight )

                    var originalValueOffset = stride * 3;

                    this._mixBufferRegion(
                        buffer, offset, originalValueOffset, 1 - weight, stride);

                }

                for (var i = stride, e = stride + stride; i !== e; ++i) {

                    if (buffer[i] !== buffer[i + stride]) {

                        // value has changed -> update scene graph

                        binding.setValue(buffer, offset);
                        break;

                    }

                }

            },

            // remember the state of the bound property and copy it to both accus
            saveOriginalState: function() {

                var binding = this.binding;

                var buffer = this.buffer,
                    stride = this.valueSize,

                    originalValueOffset = stride * 3;

                binding.getValue(buffer, originalValueOffset);

                // accu[0..1] := orig -- initially detect changes against the original
                for (var i = stride, e = originalValueOffset; i !== e; ++i) {

                    buffer[i] = buffer[originalValueOffset + (i % stride)];

                }

                this.cumulativeWeight = 0;

            },

            // apply the state previously taken via 'saveOriginalState' to the binding
            restoreOriginalState: function() {

                var originalValueOffset = this.valueSize * 3;
                this.binding.setValue(this.buffer, originalValueOffset);

            },


            // mix functions

            _select: function(buffer, dstOffset, srcOffset, t, stride) {

                if (t >= 0.5) {

                    for (var i = 0; i !== stride; ++i) {

                        buffer[dstOffset + i] = buffer[srcOffset + i];

                    }

                }

            },

            _slerp: function(buffer, dstOffset, srcOffset, t, stride) {

                Quaternion.slerpFlat(buffer, dstOffset,
                    buffer, dstOffset, buffer, srcOffset, t);

            },

            _lerp: function(buffer, dstOffset, srcOffset, t, stride) {

                var s = 1 - t;

                for (var i = 0; i !== stride; ++i) {

                    var j = dstOffset + i;

                    buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;

                }

            }

        };

        /**
         *
         * A reference to a real property in the scene graph.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */

        function PropertyBinding(rootNode, path, parsedPath) {

            this.path = path;
            this.parsedPath = parsedPath ||
                PropertyBinding.parseTrackName(path);

            this.node = PropertyBinding.findNode(
                rootNode, this.parsedPath.nodeName) || rootNode;

            this.rootNode = rootNode;

        }

        PropertyBinding.prototype = {

            constructor: PropertyBinding,

            getValue: function getValue_unbound(targetArray, offset) {

                this.bind();
                this.getValue(targetArray, offset);

                // Note: This class uses a State pattern on a per-method basis:
                // 'bind' sets 'this.getValue' / 'setValue' and shadows the
                // prototype version of these methods with one that represents
                // the bound state. When the property is not found, the methods
                // become no-ops.

            },

            setValue: function getValue_unbound(sourceArray, offset) {

                this.bind();
                this.setValue(sourceArray, offset);

            },

            // create getter / setter pair for a property in the scene graph
            bind: function() {

                var targetObject = this.node,
                    parsedPath = this.parsedPath,

                    objectName = parsedPath.objectName,
                    propertyName = parsedPath.propertyName,
                    propertyIndex = parsedPath.propertyIndex;

                if (!targetObject) {

                    targetObject = PropertyBinding.findNode(
                        this.rootNode, parsedPath.nodeName) || this.rootNode;

                    this.node = targetObject;

                }

                // set fail state so we can just 'return' on error
                this.getValue = this._getValue_unavailable;
                this.setValue = this._setValue_unavailable;

                // ensure there is a value node
                if (!targetObject) {

                    console.error("  trying to update node for track: " + this.path + " but it wasn't found.");
                    return;

                }

                if (objectName) {

                    var objectIndex = parsedPath.objectIndex;

                    // special cases were we need to reach deeper into the hierarchy to get the face materials....
                    switch (objectName) {

                        case 'materials':

                            if (!targetObject.material) {

                                console.error('  can not bind to material as node does not have a material', this);
                                return;

                            }

                            if (!targetObject.material.materials) {

                                console.error('  can not bind to material.materials as node.material does not have a materials array', this);
                                return;

                            }

                            targetObject = targetObject.material.materials;

                            break;

                        case 'bones':

                            if (!targetObject.skeleton) {

                                console.error('  can not bind to bones as node does not have a skeleton', this);
                                return;

                            }

                            // potential future optimization: skip this if propertyIndex is already an integer
                            // and convert the integer string to a true integer.

                            targetObject = targetObject.skeleton.bones;

                            // support resolving morphTarget names into indices.
                            for (var i = 0; i < targetObject.length; i++) {

                                if (targetObject[i].name === objectIndex) {

                                    objectIndex = i;
                                    break;

                                }

                            }

                            break;

                        default:

                            if (targetObject[objectName] === undefined) {

                                console.error('  can not bind to objectName of node, undefined', this);
                                return;

                            }

                            targetObject = targetObject[objectName];

                    }


                    if (objectIndex !== undefined) {

                        if (targetObject[objectIndex] === undefined) {

                            console.error("  trying to bind to objectIndex of objectName, but is undefined:", this, targetObject);
                            return;

                        }

                        targetObject = targetObject[objectIndex];

                    }

                }

                // resolve property
                var nodeProperty = targetObject[propertyName];

                if (nodeProperty === undefined) {

                    var nodeName = parsedPath.nodeName;

                    console.error("  trying to update property for track: " + nodeName +
                        '.' + propertyName + " but it wasn't found.", targetObject);
                    return;

                }

                // determine versioning scheme
                var versioning = this.Versioning.None;

                if (targetObject.needsUpdate !== undefined) { // material

                    versioning = this.Versioning.NeedsUpdate;
                    this.targetObject = targetObject;

                } else if (targetObject.matrixWorldNeedsUpdate !== undefined) { // node transform

                    versioning = this.Versioning.MatrixWorldNeedsUpdate;
                    this.targetObject = targetObject;

                }

                // determine how the property gets bound
                var bindingType = this.BindingType.Direct;

                if (propertyIndex !== undefined) {
                    // access a sub element of the property array (only primitives are supported right now)

                    if (propertyName === "morphTargetInfluences") {
                        // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

                        // support resolving morphTarget names into indices.
                        if (!targetObject.geometry) {

                            console.error('  can not bind to morphTargetInfluences becasuse node does not have a geometry', this);
                            return;

                        }

                        if (!targetObject.geometry.morphTargets) {

                            console.error('  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this);
                            return;

                        }

                        for (var i = 0; i < this.node.geometry.morphTargets.length; i++) {

                            if (targetObject.geometry.morphTargets[i].name === propertyIndex) {

                                propertyIndex = i;
                                break;

                            }

                        }

                    }

                    bindingType = this.BindingType.ArrayElement;

                    this.resolvedProperty = nodeProperty;
                    this.propertyIndex = propertyIndex;

                } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
                    // must use copy for Object3D.Euler/Quaternion

                    bindingType = this.BindingType.HasFromToArray;

                    this.resolvedProperty = nodeProperty;

                } else if (nodeProperty.length !== undefined) {

                    bindingType = this.BindingType.EntireArray;

                    this.resolvedProperty = nodeProperty;

                } else {

                    this.propertyName = propertyName;

                }

                // select getter / setter
                this.getValue = this.GetterByBindingType[bindingType];
                this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];

            },

            unbind: function() {

                this.node = null;

                // back to the prototype version of getValue / setValue
                // note: avoiding to mutate the shape of 'this' via 'delete'
                this.getValue = this._getValue_unbound;
                this.setValue = this._setValue_unbound;

            }

        };

        Object.assign(PropertyBinding.prototype, { // prototype, continued

            // these are used to "bind" a nonexistent property
            _getValue_unavailable: function() {},
            _setValue_unavailable: function() {},

            // initial state of these methods that calls 'bind'
            _getValue_unbound: PropertyBinding.prototype.getValue,
            _setValue_unbound: PropertyBinding.prototype.setValue,

            BindingType: {
                Direct: 0,
                EntireArray: 1,
                ArrayElement: 2,
                HasFromToArray: 3
            },

            Versioning: {
                None: 0,
                NeedsUpdate: 1,
                MatrixWorldNeedsUpdate: 2
            },

            GetterByBindingType: [

                function getValue_direct(buffer, offset) {

                    buffer[offset] = this.node[this.propertyName];

                },

                function getValue_array(buffer, offset) {

                    var source = this.resolvedProperty;

                    for (var i = 0, n = source.length; i !== n; ++i) {

                        buffer[offset++] = source[i];

                    }

                },

                function getValue_arrayElement(buffer, offset) {

                    buffer[offset] = this.resolvedProperty[this.propertyIndex];

                },

                function getValue_toArray(buffer, offset) {

                    this.resolvedProperty.toArray(buffer, offset);

                }

            ],

            SetterByBindingTypeAndVersioning: [

                [
                    // Direct

                    function setValue_direct(buffer, offset) {

                        this.node[this.propertyName] = buffer[offset];

                    },

                    function setValue_direct_setNeedsUpdate(buffer, offset) {

                        this.node[this.propertyName] = buffer[offset];
                        this.targetObject.needsUpdate = true;

                    },

                    function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {

                        this.node[this.propertyName] = buffer[offset];
                        this.targetObject.matrixWorldNeedsUpdate = true;

                    }

                ],
                [

                    // EntireArray

                    function setValue_array(buffer, offset) {

                        var dest = this.resolvedProperty;

                        for (var i = 0, n = dest.length; i !== n; ++i) {

                            dest[i] = buffer[offset++];

                        }

                    },

                    function setValue_array_setNeedsUpdate(buffer, offset) {

                        var dest = this.resolvedProperty;

                        for (var i = 0, n = dest.length; i !== n; ++i) {

                            dest[i] = buffer[offset++];

                        }

                        this.targetObject.needsUpdate = true;

                    },

                    function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {

                        var dest = this.resolvedProperty;

                        for (var i = 0, n = dest.length; i !== n; ++i) {

                            dest[i] = buffer[offset++];

                        }

                        this.targetObject.matrixWorldNeedsUpdate = true;

                    }

                ],
                [

                    // ArrayElement

                    function setValue_arrayElement(buffer, offset) {

                        this.resolvedProperty[this.propertyIndex] = buffer[offset];

                    },

                    function setValue_arrayElement_setNeedsUpdate(buffer, offset) {

                        this.resolvedProperty[this.propertyIndex] = buffer[offset];
                        this.targetObject.needsUpdate = true;

                    },

                    function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {

                        this.resolvedProperty[this.propertyIndex] = buffer[offset];
                        this.targetObject.matrixWorldNeedsUpdate = true;

                    }

                ],
                [

                    // HasToFromArray

                    function setValue_fromArray(buffer, offset) {

                        this.resolvedProperty.fromArray(buffer, offset);

                    },

                    function setValue_fromArray_setNeedsUpdate(buffer, offset) {

                        this.resolvedProperty.fromArray(buffer, offset);
                        this.targetObject.needsUpdate = true;

                    },

                    function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {

                        this.resolvedProperty.fromArray(buffer, offset);
                        this.targetObject.matrixWorldNeedsUpdate = true;

                    }

                ]

            ]

        });

        PropertyBinding.Composite =
            function(targetGroup, path, optionalParsedPath) {

                var parsedPath = optionalParsedPath ||
                    PropertyBinding.parseTrackName(path);

                this._targetGroup = targetGroup;
                this._bindings = targetGroup.subscribe_(path, parsedPath);

            };

        PropertyBinding.Composite.prototype = {

            constructor: PropertyBinding.Composite,

            getValue: function(array, offset) {

                this.bind(); // bind all binding

                var firstValidIndex = this._targetGroup.nCachedObjects_,
                    binding = this._bindings[firstValidIndex];

                // and only call .getValue on the first
                if (binding !== undefined) binding.getValue(array, offset);

            },

            setValue: function(array, offset) {

                var bindings = this._bindings;

                for (var i = this._targetGroup.nCachedObjects_,
                        n = bindings.length; i !== n; ++i) {

                    bindings[i].setValue(array, offset);

                }

            },

            bind: function() {

                var bindings = this._bindings;

                for (var i = this._targetGroup.nCachedObjects_,
                        n = bindings.length; i !== n; ++i) {

                    bindings[i].bind();

                }

            },

            unbind: function() {

                var bindings = this._bindings;

                for (var i = this._targetGroup.nCachedObjects_,
                        n = bindings.length; i !== n; ++i) {

                    bindings[i].unbind();

                }

            }

        };

        PropertyBinding.create = function(root, path, parsedPath) {

            if (!(root && root.isAnimationObjectGroup)) {

                return new PropertyBinding(root, path, parsedPath);

            } else {

                return new PropertyBinding.Composite(root, path, parsedPath);

            }

        };

        PropertyBinding.parseTrackName = function(trackName) {

            // matches strings in the form of:
            //    nodeName.property
            //    nodeName.property[accessor]
            //    nodeName.material.property[accessor]
            //    uuid.property[accessor]
            //    uuid.objectName[objectIndex].propertyName[propertyIndex]
            //    parentName/nodeName.property
            //    parentName/parentName/nodeName.property[index]
            //    .bone[Armature.DEF_cog].position
            //    scene:helium_balloon_model:helium_balloon_model.position
            // created and tested via https://regex101.com/#javascript

            var re = /^((?:[\w-]+[\/:])*)([\w-]+)?(?:\.([\w-]+)(?:\[(.+)\])?)?\.([\w-]+)(?:\[(.+)\])?$/;
            var matches = re.exec(trackName);

            if (!matches) {

                throw new Error("cannot parse trackName at all: " + trackName);

            }

            var results = {
                // directoryName: matches[ 1 ], // (tschw) currently unused
                nodeName: matches[2], // allowed to be null, specified root node.
                objectName: matches[3],
                objectIndex: matches[4],
                propertyName: matches[5],
                propertyIndex: matches[6] // allowed to be null, specifies that the whole property is set.
            };

            if (results.propertyName === null || results.propertyName.length === 0) {

                throw new Error("can not parse propertyName from trackName: " + trackName);

            }

            return results;

        };

        PropertyBinding.findNode = function(root, nodeName) {

            if (!nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {

                return root;

            }

            // search into skeleton bones.
            if (root.skeleton) {

                var searchSkeleton = function(skeleton) {

                    for (var i = 0; i < skeleton.bones.length; i++) {

                        var bone = skeleton.bones[i];

                        if (bone.name === nodeName) {

                            return bone;

                        }
                    }

                    return null;

                };

                var bone = searchSkeleton(root.skeleton);

                if (bone) {

                    return bone;

                }
            }

            // search into node subtree.
            if (root.children) {

                var searchNodeSubtree = function(children) {

                    for (var i = 0; i < children.length; i++) {

                        var childNode = children[i];

                        if (childNode.name === nodeName || childNode.uuid === nodeName) {

                            return childNode;

                        }

                        var result = searchNodeSubtree(childNode.children);

                        if (result) return result;

                    }

                    return null;

                };

                var subTreeNode = searchNodeSubtree(root.children);

                if (subTreeNode) {

                    return subTreeNode;

                }

            }

            return null;

        };

        /**
         *
         * A group of objects that receives a shared animation state.
         *
         * Usage:
         *
         * 	-	Add objects you would otherwise pass as 'root' to the
         * 		constructor or the .clipAction method of AnimationMixer.
         *
         * 	-	Instead pass this object as 'root'.
         *
         * 	-	You can also add and remove objects later when the mixer
         * 		is running.
         *
         * Note:
         *
         *  	Objects of this class appear as one object to the mixer,
         *  	so cache control of the individual objects must be done
         *  	on the group.
         *
         * Limitation:
         *
         * 	- 	The animated properties must be compatible among the
         * 		all objects in the group.
         *
         *  -	A single property can either be controlled through a
         *  	target group or directly, but not both.
         *
         * @author tschw
         */

        function AnimationObjectGroup(var_args) {

            this.uuid = _Math.generateUUID();

            // cached objects followed by the active ones
            this._objects = Array.prototype.slice.call(arguments);

            this.nCachedObjects_ = 0; // threshold
            // note: read by PropertyBinding.Composite

            var indices = {};
            this._indicesByUUID = indices; // for bookkeeping

            for (var i = 0, n = arguments.length; i !== n; ++i) {

                indices[arguments[i].uuid] = i;

            }

            this._paths = []; // inside: string
            this._parsedPaths = []; // inside: { we don't care, here }
            this._bindings = []; // inside: Array< PropertyBinding >
            this._bindingsIndicesByPath = {}; // inside: indices in these arrays

            var scope = this;

            this.stats = {

                objects: {
                    get total() {
                        return scope._objects.length;
                    },
                    get inUse() {
                        return this.total - scope.nCachedObjects_;
                    }
                },

                get bindingsPerObject() {
                    return scope._bindings.length;
                }

            };

        }

        AnimationObjectGroup.prototype = {

            constructor: AnimationObjectGroup,

            isAnimationObjectGroup: true,

            add: function(var_args) {

                var objects = this._objects,
                    nObjects = objects.length,
                    nCachedObjects = this.nCachedObjects_,
                    indicesByUUID = this._indicesByUUID,
                    paths = this._paths,
                    parsedPaths = this._parsedPaths,
                    bindings = this._bindings,
                    nBindings = bindings.length;

                for (var i = 0, n = arguments.length; i !== n; ++i) {

                    var object = arguments[i],
                        uuid = object.uuid,
                        index = indicesByUUID[uuid],
                        knownObject = undefined;

                    if (index === undefined) {

                        // unknown object -> add it to the ACTIVE region

                        index = nObjects++;
                        indicesByUUID[uuid] = index;
                        objects.push(object);

                        // accounting is done, now do the same for all bindings

                        for (var j = 0, m = nBindings; j !== m; ++j) {

                            bindings[j].push(
                                new PropertyBinding(
                                    object, paths[j], parsedPaths[j]));

                        }

                    } else if (index < nCachedObjects) {

                        knownObject = objects[index];

                        // move existing object to the ACTIVE region

                        var firstActiveIndex = --nCachedObjects,
                            lastCachedObject = objects[firstActiveIndex];

                        indicesByUUID[lastCachedObject.uuid] = index;
                        objects[index] = lastCachedObject;

                        indicesByUUID[uuid] = firstActiveIndex;
                        objects[firstActiveIndex] = object;

                        // accounting is done, now do the same for all bindings

                        for (var j = 0, m = nBindings; j !== m; ++j) {

                            var bindingsForPath = bindings[j],
                                lastCached = bindingsForPath[firstActiveIndex],
                                binding = bindingsForPath[index];

                            bindingsForPath[index] = lastCached;

                            if (binding === undefined) {

                                // since we do not bother to create new bindings
                                // for objects that are cached, the binding may
                                // or may not exist

                                binding = new PropertyBinding(
                                    object, paths[j], parsedPaths[j]);

                            }

                            bindingsForPath[firstActiveIndex] = binding;

                        }

                    } else if (objects[index] !== knownObject) {

                        console.error("Different objects with the same UUID " +
                            "detected. Clean the caches or recreate your " +
                            "infrastructure when reloading scenes...");

                    } // else the object is already where we want it to be

                } // for arguments

                this.nCachedObjects_ = nCachedObjects;

            },

            remove: function(var_args) {

                var objects = this._objects,
                    nCachedObjects = this.nCachedObjects_,
                    indicesByUUID = this._indicesByUUID,
                    bindings = this._bindings,
                    nBindings = bindings.length;

                for (var i = 0, n = arguments.length; i !== n; ++i) {

                    var object = arguments[i],
                        uuid = object.uuid,
                        index = indicesByUUID[uuid];

                    if (index !== undefined && index >= nCachedObjects) {

                        // move existing object into the CACHED region

                        var lastCachedIndex = nCachedObjects++,
                            firstActiveObject = objects[lastCachedIndex];

                        indicesByUUID[firstActiveObject.uuid] = index;
                        objects[index] = firstActiveObject;

                        indicesByUUID[uuid] = lastCachedIndex;
                        objects[lastCachedIndex] = object;

                        // accounting is done, now do the same for all bindings

                        for (var j = 0, m = nBindings; j !== m; ++j) {

                            var bindingsForPath = bindings[j],
                                firstActive = bindingsForPath[lastCachedIndex],
                                binding = bindingsForPath[index];

                            bindingsForPath[index] = firstActive;
                            bindingsForPath[lastCachedIndex] = binding;

                        }

                    }

                } // for arguments

                this.nCachedObjects_ = nCachedObjects;

            },

            // remove & forget
            uncache: function(var_args) {

                var objects = this._objects,
                    nObjects = objects.length,
                    nCachedObjects = this.nCachedObjects_,
                    indicesByUUID = this._indicesByUUID,
                    bindings = this._bindings,
                    nBindings = bindings.length;

                for (var i = 0, n = arguments.length; i !== n; ++i) {

                    var object = arguments[i],
                        uuid = object.uuid,
                        index = indicesByUUID[uuid];

                    if (index !== undefined) {

                        delete indicesByUUID[uuid];

                        if (index < nCachedObjects) {

                            // object is cached, shrink the CACHED region

                            var firstActiveIndex = --nCachedObjects,
                                lastCachedObject = objects[firstActiveIndex],
                                lastIndex = --nObjects,
                                lastObject = objects[lastIndex];

                            // last cached object takes this object's place
                            indicesByUUID[lastCachedObject.uuid] = index;
                            objects[index] = lastCachedObject;

                            // last object goes to the activated slot and pop
                            indicesByUUID[lastObject.uuid] = firstActiveIndex;
                            objects[firstActiveIndex] = lastObject;
                            objects.pop();

                            // accounting is done, now do the same for all bindings

                            for (var j = 0, m = nBindings; j !== m; ++j) {

                                var bindingsForPath = bindings[j],
                                    lastCached = bindingsForPath[firstActiveIndex],
                                    last = bindingsForPath[lastIndex];

                                bindingsForPath[index] = lastCached;
                                bindingsForPath[firstActiveIndex] = last;
                                bindingsForPath.pop();

                            }

                        } else {

                            // object is active, just swap with the last and pop

                            var lastIndex = --nObjects,
                                lastObject = objects[lastIndex];

                            indicesByUUID[lastObject.uuid] = index;
                            objects[index] = lastObject;
                            objects.pop();

                            // accounting is done, now do the same for all bindings

                            for (var j = 0, m = nBindings; j !== m; ++j) {

                                var bindingsForPath = bindings[j];

                                bindingsForPath[index] = bindingsForPath[lastIndex];
                                bindingsForPath.pop();

                            }

                        } // cached or active

                    } // if object is known

                } // for arguments

                this.nCachedObjects_ = nCachedObjects;

            },

            // Internal interface used by befriended PropertyBinding.Composite:

            subscribe_: function(path, parsedPath) {
                // returns an array of bindings for the given path that is changed
                // according to the contained objects in the group

                var indicesByPath = this._bindingsIndicesByPath,
                    index = indicesByPath[path],
                    bindings = this._bindings;

                if (index !== undefined) return bindings[index];

                var paths = this._paths,
                    parsedPaths = this._parsedPaths,
                    objects = this._objects,
                    nObjects = objects.length,
                    nCachedObjects = this.nCachedObjects_,
                    bindingsForPath = new Array(nObjects);

                index = bindings.length;

                indicesByPath[path] = index;

                paths.push(path);
                parsedPaths.push(parsedPath);
                bindings.push(bindingsForPath);

                for (var i = nCachedObjects,
                        n = objects.length; i !== n; ++i) {

                    var object = objects[i];

                    bindingsForPath[i] =
                        new PropertyBinding(object, path, parsedPath);

                }

                return bindingsForPath;

            },

            unsubscribe_: function(path) {
                // tells the group to forget about a property path and no longer
                // update the array previously obtained with 'subscribe_'

                var indicesByPath = this._bindingsIndicesByPath,
                    index = indicesByPath[path];

                if (index !== undefined) {

                    var paths = this._paths,
                        parsedPaths = this._parsedPaths,
                        bindings = this._bindings,
                        lastBindingsIndex = bindings.length - 1,
                        lastBindings = bindings[lastBindingsIndex],
                        lastBindingsPath = path[lastBindingsIndex];

                    indicesByPath[lastBindingsPath] = index;

                    bindings[index] = lastBindings;
                    bindings.pop();

                    parsedPaths[index] = parsedPaths[lastBindingsIndex];
                    parsedPaths.pop();

                    paths[index] = paths[lastBindingsIndex];
                    paths.pop();

                }

            }

        };

        /**
         *
         * Action provided by AnimationMixer for scheduling clip playback on specific
         * objects.
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         *
         */

        function AnimationAction(mixer, clip, localRoot) {

            this._mixer = mixer;
            this._clip = clip;
            this._localRoot = localRoot || null;

            var tracks = clip.tracks,
                nTracks = tracks.length,
                interpolants = new Array(nTracks);

            var interpolantSettings = {
                endingStart: ZeroCurvatureEnding,
                endingEnd: ZeroCurvatureEnding
            };

            for (var i = 0; i !== nTracks; ++i) {

                var interpolant = tracks[i].createInterpolant(null);
                interpolants[i] = interpolant;
                interpolant.settings = interpolantSettings;

            }

            this._interpolantSettings = interpolantSettings;

            this._interpolants = interpolants; // bound by the mixer

            // inside: PropertyMixer (managed by the mixer)
            this._propertyBindings = new Array(nTracks);

            this._cacheIndex = null; // for the memory manager
            this._byClipCacheIndex = null; // for the memory manager

            this._timeScaleInterpolant = null;
            this._weightInterpolant = null;

            this.loop = LoopRepeat;
            this._loopCount = -1;

            // global mixer time when the action is to be started
            // it's set back to 'null' upon start of the action
            this._startTime = null;

            // scaled local time of the action
            // gets clamped or wrapped to 0..clip.duration according to loop
            this.time = 0;

            this.timeScale = 1;
            this._effectiveTimeScale = 1;

            this.weight = 1;
            this._effectiveWeight = 1;

            this.repetitions = Infinity; // no. of repetitions when looping

            this.paused = false; // false -> zero effective time scale
            this.enabled = true; // true -> zero effective weight

            this.clampWhenFinished = false; // keep feeding the last frame?

            this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate
            this.zeroSlopeAtEnd = true; // clips for start, loop and end

        }

        AnimationAction.prototype = {

            constructor: AnimationAction,

            // State & Scheduling

            play: function() {

                this._mixer._activateAction(this);

                return this;

            },

            stop: function() {

                this._mixer._deactivateAction(this);

                return this.reset();

            },

            reset: function() {

                this.paused = false;
                this.enabled = true;

                this.time = 0; // restart clip
                this._loopCount = -1; // forget previous loops
                this._startTime = null; // forget scheduling

                return this.stopFading().stopWarping();

            },

            isRunning: function() {

                return this.enabled && !this.paused && this.timeScale !== 0 &&
                    this._startTime === null && this._mixer._isActiveAction(this);

            },

            // return true when play has been called
            isScheduled: function() {

                return this._mixer._isActiveAction(this);

            },

            startAt: function(time) {

                this._startTime = time;

                return this;

            },

            setLoop: function(mode, repetitions) {

                this.loop = mode;
                this.repetitions = repetitions;

                return this;

            },

            // Weight

            // set the weight stopping any scheduled fading
            // although .enabled = false yields an effective weight of zero, this
            // method does *not* change .enabled, because it would be confusing
            setEffectiveWeight: function(weight) {

                this.weight = weight;

                // note: same logic as when updated at runtime
                this._effectiveWeight = this.enabled ? weight : 0;

                return this.stopFading();

            },

            // return the weight considering fading and .enabled
            getEffectiveWeight: function() {

                return this._effectiveWeight;

            },

            fadeIn: function(duration) {

                return this._scheduleFading(duration, 0, 1);

            },

            fadeOut: function(duration) {

                return this._scheduleFading(duration, 1, 0);

            },

            crossFadeFrom: function(fadeOutAction, duration, warp) {

                fadeOutAction.fadeOut(duration);
                this.fadeIn(duration);

                if (warp) {

                    var fadeInDuration = this._clip.duration,
                        fadeOutDuration = fadeOutAction._clip.duration,

                        startEndRatio = fadeOutDuration / fadeInDuration,
                        endStartRatio = fadeInDuration / fadeOutDuration;

                    fadeOutAction.warp(1.0, startEndRatio, duration);
                    this.warp(endStartRatio, 1.0, duration);

                }

                return this;

            },

            crossFadeTo: function(fadeInAction, duration, warp) {

                return fadeInAction.crossFadeFrom(this, duration, warp);

            },

            stopFading: function() {

                var weightInterpolant = this._weightInterpolant;

                if (weightInterpolant !== null) {

                    this._weightInterpolant = null;
                    this._mixer._takeBackControlInterpolant(weightInterpolant);

                }

                return this;

            },

            // Time Scale Control

            // set the weight stopping any scheduled warping
            // although .paused = true yields an effective time scale of zero, this
            // method does *not* change .paused, because it would be confusing
            setEffectiveTimeScale: function(timeScale) {

                this.timeScale = timeScale;
                this._effectiveTimeScale = this.paused ? 0 : timeScale;

                return this.stopWarping();

            },

            // return the time scale considering warping and .paused
            getEffectiveTimeScale: function() {

                return this._effectiveTimeScale;

            },

            setDuration: function(duration) {

                this.timeScale = this._clip.duration / duration;

                return this.stopWarping();

            },

            syncWith: function(action) {

                this.time = action.time;
                this.timeScale = action.timeScale;

                return this.stopWarping();

            },

            halt: function(duration) {

                return this.warp(this._effectiveTimeScale, 0, duration);

            },

            warp: function(startTimeScale, endTimeScale, duration) {

                var mixer = this._mixer,
                    now = mixer.time,
                    interpolant = this._timeScaleInterpolant,

                    timeScale = this.timeScale;

                if (interpolant === null) {

                    interpolant = mixer._lendControlInterpolant();
                    this._timeScaleInterpolant = interpolant;

                }

                var times = interpolant.parameterPositions,
                    values = interpolant.sampleValues;

                times[0] = now;
                times[1] = now + duration;

                values[0] = startTimeScale / timeScale;
                values[1] = endTimeScale / timeScale;

                return this;

            },

            stopWarping: function() {

                var timeScaleInterpolant = this._timeScaleInterpolant;

                if (timeScaleInterpolant !== null) {

                    this._timeScaleInterpolant = null;
                    this._mixer._takeBackControlInterpolant(timeScaleInterpolant);

                }

                return this;

            },

            // Object Accessors

            getMixer: function() {

                return this._mixer;

            },

            getClip: function() {

                return this._clip;

            },

            getRoot: function() {

                return this._localRoot || this._mixer._root;

            },

            // Interna

            _update: function(time, deltaTime, timeDirection, accuIndex) {
                // called by the mixer

                var startTime = this._startTime;

                if (startTime !== null) {

                    // check for scheduled start of action

                    var timeRunning = (time - startTime) * timeDirection;
                    if (timeRunning < 0 || timeDirection === 0) {

                        return; // yet to come / don't decide when delta = 0

                    }

                    // start

                    this._startTime = null; // unschedule
                    deltaTime = timeDirection * timeRunning;

                }

                // apply time scale and advance time

                deltaTime *= this._updateTimeScale(time);
                var clipTime = this._updateTime(deltaTime);

                // note: _updateTime may disable the action resulting in
                // an effective weight of 0

                var weight = this._updateWeight(time);

                if (weight > 0) {

                    var interpolants = this._interpolants;
                    var propertyMixers = this._propertyBindings;

                    for (var j = 0, m = interpolants.length; j !== m; ++j) {

                        interpolants[j].evaluate(clipTime);
                        propertyMixers[j].accumulate(accuIndex, weight);

                    }

                }

            },

            _updateWeight: function(time) {

                var weight = 0;

                if (this.enabled) {

                    weight = this.weight;
                    var interpolant = this._weightInterpolant;

                    if (interpolant !== null) {

                        var interpolantValue = interpolant.evaluate(time)[0];

                        weight *= interpolantValue;

                        if (time > interpolant.parameterPositions[1]) {

                            this.stopFading();

                            if (interpolantValue === 0) {

                                // faded out, disable
                                this.enabled = false;

                            }

                        }

                    }

                }

                this._effectiveWeight = weight;
                return weight;

            },

            _updateTimeScale: function(time) {

                var timeScale = 0;

                if (!this.paused) {

                    timeScale = this.timeScale;

                    var interpolant = this._timeScaleInterpolant;

                    if (interpolant !== null) {

                        var interpolantValue = interpolant.evaluate(time)[0];

                        timeScale *= interpolantValue;

                        if (time > interpolant.parameterPositions[1]) {

                            this.stopWarping();

                            if (timeScale === 0) {

                                // motion has halted, pause
                                this.paused = true;

                            } else {

                                // warp done - apply final time scale
                                this.timeScale = timeScale;

                            }

                        }

                    }

                }

                this._effectiveTimeScale = timeScale;
                return timeScale;

            },

            _updateTime: function(deltaTime) {

                var time = this.time + deltaTime;

                if (deltaTime === 0) return time;

                var duration = this._clip.duration,

                    loop = this.loop,
                    loopCount = this._loopCount;

                if (loop === LoopOnce) {

                    if (loopCount === -1) {
                        // just started

                        this._loopCount = 0;
                        this._setEndings(true, true, false);

                    }

                    handle_stop: {

                        if (time >= duration) {

                            time = duration;

                        } else if (time < 0) {

                            time = 0;

                        } else break handle_stop;

                        if (this.clampWhenFinished) this.paused = true;
                        else this.enabled = false;

                        this._mixer.dispatchEvent({
                            type: 'finished',
                            action: this,
                            direction: deltaTime < 0 ? -1 : 1
                        });

                    }

                } else { // repetitive Repeat or PingPong

                    var pingPong = (loop === LoopPingPong);

                    if (loopCount === -1) {
                        // just started

                        if (deltaTime >= 0) {

                            loopCount = 0;

                            this._setEndings(
                                true, this.repetitions === 0, pingPong);

                        } else {

                            // when looping in reverse direction, the initial
                            // transition through zero counts as a repetition,
                            // so leave loopCount at -1

                            this._setEndings(
                                this.repetitions === 0, true, pingPong);

                        }

                    }

                    if (time >= duration || time < 0) {
                        // wrap around

                        var loopDelta = Math.floor(time / duration); // signed
                        time -= duration * loopDelta;

                        loopCount += Math.abs(loopDelta);

                        var pending = this.repetitions - loopCount;

                        if (pending < 0) {
                            // have to stop (switch state, clamp time, fire event)

                            if (this.clampWhenFinished) this.paused = true;
                            else this.enabled = false;

                            time = deltaTime > 0 ? duration : 0;

                            this._mixer.dispatchEvent({
                                type: 'finished',
                                action: this,
                                direction: deltaTime > 0 ? 1 : -1
                            });

                        } else {
                            // keep running

                            if (pending === 0) {
                                // entering the last round

                                var atStart = deltaTime < 0;
                                this._setEndings(atStart, !atStart, pingPong);

                            } else {

                                this._setEndings(false, false, pingPong);

                            }

                            this._loopCount = loopCount;

                            this._mixer.dispatchEvent({
                                type: 'loop',
                                action: this,
                                loopDelta: loopDelta
                            });

                        }

                    }

                    if (pingPong && (loopCount & 1) === 1) {
                        // invert time for the "pong round"

                        this.time = time;
                        return duration - time;

                    }

                }

                this.time = time;
                return time;

            },

            _setEndings: function(atStart, atEnd, pingPong) {

                var settings = this._interpolantSettings;

                if (pingPong) {

                    settings.endingStart = ZeroSlopeEnding;
                    settings.endingEnd = ZeroSlopeEnding;

                } else {

                    // assuming for LoopOnce atStart == atEnd == true

                    if (atStart) {

                        settings.endingStart = this.zeroSlopeAtStart ?
                            ZeroSlopeEnding : ZeroCurvatureEnding;

                    } else {

                        settings.endingStart = WrapAroundEnding;

                    }

                    if (atEnd) {

                        settings.endingEnd = this.zeroSlopeAtEnd ?
                            ZeroSlopeEnding : ZeroCurvatureEnding;

                    } else {

                        settings.endingEnd = WrapAroundEnding;

                    }

                }

            },

            _scheduleFading: function(duration, weightNow, weightThen) {

                var mixer = this._mixer,
                    now = mixer.time,
                    interpolant = this._weightInterpolant;

                if (interpolant === null) {

                    interpolant = mixer._lendControlInterpolant();
                    this._weightInterpolant = interpolant;

                }

                var times = interpolant.parameterPositions,
                    values = interpolant.sampleValues;

                times[0] = now;
                values[0] = weightNow;
                times[1] = now + duration;
                values[1] = weightThen;

                return this;

            }

        };

        /**
         *
         * Player for AnimationClips.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */

        function AnimationMixer(root) {

            this._root = root;
            this._initMemoryManager();
            this._accuIndex = 0;

            this.time = 0;

            this.timeScale = 1.0;

        }

        AnimationMixer.prototype = {

            constructor: AnimationMixer,

            // return an action for a clip optionally using a custom root target
            // object (this method allocates a lot of dynamic memory in case a
            // previously unknown clip/root combination is specified)
            clipAction: function(clip, optionalRoot) {

                var root = optionalRoot || this._root,
                    rootUuid = root.uuid,

                    clipObject = typeof clip === 'string' ?
                    AnimationClip.findByName(root, clip) : clip,

                    clipUuid = clipObject !== null ? clipObject.uuid : clip,

                    actionsForClip = this._actionsByClip[clipUuid],
                    prototypeAction = null;

                if (actionsForClip !== undefined) {

                    var existingAction =
                        actionsForClip.actionByRoot[rootUuid];

                    if (existingAction !== undefined) {

                        return existingAction;

                    }

                    // we know the clip, so we don't have to parse all
                    // the bindings again but can just copy
                    prototypeAction = actionsForClip.knownActions[0];

                    // also, take the clip from the prototype action
                    if (clipObject === null)
                        clipObject = prototypeAction._clip;

                }

                // clip must be known when specified via string
                if (clipObject === null) return null;

                // allocate all resources required to run it
                var newAction = new AnimationAction(this, clipObject, optionalRoot);

                this._bindAction(newAction, prototypeAction);

                // and make the action known to the memory manager
                this._addInactiveAction(newAction, clipUuid, rootUuid);

                return newAction;

            },

            // get an existing action
            existingAction: function(clip, optionalRoot) {

                var root = optionalRoot || this._root,
                    rootUuid = root.uuid,

                    clipObject = typeof clip === 'string' ?
                    AnimationClip.findByName(root, clip) : clip,

                    clipUuid = clipObject ? clipObject.uuid : clip,

                    actionsForClip = this._actionsByClip[clipUuid];

                if (actionsForClip !== undefined) {

                    return actionsForClip.actionByRoot[rootUuid] || null;

                }

                return null;

            },

            // deactivates all previously scheduled actions
            stopAllAction: function() {

                var actions = this._actions,
                    nActions = this._nActiveActions,
                    bindings = this._bindings,
                    nBindings = this._nActiveBindings;

                this._nActiveActions = 0;
                this._nActiveBindings = 0;

                for (var i = 0; i !== nActions; ++i) {

                    actions[i].reset();

                }

                for (var i = 0; i !== nBindings; ++i) {

                    bindings[i].useCount = 0;

                }

                return this;

            },

            // advance the time and update apply the animation
            update: function(deltaTime) {

                deltaTime *= this.timeScale;

                var actions = this._actions,
                    nActions = this._nActiveActions,

                    time = this.time += deltaTime,
                    timeDirection = Math.sign(deltaTime),

                    accuIndex = this._accuIndex ^= 1;

                // run active actions

                for (var i = 0; i !== nActions; ++i) {

                    var action = actions[i];

                    if (action.enabled) {

                        action._update(time, deltaTime, timeDirection, accuIndex);

                    }

                }

                // update scene graph

                var bindings = this._bindings,
                    nBindings = this._nActiveBindings;

                for (var i = 0; i !== nBindings; ++i) {

                    bindings[i].apply(accuIndex);

                }

                return this;

            },

            // return this mixer's root target object
            getRoot: function() {

                return this._root;

            },

            // free all resources specific to a particular clip
            uncacheClip: function(clip) {

                var actions = this._actions,
                    clipUuid = clip.uuid,
                    actionsByClip = this._actionsByClip,
                    actionsForClip = actionsByClip[clipUuid];

                if (actionsForClip !== undefined) {

                    // note: just calling _removeInactiveAction would mess up the
                    // iteration state and also require updating the state we can
                    // just throw away

                    var actionsToRemove = actionsForClip.knownActions;

                    for (var i = 0, n = actionsToRemove.length; i !== n; ++i) {

                        var action = actionsToRemove[i];

                        this._deactivateAction(action);

                        var cacheIndex = action._cacheIndex,
                            lastInactiveAction = actions[actions.length - 1];

                        action._cacheIndex = null;
                        action._byClipCacheIndex = null;

                        lastInactiveAction._cacheIndex = cacheIndex;
                        actions[cacheIndex] = lastInactiveAction;
                        actions.pop();

                        this._removeInactiveBindingsForAction(action);

                    }

                    delete actionsByClip[clipUuid];

                }

            },

            // free all resources specific to a particular root target object
            uncacheRoot: function(root) {

                var rootUuid = root.uuid,
                    actionsByClip = this._actionsByClip;

                for (var clipUuid in actionsByClip) {

                    var actionByRoot = actionsByClip[clipUuid].actionByRoot,
                        action = actionByRoot[rootUuid];

                    if (action !== undefined) {

                        this._deactivateAction(action);
                        this._removeInactiveAction(action);

                    }

                }

                var bindingsByRoot = this._bindingsByRootAndName,
                    bindingByName = bindingsByRoot[rootUuid];

                if (bindingByName !== undefined) {

                    for (var trackName in bindingByName) {

                        var binding = bindingByName[trackName];
                        binding.restoreOriginalState();
                        this._removeInactiveBinding(binding);

                    }

                }

            },

            // remove a targeted clip from the cache
            uncacheAction: function(clip, optionalRoot) {

                var action = this.existingAction(clip, optionalRoot);

                if (action !== null) {

                    this._deactivateAction(action);
                    this._removeInactiveAction(action);

                }

            }

        };

        // Implementation details:

        Object.assign(AnimationMixer.prototype, {

            _bindAction: function(action, prototypeAction) {

                var root = action._localRoot || this._root,
                    tracks = action._clip.tracks,
                    nTracks = tracks.length,
                    bindings = action._propertyBindings,
                    interpolants = action._interpolants,
                    rootUuid = root.uuid,
                    bindingsByRoot = this._bindingsByRootAndName,
                    bindingsByName = bindingsByRoot[rootUuid];

                if (bindingsByName === undefined) {

                    bindingsByName = {};
                    bindingsByRoot[rootUuid] = bindingsByName;

                }

                for (var i = 0; i !== nTracks; ++i) {

                    var track = tracks[i],
                        trackName = track.name,
                        binding = bindingsByName[trackName];

                    if (binding !== undefined) {

                        bindings[i] = binding;

                    } else {

                        binding = bindings[i];

                        if (binding !== undefined) {

                            // existing binding, make sure the cache knows

                            if (binding._cacheIndex === null) {

                                ++binding.referenceCount;
                                this._addInactiveBinding(binding, rootUuid, trackName);

                            }

                            continue;

                        }

                        var path = prototypeAction && prototypeAction.
                        _propertyBindings[i].binding.parsedPath;

                        binding = new PropertyMixer(
                            PropertyBinding.create(root, trackName, path),
                            track.ValueTypeName, track.getValueSize());

                        ++binding.referenceCount;
                        this._addInactiveBinding(binding, rootUuid, trackName);

                        bindings[i] = binding;

                    }

                    interpolants[i].resultBuffer = binding.buffer;

                }

            },

            _activateAction: function(action) {

                if (!this._isActiveAction(action)) {

                    if (action._cacheIndex === null) {

                        // this action has been forgotten by the cache, but the user
                        // appears to be still using it -> rebind

                        var rootUuid = (action._localRoot || this._root).uuid,
                            clipUuid = action._clip.uuid,
                            actionsForClip = this._actionsByClip[clipUuid];

                        this._bindAction(action,
                            actionsForClip && actionsForClip.knownActions[0]);

                        this._addInactiveAction(action, clipUuid, rootUuid);

                    }

                    var bindings = action._propertyBindings;

                    // increment reference counts / sort out state
                    for (var i = 0, n = bindings.length; i !== n; ++i) {

                        var binding = bindings[i];

                        if (binding.useCount++ === 0) {

                            this._lendBinding(binding);
                            binding.saveOriginalState();

                        }

                    }

                    this._lendAction(action);

                }

            },

            _deactivateAction: function(action) {

                if (this._isActiveAction(action)) {

                    var bindings = action._propertyBindings;

                    // decrement reference counts / sort out state
                    for (var i = 0, n = bindings.length; i !== n; ++i) {

                        var binding = bindings[i];

                        if (--binding.useCount === 0) {

                            binding.restoreOriginalState();
                            this._takeBackBinding(binding);

                        }

                    }

                    this._takeBackAction(action);

                }

            },

            // Memory manager

            _initMemoryManager: function() {

                this._actions = []; // 'nActiveActions' followed by inactive ones
                this._nActiveActions = 0;

                this._actionsByClip = {};
                // inside:
                // {
                // 		knownActions: Array< AnimationAction >	- used as prototypes
                // 		actionByRoot: AnimationAction			- lookup
                // }


                this._bindings = []; // 'nActiveBindings' followed by inactive ones
                this._nActiveBindings = 0;

                this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


                this._controlInterpolants = []; // same game as above
                this._nActiveControlInterpolants = 0;

                var scope = this;

                this.stats = {

                    actions: {
                        get total() {
                            return scope._actions.length;
                        },
                        get inUse() {
                            return scope._nActiveActions;
                        }
                    },
                    bindings: {
                        get total() {
                            return scope._bindings.length;
                        },
                        get inUse() {
                            return scope._nActiveBindings;
                        }
                    },
                    controlInterpolants: {
                        get total() {
                            return scope._controlInterpolants.length;
                        },
                        get inUse() {
                            return scope._nActiveControlInterpolants;
                        }
                    }

                };

            },

            // Memory management for AnimationAction objects

            _isActiveAction: function(action) {

                var index = action._cacheIndex;
                return index !== null && index < this._nActiveActions;

            },

            _addInactiveAction: function(action, clipUuid, rootUuid) {

                var actions = this._actions,
                    actionsByClip = this._actionsByClip,
                    actionsForClip = actionsByClip[clipUuid];

                if (actionsForClip === undefined) {

                    actionsForClip = {

                        knownActions: [action],
                        actionByRoot: {}

                    };

                    action._byClipCacheIndex = 0;

                    actionsByClip[clipUuid] = actionsForClip;

                } else {

                    var knownActions = actionsForClip.knownActions;

                    action._byClipCacheIndex = knownActions.length;
                    knownActions.push(action);

                }

                action._cacheIndex = actions.length;
                actions.push(action);

                actionsForClip.actionByRoot[rootUuid] = action;

            },

            _removeInactiveAction: function(action) {

                var actions = this._actions,
                    lastInactiveAction = actions[actions.length - 1],
                    cacheIndex = action._cacheIndex;

                lastInactiveAction._cacheIndex = cacheIndex;
                actions[cacheIndex] = lastInactiveAction;
                actions.pop();

                action._cacheIndex = null;


                var clipUuid = action._clip.uuid,
                    actionsByClip = this._actionsByClip,
                    actionsForClip = actionsByClip[clipUuid],
                    knownActionsForClip = actionsForClip.knownActions,

                    lastKnownAction =
                    knownActionsForClip[knownActionsForClip.length - 1],

                    byClipCacheIndex = action._byClipCacheIndex;

                lastKnownAction._byClipCacheIndex = byClipCacheIndex;
                knownActionsForClip[byClipCacheIndex] = lastKnownAction;
                knownActionsForClip.pop();

                action._byClipCacheIndex = null;


                var actionByRoot = actionsForClip.actionByRoot,
                    rootUuid = (actions._localRoot || this._root).uuid;

                delete actionByRoot[rootUuid];

                if (knownActionsForClip.length === 0) {

                    delete actionsByClip[clipUuid];

                }

                this._removeInactiveBindingsForAction(action);

            },

            _removeInactiveBindingsForAction: function(action) {

                var bindings = action._propertyBindings;
                for (var i = 0, n = bindings.length; i !== n; ++i) {

                    var binding = bindings[i];

                    if (--binding.referenceCount === 0) {

                        this._removeInactiveBinding(binding);

                    }

                }

            },

            _lendAction: function(action) {

                // [ active actions |  inactive actions  ]
                // [  active actions >| inactive actions ]
                //                 s        a
                //                  <-swap->
                //                 a        s

                var actions = this._actions,
                    prevIndex = action._cacheIndex,

                    lastActiveIndex = this._nActiveActions++,

                    firstInactiveAction = actions[lastActiveIndex];

                action._cacheIndex = lastActiveIndex;
                actions[lastActiveIndex] = action;

                firstInactiveAction._cacheIndex = prevIndex;
                actions[prevIndex] = firstInactiveAction;

            },

            _takeBackAction: function(action) {

                // [  active actions  | inactive actions ]
                // [ active actions |< inactive actions  ]
                //        a        s
                //         <-swap->
                //        s        a

                var actions = this._actions,
                    prevIndex = action._cacheIndex,

                    firstInactiveIndex = --this._nActiveActions,

                    lastActiveAction = actions[firstInactiveIndex];

                action._cacheIndex = firstInactiveIndex;
                actions[firstInactiveIndex] = action;

                lastActiveAction._cacheIndex = prevIndex;
                actions[prevIndex] = lastActiveAction;

            },

            // Memory management for PropertyMixer objects

            _addInactiveBinding: function(binding, rootUuid, trackName) {

                var bindingsByRoot = this._bindingsByRootAndName,
                    bindingByName = bindingsByRoot[rootUuid],

                    bindings = this._bindings;

                if (bindingByName === undefined) {

                    bindingByName = {};
                    bindingsByRoot[rootUuid] = bindingByName;

                }

                bindingByName[trackName] = binding;

                binding._cacheIndex = bindings.length;
                bindings.push(binding);

            },

            _removeInactiveBinding: function(binding) {

                var bindings = this._bindings,
                    propBinding = binding.binding,
                    rootUuid = propBinding.rootNode.uuid,
                    trackName = propBinding.path,
                    bindingsByRoot = this._bindingsByRootAndName,
                    bindingByName = bindingsByRoot[rootUuid],

                    lastInactiveBinding = bindings[bindings.length - 1],
                    cacheIndex = binding._cacheIndex;

                lastInactiveBinding._cacheIndex = cacheIndex;
                bindings[cacheIndex] = lastInactiveBinding;
                bindings.pop();

                delete bindingByName[trackName];

                remove_empty_map: {

                    for (var _ in bindingByName) break remove_empty_map;

                    delete bindingsByRoot[rootUuid];

                }

            },

            _lendBinding: function(binding) {

                var bindings = this._bindings,
                    prevIndex = binding._cacheIndex,

                    lastActiveIndex = this._nActiveBindings++,

                    firstInactiveBinding = bindings[lastActiveIndex];

                binding._cacheIndex = lastActiveIndex;
                bindings[lastActiveIndex] = binding;

                firstInactiveBinding._cacheIndex = prevIndex;
                bindings[prevIndex] = firstInactiveBinding;

            },

            _takeBackBinding: function(binding) {

                var bindings = this._bindings,
                    prevIndex = binding._cacheIndex,

                    firstInactiveIndex = --this._nActiveBindings,

                    lastActiveBinding = bindings[firstInactiveIndex];

                binding._cacheIndex = firstInactiveIndex;
                bindings[firstInactiveIndex] = binding;

                lastActiveBinding._cacheIndex = prevIndex;
                bindings[prevIndex] = lastActiveBinding;

            },


            // Memory management of Interpolants for weight and time scale

            _lendControlInterpolant: function() {

                var interpolants = this._controlInterpolants,
                    lastActiveIndex = this._nActiveControlInterpolants++,
                    interpolant = interpolants[lastActiveIndex];

                if (interpolant === undefined) {

                    interpolant = new LinearInterpolant(
                        new Float32Array(2), new Float32Array(2),
                        1, this._controlInterpolantsResultBuffer);

                    interpolant.__cacheIndex = lastActiveIndex;
                    interpolants[lastActiveIndex] = interpolant;

                }

                return interpolant;

            },

            _takeBackControlInterpolant: function(interpolant) {

                var interpolants = this._controlInterpolants,
                    prevIndex = interpolant.__cacheIndex,

                    firstInactiveIndex = --this._nActiveControlInterpolants,

                    lastActiveInterpolant = interpolants[firstInactiveIndex];

                interpolant.__cacheIndex = firstInactiveIndex;
                interpolants[firstInactiveIndex] = interpolant;

                lastActiveInterpolant.__cacheIndex = prevIndex;
                interpolants[prevIndex] = lastActiveInterpolant;

            },

            _controlInterpolantsResultBuffer: new Float32Array(1)

        });

        Object.assign(AnimationMixer.prototype, EventDispatcher.prototype);

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function Uniform(value) {

            if (typeof value === 'string') {

                console.warn('THREE.Uniform: Type parameter is no longer needed.');
                value = arguments[1];

            }

            this.value = value;

        }

        Uniform.prototype.clone = function() {

            return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());

        };

        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         */

        function InstancedBufferGeometry() {

            BufferGeometry.call(this);

            this.type = 'InstancedBufferGeometry';
            this.maxInstancedCount = undefined;

        }

        InstancedBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
        InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;

        InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;

        InstancedBufferGeometry.prototype.addGroup = function(start, count, materialIndex) {

            this.groups.push({

                start: start,
                count: count,
                materialIndex: materialIndex

            });

        };

        InstancedBufferGeometry.prototype.copy = function(source) {

            var index = source.index;

            if (index !== null) {

                this.setIndex(index.clone());

            }

            var attributes = source.attributes;

            for (var name in attributes) {

                var attribute = attributes[name];
                this.addAttribute(name, attribute.clone());

            }

            var groups = source.groups;

            for (var i = 0, l = groups.length; i < l; i++) {

                var group = groups[i];
                this.addGroup(group.start, group.count, group.materialIndex);

            }

            return this;

        };

        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         */

        function InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {

            this.uuid = _Math.generateUUID();

            this.data = interleavedBuffer;
            this.itemSize = itemSize;
            this.offset = offset;

            this.normalized = normalized === true;

        }


        InterleavedBufferAttribute.prototype = {

            constructor: InterleavedBufferAttribute,

            isInterleavedBufferAttribute: true,

            get count() {

                return this.data.count;

            },

            get array() {

                return this.data.array;

            },

            setX: function(index, x) {

                this.data.array[index * this.data.stride + this.offset] = x;

                return this;

            },

            setY: function(index, y) {

                this.data.array[index * this.data.stride + this.offset + 1] = y;

                return this;

            },

            setZ: function(index, z) {

                this.data.array[index * this.data.stride + this.offset + 2] = z;

                return this;

            },

            setW: function(index, w) {

                this.data.array[index * this.data.stride + this.offset + 3] = w;

                return this;

            },

            getX: function(index) {

                return this.data.array[index * this.data.stride + this.offset];

            },

            getY: function(index) {

                return this.data.array[index * this.data.stride + this.offset + 1];

            },

            getZ: function(index) {

                return this.data.array[index * this.data.stride + this.offset + 2];

            },

            getW: function(index) {

                return this.data.array[index * this.data.stride + this.offset + 3];

            },

            setXY: function(index, x, y) {

                index = index * this.data.stride + this.offset;

                this.data.array[index + 0] = x;
                this.data.array[index + 1] = y;

                return this;

            },

            setXYZ: function(index, x, y, z) {

                index = index * this.data.stride + this.offset;

                this.data.array[index + 0] = x;
                this.data.array[index + 1] = y;
                this.data.array[index + 2] = z;

                return this;

            },

            setXYZW: function(index, x, y, z, w) {

                index = index * this.data.stride + this.offset;

                this.data.array[index + 0] = x;
                this.data.array[index + 1] = y;
                this.data.array[index + 2] = z;
                this.data.array[index + 3] = w;

                return this;

            }

        };

        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         */

        function InterleavedBuffer(array, stride) {

            this.uuid = _Math.generateUUID();

            this.array = array;
            this.stride = stride;
            this.count = array !== undefined ? array.length / stride : 0;

            this.dynamic = false;
            this.updateRange = {
                offset: 0,
                count: -1
            };

            this.onUploadCallback = function() {};

            this.version = 0;

        }

        InterleavedBuffer.prototype = {

            constructor: InterleavedBuffer,

            isInterleavedBuffer: true,

            set needsUpdate(value) {

                if (value === true) this.version++;

            },

            setArray: function(array) {

                if (Array.isArray(array)) {

                    throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');

                }

                this.count = array !== undefined ? array.length / this.stride : 0;
                this.array = array;

            },

            setDynamic: function(value) {

                this.dynamic = value;

                return this;

            },

            copy: function(source) {

                this.array = new source.array.constructor(source.array);
                this.count = source.count;
                this.stride = source.stride;
                this.dynamic = source.dynamic;

                return this;

            },

            copyAt: function(index1, attribute, index2) {

                index1 *= this.stride;
                index2 *= attribute.stride;

                for (var i = 0, l = this.stride; i < l; i++) {

                    this.array[index1 + i] = attribute.array[index2 + i];

                }

                return this;

            },

            set: function(value, offset) {

                if (offset === undefined) offset = 0;

                this.array.set(value, offset);

                return this;

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            onUpload: function(callback) {

                this.onUploadCallback = callback;

                return this;

            }

        };

        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         */

        function InstancedInterleavedBuffer(array, stride, meshPerAttribute) {

            InterleavedBuffer.call(this, array, stride);

            this.meshPerAttribute = meshPerAttribute || 1;

        }

        InstancedInterleavedBuffer.prototype = Object.create(InterleavedBuffer.prototype);
        InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;

        InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;

        InstancedInterleavedBuffer.prototype.copy = function(source) {

            InterleavedBuffer.prototype.copy.call(this, source);

            this.meshPerAttribute = source.meshPerAttribute;

            return this;

        };

        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         */

        function InstancedBufferAttribute(array, itemSize, meshPerAttribute) {

            BufferAttribute.call(this, array, itemSize);

            this.meshPerAttribute = meshPerAttribute || 1;

        }

        InstancedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);
        InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;

        InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;

        InstancedBufferAttribute.prototype.copy = function(source) {

            BufferAttribute.prototype.copy.call(this, source);

            this.meshPerAttribute = source.meshPerAttribute;

            return this;

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author bhouston / http://clara.io/
         * @author stephomi / http://stephaneginier.com/
         */

        function Raycaster(origin, direction, near, far) {

            this.ray = new Ray(origin, direction);
            // direction is assumed to be normalized (for accurate distance calculations)

            this.near = near || 0;
            this.far = far || Infinity;

            this.params = {
                Mesh: {},
                Line: {},
                LOD: {},
                Points: {
                    threshold: 1
                },
                Sprite: {}
            };

            Object.defineProperties(this.params, {
                PointCloud: {
                    get: function() {
                        console.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');
                        return this.Points;
                    }
                }
            });

        }

        function ascSort(a, b) {

            return a.distance - b.distance;

        }

        function intersectObject(object, raycaster, intersects, recursive) {

            if (object.visible === false) return;

            object.raycast(raycaster, intersects);

            if (recursive === true) {

                var children = object.children;

                for (var i = 0, l = children.length; i < l; i++) {

                    intersectObject(children[i], raycaster, intersects, true);

                }

            }

        }

        //

        Raycaster.prototype = {

            constructor: Raycaster,

            linePrecision: 1,

            set: function(origin, direction) {

                // direction is assumed to be normalized (for accurate distance calculations)

                this.ray.set(origin, direction);

            },

            setFromCamera: function(coords, camera) {

                if ((camera && camera.isPerspectiveCamera)) {

                    this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
                    this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();

                } else if ((camera && camera.isOrthographicCamera)) {

                    this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera
                    this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);

                } else {

                    console.error('THREE.Raycaster: Unsupported camera type.');

                }

            },

            intersectObject: function(object, recursive) {

                var intersects = [];

                intersectObject(object, this, intersects, recursive);

                intersects.sort(ascSort);

                return intersects;

            },

            intersectObjects: function(objects, recursive) {

                var intersects = [];

                if (Array.isArray(objects) === false) {

                    console.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');
                    return intersects;

                }

                for (var i = 0, l = objects.length; i < l; i++) {

                    intersectObject(objects[i], this, intersects, recursive);

                }

                intersects.sort(ascSort);

                return intersects;

            }

        };

        /**
         * @author alteredq / http://alteredqualia.com/
         */

        function Clock(autoStart) {

            this.autoStart = (autoStart !== undefined) ? autoStart : true;

            this.startTime = 0;
            this.oldTime = 0;
            this.elapsedTime = 0;

            this.running = false;

        }

        Clock.prototype = {

            constructor: Clock,

            start: function() {

                this.startTime = (performance || Date).now();

                this.oldTime = this.startTime;
                this.elapsedTime = 0;
                this.running = true;

            },

            stop: function() {

                this.getElapsedTime();
                this.running = false;

            },

            getElapsedTime: function() {

                this.getDelta();
                return this.elapsedTime;

            },

            getDelta: function() {

                var diff = 0;

                if (this.autoStart && !this.running) {

                    this.start();

                }

                if (this.running) {

                    var newTime = (performance || Date).now();

                    diff = (newTime - this.oldTime) / 1000;
                    this.oldTime = newTime;

                    this.elapsedTime += diff;

                }

                return diff;

            }

        };

        /**
         * @author bhouston / http://clara.io
         * @author WestLangley / http://github.com/WestLangley
         *
         * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
         *
         * The poles (phi) are at the positive and negative y axis.
         * The equator starts at positive z.
         */

        function Spherical(radius, phi, theta) {

            this.radius = (radius !== undefined) ? radius : 1.0;
            this.phi = (phi !== undefined) ? phi : 0; // up / down towards top and bottom pole
            this.theta = (theta !== undefined) ? theta : 0; // around the equator of the sphere

            return this;

        }

        Spherical.prototype = {

            constructor: Spherical,

            set: function(radius, phi, theta) {

                this.radius = radius;
                this.phi = phi;
                this.theta = theta;

                return this;

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(other) {

                this.radius = other.radius;
                this.phi = other.phi;
                this.theta = other.theta;

                return this;

            },

            // restrict phi to be betwee EPS and PI-EPS
            makeSafe: function() {

                var EPS = 0.000001;
                this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));

                return this;

            },

            setFromVector3: function(vec3) {

                this.radius = vec3.length();

                if (this.radius === 0) {

                    this.theta = 0;
                    this.phi = 0;

                } else {

                    this.theta = Math.atan2(vec3.x, vec3.z); // equator angle around y-up axis
                    this.phi = Math.acos(_Math.clamp(vec3.y / this.radius, -1, 1)); // polar angle

                }

                return this;

            }

        };

        /**
         * @author Mugen87 / https://github.com/Mugen87
         *
         * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
         *
         */

        function Cylindrical(radius, theta, y) {

            this.radius = (radius !== undefined) ? radius : 1.0; // distance from the origin to a point in the x-z plane
            this.theta = (theta !== undefined) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
            this.y = (y !== undefined) ? y : 0; // height above the x-z plane

            return this;

        }

        Cylindrical.prototype = {

            constructor: Cylindrical,

            set: function(radius, theta, y) {

                this.radius = radius;
                this.theta = theta;
                this.y = y;

                return this;

            },

            clone: function() {

                return new this.constructor().copy(this);

            },

            copy: function(other) {

                this.radius = other.radius;
                this.theta = other.theta;
                this.y = other.y;

                return this;

            },

            setFromVector3: function(vec3) {

                this.radius = Math.sqrt(vec3.x * vec3.x + vec3.z * vec3.z);
                this.theta = Math.atan2(vec3.x, vec3.z);
                this.y = vec3.y;

                return this;

            }

        };

        /**
         * @author alteredq / http://alteredqualia.com/
         */

        function MorphBlendMesh(geometry, material) {

            Mesh.call(this, geometry, material);

            this.animationsMap = {};
            this.animationsList = [];

            // prepare default animation
            // (all frames played together in 1 second)

            var numFrames = this.geometry.morphTargets.length;

            var name = "__default";

            var startFrame = 0;
            var endFrame = numFrames - 1;

            var fps = numFrames / 1;

            this.createAnimation(name, startFrame, endFrame, fps);
            this.setAnimationWeight(name, 1);

        }

        MorphBlendMesh.prototype = Object.create(Mesh.prototype);
        MorphBlendMesh.prototype.constructor = MorphBlendMesh;

        MorphBlendMesh.prototype.createAnimation = function(name, start, end, fps) {

            var animation = {

                start: start,
                end: end,

                length: end - start + 1,

                fps: fps,
                duration: (end - start) / fps,

                lastFrame: 0,
                currentFrame: 0,

                active: false,

                time: 0,
                direction: 1,
                weight: 1,

                directionBackwards: false,
                mirroredLoop: false

            };

            this.animationsMap[name] = animation;
            this.animationsList.push(animation);

        };

        MorphBlendMesh.prototype.autoCreateAnimations = function(fps) {

            var pattern = /([a-z]+)_?(\d+)/i;

            var firstAnimation, frameRanges = {};

            var geometry = this.geometry;

            for (var i = 0, il = geometry.morphTargets.length; i < il; i++) {

                var morph = geometry.morphTargets[i];
                var chunks = morph.name.match(pattern);

                if (chunks && chunks.length > 1) {

                    var name = chunks[1];

                    if (!frameRanges[name]) frameRanges[name] = {
                        start: Infinity,
                        end: -Infinity
                    };

                    var range = frameRanges[name];

                    if (i < range.start) range.start = i;
                    if (i > range.end) range.end = i;

                    if (!firstAnimation) firstAnimation = name;

                }

            }

            for (var name in frameRanges) {

                var range = frameRanges[name];
                this.createAnimation(name, range.start, range.end, fps);

            }

            this.firstAnimation = firstAnimation;

        };

        MorphBlendMesh.prototype.setAnimationDirectionForward = function(name) {

            var animation = this.animationsMap[name];

            if (animation) {

                animation.direction = 1;
                animation.directionBackwards = false;

            }

        };

        MorphBlendMesh.prototype.setAnimationDirectionBackward = function(name) {

            var animation = this.animationsMap[name];

            if (animation) {

                animation.direction = -1;
                animation.directionBackwards = true;

            }

        };

        MorphBlendMesh.prototype.setAnimationFPS = function(name, fps) {

            var animation = this.animationsMap[name];

            if (animation) {

                animation.fps = fps;
                animation.duration = (animation.end - animation.start) / animation.fps;

            }

        };

        MorphBlendMesh.prototype.setAnimationDuration = function(name, duration) {

            var animation = this.animationsMap[name];

            if (animation) {

                animation.duration = duration;
                animation.fps = (animation.end - animation.start) / animation.duration;

            }

        };

        MorphBlendMesh.prototype.setAnimationWeight = function(name, weight) {

            var animation = this.animationsMap[name];

            if (animation) {

                animation.weight = weight;

            }

        };

        MorphBlendMesh.prototype.setAnimationTime = function(name, time) {

            var animation = this.animationsMap[name];

            if (animation) {

                animation.time = time;

            }

        };

        MorphBlendMesh.prototype.getAnimationTime = function(name) {

            var time = 0;

            var animation = this.animationsMap[name];

            if (animation) {

                time = animation.time;

            }

            return time;

        };

        MorphBlendMesh.prototype.getAnimationDuration = function(name) {

            var duration = -1;

            var animation = this.animationsMap[name];

            if (animation) {

                duration = animation.duration;

            }

            return duration;

        };

        MorphBlendMesh.prototype.playAnimation = function(name) {

            var animation = this.animationsMap[name];

            if (animation) {

                animation.time = 0;
                animation.active = true;

            } else {

                console.warn("THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()");

            }

        };

        MorphBlendMesh.prototype.stopAnimation = function(name) {

            var animation = this.animationsMap[name];

            if (animation) {

                animation.active = false;

            }

        };

        MorphBlendMesh.prototype.update = function(delta) {

            for (var i = 0, il = this.animationsList.length; i < il; i++) {

                var animation = this.animationsList[i];

                if (!animation.active) continue;

                var frameTime = animation.duration / animation.length;

                animation.time += animation.direction * delta;

                if (animation.mirroredLoop) {

                    if (animation.time > animation.duration || animation.time < 0) {

                        animation.direction *= -1;

                        if (animation.time > animation.duration) {

                            animation.time = animation.duration;
                            animation.directionBackwards = true;

                        }

                        if (animation.time < 0) {

                            animation.time = 0;
                            animation.directionBackwards = false;

                        }

                    }

                } else {

                    animation.time = animation.time % animation.duration;

                    if (animation.time < 0) animation.time += animation.duration;

                }

                var keyframe = animation.start + _Math.clamp(Math.floor(animation.time / frameTime), 0, animation.length - 1);
                var weight = animation.weight;

                if (keyframe !== animation.currentFrame) {

                    this.morphTargetInfluences[animation.lastFrame] = 0;
                    this.morphTargetInfluences[animation.currentFrame] = 1 * weight;

                    this.morphTargetInfluences[keyframe] = 0;

                    animation.lastFrame = animation.currentFrame;
                    animation.currentFrame = keyframe;

                }

                var mix = (animation.time % frameTime) / frameTime;

                if (animation.directionBackwards) mix = 1 - mix;

                if (animation.currentFrame !== animation.lastFrame) {

                    this.morphTargetInfluences[animation.currentFrame] = mix * weight;
                    this.morphTargetInfluences[animation.lastFrame] = (1 - mix) * weight;

                } else {

                    this.morphTargetInfluences[animation.currentFrame] = weight;

                }

            }

        };

        /**
         * @author alteredq / http://alteredqualia.com/
         */

        function ImmediateRenderObject(material) {

            Object3D.call(this);

            this.material = material;
            this.render = function(renderCallback) {};

        }

        ImmediateRenderObject.prototype = Object.create(Object3D.prototype);
        ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

        ImmediateRenderObject.prototype.isImmediateRenderObject = true;

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         */

        function VertexNormalsHelper(object, size, hex, linewidth) {

            this.object = object;

            this.size = (size !== undefined) ? size : 1;

            var color = (hex !== undefined) ? hex : 0xff0000;

            var width = (linewidth !== undefined) ? linewidth : 1;

            //

            var nNormals = 0;

            var objGeometry = this.object.geometry;

            if (objGeometry && objGeometry.isGeometry) {

                nNormals = objGeometry.faces.length * 3;

            } else if (objGeometry && objGeometry.isBufferGeometry) {

                nNormals = objGeometry.attributes.normal.count;

            }

            //

            var geometry = new BufferGeometry();

            var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);

            geometry.addAttribute('position', positions);

            LineSegments.call(this, geometry, new LineBasicMaterial({
                color: color,
                linewidth: width
            }));

            //

            this.matrixAutoUpdate = false;

            this.update();

        }

        VertexNormalsHelper.prototype = Object.create(LineSegments.prototype);
        VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

        VertexNormalsHelper.prototype.update = (function() {

            var v1 = new Vector3();
            var v2 = new Vector3();
            var normalMatrix = new Matrix3();

            return function update() {

                var keys = ['a', 'b', 'c'];

                this.object.updateMatrixWorld(true);

                normalMatrix.getNormalMatrix(this.object.matrixWorld);

                var matrixWorld = this.object.matrixWorld;

                var position = this.geometry.attributes.position;

                //

                var objGeometry = this.object.geometry;

                if (objGeometry && objGeometry.isGeometry) {

                    var vertices = objGeometry.vertices;

                    var faces = objGeometry.faces;

                    var idx = 0;

                    for (var i = 0, l = faces.length; i < l; i++) {

                        var face = faces[i];

                        for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {

                            var vertex = vertices[face[keys[j]]];

                            var normal = face.vertexNormals[j];

                            v1.copy(vertex).applyMatrix4(matrixWorld);

                            v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);

                            position.setXYZ(idx, v1.x, v1.y, v1.z);

                            idx = idx + 1;

                            position.setXYZ(idx, v2.x, v2.y, v2.z);

                            idx = idx + 1;

                        }

                    }

                } else if (objGeometry && objGeometry.isBufferGeometry) {

                    var objPos = objGeometry.attributes.position;

                    var objNorm = objGeometry.attributes.normal;

                    var idx = 0;

                    // for simplicity, ignore index and drawcalls, and render every normal

                    for (var j = 0, jl = objPos.count; j < jl; j++) {

                        v1.set(objPos.getX(j), objPos.getY(j), objPos.getZ(j)).applyMatrix4(matrixWorld);

                        v2.set(objNorm.getX(j), objNorm.getY(j), objNorm.getZ(j));

                        v2.applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);

                        position.setXYZ(idx, v1.x, v1.y, v1.z);

                        idx = idx + 1;

                        position.setXYZ(idx, v2.x, v2.y, v2.z);

                        idx = idx + 1;

                    }

                }

                position.needsUpdate = true;

                return this;

            };

        }());

        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         */

        function SpotLightHelper(light) {

            Object3D.call(this);

            this.light = light;
            this.light.updateMatrixWorld();

            this.matrix = light.matrixWorld;
            this.matrixAutoUpdate = false;

            var geometry = new BufferGeometry();

            var positions = [
                0, 0, 0, 0, 0, 1,
                0, 0, 0, 1, 0, 1,
                0, 0, 0, -1, 0, 1,
                0, 0, 0, 0, 1, 1,
                0, 0, 0, 0, -1, 1
            ];

            for (var i = 0, j = 1, l = 32; i < l; i++, j++) {

                var p1 = (i / l) * Math.PI * 2;
                var p2 = (j / l) * Math.PI * 2;

                positions.push(
                    Math.cos(p1), Math.sin(p1), 1,
                    Math.cos(p2), Math.sin(p2), 1
                );

            }

            geometry.addAttribute('position', new Float32BufferAttribute(positions, 3));

            var material = new LineBasicMaterial({
                fog: false
            });

            this.cone = new LineSegments(geometry, material);
            this.add(this.cone);

            this.update();

        }

        SpotLightHelper.prototype = Object.create(Object3D.prototype);
        SpotLightHelper.prototype.constructor = SpotLightHelper;

        SpotLightHelper.prototype.dispose = function() {

            this.cone.geometry.dispose();
            this.cone.material.dispose();

        };

        SpotLightHelper.prototype.update = function() {

            var vector = new Vector3();
            var vector2 = new Vector3();

            return function update() {

                var coneLength = this.light.distance ? this.light.distance : 1000;
                var coneWidth = coneLength * Math.tan(this.light.angle);

                this.cone.scale.set(coneWidth, coneWidth, coneLength);

                vector.setFromMatrixPosition(this.light.matrixWorld);
                vector2.setFromMatrixPosition(this.light.target.matrixWorld);

                this.cone.lookAt(vector2.sub(vector));

                this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);

            };

        }();

        /**
         * @author Sean Griffin / http://twitter.com/sgrif
         * @author Michael Guerrero / http://realitymeltdown.com
         * @author mrdoob / http://mrdoob.com/
         * @author ikerr / http://verold.com
         * @author Mugen87 / https://github.com/Mugen87
         */

        function SkeletonHelper(object) {

            this.bones = this.getBoneList(object);

            var geometry = new BufferGeometry();

            var vertices = [];
            var colors = [];

            var color1 = new Color(0, 0, 1);
            var color2 = new Color(0, 1, 0);

            for (var i = 0; i < this.bones.length; i++) {

                var bone = this.bones[i];

                if (bone.parent && bone.parent.isBone) {

                    vertices.push(0, 0, 0);
                    vertices.push(0, 0, 0);
                    colors.push(color1.r, color1.g, color1.b);
                    colors.push(color2.r, color2.g, color2.b);

                }

            }

            geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));

            var material = new LineBasicMaterial({
                vertexColors: VertexColors,
                depthTest: false,
                depthWrite: false,
                transparent: true
            });

            LineSegments.call(this, geometry, material);

            this.root = object;

            this.matrix = object.matrixWorld;
            this.matrixAutoUpdate = false;

            this.update();

        }


        SkeletonHelper.prototype = Object.create(LineSegments.prototype);
        SkeletonHelper.prototype.constructor = SkeletonHelper;

        SkeletonHelper.prototype.getBoneList = function(object) {

            var boneList = [];

            if (object && object.isBone) {

                boneList.push(object);

            }

            for (var i = 0; i < object.children.length; i++) {

                boneList.push.apply(boneList, this.getBoneList(object.children[i]));

            }

            return boneList;

        };

        SkeletonHelper.prototype.update = function() {

            var vector = new Vector3();

            var boneMatrix = new Matrix4();
            var matrixWorldInv = new Matrix4();

            return function update() {

                var geometry = this.geometry;
                var position = geometry.getAttribute('position');

                matrixWorldInv.getInverse(this.root.matrixWorld);

                for (var i = 0, j = 0; i < this.bones.length; i++) {

                    var bone = this.bones[i];

                    if (bone.parent && bone.parent.isBone) {

                        boneMatrix.multiplyMatrices(matrixWorldInv, bone.matrixWorld);
                        vector.setFromMatrixPosition(boneMatrix);
                        position.setXYZ(j, vector.x, vector.y, vector.z);

                        boneMatrix.multiplyMatrices(matrixWorldInv, bone.parent.matrixWorld);
                        vector.setFromMatrixPosition(boneMatrix);
                        position.setXYZ(j + 1, vector.x, vector.y, vector.z);

                        j += 2;

                    }

                }

                geometry.getAttribute('position').needsUpdate = true;

            };

        }();

        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         */

        function PointLightHelper(light, sphereSize) {

            this.light = light;
            this.light.updateMatrixWorld();

            var geometry = new SphereBufferGeometry(sphereSize, 4, 2);
            var material = new MeshBasicMaterial({
                wireframe: true,
                fog: false
            });
            material.color.copy(this.light.color).multiplyScalar(this.light.intensity);

            Mesh.call(this, geometry, material);

            this.matrix = this.light.matrixWorld;
            this.matrixAutoUpdate = false;

            /*
            var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
            var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

            this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
            this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

            var d = light.distance;

            if ( d === 0.0 ) {

            	this.lightDistance.visible = false;

            } else {

            	this.lightDistance.scale.set( d, d, d );

            }

            this.add( this.lightDistance );
            */

        }

        PointLightHelper.prototype = Object.create(Mesh.prototype);
        PointLightHelper.prototype.constructor = PointLightHelper;

        PointLightHelper.prototype.dispose = function() {

            this.geometry.dispose();
            this.material.dispose();

        };

        PointLightHelper.prototype.update = function() {

            this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);

            /*
            var d = this.light.distance;

            if ( d === 0.0 ) {

            	this.lightDistance.visible = false;

            } else {

            	this.lightDistance.visible = true;
            	this.lightDistance.scale.set( d, d, d );

            }
            */

        };

        /**
         * @author abelnation / http://github.com/abelnation
         * @author Mugen87 / http://github.com/Mugen87
         */

        function RectAreaLightHelper(light) {

            Object3D.call(this);

            this.light = light;
            this.light.updateMatrixWorld();

            var materialFront = new MeshBasicMaterial({
                color: light.color,
                fog: false
            });

            var materialBack = new MeshBasicMaterial({
                color: light.color,
                fog: false,
                wireframe: true
            });

            var geometry = new BufferGeometry();

            geometry.addAttribute('position', new BufferAttribute(new Float32Array(6 * 3), 3));

            // shows the "front" of the light, e.g. where light comes from

            this.add(new Mesh(geometry, materialFront));

            // shows the "back" of the light, which does not emit light

            this.add(new Mesh(geometry, materialBack));

            this.update();

        }

        RectAreaLightHelper.prototype = Object.create(Object3D.prototype);
        RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;

        RectAreaLightHelper.prototype.dispose = function() {

            this.children[0].geometry.dispose();
            this.children[0].material.dispose();
            this.children[1].geometry.dispose();
            this.children[1].material.dispose();

        };

        RectAreaLightHelper.prototype.update = function() {

            var vector1 = new Vector3();
            var vector2 = new Vector3();

            return function update() {

                var mesh1 = this.children[0];
                var mesh2 = this.children[1];

                if (this.light.target) {

                    vector1.setFromMatrixPosition(this.light.matrixWorld);
                    vector2.setFromMatrixPosition(this.light.target.matrixWorld);

                    var lookVec = vector2.clone().sub(vector1);
                    mesh1.lookAt(lookVec);
                    mesh2.lookAt(lookVec);

                }

                // update materials

                mesh1.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
                mesh2.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);

                // calculate new dimensions of the helper

                var hx = this.light.width * 0.5;
                var hy = this.light.height * 0.5;

                // because the buffer attribute is shared over both geometries, we only have to update once

                var position = mesh1.geometry.getAttribute('position');
                var array = position.array;

                // first face

                array[0] = hx;
                array[1] = -hy;
                array[2] = 0;
                array[3] = hx;
                array[4] = hy;
                array[5] = 0;
                array[6] = -hx;
                array[7] = hy;
                array[8] = 0;

                // second face

                array[9] = -hx;
                array[10] = hy;
                array[11] = 0;
                array[12] = -hx;
                array[13] = -hy;
                array[14] = 0;
                array[15] = hx;
                array[16] = -hy;
                array[17] = 0;

                position.needsUpdate = true;

            };

        }();

        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / https://github.com/Mugen87
         */

        function HemisphereLightHelper(light, size) {

            Object3D.call(this);

            this.light = light;
            this.light.updateMatrixWorld();

            this.matrix = light.matrixWorld;
            this.matrixAutoUpdate = false;

            var geometry = new OctahedronBufferGeometry(size);
            geometry.rotateY(Math.PI * 0.5);

            var material = new MeshBasicMaterial({
                vertexColors: VertexColors,
                wireframe: true
            });

            var position = geometry.getAttribute('position');
            var colors = new Float32Array(position.count * 3);

            geometry.addAttribute('color', new BufferAttribute(colors, 3));

            this.add(new Mesh(geometry, material));

            this.update();

        }

        HemisphereLightHelper.prototype = Object.create(Object3D.prototype);
        HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

        HemisphereLightHelper.prototype.dispose = function() {

            this.children[0].geometry.dispose();
            this.children[0].material.dispose();

        };

        HemisphereLightHelper.prototype.update = function() {

            var vector = new Vector3();

            var color1 = new Color();
            var color2 = new Color();

            return function update() {

                var mesh = this.children[0];

                var colors = mesh.geometry.getAttribute('color');

                color1.copy(this.light.color).multiplyScalar(this.light.intensity);
                color2.copy(this.light.groundColor).multiplyScalar(this.light.intensity);

                for (var i = 0, l = colors.count; i < l; i++) {

                    var color = (i < (l / 2)) ? color1 : color2;

                    colors.setXYZ(i, color.r, color.g, color.b);

                }

                mesh.lookAt(vector.setFromMatrixPosition(this.light.matrixWorld).negate());

                colors.needsUpdate = true;

            };

        }();

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function GridHelper(size, divisions, color1, color2) {

            size = size || 10;
            divisions = divisions || 10;
            color1 = new Color(color1 !== undefined ? color1 : 0x444444);
            color2 = new Color(color2 !== undefined ? color2 : 0x888888);

            var center = divisions / 2;
            var step = size / divisions;
            var halfSize = size / 2;

            var vertices = [],
                colors = [];

            for (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {

                vertices.push(-halfSize, 0, k, halfSize, 0, k);
                vertices.push(k, 0, -halfSize, k, 0, halfSize);

                var color = i === center ? color1 : color2;

                color.toArray(colors, j);
                j += 3;
                color.toArray(colors, j);
                j += 3;
                color.toArray(colors, j);
                j += 3;
                color.toArray(colors, j);
                j += 3;

            }

            var geometry = new BufferGeometry();
            geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));

            var material = new LineBasicMaterial({
                vertexColors: VertexColors
            });

            LineSegments.call(this, geometry, material);

        }

        GridHelper.prototype = Object.create(LineSegments.prototype);
        GridHelper.prototype.constructor = GridHelper;

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / http://github.com/Mugen87
         * @author Hectate / http://www.github.com/Hectate
         */

        function PolarGridHelper(radius, radials, circles, divisions, color1, color2) {

            radius = radius || 10;
            radials = radials || 16;
            circles = circles || 8;
            divisions = divisions || 64;
            color1 = new Color(color1 !== undefined ? color1 : 0x444444);
            color2 = new Color(color2 !== undefined ? color2 : 0x888888);

            var vertices = [];
            var colors = [];

            var x, z;
            var v, i, j, r, color;

            // create the radials

            for (i = 0; i <= radials; i++) {

                v = (i / radials) * (Math.PI * 2);

                x = Math.sin(v) * radius;
                z = Math.cos(v) * radius;

                vertices.push(0, 0, 0);
                vertices.push(x, 0, z);

                color = (i & 1) ? color1 : color2;

                colors.push(color.r, color.g, color.b);
                colors.push(color.r, color.g, color.b);

            }

            // create the circles

            for (i = 0; i <= circles; i++) {

                color = (i & 1) ? color1 : color2;

                r = radius - (radius / circles * i);

                for (j = 0; j < divisions; j++) {

                    // first vertex

                    v = (j / divisions) * (Math.PI * 2);

                    x = Math.sin(v) * r;
                    z = Math.cos(v) * r;

                    vertices.push(x, 0, z);
                    colors.push(color.r, color.g, color.b);

                    // second vertex

                    v = ((j + 1) / divisions) * (Math.PI * 2);

                    x = Math.sin(v) * r;
                    z = Math.cos(v) * r;

                    vertices.push(x, 0, z);
                    colors.push(color.r, color.g, color.b);

                }

            }

            var geometry = new BufferGeometry();
            geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));

            var material = new LineBasicMaterial({
                vertexColors: VertexColors
            });

            LineSegments.call(this, geometry, material);

        }

        PolarGridHelper.prototype = Object.create(LineSegments.prototype);
        PolarGridHelper.prototype.constructor = PolarGridHelper;

        /**
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         */

        function FaceNormalsHelper(object, size, hex, linewidth) {

            // FaceNormalsHelper only supports THREE.Geometry

            this.object = object;

            this.size = (size !== undefined) ? size : 1;

            var color = (hex !== undefined) ? hex : 0xffff00;

            var width = (linewidth !== undefined) ? linewidth : 1;

            //

            var nNormals = 0;

            var objGeometry = this.object.geometry;

            if (objGeometry && objGeometry.isGeometry) {

                nNormals = objGeometry.faces.length;

            } else {

                console.warn('THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.');

            }

            //

            var geometry = new BufferGeometry();

            var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);

            geometry.addAttribute('position', positions);

            LineSegments.call(this, geometry, new LineBasicMaterial({
                color: color,
                linewidth: width
            }));

            //

            this.matrixAutoUpdate = false;
            this.update();

        }

        FaceNormalsHelper.prototype = Object.create(LineSegments.prototype);
        FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

        FaceNormalsHelper.prototype.update = (function() {

            var v1 = new Vector3();
            var v2 = new Vector3();
            var normalMatrix = new Matrix3();

            return function update() {

                this.object.updateMatrixWorld(true);

                normalMatrix.getNormalMatrix(this.object.matrixWorld);

                var matrixWorld = this.object.matrixWorld;

                var position = this.geometry.attributes.position;

                //

                var objGeometry = this.object.geometry;

                var vertices = objGeometry.vertices;

                var faces = objGeometry.faces;

                var idx = 0;

                for (var i = 0, l = faces.length; i < l; i++) {

                    var face = faces[i];

                    var normal = face.normal;

                    v1.copy(vertices[face.a])
                        .add(vertices[face.b])
                        .add(vertices[face.c])
                        .divideScalar(3)
                        .applyMatrix4(matrixWorld);

                    v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);

                    position.setXYZ(idx, v1.x, v1.y, v1.z);

                    idx = idx + 1;

                    position.setXYZ(idx, v2.x, v2.y, v2.z);

                    idx = idx + 1;

                }

                position.needsUpdate = true;

                return this;

            };

        }());

        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         */

        function DirectionalLightHelper(light, size) {

            Object3D.call(this);

            this.light = light;
            this.light.updateMatrixWorld();

            this.matrix = light.matrixWorld;
            this.matrixAutoUpdate = false;

            if (size === undefined) size = 1;

            var geometry = new BufferGeometry();
            geometry.addAttribute('position', new Float32BufferAttribute([-size, size, 0,
                size, size, 0,
                size, -size, 0, -size, -size, 0, -size, size, 0
            ], 3));

            var material = new LineBasicMaterial({
                fog: false
            });

            this.add(new Line(geometry, material));

            geometry = new BufferGeometry();
            geometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));

            this.add(new Line(geometry, material));

            this.update();

        }

        DirectionalLightHelper.prototype = Object.create(Object3D.prototype);
        DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

        DirectionalLightHelper.prototype.dispose = function() {

            var lightPlane = this.children[0];
            var targetLine = this.children[1];

            lightPlane.geometry.dispose();
            lightPlane.material.dispose();
            targetLine.geometry.dispose();
            targetLine.material.dispose();

        };

        DirectionalLightHelper.prototype.update = function() {

            var v1 = new Vector3();
            var v2 = new Vector3();
            var v3 = new Vector3();

            return function update() {

                v1.setFromMatrixPosition(this.light.matrixWorld);
                v2.setFromMatrixPosition(this.light.target.matrixWorld);
                v3.subVectors(v2, v1);

                var lightPlane = this.children[0];
                var targetLine = this.children[1];

                lightPlane.lookAt(v3);
                lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);

                targetLine.lookAt(v3);
                targetLine.scale.z = v3.length();

            };

        }();

        /**
         * @author alteredq / http://alteredqualia.com/
         * @author Mugen87 / https://github.com/Mugen87
         *
         *	- shows frustum, line of sight and up of the camera
         *	- suitable for fast updates
         * 	- based on frustum visualization in lightgl.js shadowmap example
         *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
         */

        function CameraHelper(camera) {

            var geometry = new BufferGeometry();
            var material = new LineBasicMaterial({
                color: 0xffffff,
                vertexColors: FaceColors
            });

            var vertices = [];
            var colors = [];

            var pointMap = {};

            // colors

            var colorFrustum = new Color(0xffaa00);
            var colorCone = new Color(0xff0000);
            var colorUp = new Color(0x00aaff);
            var colorTarget = new Color(0xffffff);
            var colorCross = new Color(0x333333);

            // near

            addLine("n1", "n2", colorFrustum);
            addLine("n2", "n4", colorFrustum);
            addLine("n4", "n3", colorFrustum);
            addLine("n3", "n1", colorFrustum);

            // far

            addLine("f1", "f2", colorFrustum);
            addLine("f2", "f4", colorFrustum);
            addLine("f4", "f3", colorFrustum);
            addLine("f3", "f1", colorFrustum);

            // sides

            addLine("n1", "f1", colorFrustum);
            addLine("n2", "f2", colorFrustum);
            addLine("n3", "f3", colorFrustum);
            addLine("n4", "f4", colorFrustum);

            // cone

            addLine("p", "n1", colorCone);
            addLine("p", "n2", colorCone);
            addLine("p", "n3", colorCone);
            addLine("p", "n4", colorCone);

            // up

            addLine("u1", "u2", colorUp);
            addLine("u2", "u3", colorUp);
            addLine("u3", "u1", colorUp);

            // target

            addLine("c", "t", colorTarget);
            addLine("p", "c", colorCross);

            // cross

            addLine("cn1", "cn2", colorCross);
            addLine("cn3", "cn4", colorCross);

            addLine("cf1", "cf2", colorCross);
            addLine("cf3", "cf4", colorCross);

            function addLine(a, b, color) {

                addPoint(a, color);
                addPoint(b, color);

            }

            function addPoint(id, color) {

                vertices.push(0, 0, 0);
                colors.push(color.r, color.g, color.b);

                if (pointMap[id] === undefined) {

                    pointMap[id] = [];

                }

                pointMap[id].push((vertices.length / 3) - 1);

            }

            geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));

            LineSegments.call(this, geometry, material);

            this.camera = camera;
            if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();

            this.matrix = camera.matrixWorld;
            this.matrixAutoUpdate = false;

            this.pointMap = pointMap;

            this.update();

        }

        CameraHelper.prototype = Object.create(LineSegments.prototype);
        CameraHelper.prototype.constructor = CameraHelper;

        CameraHelper.prototype.update = function() {

            var geometry, pointMap;

            var vector = new Vector3();
            var camera = new Camera();

            function setPoint(point, x, y, z) {

                vector.set(x, y, z).unproject(camera);

                var points = pointMap[point];

                if (points !== undefined) {

                    var position = geometry.getAttribute('position');

                    for (var i = 0, l = points.length; i < l; i++) {

                        position.setXYZ(points[i], vector.x, vector.y, vector.z);

                    }

                }

            }

            return function update() {

                geometry = this.geometry;
                pointMap = this.pointMap;

                var w = 1,
                    h = 1;

                // we need just camera projection matrix
                // world matrix must be identity

                camera.projectionMatrix.copy(this.camera.projectionMatrix);

                // center / target

                setPoint("c", 0, 0, -1);
                setPoint("t", 0, 0, 1);

                // near

                setPoint("n1", -w, -h, -1);
                setPoint("n2", w, -h, -1);
                setPoint("n3", -w, h, -1);
                setPoint("n4", w, h, -1);

                // far

                setPoint("f1", -w, -h, 1);
                setPoint("f2", w, -h, 1);
                setPoint("f3", -w, h, 1);
                setPoint("f4", w, h, 1);

                // up

                setPoint("u1", w * 0.7, h * 1.1, -1);
                setPoint("u2", -w * 0.7, h * 1.1, -1);
                setPoint("u3", 0, h * 2, -1);

                // cross

                setPoint("cf1", -w, 0, 1);
                setPoint("cf2", w, 0, 1);
                setPoint("cf3", 0, -h, 1);
                setPoint("cf4", 0, h, 1);

                setPoint("cn1", -w, 0, -1);
                setPoint("cn2", w, 0, -1);
                setPoint("cn3", 0, -h, -1);
                setPoint("cn4", 0, h, -1);

                geometry.getAttribute('position').needsUpdate = true;

            };

        }();

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function BoxHelper(object, color) {

            if (color === undefined) color = 0xffff00;

            var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
            var positions = new Float32Array(8 * 3);

            var geometry = new BufferGeometry();
            geometry.setIndex(new BufferAttribute(indices, 1));
            geometry.addAttribute('position', new BufferAttribute(positions, 3));

            LineSegments.call(this, geometry, new LineBasicMaterial({
                color: color
            }));

            if (object !== undefined) {

                this.update(object);

            }

        }

        BoxHelper.prototype = Object.create(LineSegments.prototype);
        BoxHelper.prototype.constructor = BoxHelper;

        BoxHelper.prototype.update = (function() {

            var box = new Box3();

            return function update(object) {

                if (object && object.isBox3) {

                    box.copy(object);

                } else {

                    box.setFromObject(object);

                }

                if (box.isEmpty()) return;

                var min = box.min;
                var max = box.max;

                /*
                  5____4
                1/___0/|
                | 6__|_7
                2/___3/

                0: max.x, max.y, max.z
                1: min.x, max.y, max.z
                2: min.x, min.y, max.z
                3: max.x, min.y, max.z
                4: max.x, max.y, min.z
                5: min.x, max.y, min.z
                6: min.x, min.y, min.z
                7: max.x, min.y, min.z
                */

                var position = this.geometry.attributes.position;
                var array = position.array;

                array[0] = max.x;
                array[1] = max.y;
                array[2] = max.z;
                array[3] = min.x;
                array[4] = max.y;
                array[5] = max.z;
                array[6] = min.x;
                array[7] = min.y;
                array[8] = max.z;
                array[9] = max.x;
                array[10] = min.y;
                array[11] = max.z;
                array[12] = max.x;
                array[13] = max.y;
                array[14] = min.z;
                array[15] = min.x;
                array[16] = max.y;
                array[17] = min.z;
                array[18] = min.x;
                array[19] = min.y;
                array[20] = min.z;
                array[21] = max.x;
                array[22] = min.y;
                array[23] = min.z;

                position.needsUpdate = true;

                this.geometry.computeBoundingSphere();

            };

        })();

        /**
         * @author WestLangley / http://github.com/WestLangley
         * @author zz85 / http://github.com/zz85
         * @author bhouston / http://clara.io
         *
         * Creates an arrow for visualizing directions
         *
         * Parameters:
         *  dir - Vector3
         *  origin - Vector3
         *  length - Number
         *  color - color in hex value
         *  headLength - Number
         *  headWidth - Number
         */

        var lineGeometry;
        var coneGeometry;

        function ArrowHelper(dir, origin, length, color, headLength, headWidth) {

            // dir is assumed to be normalized

            Object3D.call(this);

            if (color === undefined) color = 0xffff00;
            if (length === undefined) length = 1;
            if (headLength === undefined) headLength = 0.2 * length;
            if (headWidth === undefined) headWidth = 0.2 * headLength;

            if (lineGeometry === undefined) {

                lineGeometry = new BufferGeometry();
                lineGeometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));

                coneGeometry = new CylinderBufferGeometry(0, 0.5, 1, 5, 1);
                coneGeometry.translate(0, -0.5, 0);

            }

            this.position.copy(origin);

            this.line = new Line(lineGeometry, new LineBasicMaterial({
                color: color
            }));
            this.line.matrixAutoUpdate = false;
            this.add(this.line);

            this.cone = new Mesh(coneGeometry, new MeshBasicMaterial({
                color: color
            }));
            this.cone.matrixAutoUpdate = false;
            this.add(this.cone);

            this.setDirection(dir);
            this.setLength(length, headLength, headWidth);

        }

        ArrowHelper.prototype = Object.create(Object3D.prototype);
        ArrowHelper.prototype.constructor = ArrowHelper;

        ArrowHelper.prototype.setDirection = (function() {

            var axis = new Vector3();
            var radians;

            return function setDirection(dir) {

                // dir is assumed to be normalized

                if (dir.y > 0.99999) {

                    this.quaternion.set(0, 0, 0, 1);

                } else if (dir.y < -0.99999) {

                    this.quaternion.set(1, 0, 0, 0);

                } else {

                    axis.set(dir.z, 0, -dir.x).normalize();

                    radians = Math.acos(dir.y);

                    this.quaternion.setFromAxisAngle(axis, radians);

                }

            };

        }());

        ArrowHelper.prototype.setLength = function(length, headLength, headWidth) {

            if (headLength === undefined) headLength = 0.2 * length;
            if (headWidth === undefined) headWidth = 0.2 * headLength;

            this.line.scale.set(1, Math.max(0, length - headLength), 1);
            this.line.updateMatrix();

            this.cone.scale.set(headWidth, headLength, headWidth);
            this.cone.position.y = length;
            this.cone.updateMatrix();

        };

        ArrowHelper.prototype.setColor = function(color) {

            this.line.material.color.copy(color);
            this.cone.material.color.copy(color);

        };

        /**
         * @author sroucheray / http://sroucheray.org/
         * @author mrdoob / http://mrdoob.com/
         */

        function AxisHelper(size) {

            size = size || 1;

            var vertices = [
                0, 0, 0, size, 0, 0,
                0, 0, 0, 0, size, 0,
                0, 0, 0, 0, 0, size
            ];

            var colors = [
                1, 0, 0, 1, 0.6, 0,
                0, 1, 0, 0.6, 1, 0,
                0, 0, 1, 0, 0.6, 1
            ];

            var geometry = new BufferGeometry();
            geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));
            geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));

            var material = new LineBasicMaterial({
                vertexColors: VertexColors
            });

            LineSegments.call(this, geometry, material);

        }

        AxisHelper.prototype = Object.create(LineSegments.prototype);
        AxisHelper.prototype.constructor = AxisHelper;

        /**
         * @author zz85 https://github.com/zz85
         *
         * Centripetal CatmullRom Curve - which is useful for avoiding
         * cusps and self-intersections in non-uniform catmull rom curves.
         * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
         *
         * curve.type accepts centripetal(default), chordal and catmullrom
         * curve.tension is used for catmullrom which defaults to 0.5
         */


        /*
        Based on an optimized c++ solution in
         - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
         - http://ideone.com/NoEbVM

        This CubicPoly class could be used for reusing some variables and calculations,
        but for three.js curve use, it could be possible inlined and flatten into a single function call
        which can be placed in CurveUtils.
        */

        function CubicPoly() {

            var c0 = 0,
                c1 = 0,
                c2 = 0,
                c3 = 0;

            /*
             * Compute coefficients for a cubic polynomial
             *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
             * such that
             *   p(0) = x0, p(1) = x1
             *  and
             *   p'(0) = t0, p'(1) = t1.
             */
            function init(x0, x1, t0, t1) {

                c0 = x0;
                c1 = t0;
                c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
                c3 = 2 * x0 - 2 * x1 + t0 + t1;

            }

            return {

                initCatmullRom: function(x0, x1, x2, x3, tension) {

                    init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));

                },

                initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {

                    // compute tangents when parameterized in [t1,t2]
                    var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
                    var t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;

                    // rescale tangents for parametrization in [0,1]
                    t1 *= dt1;
                    t2 *= dt1;

                    init(x1, x2, t1, t2);

                },

                calc: function(t) {

                    var t2 = t * t;
                    var t3 = t2 * t;
                    return c0 + c1 * t + c2 * t2 + c3 * t3;

                }

            };

        }

        //

        var tmp = new Vector3();
        var px = new CubicPoly();
        var py = new CubicPoly();
        var pz = new CubicPoly();

        function CatmullRomCurve3(p /* array of Vector3 */ ) {

            this.points = p || [];
            this.closed = false;

        }

        CatmullRomCurve3.prototype = Object.create(Curve.prototype);
        CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

        CatmullRomCurve3.prototype.getPoint = function(t) {

            var points = this.points;
            var l = points.length;

            if (l < 2) console.log('duh, you need at least 2 points');

            var point = (l - (this.closed ? 0 : 1)) * t;
            var intPoint = Math.floor(point);
            var weight = point - intPoint;

            if (this.closed) {

                intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / points.length) + 1) * points.length;

            } else if (weight === 0 && intPoint === l - 1) {

                intPoint = l - 2;
                weight = 1;

            }

            var p0, p1, p2, p3; // 4 points

            if (this.closed || intPoint > 0) {

                p0 = points[(intPoint - 1) % l];

            } else {

                // extrapolate first point
                tmp.subVectors(points[0], points[1]).add(points[0]);
                p0 = tmp;

            }

            p1 = points[intPoint % l];
            p2 = points[(intPoint + 1) % l];

            if (this.closed || intPoint + 2 < l) {

                p3 = points[(intPoint + 2) % l];

            } else {

                // extrapolate last point
                tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
                p3 = tmp;

            }

            if (this.type === undefined || this.type === 'centripetal' || this.type === 'chordal') {

                // init Centripetal / Chordal Catmull-Rom
                var pow = this.type === 'chordal' ? 0.5 : 0.25;
                var dt0 = Math.pow(p0.distanceToSquared(p1), pow);
                var dt1 = Math.pow(p1.distanceToSquared(p2), pow);
                var dt2 = Math.pow(p2.distanceToSquared(p3), pow);

                // safety check for repeated points
                if (dt1 < 1e-4) dt1 = 1.0;
                if (dt0 < 1e-4) dt0 = dt1;
                if (dt2 < 1e-4) dt2 = dt1;

                px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
                py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
                pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);

            } else if (this.type === 'catmullrom') {

                var tension = this.tension !== undefined ? this.tension : 0.5;
                px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, tension);
                py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, tension);
                pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, tension);

            }

            return new Vector3(px.calc(weight), py.calc(weight), pz.calc(weight));

        };

        function CubicBezierCurve3(v0, v1, v2, v3) {

            this.v0 = v0;
            this.v1 = v1;
            this.v2 = v2;
            this.v3 = v3;

        }

        CubicBezierCurve3.prototype = Object.create(Curve.prototype);
        CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

        CubicBezierCurve3.prototype.getPoint = function(t) {

            var v0 = this.v0,
                v1 = this.v1,
                v2 = this.v2,
                v3 = this.v3;

            return new Vector3(
                CubicBezier(t, v0.x, v1.x, v2.x, v3.x),
                CubicBezier(t, v0.y, v1.y, v2.y, v3.y),
                CubicBezier(t, v0.z, v1.z, v2.z, v3.z)
            );

        };

        function QuadraticBezierCurve3(v0, v1, v2) {

            this.v0 = v0;
            this.v1 = v1;
            this.v2 = v2;

        }

        QuadraticBezierCurve3.prototype = Object.create(Curve.prototype);
        QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

        QuadraticBezierCurve3.prototype.getPoint = function(t) {

            var v0 = this.v0,
                v1 = this.v1,
                v2 = this.v2;

            return new Vector3(
                QuadraticBezier(t, v0.x, v1.x, v2.x),
                QuadraticBezier(t, v0.y, v1.y, v2.y),
                QuadraticBezier(t, v0.z, v1.z, v2.z)
            );

        };

        function LineCurve3(v1, v2) {

            this.v1 = v1;
            this.v2 = v2;

        }

        LineCurve3.prototype = Object.create(Curve.prototype);
        LineCurve3.prototype.constructor = LineCurve3;

        LineCurve3.prototype.getPoint = function(t) {

            if (t === 1) {

                return this.v2.clone();

            }

            var vector = new Vector3();

            vector.subVectors(this.v2, this.v1); // diff
            vector.multiplyScalar(t);
            vector.add(this.v1);

            return vector;

        };

        function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {

            EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);

        }

        ArcCurve.prototype = Object.create(EllipseCurve.prototype);
        ArcCurve.prototype.constructor = ArcCurve;

        /**
         * @author alteredq / http://alteredqualia.com/
         */

        var SceneUtils = {

            createMultiMaterialObject: function(geometry, materials) {

                var group = new Group();

                for (var i = 0, l = materials.length; i < l; i++) {

                    group.add(new Mesh(geometry, materials[i]));

                }

                return group;

            },

            detach: function(child, parent, scene) {

                child.applyMatrix(parent.matrixWorld);
                parent.remove(child);
                scene.add(child);

            },

            attach: function(child, scene, parent) {

                var matrixWorldInverse = new Matrix4();
                matrixWorldInverse.getInverse(parent.matrixWorld);
                child.applyMatrix(matrixWorldInverse);

                scene.remove(child);
                parent.add(child);

            }

        };

        /**
         * @author mrdoob / http://mrdoob.com/
         */

        function Face4(a, b, c, d, normal, color, materialIndex) {

            console.warn('THREE.Face4 has been removed. A THREE.Face3 will be created instead.');
            return new Face3(a, b, c, normal, color, materialIndex);

        }

        var LineStrip = 0;

        var LinePieces = 1;

        function MeshFaceMaterial(materials) {

            console.warn('THREE.MeshFaceMaterial has been renamed to THREE.MultiMaterial.');
            return new MultiMaterial(materials);

        }

        function PointCloud(geometry, material) {

            console.warn('THREE.PointCloud has been renamed to THREE.Points.');
            return new Points(geometry, material);

        }

        function Particle(material) {

            console.warn('THREE.Particle has been renamed to THREE.Sprite.');
            return new Sprite(material);

        }

        function ParticleSystem(geometry, material) {

            console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');
            return new Points(geometry, material);

        }

        function PointCloudMaterial(parameters) {

            console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');
            return new PointsMaterial(parameters);

        }

        function ParticleBasicMaterial(parameters) {

            console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');
            return new PointsMaterial(parameters);

        }

        function ParticleSystemMaterial(parameters) {

            console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');
            return new PointsMaterial(parameters);

        }

        function Vertex(x, y, z) {

            console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');
            return new Vector3(x, y, z);

        }

        //

        function DynamicBufferAttribute(array, itemSize) {

            console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.');
            return new BufferAttribute(array, itemSize).setDynamic(true);

        }

        function Int8Attribute(array, itemSize) {

            console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');
            return new Int8BufferAttribute(array, itemSize);

        }

        function Uint8Attribute(array, itemSize) {

            console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');
            return new Uint8BufferAttribute(array, itemSize);

        }

        function Uint8ClampedAttribute(array, itemSize) {

            console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');
            return new Uint8ClampedBufferAttribute(array, itemSize);

        }

        function Int16Attribute(array, itemSize) {

            console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');
            return new Int16BufferAttribute(array, itemSize);

        }

        function Uint16Attribute(array, itemSize) {

            console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');
            return new Uint16BufferAttribute(array, itemSize);

        }

        function Int32Attribute(array, itemSize) {

            console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');
            return new Int32BufferAttribute(array, itemSize);

        }

        function Uint32Attribute(array, itemSize) {

            console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');
            return new Uint32BufferAttribute(array, itemSize);

        }

        function Float32Attribute(array, itemSize) {

            console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');
            return new Float32BufferAttribute(array, itemSize);

        }

        function Float64Attribute(array, itemSize) {

            console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');
            return new Float64BufferAttribute(array, itemSize);

        }

        //

        Curve.create = function(construct, getPoint) {

            console.log('THREE.Curve.create() has been deprecated');

            construct.prototype = Object.create(Curve.prototype);
            construct.prototype.constructor = construct;
            construct.prototype.getPoint = getPoint;

            return construct;

        };

        //

        function ClosedSplineCurve3(points) {

            console.warn('THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');

            CatmullRomCurve3.call(this, points);
            this.type = 'catmullrom';
            this.closed = true;

        }

        ClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);

        //

        function SplineCurve3(points) {

            console.warn('THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');

            CatmullRomCurve3.call(this, points);
            this.type = 'catmullrom';

        }

        SplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);

        //

        function Spline(points) {

            console.warn('THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.');

            CatmullRomCurve3.call(this, points);
            this.type = 'catmullrom';

        }

        Spline.prototype = Object.create(CatmullRomCurve3.prototype);

        Object.assign(Spline.prototype, {

            initFromArray: function(a) {

                console.error('THREE.Spline: .initFromArray() has been removed.');

            },
            getControlPointsArray: function(optionalTarget) {

                console.error('THREE.Spline: .getControlPointsArray() has been removed.');

            },
            reparametrizeByArcLength: function(samplingCoef) {

                console.error('THREE.Spline: .reparametrizeByArcLength() has been removed.');

            }

        });

        //
        function BoundingBoxHelper(object, color) {

            console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');
            return new BoxHelper(object, color);

        }

        function EdgesHelper(object, hex) {

            console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');
            return new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({
                color: hex !== undefined ? hex : 0xffffff
            }));

        }

        GridHelper.prototype.setColors = function() {

            console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');

        };

        function WireframeHelper(object, hex) {

            console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');
            return new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({
                color: hex !== undefined ? hex : 0xffffff
            }));

        }

        //

        function XHRLoader(manager) {

            console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');
            return new FileLoader(manager);

        }

        function BinaryTextureLoader(manager) {

            console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');
            return new DataTextureLoader(manager);

        }

        //

        Object.assign(Box2.prototype, {

            center: function(optionalTarget) {

                console.warn('THREE.Box2: .center() has been renamed to .getCenter().');
                return this.getCenter(optionalTarget);

            },
            empty: function() {

                console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');
                return this.isEmpty();

            },
            isIntersectionBox: function(box) {

                console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');
                return this.intersectsBox(box);

            },
            size: function(optionalTarget) {

                console.warn('THREE.Box2: .size() has been renamed to .getSize().');
                return this.getSize(optionalTarget);

            }
        });

        Object.assign(Box3.prototype, {

            center: function(optionalTarget) {

                console.warn('THREE.Box3: .center() has been renamed to .getCenter().');
                return this.getCenter(optionalTarget);

            },
            empty: function() {

                console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');
                return this.isEmpty();

            },
            isIntersectionBox: function(box) {

                console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');
                return this.intersectsBox(box);

            },
            isIntersectionSphere: function(sphere) {

                console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');
                return this.intersectsSphere(sphere);

            },
            size: function(optionalTarget) {

                console.warn('THREE.Box3: .size() has been renamed to .getSize().');
                return this.getSize(optionalTarget);

            }
        });

        Line3.prototype.center = function(optionalTarget) {

            console.warn('THREE.Line3: .center() has been renamed to .getCenter().');
            return this.getCenter(optionalTarget);

        };

        _Math.random16 = function() {

            console.warn('THREE.Math.random16() has been deprecated. Use Math.random() instead.');
            return Math.random();

        };

        Object.assign(Matrix3.prototype, {

            flattenToArrayOffset: function(array, offset) {

                console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
                return this.toArray(array, offset);

            },
            multiplyVector3: function(vector) {

                console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');
                return vector.applyMatrix3(this);

            },
            multiplyVector3Array: function(a) {

                console.warn('THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.');
                return this.applyToVector3Array(a);

            },
            applyToBuffer: function(buffer, offset, length) {

                console.warn('THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.');
                return this.applyToBufferAttribute(buffer);

            },
            applyToVector3Array: function(array, offset, length) {

                console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');

            }

        });

        Object.assign(Matrix4.prototype, {

            extractPosition: function(m) {

                console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');
                return this.copyPosition(m);

            },
            flattenToArrayOffset: function(array, offset) {

                console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
                return this.toArray(array, offset);

            },
            getPosition: function() {

                var v1;

                return function getPosition() {

                    if (v1 === undefined) v1 = new Vector3();
                    console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');
                    return v1.setFromMatrixColumn(this, 3);

                };

            }(),
            setRotationFromQuaternion: function(q) {

                console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');
                return this.makeRotationFromQuaternion(q);

            },
            multiplyVector3: function(vector) {

                console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');
                return vector.applyMatrix4(this);

            },
            multiplyVector4: function(vector) {

                console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');
                return vector.applyMatrix4(this);

            },
            multiplyVector3Array: function(a) {

                console.warn('THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.');
                return this.applyToVector3Array(a);

            },
            rotateAxis: function(v) {

                console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');
                v.transformDirection(this);

            },
            crossVector: function(vector) {

                console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');
                return vector.applyMatrix4(this);

            },
            translate: function() {

                console.error('THREE.Matrix4: .translate() has been removed.');

            },
            rotateX: function() {

                console.error('THREE.Matrix4: .rotateX() has been removed.');

            },
            rotateY: function() {

                console.error('THREE.Matrix4: .rotateY() has been removed.');

            },
            rotateZ: function() {

                console.error('THREE.Matrix4: .rotateZ() has been removed.');

            },
            rotateByAxis: function() {

                console.error('THREE.Matrix4: .rotateByAxis() has been removed.');

            },
            applyToBuffer: function(buffer, offset, length) {

                console.warn('THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.');
                return this.applyToBufferAttribute(buffer);

            },
            applyToVector3Array: function(array, offset, length) {

                console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');

            },
            makeFrustum: function(left, right, bottom, top, near, far) {

                console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');
                return this.makePerspective(left, right, top, bottom, near, far);

            }

        });

        Plane.prototype.isIntersectionLine = function(line) {

            console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');
            return this.intersectsLine(line);

        };

        Quaternion.prototype.multiplyVector3 = function(vector) {

            console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');
            return vector.applyQuaternion(this);

        };

        Object.assign(Ray.prototype, {

            isIntersectionBox: function(box) {

                console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');
                return this.intersectsBox(box);

            },
            isIntersectionPlane: function(plane) {

                console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');
                return this.intersectsPlane(plane);

            },
            isIntersectionSphere: function(sphere) {

                console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');
                return this.intersectsSphere(sphere);

            }

        });

        Object.assign(Shape.prototype, {

            extrude: function(options) {

                console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');
                return new ExtrudeGeometry(this, options);

            },
            makeGeometry: function(options) {

                console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');
                return new ShapeGeometry(this, options);

            }

        });

        Object.assign(Vector2.prototype, {

            fromAttribute: function(attribute, index, offset) {

                console.error('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');
                return this.fromBufferAttribute(attribute, index, offset);

            }

        });

        Object.assign(Vector3.prototype, {

            setEulerFromRotationMatrix: function() {

                console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');

            },
            setEulerFromQuaternion: function() {

                console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');

            },
            getPositionFromMatrix: function(m) {

                console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');
                return this.setFromMatrixPosition(m);

            },
            getScaleFromMatrix: function(m) {

                console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');
                return this.setFromMatrixScale(m);

            },
            getColumnFromMatrix: function(index, matrix) {

                console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');
                return this.setFromMatrixColumn(matrix, index);

            },
            applyProjection: function(m) {

                console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');
                return this.applyMatrix4(m);

            },
            fromAttribute: function(attribute, index, offset) {

                console.error('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');
                return this.fromBufferAttribute(attribute, index, offset);

            }

        });

        Object.assign(Vector4.prototype, {

            fromAttribute: function(attribute, index, offset) {

                console.error('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');
                return this.fromBufferAttribute(attribute, index, offset);

            }

        });

        //

        Geometry.prototype.computeTangents = function() {

            console.warn('THREE.Geometry: .computeTangents() has been removed.');

        };

        Object.assign(Object3D.prototype, {

            getChildByName: function(name) {

                console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');
                return this.getObjectByName(name);

            },
            renderDepth: function() {

                console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');

            },
            translate: function(distance, axis) {

                console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');
                return this.translateOnAxis(axis, distance);

            }

        });

        Object.defineProperties(Object3D.prototype, {

            eulerOrder: {
                get: function() {

                    console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
                    return this.rotation.order;

                },
                set: function(value) {

                    console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
                    this.rotation.order = value;

                }
            },
            useQuaternion: {
                get: function() {

                    console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');

                },
                set: function() {

                    console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');

                }
            }

        });

        Object.defineProperties(LOD.prototype, {

            objects: {
                get: function() {

                    console.warn('THREE.LOD: .objects has been renamed to .levels.');
                    return this.levels;

                }
            }

        });

        //

        PerspectiveCamera.prototype.setLens = function(focalLength, filmGauge) {

            console.warn("THREE.PerspectiveCamera.setLens is deprecated. " +
                "Use .setFocalLength and .filmGauge for a photographic setup.");

            if (filmGauge !== undefined) this.filmGauge = filmGauge;
            this.setFocalLength(focalLength);

        };

        //

        Object.defineProperties(Light.prototype, {
            onlyShadow: {
                set: function() {

                    console.warn('THREE.Light: .onlyShadow has been removed.');

                }
            },
            shadowCameraFov: {
                set: function(value) {

                    console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');
                    this.shadow.camera.fov = value;

                }
            },
            shadowCameraLeft: {
                set: function(value) {

                    console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');
                    this.shadow.camera.left = value;

                }
            },
            shadowCameraRight: {
                set: function(value) {

                    console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');
                    this.shadow.camera.right = value;

                }
            },
            shadowCameraTop: {
                set: function(value) {

                    console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');
                    this.shadow.camera.top = value;

                }
            },
            shadowCameraBottom: {
                set: function(value) {

                    console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');
                    this.shadow.camera.bottom = value;

                }
            },
            shadowCameraNear: {
                set: function(value) {

                    console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');
                    this.shadow.camera.near = value;

                }
            },
            shadowCameraFar: {
                set: function(value) {

                    console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');
                    this.shadow.camera.far = value;

                }
            },
            shadowCameraVisible: {
                set: function() {

                    console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');

                }
            },
            shadowBias: {
                set: function(value) {

                    console.warn('THREE.Light: .shadowBias is now .shadow.bias.');
                    this.shadow.bias = value;

                }
            },
            shadowDarkness: {
                set: function() {

                    console.warn('THREE.Light: .shadowDarkness has been removed.');

                }
            },
            shadowMapWidth: {
                set: function(value) {

                    console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');
                    this.shadow.mapSize.width = value;

                }
            },
            shadowMapHeight: {
                set: function(value) {

                    console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');
                    this.shadow.mapSize.height = value;

                }
            }
        });

        //

        Object.defineProperties(BufferAttribute.prototype, {

            length: {
                get: function() {

                    console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');
                    return this.array.length;

                }
            }

        });

        Object.assign(BufferGeometry.prototype, {

            addIndex: function(index) {

                console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');
                this.setIndex(index);

            },
            addDrawCall: function(start, count, indexOffset) {

                if (indexOffset !== undefined) {

                    console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');

                }
                console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');
                this.addGroup(start, count);

            },
            clearDrawCalls: function() {

                console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');
                this.clearGroups();

            },
            computeTangents: function() {

                console.warn('THREE.BufferGeometry: .computeTangents() has been removed.');

            },
            computeOffsets: function() {

                console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');

            }

        });

        Object.defineProperties(BufferGeometry.prototype, {

            drawcalls: {
                get: function() {

                    console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');
                    return this.groups;

                }
            },
            offsets: {
                get: function() {

                    console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');
                    return this.groups;

                }
            }

        });

        //

        Object.defineProperties(Uniform.prototype, {

            dynamic: {
                set: function() {

                    console.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');

                }
            },
            onUpdate: {
                value: function() {

                    console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');
                    return this;

                }
            }

        });

        //

        Object.defineProperties(Material.prototype, {

            wrapAround: {
                get: function() {

                    console.warn('THREE.' + this.type + ': .wrapAround has been removed.');

                },
                set: function() {

                    console.warn('THREE.' + this.type + ': .wrapAround has been removed.');

                }
            },
            wrapRGB: {
                get: function() {

                    console.warn('THREE.' + this.type + ': .wrapRGB has been removed.');
                    return new Color();

                }
            }

        });

        Object.defineProperties(MeshPhongMaterial.prototype, {

            metal: {
                get: function() {

                    console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');
                    return false;

                },
                set: function() {

                    console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');

                }
            }

        });

        Object.defineProperties(ShaderMaterial.prototype, {

            derivatives: {
                get: function() {

                    console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
                    return this.extensions.derivatives;

                },
                set: function(value) {

                    console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
                    this.extensions.derivatives = value;

                }
            }

        });

        //

        Object.assign(WebGLRenderer.prototype, {

            supportsFloatTextures: function() {

                console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).');
                return this.extensions.get('OES_texture_float');

            },
            supportsHalfFloatTextures: function() {

                console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).');
                return this.extensions.get('OES_texture_half_float');

            },
            supportsStandardDerivatives: function() {

                console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).');
                return this.extensions.get('OES_standard_derivatives');

            },
            supportsCompressedTextureS3TC: function() {

                console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).');
                return this.extensions.get('WEBGL_compressed_texture_s3tc');

            },
            supportsCompressedTexturePVRTC: function() {

                console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).');
                return this.extensions.get('WEBGL_compressed_texture_pvrtc');

            },
            supportsBlendMinMax: function() {

                console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).');
                return this.extensions.get('EXT_blend_minmax');

            },
            supportsVertexTextures: function() {

                console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');
                return this.capabilities.vertexTextures;

            },
            supportsInstancedArrays: function() {

                console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).');
                return this.extensions.get('ANGLE_instanced_arrays');

            },
            enableScissorTest: function(boolean) {

                console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');
                this.setScissorTest(boolean);

            },
            initMaterial: function() {

                console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');

            },
            addPrePlugin: function() {

                console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');

            },
            addPostPlugin: function() {

                console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');

            },
            updateShadowMap: function() {

                console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');

            }

        });

        Object.defineProperties(WebGLRenderer.prototype, {

            shadowMapEnabled: {
                get: function() {

                    return this.shadowMap.enabled;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');
                    this.shadowMap.enabled = value;

                }
            },
            shadowMapType: {
                get: function() {

                    return this.shadowMap.type;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');
                    this.shadowMap.type = value;

                }
            },
            shadowMapCullFace: {
                get: function() {

                    return this.shadowMap.cullFace;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.');
                    this.shadowMap.cullFace = value;

                }
            }
        });

        Object.defineProperties(WebGLShadowMap.prototype, {

            cullFace: {
                get: function() {

                    return this.renderReverseSided ? CullFaceFront : CullFaceBack;

                },
                set: function(cullFace) {

                    var value = (cullFace !== CullFaceBack);
                    console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + ".");
                    this.renderReverseSided = value;

                }
            }

        });

        //

        Object.defineProperties(WebGLRenderTarget.prototype, {

            wrapS: {
                get: function() {

                    console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
                    return this.texture.wrapS;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
                    this.texture.wrapS = value;

                }
            },
            wrapT: {
                get: function() {

                    console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
                    return this.texture.wrapT;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
                    this.texture.wrapT = value;

                }
            },
            magFilter: {
                get: function() {

                    console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
                    return this.texture.magFilter;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
                    this.texture.magFilter = value;

                }
            },
            minFilter: {
                get: function() {

                    console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
                    return this.texture.minFilter;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
                    this.texture.minFilter = value;

                }
            },
            anisotropy: {
                get: function() {

                    console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
                    return this.texture.anisotropy;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
                    this.texture.anisotropy = value;

                }
            },
            offset: {
                get: function() {

                    console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
                    return this.texture.offset;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
                    this.texture.offset = value;

                }
            },
            repeat: {
                get: function() {

                    console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
                    return this.texture.repeat;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
                    this.texture.repeat = value;

                }
            },
            format: {
                get: function() {

                    console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
                    return this.texture.format;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
                    this.texture.format = value;

                }
            },
            type: {
                get: function() {

                    console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
                    return this.texture.type;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
                    this.texture.type = value;

                }
            },
            generateMipmaps: {
                get: function() {

                    console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
                    return this.texture.generateMipmaps;

                },
                set: function(value) {

                    console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
                    this.texture.generateMipmaps = value;

                }
            }

        });

        //

        Audio.prototype.load = function(file) {

            console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');
            var scope = this;
            var audioLoader = new AudioLoader();
            audioLoader.load(file, function(buffer) {

                scope.setBuffer(buffer);

            });
            return this;

        };

        AudioAnalyser.prototype.getData = function() {

            console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');
            return this.getFrequencyData();

        };

        //

        var GeometryUtils = {

            merge: function(geometry1, geometry2, materialIndexOffset) {

                console.warn('THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.');
                var matrix;

                if (geometry2.isMesh) {

                    geometry2.matrixAutoUpdate && geometry2.updateMatrix();

                    matrix = geometry2.matrix;
                    geometry2 = geometry2.geometry;

                }

                geometry1.merge(geometry2, matrix, materialIndexOffset);

            },

            center: function(geometry) {

                console.warn('THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.');
                return geometry.center();

            }

        };

        var ImageUtils = {

            crossOrigin: undefined,

            loadTexture: function(url, mapping, onLoad, onError) {

                console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');

                var loader = new TextureLoader();
                loader.setCrossOrigin(this.crossOrigin);

                var texture = loader.load(url, onLoad, undefined, onError);

                if (mapping) texture.mapping = mapping;

                return texture;

            },

            loadTextureCube: function(urls, mapping, onLoad, onError) {

                console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');

                var loader = new CubeTextureLoader();
                loader.setCrossOrigin(this.crossOrigin);

                var texture = loader.load(urls, onLoad, undefined, onError);

                if (mapping) texture.mapping = mapping;

                return texture;

            },

            loadCompressedTexture: function() {

                console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');

            },

            loadCompressedTextureCube: function() {

                console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');

            }

        };

        //

        function Projector() {

            console.error('THREE.Projector has been moved to /examples/js/renderers/Projector.js.');

            this.projectVector = function(vector, camera) {

                console.warn('THREE.Projector: .projectVector() is now vector.project().');
                vector.project(camera);

            };

            this.unprojectVector = function(vector, camera) {

                console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');
                vector.unproject(camera);

            };

            this.pickingRay = function() {

                console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');

            };

        }

        //

        function CanvasRenderer() {

            console.error('THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js');

            this.domElement = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
            this.clear = function() {};
            this.render = function() {};
            this.setClearColor = function() {};
            this.setSize = function() {};

        }




        /***/
    }),
    /* 237 */
    /***/
    (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {
            var scope = (typeof global !== "undefined" && global) ||
                (typeof self !== "undefined" && self) ||
                window;
            var apply = Function.prototype.apply;

            // DOM APIs, for completeness

            exports.setTimeout = function() {
                return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
            };
            exports.setInterval = function() {
                return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
            };
            exports.clearTimeout =
                exports.clearInterval = function(timeout) {
                    if (timeout) {
                        timeout.close();
                    }
                };

            function Timeout(id, clearFn) {
                this._id = id;
                this._clearFn = clearFn;
            }
            Timeout.prototype.unref = Timeout.prototype.ref = function() {};
            Timeout.prototype.close = function() {
                this._clearFn.call(scope, this._id);
            };

            // Does not start the time, just sets up the members needed.
            exports.enroll = function(item, msecs) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = msecs;
            };

            exports.unenroll = function(item) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = -1;
            };

            exports._unrefActive = exports.active = function(item) {
                clearTimeout(item._idleTimeoutId);

                var msecs = item._idleTimeout;
                if (msecs >= 0) {
                    item._idleTimeoutId = setTimeout(function onTimeout() {
                        if (item._onTimeout)
                            item._onTimeout();
                    }, msecs);
                }
            };

            // setimmediate attaches itself to the global object
            __webpack_require__(235);
            // On some exotic environments, it's not clear which object `setimmediate` was
            // able to install onto.  Search each possibility in the same order as the
            // `setimmediate` library.
            exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                (typeof global !== "undefined" && global.setImmediate) ||
                (this && this.setImmediate);
            exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                (typeof global !== "undefined" && global.clearImmediate) ||
                (this && this.clearImmediate);

            /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(15)))

        /***/
    }),
    /* 238 */
    /***/
    (function(module, exports) {

        function E() {
            // Keep this empty so it's easier to inherit from
            // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
        }

        E.prototype = {
            on: function(name, callback, ctx) {
                var e = this.e || (this.e = {});

                (e[name] || (e[name] = [])).push({
                    fn: callback,
                    ctx: ctx
                });

                return this;
            },

            once: function(name, callback, ctx) {
                var self = this;

                function listener() {
                    self.off(name, listener);
                    callback.apply(ctx, arguments);
                };

                listener._ = callback
                return this.on(name, listener, ctx);
            },

            emit: function(name) {
                var data = [].slice.call(arguments, 1);
                var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                var i = 0;
                var len = evtArr.length;

                for (i; i < len; i++) {
                    evtArr[i].fn.apply(evtArr[i].ctx, data);
                }

                return this;
            },

            off: function(name, callback) {
                var e = this.e || (this.e = {});
                var evts = e[name];
                var liveEvents = [];

                if (evts && callback) {
                    for (var i = 0, len = evts.length; i < len; i++) {
                        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
                            liveEvents.push(evts[i]);
                    }
                }

                // Remove event from queue to prevent memory leak
                // Suggested by https://github.com/lazd
                // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

                (liveEvents.length) ?
                e[name] = liveEvents: delete e[name];

                return this;
            }
        };

        module.exports = E;


        /***/
    }),
    /* 239 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        module.exports = function(source) {
            return JSON.parse(JSON.stringify(source));
        };

        /***/
    }),
    /* 240 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";


        module.exports = (function getSupport() {
            return {
                hasWheelEvent: 'onwheel' in document,
                hasMouseWheelEvent: 'onmousewheel' in document,
                hasTouch: 'ontouchstart' in document,
                hasTouchWin: navigator.msMaxTouchPoints && navigator.msMaxTouchPoints > 1,
                hasPointer: !!window.navigator.msPointerEnabled,
                hasKeyDown: 'onkeydown' in document,
                isFirefox: navigator.userAgent.indexOf('Firefox') > -1
            };
        })();


        /***/
    }),
    /* 241 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(303)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(84),
            /* template */
            __webpack_require__(280),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 242 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(295)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(85),
            /* template */
            __webpack_require__(272),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 243 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(287)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(86),
            /* template */
            __webpack_require__(263),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 244 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(305)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(87),
            /* template */
            __webpack_require__(282),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 245 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(307)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(88),
            /* template */
            __webpack_require__(284),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 246 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(286)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(89),
            /* template */
            __webpack_require__(262),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 247 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(300)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(90),
            /* template */
            __webpack_require__(277),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 248 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(299)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(91),
            /* template */
            __webpack_require__(276),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 249 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(290)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(93),
            /* template */
            __webpack_require__(266),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 250 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(301)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(94),
            /* template */
            __webpack_require__(278),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 251 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(297)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(95),
            /* template */
            __webpack_require__(274),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 252 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(285)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(96),
            /* template */
            __webpack_require__(261),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 253 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(289)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(97),
            /* template */
            __webpack_require__(265),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 254 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(296)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(98),
            /* template */
            __webpack_require__(273),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 255 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(306)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(100),
            /* template */
            __webpack_require__(283),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 256 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(291)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(101),
            /* template */
            __webpack_require__(267),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 257 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(292)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(102),
            /* template */
            __webpack_require__(268),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 258 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(304)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(103),
            /* template */
            __webpack_require__(281),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 259 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(308)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(104),
            /* template */
            __webpack_require__(269),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 260 */
    /***/
    (function(module, exports, __webpack_require__) {


        /* styles */
        __webpack_require__(288)

        var Component = __webpack_require__(1)(
            /* script */
            __webpack_require__(105),
            /* template */
            __webpack_require__(264),
            /* scopeId */
            null,
            /* cssModules */
            null
        )

        module.exports = Component.exports


        /***/
    }),
    /* 261 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "slider",
                    staticStyle: {
                        "opacity": "1"
                    }
                }, [_c('slide-indicator'), _vm._v(" "), _c('div', {
                    ref: "slideContainer",
                    staticClass: "slide-container"
                }, _vm._l((_vm.slides), function(slide, index) {
                    return _c('slide', {
                        attrs: {
                            "title": slide.title,
                            "titleColor": slide.titleColor,
                            "textColor": slide.textColor,
                            "description": slide.description,
                            "context": slide.context,
                            "role": slide.role,
                            "period": slide.period,
                            "shapePath": slide.shapePath,
                            "shapePath2x": slide.shapePath2x,
                            "illustrationPath": slide.illustrationPath,
                            "illustrationPath2x": slide.illustrationPath2x,
                            "caseStudy": slide['case-study'],
                            "url": slide.url,
                            "rotationX": _vm.rotationX,
                            "rotationY": _vm.rotationY,
                            "slideId": index
                        }
                    })
                }))], 1)
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 262 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "case-study__shopsquare"
                }, [_c('div', {
                    staticClass: "case-study__photo-background-container"
                }, [_c('div', {
                    staticClass: "case-study__photo-background"
                }), _vm._v(" "), _c('img', {
                    ref: "shoes",
                    staticClass: "case-study__photo",
                    attrs: {
                        "src": "/assets/imgs/case-study/shopsquare/shoes.png",
                        "srcset": "/assets/imgs/case-study/shopsquare/shoes@2x.png 2x",
                        "alt": ""
                    }
                })]), _vm._v(" "), _vm._m(0), _vm._v(" "), _c('div', {
                    staticClass: "case-study__video-row"
                }, [_c('case-study-video', {
                    staticClass: "case-study__row"
                }, [_c('source', {
                    attrs: {
                        "src": "/assets/videos/case-study/shopsquare/desktop-xp.mp4",
                        "type": "video/mp4"
                    }
                })])], 1), _vm._v(" "), _vm._m(1), _vm._v(" "), _c('div', {
                    staticClass: "case-study__row case-study__video-row case-study__video-half-row"
                }, [_c('case-study-video', {
                    staticClass: "case-study__video-half"
                }, [_c('source', {
                    attrs: {
                        "src": "/assets/videos/case-study/shopsquare/mobile-xp.mp4",
                        "type": "video/mp4"
                    }
                })]), _vm._v(" "), _c('case-study-video', {
                    staticClass: "case-study__video-half"
                }, [_c('source', {
                    attrs: {
                        "src": "/assets/videos/case-study/shopsquare/mobile-search.mp4",
                        "type": "video/mp4"
                    }
                })])], 1)])
            },
            staticRenderFns: [function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "case-study__row case-study__section"
                }, [_c('div', {
                    staticClass: "case-study__title"
                }, [_vm._v("My work at Shopsquare")]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__text-content"
                }, [_vm._v("\n\t\t\tI’ve worked for shopsquare for 6 months as a fullstack developer. Shopsquare was built completely in Laravel, a great PHP framework. This is a good technical choice when you have a classic e-commerce website. Shopsquare has to deal with millions of products that come from multiple data sources and respond in a second. So one of my missions was to combine Laravel to Algolia.\n\t\t")])])
            }, function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "case-study__row case-study__section"
                }, [_c('div', {
                    staticClass: "case-study__title"
                }, [_vm._v("What I learned")]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__text-content"
                }, [_vm._v("\n\t\t\tMore than technical knowledge, what I learned at Shosquare is how a Startup work. Further than the classical ping-pong-table, I have integrated a great team of motivated people who get up in the morning with one purpose: enhance their product, take decisions and learn from their mistakes.\n\t\t")])])
            }]
        }

        /***/
    }),
    /* 263 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('a', {
                    ref: "button",
                    staticClass: "slide__button link-button",
                    style: (_vm.buttonStyle),
                    attrs: {
                        "href": _vm.url,
                        "target": "_blank"
                    },
                    on: {
                        "mouseover": _vm.buttonHover,
                        "mouseout": _vm.buttonOut
                    }
                }, [_c('div', {
                    ref: "buttonText",
                    staticClass: "slide__button-text"
                }, [_vm._v("Go to website")])])
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 264 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "work"
                }, [_c('navigation'), _vm._v(" "), _c('router-view'), _vm._v(" "), _c('slider')], 1)
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 265 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "three-background"
                }, [_c('div', {
                    ref: "bgRenderer",
                    staticClass: "background-renderer"
                }), _vm._v(" "), _c('div', {
                    ref: "materialRenderer",
                    staticClass: "material-renderer"
                })])
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 266 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "on-mobile"
                }, [_c('about-content', {
                    attrs: {
                        "isMobile": true
                    }
                })], 1)
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 267 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "home"
                }, [_c('navigation'), _vm._v(" "), _c('home-title'), _vm._v(" "), _c('home-button')], 1)
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 268 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "home-button"
                }, [_c('div', {
                    staticClass: "home-button__wrapper"
                }, [_c('div', {
                    ref: "buttonText",
                    staticClass: "home-button__text"
                }, [_vm._v("See my work")]), _vm._v(" "), _c('router-link', {
                    ref: "square",
                    staticClass: "home-button__square",
                    attrs: {
                        "to": "/work"
                    },
                    nativeOn: {
                        "mouseover": function($event) {
                            return _vm.mouseover($event)
                        },
                        "mouseout": function($event) {
                            return _vm.mouseout($event)
                        }
                    }
                }), _vm._v(" "), _c('div', {
                    ref: "arrow",
                    staticClass: "home-button__arrow"
                }, [_c('div', {
                    ref: "line",
                    staticClass: "home-button__arrow__line"
                }), _vm._v(" "), _c('img', {
                    ref: "arrowImg",
                    staticClass: "home-button__arrow__img",
                    attrs: {
                        "src": "/assets/imgs/arrow.svg",
                        "alt": ""
                    }
                })])], 1)])
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 269 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c("div")
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 270 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "app"
                }, [_c('on-mobile'), _vm._v(" "), _c('loader'), _vm._v(" "), _c('router-view'), _vm._v(" "), _c('three-background')], 1)
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 271 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('video', {
                    ref: "video",
                    staticClass: "case-study__video ",
                    attrs: {
                        "loop": ""
                    }
                }, [_vm._t("default")], 2)
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 272 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "case-study__lightswan"
                }, [_c('div', {
                    staticClass: "case-study__photo-background-container"
                }, [_c('div', {
                    staticClass: "case-study__photo-background"
                }, [_c('img', {
                    ref: "paraPhoto",
                    staticClass: "case-study__photo",
                    attrs: {
                        "src": "/assets/imgs/case-study/lightswan/card.png",
                        "srcset": "/assets/imgs/case-study/lightswan/card@2x.png 2x",
                        "alt": ""
                    }
                })])]), _vm._v(" "), _vm._m(0), _vm._v(" "), _c('div', {
                    staticClass: "case-study__colors case-study__row"
                }, [_c('div', {
                    staticClass: "case-study__title"
                }, [_vm._v("Colors")]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__color-blocks"
                }, _vm._l((_vm.colors), function(color) {
                    return _c('div', {
                        staticClass: "case-study__color-block"
                    }, [_c('div', {
                        staticClass: "case-study__color",
                        style: ('background-color: ' + color.hex)
                    }), _vm._v(" "), _c('div', {
                        staticClass: "case-study__mini-title"
                    }, [_vm._v(_vm._s(color.hex))])])
                }))]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__home"
                }, [_c('div', {
                    staticClass: "case-study__line case-study__row"
                }, [_vm._m(1), _vm._v(" "), _c('div', {
                    staticClass: "case-study__half-block"
                }, [_c('div', {
                    staticClass: "case-study__mobile-screen"
                }, [_c('div', {
                    staticClass: "case-study__screen-circle"
                }, [_c('img', {
                    ref: "iphone1",
                    staticClass: "case-study__mobile-screen__img",
                    attrs: {
                        "src": "/assets/imgs/case-study/lightswan/home-mobile.png",
                        "srcset": "/assets/imgs/case-study/lightswan/home-mobile@2x.png 2x",
                        "alt": ""
                    }
                })])])])]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__full-screenshot"
                }, [_c('img', {
                    ref: "bg1",
                    staticClass: "case-study__full-screenshot__bg",
                    attrs: {
                        "src": "/assets/imgs/case-study/lightswan/screen-bg.svg",
                        "alt": ""
                    }
                }), _vm._v(" "), _c('img', {
                    staticClass: "case-study__full-screenshot__img case-study__row case-study__img ",
                    attrs: {
                        "src": "/assets/imgs/case-study/lightswan/home-desktop.jpg",
                        "srcset": "/assets/imgs/case-study/lightswan/home-desktop@2x.jpg 2x",
                        "alt": ""
                    }
                })]), _vm._v(" "), _vm._m(2), _vm._v(" "), _c('div', {
                    staticClass: "case-study__line case-study__row case-study__article-mobile"
                }, [_vm._m(3), _vm._v(" "), _c('div', {
                    staticClass: "case-study__half-block"
                }, [_c('div', {
                    staticClass: "case-study__mobile-screen"
                }, [_c('div', {
                    staticClass: "case-study__screen-circle"
                }, [_c('img', {
                    ref: "iphone2",
                    attrs: {
                        "src": "/assets/imgs/case-study/lightswan/article-mobile.png",
                        "srcset": "/assets/imgs/case-study/lightswan/article-mobile@2x.png 2x",
                        "alt": ""
                    }
                })])])])]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__full-screenshot"
                }, [_c('img', {
                    ref: "bg2",
                    staticClass: "case-study__full-screenshot__bg",
                    attrs: {
                        "src": "/assets/imgs/case-study/lightswan/screen-bg.svg",
                        "alt": ""
                    }
                }), _vm._v(" "), _c('img', {
                    staticClass: "case-study__full-screenshot__img case-study__row case-study__img ",
                    attrs: {
                        "src": "/assets/imgs/case-study/lightswan/article-desktop.jpg",
                        "srcset": "/assets/imgs/case-study/lightswan/article-desktop@2x.jpg 2x",
                        "alt": ""
                    }
                })])])])
            },
            staticRenderFns: [function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "case-study__typography case-study__row"
                }, [_c('div', {
                    staticClass: "case-study__title"
                }, [_vm._v("Typography")]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__typography-block"
                }, [_c('div', {
                    staticClass: "case-study__mini-title"
                }, [_vm._v("\n\t\t\t\tEuropa - titling\n\t\t\t")]), _vm._v(" "), _c('img', {
                    staticClass: "case-study__typo-img",
                    attrs: {
                        "src": "/assets/imgs/case-study/lightswan/typo1.svg",
                        "alt": ""
                    }
                })]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__typography-block"
                }, [_c('div', {
                    staticClass: "case-study__mini-title"
                }, [_vm._v("\n\t\t\t\tBaskerville - text\n\t\t\t")]), _vm._v(" "), _c('img', {
                    staticClass: "case-study__typo-img",
                    attrs: {
                        "src": "/assets/imgs/case-study/lightswan/typo2.svg",
                        "alt": ""
                    }
                })])])
            }, function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "case-study__half-block"
                }, [_c('div', {
                    staticClass: "case-study__title"
                }, [_vm._v("Home")]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__text-content"
                }, [_vm._v("\n\t\t\t\t\tWe chose to put Jesse Owens on the homepage of Lightswan. It was an important cultural reference for François Pumir and Florian Pittion-Rossillon. It’s also a strong symbol which corresponds to the image they want to give to their company. Forerunner, powerful and limitless.\n\t\t\t\t")])])
            }, function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "case-study__row"
                }, [_c('img', {
                    staticClass: "case-study__perspective-mockup",
                    attrs: {
                        "src": "/assets/imgs/case-study/lightswan/perspective-mockup.png",
                        "srcset": "/assets/imgs/case-study/lightswan/perspective-mockup@2x.png 2x",
                        "alt": ""
                    }
                })])
            }, function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "case-study__half-block"
                }, [_c('div', {
                    staticClass: "case-study__title"
                }, [_vm._v("Article")]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__text-content"
                }, [_vm._v("\n\t\t\t\t\tIt was very important to have a blog on the website to share the vision of the company. It's content is the heart of Lightswan's communication strategy. This is why there are many custom blog functionalities like a custom player, A slideshow, different styling for pictures and custom blocks for quotes.\n\t\t\t\t")])])
            }]
        }

        /***/
    }),
    /* 273 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "page-about"
                }, [_c('navigation'), _vm._v(" "), _c('about-content')], 1)
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 274 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "slide-indicator"
                }, [_c('div', {
                    ref: "currentSlide",
                    staticClass: "slide-indicator__current-slide"
                }, [_vm._v(_vm._s(_vm.currentSlideId + 1))]), _vm._v(" "), _c('div', {
                    ref: "separator",
                    staticClass: "slide-indicator__separator"
                }), _vm._v(" "), _c('div', {
                    ref: "sliderLength",
                    staticClass: "slide-indicator__slider-length"
                }, [_vm._v(_vm._s(_vm.sliderLength))]), _vm._v(" "), _c('div', {
                    ref: "sliderName",
                    staticClass: "slide-indicator__slider-name"
                }, [_vm._v(_vm._s(_vm.sliderName))])])
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 275 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    ref: "menu",
                    staticClass: "menu menu--light"
                }, [_c('div', {
                    staticClass: "menu-hit",
                    on: {
                        "click": _vm.toggleClose,
                        "mouseover": _vm.iconMouseOver,
                        "mouseout": _vm.iconMouseOut
                    }
                }), _vm._v(" "), _c('div', {
                    staticClass: "menu-icon__container"
                }, [_c('div', {
                    ref: "menuIcon",
                    staticClass: "menu-icon"
                }, [_c('div', {
                    staticClass: "menu-line menu-line--big"
                }), _vm._v(" "), _c('div', {
                    staticClass: "menu-line menu-line--little"
                }), _vm._v(" "), _c('div', {
                    staticClass: "menu-line menu-line--big"
                })]), _vm._v(" "), _c('span', {
                    ref: "menuCircleHover",
                    staticClass: "menu-circle-hover"
                })]), _vm._v(" "), _c('div', {
                    ref: "menuLinks",
                    staticClass: "menu-links"
                }, _vm._l((_vm.navItems), function(navItem) {
                    return _c('nav-item', {
                        attrs: {
                            "title": navItem.title,
                            "subtitle": navItem.subtitle,
                            "to": navItem.to
                        }
                    })
                })), _vm._v(" "), _c('div', {
                    ref: "menuBackground",
                    staticClass: "menu-background"
                })])
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 276 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "menu-link",
                    on: {
                        "mouseover": _vm.mouseover,
                        "mouseout": _vm.mouseout
                    }
                }, [_c('a', {
                    ref: "link",
                    staticClass: "menu-link__link",
                    attrs: {
                        "to": _vm.to
                    },
                    on: {
                        "click": function($event) {
                            $event.preventDefault();
                            return _vm.onClick($event)
                        }
                    }
                }, [_c('div', {
                    ref: "title",
                    staticClass: "menu-link__title"
                }, [_vm._v("\n\t\t\t" + _vm._s(_vm.title) + "\n\t\t\t"), _c('div', {
                    ref: "hoverLine",
                    staticClass: "menu-link__hover"
                })]), _vm._v(" "), _c('div', {
                    staticClass: "menu-link__subtitle"
                }, [_vm._v(_vm._s(_vm.subtitle))])])])
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 277 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "loader-container"
                }, [_c('div', {
                    staticClass: "loader"
                }, [_vm._m(0), _vm._v(" "), _c('div', {
                    ref: "loaderLines",
                    staticClass: "loader__lines"
                }, [_c('div', {
                    staticClass: "loader__thin-line"
                }), _vm._v(" "), _c('div', {
                    ref: "loaderBigLine",
                    staticClass: "loader__big-line"
                })]), _vm._v(" "), _c('div', {
                    staticClass: "loader__state"
                }, [_vm._v("\n\t\t\t" + _vm._s(_vm.loadingState) + "%\n\t\t")])])])
            },
            staticRenderFns: [function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "loader__text"
                }, [_c('img', {
                    attrs: {
                        "src": "/assets/imgs/loading.svg",
                        "alt": ""
                    }
                })])
            }]
        }

        /***/
    }),
    /* 278 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "slide",
                    class: 'slide__' + _vm.title
                }, [_c('div', {
                    ref: "slideImg",
                    staticClass: "slide-img"
                }, [_c('img', {
                    staticClass: "slide-img__shape",
                    attrs: {
                        "src": _vm.shapePath,
                        "srcset": _vm.shapePath2x + ' 2x',
                        "alt": ""
                    }
                }), _vm._v(" "), _c('img', {
                    staticClass: "slide-img__img",
                    attrs: {
                        "src": _vm.illustrationPath,
                        "srcset": _vm.illustrationPath2x + ' 2x',
                        "alt": ""
                    }
                })]), _vm._v(" "), _c('div', {
                    ref: "slideInfo",
                    staticClass: "slide__info"
                }, [_c('div', {
                    staticClass: "slide__id",
                    style: (_vm.titleColorStyle)
                }, [_c('div', {
                    staticClass: "slide__id__text"
                }, [_vm._v("0" + _vm._s(_vm.slideId + 1) + ".")])]), _vm._v(" "), _c('h2', {
                    staticClass: "slide__title",
                    style: (_vm.titleColorStyle)
                }, [_vm._v(_vm._s(_vm.title))]), _vm._v(" "), _c('div', {
                    staticClass: "slide__description",
                    style: (_vm.textColorStyle)
                }, [_vm._v(_vm._s(_vm.description))]), _vm._v(" "), _c('div', {
                    staticClass: "slide__sub-info"
                }, [_c('div', {
                    staticClass: "slide__sub-info__info"
                }, [_c('div', {
                    staticClass: "slide__sub-info__info__title",
                    style: (_vm.titleColorStyle)
                }, [_vm._v("Role")]), _vm._v(" "), _c('div', {
                    staticClass: "slide__sub-info__info__description",
                    style: (_vm.textColorStyle)
                }, [_vm._v(_vm._s(_vm.role))])]), _vm._v(" "), _c('div', {
                    staticClass: "slide__sub-info__info"
                }, [_c('div', {
                    staticClass: "slide__sub-info__info__title",
                    style: (_vm.titleColorStyle)
                }, [_vm._v("Context")]), _vm._v(" "), _c('div', {
                    staticClass: "slide__sub-info__info__description",
                    style: (_vm.textColorStyle)
                }, [_vm._v(_vm._s(_vm.context))])]), _vm._v(" "), _c('div', {
                    staticClass: "slide__sub-info__info"
                }, [_c('div', {
                    staticClass: "slide__sub-info__info__title",
                    style: (_vm.titleColorStyle)
                }, [_vm._v("Year")]), _vm._v(" "), _c('div', {
                    staticClass: "slide__sub-info__info__description",
                    style: (_vm.textColorStyle)
                }, [_vm._v(_vm._s(_vm.period))])])]), _vm._v(" "), (_vm.caseStudy) ? _c('a', {
                    ref: "button",
                    staticClass: "slide__button",
                    style: (_vm.buttonStyle),
                    on: {
                        "click": function($event) {
                            $event.preventDefault();
                            return _vm.loadCaseStudy($event)
                        },
                        "mouseover": _vm.buttonHover,
                        "mouseout": _vm.buttonOut
                    }
                }, [(_vm.isLoading) ? _c('div', {
                    ref: "buttonText",
                    staticClass: "slide__button-text"
                }, [_vm._v(_vm._s(_vm.loadingState))]) : _c('div', {
                    ref: "buttonText",
                    staticClass: "slide__button-text"
                }, [_vm._v("view more")]), _vm._v(" "), _c('div', {
                    ref: "loadingBar",
                    staticClass: "slide__button__loader",
                    style: (_vm.loadingButtonStyle)
                })]) : _c('a', {
                    ref: "button",
                    staticClass: "slide__button",
                    style: (_vm.buttonStyle),
                    attrs: {
                        "href": _vm.url,
                        "target": "_blank"
                    },
                    on: {
                        "mouseover": _vm.buttonHover,
                        "mouseout": _vm.buttonOut
                    }
                }, [_c('div', {
                    ref: "buttonText",
                    staticClass: "slide__button-text"
                }, [_vm._v("Go to website")]), _vm._v(" "), _c('div', {
                    ref: "loadingBar",
                    staticClass: "slide__button__loader",
                    style: (_vm.loadingButtonStyle)
                })])])])
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 279 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    ref: "aboutContent",
                    staticClass: "about-content"
                }, [_c('div', {
                    staticClass: "about-content__title",
                    domProps: {
                        "innerHTML": _vm._s(_vm.title)
                    }
                }), _vm._v(" "), _c('div', {
                    staticClass: "about-content__mobile-message"
                }, [_vm._v("See my work on desktop")]), _vm._v(" "), _c('div', {
                    ref: "contentContainer",
                    staticClass: "about-content__content-container"
                }, [_c('div', {
                    staticClass: "about-content__content",
                    domProps: {
                        "innerHTML": _vm._s(_vm.content)
                    }
                }), _vm._v(" "), _c('div', {
                    staticClass: "about-content__social"
                }, [_c('div', {
                    staticClass: "about-content__social-title"
                }, [_vm._v(_vm._s(_vm.socialTitle))]), _vm._v(" "), _c('div', {
                    ref: "network",
                    staticClass: "about-content__networks"
                }, _vm._l((_vm.networks), function(network) {
                    return _c('div', {
                        staticClass: "about-content__network"
                    }, [_c('a', {
                        staticClass: "about-content__network__link",
                        attrs: {
                            "href": network.link,
                            "target": "_blank"
                        }
                    }, [_vm._v(_vm._s(network.name))])])
                }))])])])
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 280 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "close-button close-button__center-content",
                    on: {
                        "click": _vm.click
                    }
                }, [_vm._m(0)])
            },
            staticRenderFns: [function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "close-button__mini-button-container close-button__center-content "
                }, [_c('div', {
                    staticClass: "close-button__mini-button close-button__center-content"
                }, [_c('div', {
                    staticClass: "close-button__line close-button__first-line"
                }, [_c('div', {
                    staticClass: "close-button__line-fill"
                })]), _vm._v(" "), _c('div', {
                    staticClass: "close-button__line close-button__second-line"
                }, [_c('div', {
                    staticClass: "close-button__line-fill"
                })])])])
            }]
        }

        /***/
    }),
    /* 281 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "name-title"
                }, [_c('div', {
                    ref: "titleContainer",
                    staticClass: "name-title__title-container"
                }, [_c('div', {
                    staticClass: "name-title__main-container"
                }, [_c('div', {
                    ref: "title",
                    staticClass: "name-title__title"
                }, [_vm._v(_vm._s(_vm.name))]), _vm._v(" "), _c('div', {
                    ref: "square",
                    staticClass: "name-title__square"
                })]), _vm._v(" "), _c('div', {
                    ref: "subtitle",
                    staticClass: "name-title__subtitle"
                }, [_vm._v(_vm._s(_vm.subtitle))])])])
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 282 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "case-study__maje"
                }, [_c('div', {
                    staticClass: "case-study__photo-background-container"
                }, [_c('div', {
                    staticClass: "case-study__photo-background"
                }), _vm._v(" "), _c('img', {
                    ref: "woman",
                    staticClass: "case-study__photo",
                    attrs: {
                        "src": "/assets/imgs/case-study/maje/woman.png",
                        "srcset": "/assets/imgs/case-study/maje/woman@2x.png 2x",
                        "alt": ""
                    }
                })]), _vm._v(" "), _vm._m(0), _vm._v(" "), _c('case-study-video', {
                    staticClass: "case-study__row case-study__video-row"
                }, [_c('source', {
                    attrs: {
                        "src": "/assets/videos/case-study/maje/maje1.mp4",
                        "type": "video/mp4"
                    }
                })]), _vm._v(" "), _c('case-study-video', {
                    staticClass: "case-study__row case-study__video-row"
                }, [_c('source', {
                    attrs: {
                        "src": "/assets/videos/case-study/maje/maje2.mp4",
                        "type": "video/mp4"
                    }
                })]), _vm._v(" "), _c('case-study-video', {
                    staticClass: "case-study__row case-study__video-row"
                }, [_c('source', {
                    attrs: {
                        "src": "/assets/videos/case-study/maje/maje3.mp4",
                        "type": "video/mp4"
                    }
                })]), _vm._v(" "), _c('case-study-video', {
                    staticClass: "case-study__row case-study__video-row"
                }, [_c('source', {
                    attrs: {
                        "src": "/assets/videos/case-study/maje/maje4.mp4",
                        "type": "video/mp4"
                    }
                })])], 1)
            },
            staticRenderFns: [function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "case-study__row case-study__section"
                }, [_c('div', {
                    staticClass: "case-study__title"
                }, [_vm._v("My work at maje")]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__text-content"
                }, [_vm._v("\n        During 1 year I worked as a freelance developer with Kaam&Roffler agency for Maje France. Before the season to come, I had a meeting at the Paris Maje headquarter with the digital creative team. They presented the design of the pages and we discussed the interactions that we had in mind. You can see some of them below.\n      ")])])
            }]
        }

        /***/
    }),
    /* 283 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('div', {
                    staticClass: "case-study"
                }, [_c('div', {
                    ref: "header",
                    staticClass: "case-study__header"
                }, [_c('close-button')], 1), _vm._v(" "), _c('div', {
                    ref: "scrollZone",
                    staticClass: "case-study__scroll-zone"
                }, [_c('div', {
                    ref: "pane",
                    staticClass: "case-study__pane"
                }), _vm._v(" "), _c('div', {
                    ref: "contentBackground",
                    staticClass: "case-study-content-background"
                }, [_c('div', {
                    ref: "content",
                    staticClass: "case-study__content case-study__row"
                }, [_c('div', {
                    ref: "infos",
                    staticClass: "case-study__infos"
                }, [_c('div', {
                    staticClass: "case-study__info"
                }, [_c('div', {
                    staticClass: "case-study__info__title"
                }, [_vm._v("Context")]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__info__text"
                }, [_vm._v(_vm._s(_vm.slide.context))])]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__info"
                }, [_c('div', {
                    staticClass: "case-study__info__title"
                }, [_vm._v("Role")]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__info__text"
                }, [_vm._v(_vm._s(_vm.slide.role))])]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__info"
                }, [_c('div', {
                    staticClass: "case-study__info__title"
                }, [_vm._v("Year")]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__info__text"
                }, [_vm._v(_vm._s(_vm.slide.period))])])]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__intro case-study__row"
                }, [_c('div', {
                    staticClass: "case-study__title"
                }, [_vm._v("Presentation")]), _vm._v(" "), _c('div', {
                    staticClass: "case-study__intro__text"
                }, [_vm._v(_vm._s(_vm.slide.description))]), _vm._v(" "), (_vm.slide.url !== '') ? _c('link-button', {
                    attrs: {
                        "url": _vm.slide.url
                    }
                }) : _vm._e()], 1), _vm._v(" "), _c(_vm.projectName, {
                    tag: "component"
                })], 1)]), _vm._v(" "), _c('next-button')], 1)])
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 284 */
    /***/
    (function(module, exports) {

        module.exports = {
            render: function() {
                var _vm = this;
                var _h = _vm.$createElement;
                var _c = _vm._self._c || _h;
                return _c('a', {
                    staticClass: "next-button",
                    class: {
                        'is-hiding': _vm.isHiding
                    },
                    on: {
                        "~click": function($event) {
                            $event.preventDefault();
                            return _vm.onClick($event)
                        },
                        "mouseover": function($event) {
                            $event.preventDefault();
                            return _vm.onMouseOver($event)
                        },
                        "mouseout": function($event) {
                            $event.preventDefault();
                            return _vm.onMouseOut($event)
                        }
                    }
                }, [_c('div', {
                    ref: "buttonContent",
                    staticClass: "next-button__content"
                }, [_c('div', {
                    staticClass: "next-button__subtitle"
                }, [_vm._v("Next project")]), _vm._v(" "), _c('div', {
                    staticClass: "next-button__title-container"
                }, [_c('span', {
                    staticClass: "next-button__title"
                }, [_vm._v("\n\t\t\t\t" + _vm._s(_vm.nextSlide.title) + "\n\t\t\t\t"), _c('div', {
                    ref: "hoverLine",
                    staticClass: "next-button__line"
                })])])]), _vm._v(" "), _c('div', {
                    ref: "background",
                    staticClass: "next-button__background"
                })])
            },
            staticRenderFns: []
        }

        /***/
    }),
    /* 285 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(110);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("cb811088", content, true);

        /***/
    }),
    /* 286 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(111);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("125e8fd0", content, true);

        /***/
    }),
    /* 287 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(112);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("c4b8fc40", content, true);

        /***/
    }),
    /* 288 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(113);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("3f69e783", content, true);

        /***/
    }),
    /* 289 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(114);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("6607d8da", content, true);

        /***/
    }),
    /* 290 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(115);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("7861999c", content, true);

        /***/
    }),
    /* 291 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(116);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("29df6932", content, true);

        /***/
    }),
    /* 292 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(117);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("2b268ce1", content, true);

        /***/
    }),
    /* 293 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(118);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("ec4e2258", content, true);

        /***/
    }),
    /* 294 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(119);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("4c57595c", content, true);

        /***/
    }),
    /* 295 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(120);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("28d28df3", content, true);

        /***/
    }),
    /* 296 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(121);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("5a551700", content, true);

        /***/
    }),
    /* 297 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(122);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("cd7e98e6", content, true);

        /***/
    }),
    /* 298 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(123);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("0d0b68cc", content, true);

        /***/
    }),
    /* 299 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(124);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("1dac3a4d", content, true);

        /***/
    }),
    /* 300 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(125);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("faa1af08", content, true);

        /***/
    }),
    /* 301 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(126);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("a285a1f8", content, true);

        /***/
    }),
    /* 302 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(127);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("7440d30a", content, true);

        /***/
    }),
    /* 303 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(128);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("35b29ce4", content, true);

        /***/
    }),
    /* 304 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(129);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("3718a44c", content, true);

        /***/
    }),
    /* 305 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(130);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("ce11b860", content, true);

        /***/
    }),
    /* 306 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(131);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("4457f634", content, true);

        /***/
    }),
    /* 307 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(132);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("365b34ac", content, true);

        /***/
    }),
    /* 308 */
    /***/
    (function(module, exports, __webpack_require__) {

        // style-loader: Adds some css to the DOM by adding a <style> tag

        // load the styles
        var content = __webpack_require__(133);
        if (typeof content === 'string') content = [
            [module.i, content, '']
        ];
        if (content.locals) module.exports = content.locals;
        // add the styles to the DOM
        var update = __webpack_require__(2)("e653fda6", content, true);

        /***/
    }),
    /* 309 */
    /***/
    (function(module, exports) {

        /**
         * Translates the list format produced by css-loader into something
         * easier to manipulate.
         */
        module.exports = function listToStyles(parentId, list) {
            var styles = []
            var newStyles = {}
            for (var i = 0; i < list.length; i++) {
                var item = list[i]
                var id = item[0]
                var css = item[1]
                var media = item[2]
                var sourceMap = item[3]
                var part = {
                    id: parentId + ':' + i,
                    css: css,
                    media: media,
                    sourceMap: sourceMap
                }
                if (!newStyles[id]) {
                    styles.push(newStyles[id] = {
                        id: id,
                        parts: [part]
                    })
                } else {
                    newStyles[id].parts.push(part)
                }
            }
            return styles
        }


        /***/
    }),
    /* 310 */
    /***/
    (function(module, exports) {

        module.exports = function(originalModule) {
            if (!originalModule.webpackPolyfill) {
                var module = Object.create(originalModule);
                // module.parent = undefined by default
                if (!module.children) module.children = [];
                Object.defineProperty(module, "loaded", {
                    enumerable: true,
                    get: function() {
                        return module.l;
                    }
                });
                Object.defineProperty(module, "id", {
                    enumerable: true,
                    get: function() {
                        return module.i;
                    }
                });
                Object.defineProperty(module, "exports", {
                    enumerable: true,
                });
                module.webpackPolyfill = 1;
            }
            return module;
        };


        /***/
    }),
    /* 311 */
    /***/
    (function(module, exports) {

        module.exports = {
            "default": {
                "1x": ["../../../assets/imgs/slider/lightswan/shape.png", "../../../assets/imgs/slider/lightswan/illustration.png", "../../../assets/imgs/slider/maje/shape.png", "../../../assets/imgs/slider/maje/illustration.png", "../../../assets/imgs/slider/shopsquare/illustration.png", "../../../assets/imgs/slider/shopsquare/shape.png", "../../../assets/imgs/slider/google/illustration.png", "../../../assets/imgs/slider/google/shape.png"],
                "2x": ["../../../assets/imgs/slider/lightswan/shape@2x.png", "../../../assets/imgs/slider/lightswan/illustration@2x.png", "../../../assets/imgs/slider/maje/shape@2x.png", "../../../assets/imgs/slider/maje/illustration@2x.png", "../../../assets/imgs/slider/shopsquare/illustration@2x.png", "../../../assets/imgs/slider/shopsquare/shape@2x.png", "../../../assets/imgs/slider/google/illustration@2x.png", "../../../assets/imgs/slider/google/shape@2x.png"]
            },
            "case-study": {
                "lightswan": {
                    "1x": ["../../../assets/imgs/case-study/lightswan/card.png", "../../../assets/imgs/case-study/lightswan/home-desktop.jpg", "../../../assets/imgs/case-study/lightswan/home-mobile.png", "../../../assets/imgs/case-study/lightswan/article-desktop.jpg", "../../../assets/imgs/case-study/lightswan/article-mobile.png", "../../../assets/imgs/case-study/lightswan/perspective-mockup.png"],
                    "2x": ["../../../assets/imgs/case-study/lightswan/card@2x.png", "../../../assets/imgs/case-study/lightswan/home-desktop@2x.jpg", "../../../assets/imgs/case-study/lightswan/home-mobile@2x.png", "../../../assets/imgs/case-study/lightswan/article-desktop@2x.jpg", "../../../assets/imgs/case-study/lightswan/article-mobile@2x.png", "../../../assets/imgs/case-study/lightswan/perspective-mockup@2x.png"]
                },
                "maje": {
                    "1x": ["../../../assets/imgs/case-study/maje/woman.png", {
                        "url": "../../../assets/videos/case-study/maje/maje1.mp4",
                        "blob": true
                    }, {
                        "url": "../../../assets/videos/case-study/maje/maje2.mp4",
                        "blob": true
                    }, {
                        "url": "../../../assets/videos/case-study/maje/maje3.mp4",
                        "blob": true
                    }, {
                        "url": "../../../assets/videos/case-study/maje/maje4.mp4",
                        "blob": true
                    }],
                    "2x": ["../../../assets/imgs/case-study/maje/woman@2x.png", {
                        "url": "../../../assets/videos/case-study/maje/maje1.mp4",
                        "blob": true
                    }, {
                        "url": "../../../assets/videos/case-study/maje/maje2.mp4",
                        "blob": true
                    }, {
                        "url": "../../../assets/videos/case-study/maje/maje3.mp4",
                        "blob": true
                    }, {
                        "url": "../../../assets/videos/case-study/maje/maje4.mp4",
                        "blob": true
                    }]
                },
                "shopsquare": {
                    "1x": ["../../../assets/imgs/case-study/shopsquare/shoes.png", {
                        "url": "../../../assets/videos/case-study/shopsquare/desktop-xp.mp4",
                        "blob": true
                    }, {
                        "url": "../../../assets/videos/case-study/shopsquare/mobile-search.mp4",
                        "blob": true
                    }, {
                        "url": "../../../assets/videos/case-study/shopsquare/mobile-xp.mp4",
                        "blob": true
                    }],
                    "2x": ["../../../assets/imgs/case-study/shopsquare/shoes@2x.png", {
                        "url": "../../../assets/videos/case-study/shopsquare/desktop-xp.mp4",
                        "blob": true
                    }, {
                        "url": "../../../assets/videos/case-study/shopsquare/mobile-search.mp4",
                        "blob": true
                    }, {
                        "url": "../../../assets/videos/case-study/shopsquare/mobile-xp.mp4",
                        "blob": true
                    }]
                }
            }
        }

        /***/
    }),
    /* 312 */
    /***/
    (function(module, exports) {

        module.exports = {
            "materials": [{
                "id": 0,
                "colorStart": "#BFBBB5",
                "colorStop": "#F7F3EA"
            }, {
                "id": 1,
                "colorStart": "#FFC3CA",
                "colorStop": "#A1A7E9"
            }, {
                "id": 2,
                "colorStart": "#E9D985",
                "colorStop": "#52489C"
            }, {
                "id": 3,
                "colorStart": "#E9D985",
                "colorStop": "#679AA4"
            }, {
                "id": 4,
                "colorStart": "#DCD9E2",
                "colorStop": "#4489AC"
            }, {
                "id": 5,
                "colorStart": "#B4ED50",
                "colorStop": "#50BB9C"
            }, {
                "id": 6,
                "colorStart": "#442CB2",
                "colorStop": "#AD60CF"
            }, {
                "id": 7,
                "colorStart": "#FFBFBF",
                "colorStop": "#027AFF"
            }, {
                "id": 8,
                "colorStart": "#FFA1A1",
                "colorStop": "#FEB47E"
            }, {
                "id": 9,
                "colorStart": "#DCD9E2",
                "colorStop": "#5F96B4"
            }, {
                "id": 10,
                "colorStart": "#003973",
                "colorStop": "#E5E5BE"
            }, {
                "id": 11,
                "colorStart": "#FF635A",
                "colorStop": "#773CFB"
            }, {
                "id": 12,
                "colorStart": "#E07B7E",
                "colorStop": "#FDEFBD"
            }]
        }

        /***/
    }),
    /* 313 */
    /***/
    (function(module, exports) {

        module.exports = {
            "about": {
                "title": "Hello, I’m <span class='about-content__big-title'>Raoul Gaillard</span>.<br> I’m looking for <span class='about-content__big-title'>cool</span> works.",
                "content": "I’m a french front-end developer at <a class='about-content__link' href='http://unlikely.studio/' target='_blank'>Unlikely Studio</a>. I studied at Hetic a school based in Paris. I love building interfaces and code interactive productions.<br><br> I’m looking for a full time position from January 2019 as a front-end developer in the US.<br><br> I had two internships at <a class='about-content__link' href='http://www.stinkstudios.com/' target='_blank'>Stinkstudios Paris</a> in 2015 and 2016 and at <a class='about-content__link' href='http://watsondg.com/' target='_blank'>Watson Design Group</a> in Los Angeles in 2017.<br><br> I love interactive design, development and building electric skateboards.",
                "socialTitle": "You can find me here",
                "socialNetworks": [{
                    "name": "twitter",
                    "link": "https://twitter.com/RaoulGaillard"
                }, {
                    "name": "email",
                    "link": "mailto:raoul.gaillard@hetic.net"
                }, {
                    "name": "pinterest",
                    "link": "https://pinterest.com/raoulgaillard/"
                }, {
                    "name": "linkedin",
                    "link": "https://www.linkedin.com/in/raoul-gaillard-b71a887a/"
                }]
            }
        }

        /***/
    })
    /******/
]);


// WEBPACK FOOTER //
// app.build.js